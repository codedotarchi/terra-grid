// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

// eslint-disable-next-line no-global-assign
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  return newRequire;
})({"node_modules/core-js/modules/_global.js":[function(require,module,exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

},{}],"node_modules/core-js/modules/_core.js":[function(require,module,exports) {
var core = module.exports = { version: '2.6.5' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

},{}],"node_modules/core-js/modules/_is-object.js":[function(require,module,exports) {
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],"node_modules/core-js/modules/_an-object.js":[function(require,module,exports) {
var isObject = require('./_is-object');
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

},{"./_is-object":"node_modules/core-js/modules/_is-object.js"}],"node_modules/core-js/modules/_fails.js":[function(require,module,exports) {
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

},{}],"node_modules/core-js/modules/_descriptors.js":[function(require,module,exports) {
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_fails":"node_modules/core-js/modules/_fails.js"}],"node_modules/core-js/modules/_dom-create.js":[function(require,module,exports) {
var isObject = require('./_is-object');
var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

},{"./_is-object":"node_modules/core-js/modules/_is-object.js","./_global":"node_modules/core-js/modules/_global.js"}],"node_modules/core-js/modules/_ie8-dom-define.js":[function(require,module,exports) {
module.exports = !require('./_descriptors') && !require('./_fails')(function () {
  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_descriptors":"node_modules/core-js/modules/_descriptors.js","./_fails":"node_modules/core-js/modules/_fails.js","./_dom-create":"node_modules/core-js/modules/_dom-create.js"}],"node_modules/core-js/modules/_to-primitive.js":[function(require,module,exports) {
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"./_is-object":"node_modules/core-js/modules/_is-object.js"}],"node_modules/core-js/modules/_object-dp.js":[function(require,module,exports) {
var anObject = require('./_an-object');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var toPrimitive = require('./_to-primitive');
var dP = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"./_an-object":"node_modules/core-js/modules/_an-object.js","./_ie8-dom-define":"node_modules/core-js/modules/_ie8-dom-define.js","./_to-primitive":"node_modules/core-js/modules/_to-primitive.js","./_descriptors":"node_modules/core-js/modules/_descriptors.js"}],"node_modules/core-js/modules/_property-desc.js":[function(require,module,exports) {
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],"node_modules/core-js/modules/_hide.js":[function(require,module,exports) {
var dP = require('./_object-dp');
var createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"./_object-dp":"node_modules/core-js/modules/_object-dp.js","./_property-desc":"node_modules/core-js/modules/_property-desc.js","./_descriptors":"node_modules/core-js/modules/_descriptors.js"}],"node_modules/core-js/modules/_has.js":[function(require,module,exports) {
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],"node_modules/core-js/modules/_uid.js":[function(require,module,exports) {
var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

},{}],"node_modules/core-js/modules/_library.js":[function(require,module,exports) {
module.exports = false;

},{}],"node_modules/core-js/modules/_shared.js":[function(require,module,exports) {

var core = require('./_core');
var global = require('./_global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: require('./_library') ? 'pure' : 'global',
  copyright: 'Â© 2019 Denis Pushkarev (zloirock.ru)'
});

},{"./_core":"node_modules/core-js/modules/_core.js","./_global":"node_modules/core-js/modules/_global.js","./_library":"node_modules/core-js/modules/_library.js"}],"node_modules/core-js/modules/_function-to-string.js":[function(require,module,exports) {
module.exports = require('./_shared')('native-function-to-string', Function.toString);

},{"./_shared":"node_modules/core-js/modules/_shared.js"}],"node_modules/core-js/modules/_redefine.js":[function(require,module,exports) {

var global = require('./_global');
var hide = require('./_hide');
var has = require('./_has');
var SRC = require('./_uid')('src');
var $toString = require('./_function-to-string');
var TO_STRING = 'toString';
var TPL = ('' + $toString).split(TO_STRING);

require('./_core').inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});

},{"./_global":"node_modules/core-js/modules/_global.js","./_hide":"node_modules/core-js/modules/_hide.js","./_has":"node_modules/core-js/modules/_has.js","./_uid":"node_modules/core-js/modules/_uid.js","./_function-to-string":"node_modules/core-js/modules/_function-to-string.js","./_core":"node_modules/core-js/modules/_core.js"}],"node_modules/core-js/modules/_a-function.js":[function(require,module,exports) {
module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

},{}],"node_modules/core-js/modules/_ctx.js":[function(require,module,exports) {
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"./_a-function":"node_modules/core-js/modules/_a-function.js"}],"node_modules/core-js/modules/_export.js":[function(require,module,exports) {

var global = require('./_global');
var core = require('./_core');
var hide = require('./_hide');
var redefine = require('./_redefine');
var ctx = require('./_ctx');
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_global":"node_modules/core-js/modules/_global.js","./_core":"node_modules/core-js/modules/_core.js","./_hide":"node_modules/core-js/modules/_hide.js","./_redefine":"node_modules/core-js/modules/_redefine.js","./_ctx":"node_modules/core-js/modules/_ctx.js"}],"node_modules/core-js/modules/_defined.js":[function(require,module,exports) {
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

},{}],"node_modules/core-js/modules/_to-object.js":[function(require,module,exports) {
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function (it) {
  return Object(defined(it));
};

},{"./_defined":"node_modules/core-js/modules/_defined.js"}],"node_modules/core-js/modules/_to-integer.js":[function(require,module,exports) {
// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

},{}],"node_modules/core-js/modules/_to-absolute-index.js":[function(require,module,exports) {
var toInteger = require('./_to-integer');
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"./_to-integer":"node_modules/core-js/modules/_to-integer.js"}],"node_modules/core-js/modules/_to-length.js":[function(require,module,exports) {
// 7.1.15 ToLength
var toInteger = require('./_to-integer');
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"./_to-integer":"node_modules/core-js/modules/_to-integer.js"}],"node_modules/core-js/modules/_array-copy-within.js":[function(require,module,exports) {
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';
var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};

},{"./_to-object":"node_modules/core-js/modules/_to-object.js","./_to-absolute-index":"node_modules/core-js/modules/_to-absolute-index.js","./_to-length":"node_modules/core-js/modules/_to-length.js"}],"node_modules/core-js/modules/_wks.js":[function(require,module,exports) {
var store = require('./_shared')('wks');
var uid = require('./_uid');
var Symbol = require('./_global').Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

},{"./_shared":"node_modules/core-js/modules/_shared.js","./_uid":"node_modules/core-js/modules/_uid.js","./_global":"node_modules/core-js/modules/_global.js"}],"node_modules/core-js/modules/_add-to-unscopables.js":[function(require,module,exports) {
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./_wks')('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};

},{"./_wks":"node_modules/core-js/modules/_wks.js","./_hide":"node_modules/core-js/modules/_hide.js"}],"node_modules/core-js/modules/es6.array.copy-within.js":[function(require,module,exports) {
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { copyWithin: require('./_array-copy-within') });

require('./_add-to-unscopables')('copyWithin');

},{"./_export":"node_modules/core-js/modules/_export.js","./_array-copy-within":"node_modules/core-js/modules/_array-copy-within.js","./_add-to-unscopables":"node_modules/core-js/modules/_add-to-unscopables.js"}],"node_modules/core-js/modules/_array-fill.js":[function(require,module,exports) {
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';
var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};

},{"./_to-object":"node_modules/core-js/modules/_to-object.js","./_to-absolute-index":"node_modules/core-js/modules/_to-absolute-index.js","./_to-length":"node_modules/core-js/modules/_to-length.js"}],"node_modules/core-js/modules/es6.array.fill.js":[function(require,module,exports) {
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { fill: require('./_array-fill') });

require('./_add-to-unscopables')('fill');

},{"./_export":"node_modules/core-js/modules/_export.js","./_array-fill":"node_modules/core-js/modules/_array-fill.js","./_add-to-unscopables":"node_modules/core-js/modules/_add-to-unscopables.js"}],"node_modules/core-js/modules/_cof.js":[function(require,module,exports) {
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],"node_modules/core-js/modules/_iobject.js":[function(require,module,exports) {
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"./_cof":"node_modules/core-js/modules/_cof.js"}],"node_modules/core-js/modules/_is-array.js":[function(require,module,exports) {
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

},{"./_cof":"node_modules/core-js/modules/_cof.js"}],"node_modules/core-js/modules/_array-species-constructor.js":[function(require,module,exports) {
var isObject = require('./_is-object');
var isArray = require('./_is-array');
var SPECIES = require('./_wks')('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};

},{"./_is-object":"node_modules/core-js/modules/_is-object.js","./_is-array":"node_modules/core-js/modules/_is-array.js","./_wks":"node_modules/core-js/modules/_wks.js"}],"node_modules/core-js/modules/_array-species-create.js":[function(require,module,exports) {
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};

},{"./_array-species-constructor":"node_modules/core-js/modules/_array-species-constructor.js"}],"node_modules/core-js/modules/_array-methods.js":[function(require,module,exports) {
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = require('./_ctx');
var IObject = require('./_iobject');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var asc = require('./_array-species-create');
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

},{"./_ctx":"node_modules/core-js/modules/_ctx.js","./_iobject":"node_modules/core-js/modules/_iobject.js","./_to-object":"node_modules/core-js/modules/_to-object.js","./_to-length":"node_modules/core-js/modules/_to-length.js","./_array-species-create":"node_modules/core-js/modules/_array-species-create.js"}],"node_modules/core-js/modules/es6.array.find.js":[function(require,module,exports) {
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_export":"node_modules/core-js/modules/_export.js","./_array-methods":"node_modules/core-js/modules/_array-methods.js","./_add-to-unscopables":"node_modules/core-js/modules/_add-to-unscopables.js"}],"node_modules/core-js/modules/es6.array.find-index.js":[function(require,module,exports) {
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_export":"node_modules/core-js/modules/_export.js","./_array-methods":"node_modules/core-js/modules/_array-methods.js","./_add-to-unscopables":"node_modules/core-js/modules/_add-to-unscopables.js"}],"node_modules/core-js/modules/_iter-call.js":[function(require,module,exports) {
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

},{"./_an-object":"node_modules/core-js/modules/_an-object.js"}],"node_modules/core-js/modules/_iterators.js":[function(require,module,exports) {
module.exports = {};

},{}],"node_modules/core-js/modules/_is-array-iter.js":[function(require,module,exports) {
// check on default Array iterator
var Iterators = require('./_iterators');
var ITERATOR = require('./_wks')('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

},{"./_iterators":"node_modules/core-js/modules/_iterators.js","./_wks":"node_modules/core-js/modules/_wks.js"}],"node_modules/core-js/modules/_create-property.js":[function(require,module,exports) {
'use strict';
var $defineProperty = require('./_object-dp');
var createDesc = require('./_property-desc');

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};

},{"./_object-dp":"node_modules/core-js/modules/_object-dp.js","./_property-desc":"node_modules/core-js/modules/_property-desc.js"}],"node_modules/core-js/modules/_classof.js":[function(require,module,exports) {
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof');
var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"./_cof":"node_modules/core-js/modules/_cof.js","./_wks":"node_modules/core-js/modules/_wks.js"}],"node_modules/core-js/modules/core.get-iterator-method.js":[function(require,module,exports) {
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"./_classof":"node_modules/core-js/modules/_classof.js","./_wks":"node_modules/core-js/modules/_wks.js","./_iterators":"node_modules/core-js/modules/_iterators.js","./_core":"node_modules/core-js/modules/_core.js"}],"node_modules/core-js/modules/_iter-detect.js":[function(require,module,exports) {
var ITERATOR = require('./_wks')('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};

},{"./_wks":"node_modules/core-js/modules/_wks.js"}],"node_modules/core-js/modules/es6.array.from.js":[function(require,module,exports) {
'use strict';
var ctx = require('./_ctx');
var $export = require('./_export');
var toObject = require('./_to-object');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var toLength = require('./_to-length');
var createProperty = require('./_create-property');
var getIterFn = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_ctx":"node_modules/core-js/modules/_ctx.js","./_export":"node_modules/core-js/modules/_export.js","./_to-object":"node_modules/core-js/modules/_to-object.js","./_iter-call":"node_modules/core-js/modules/_iter-call.js","./_is-array-iter":"node_modules/core-js/modules/_is-array-iter.js","./_to-length":"node_modules/core-js/modules/_to-length.js","./_create-property":"node_modules/core-js/modules/_create-property.js","./core.get-iterator-method":"node_modules/core-js/modules/core.get-iterator-method.js","./_iter-detect":"node_modules/core-js/modules/_iter-detect.js"}],"node_modules/core-js/modules/_to-iobject.js":[function(require,module,exports) {
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject');
var defined = require('./_defined');
module.exports = function (it) {
  return IObject(defined(it));
};

},{"./_iobject":"node_modules/core-js/modules/_iobject.js","./_defined":"node_modules/core-js/modules/_defined.js"}],"node_modules/core-js/modules/_array-includes.js":[function(require,module,exports) {
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');
var toAbsoluteIndex = require('./_to-absolute-index');
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

},{"./_to-iobject":"node_modules/core-js/modules/_to-iobject.js","./_to-length":"node_modules/core-js/modules/_to-length.js","./_to-absolute-index":"node_modules/core-js/modules/_to-absolute-index.js"}],"node_modules/core-js/modules/es7.array.includes.js":[function(require,module,exports) {
'use strict';
// https://github.com/tc39/Array.prototype.includes
var $export = require('./_export');
var $includes = require('./_array-includes')(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

require('./_add-to-unscopables')('includes');

},{"./_export":"node_modules/core-js/modules/_export.js","./_array-includes":"node_modules/core-js/modules/_array-includes.js","./_add-to-unscopables":"node_modules/core-js/modules/_add-to-unscopables.js"}],"node_modules/core-js/modules/_iter-step.js":[function(require,module,exports) {
module.exports = function (done, value) {
  return { value: value, done: !!done };
};

},{}],"node_modules/core-js/modules/_shared-key.js":[function(require,module,exports) {
var shared = require('./_shared')('keys');
var uid = require('./_uid');
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

},{"./_shared":"node_modules/core-js/modules/_shared.js","./_uid":"node_modules/core-js/modules/_uid.js"}],"node_modules/core-js/modules/_object-keys-internal.js":[function(require,module,exports) {
var has = require('./_has');
var toIObject = require('./_to-iobject');
var arrayIndexOf = require('./_array-includes')(false);
var IE_PROTO = require('./_shared-key')('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

},{"./_has":"node_modules/core-js/modules/_has.js","./_to-iobject":"node_modules/core-js/modules/_to-iobject.js","./_array-includes":"node_modules/core-js/modules/_array-includes.js","./_shared-key":"node_modules/core-js/modules/_shared-key.js"}],"node_modules/core-js/modules/_enum-bug-keys.js":[function(require,module,exports) {
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

},{}],"node_modules/core-js/modules/_object-keys.js":[function(require,module,exports) {
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = require('./_object-keys-internal');
var enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

},{"./_object-keys-internal":"node_modules/core-js/modules/_object-keys-internal.js","./_enum-bug-keys":"node_modules/core-js/modules/_enum-bug-keys.js"}],"node_modules/core-js/modules/_object-dps.js":[function(require,module,exports) {
var dP = require('./_object-dp');
var anObject = require('./_an-object');
var getKeys = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

},{"./_object-dp":"node_modules/core-js/modules/_object-dp.js","./_an-object":"node_modules/core-js/modules/_an-object.js","./_object-keys":"node_modules/core-js/modules/_object-keys.js","./_descriptors":"node_modules/core-js/modules/_descriptors.js"}],"node_modules/core-js/modules/_html.js":[function(require,module,exports) {
var document = require('./_global').document;
module.exports = document && document.documentElement;

},{"./_global":"node_modules/core-js/modules/_global.js"}],"node_modules/core-js/modules/_object-create.js":[function(require,module,exports) {
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = require('./_an-object');
var dPs = require('./_object-dps');
var enumBugKeys = require('./_enum-bug-keys');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":"node_modules/core-js/modules/_an-object.js","./_object-dps":"node_modules/core-js/modules/_object-dps.js","./_enum-bug-keys":"node_modules/core-js/modules/_enum-bug-keys.js","./_shared-key":"node_modules/core-js/modules/_shared-key.js","./_dom-create":"node_modules/core-js/modules/_dom-create.js","./_html":"node_modules/core-js/modules/_html.js"}],"node_modules/core-js/modules/_set-to-string-tag.js":[function(require,module,exports) {
var def = require('./_object-dp').f;
var has = require('./_has');
var TAG = require('./_wks')('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

},{"./_object-dp":"node_modules/core-js/modules/_object-dp.js","./_has":"node_modules/core-js/modules/_has.js","./_wks":"node_modules/core-js/modules/_wks.js"}],"node_modules/core-js/modules/_iter-create.js":[function(require,module,exports) {
'use strict';
var create = require('./_object-create');
var descriptor = require('./_property-desc');
var setToStringTag = require('./_set-to-string-tag');
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

},{"./_object-create":"node_modules/core-js/modules/_object-create.js","./_property-desc":"node_modules/core-js/modules/_property-desc.js","./_set-to-string-tag":"node_modules/core-js/modules/_set-to-string-tag.js","./_hide":"node_modules/core-js/modules/_hide.js","./_wks":"node_modules/core-js/modules/_wks.js"}],"node_modules/core-js/modules/_object-gpo.js":[function(require,module,exports) {
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = require('./_has');
var toObject = require('./_to-object');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

},{"./_has":"node_modules/core-js/modules/_has.js","./_to-object":"node_modules/core-js/modules/_to-object.js","./_shared-key":"node_modules/core-js/modules/_shared-key.js"}],"node_modules/core-js/modules/_iter-define.js":[function(require,module,exports) {
'use strict';
var LIBRARY = require('./_library');
var $export = require('./_export');
var redefine = require('./_redefine');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var $iterCreate = require('./_iter-create');
var setToStringTag = require('./_set-to-string-tag');
var getPrototypeOf = require('./_object-gpo');
var ITERATOR = require('./_wks')('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

},{"./_library":"node_modules/core-js/modules/_library.js","./_export":"node_modules/core-js/modules/_export.js","./_redefine":"node_modules/core-js/modules/_redefine.js","./_hide":"node_modules/core-js/modules/_hide.js","./_iterators":"node_modules/core-js/modules/_iterators.js","./_iter-create":"node_modules/core-js/modules/_iter-create.js","./_set-to-string-tag":"node_modules/core-js/modules/_set-to-string-tag.js","./_object-gpo":"node_modules/core-js/modules/_object-gpo.js","./_wks":"node_modules/core-js/modules/_wks.js"}],"node_modules/core-js/modules/es6.array.iterator.js":[function(require,module,exports) {
'use strict';
var addToUnscopables = require('./_add-to-unscopables');
var step = require('./_iter-step');
var Iterators = require('./_iterators');
var toIObject = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"./_add-to-unscopables":"node_modules/core-js/modules/_add-to-unscopables.js","./_iter-step":"node_modules/core-js/modules/_iter-step.js","./_iterators":"node_modules/core-js/modules/_iterators.js","./_to-iobject":"node_modules/core-js/modules/_to-iobject.js","./_iter-define":"node_modules/core-js/modules/_iter-define.js"}],"node_modules/core-js/modules/es6.array.of.js":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var createProperty = require('./_create-property');

// WebKit Array.of isn't generic
$export($export.S + $export.F * require('./_fails')(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_create-property":"node_modules/core-js/modules/_create-property.js","./_fails":"node_modules/core-js/modules/_fails.js"}],"node_modules/core-js/modules/_strict-method.js":[function(require,module,exports) {
'use strict';
var fails = require('./_fails');

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};

},{"./_fails":"node_modules/core-js/modules/_fails.js"}],"node_modules/core-js/modules/es6.array.sort.js":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var fails = require('./_fails');
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !require('./_strict-method')($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_a-function":"node_modules/core-js/modules/_a-function.js","./_to-object":"node_modules/core-js/modules/_to-object.js","./_fails":"node_modules/core-js/modules/_fails.js","./_strict-method":"node_modules/core-js/modules/_strict-method.js"}],"node_modules/core-js/modules/_set-species.js":[function(require,module,exports) {

'use strict';
var global = require('./_global');
var dP = require('./_object-dp');
var DESCRIPTORS = require('./_descriptors');
var SPECIES = require('./_wks')('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};

},{"./_global":"node_modules/core-js/modules/_global.js","./_object-dp":"node_modules/core-js/modules/_object-dp.js","./_descriptors":"node_modules/core-js/modules/_descriptors.js","./_wks":"node_modules/core-js/modules/_wks.js"}],"node_modules/core-js/modules/es6.array.species.js":[function(require,module,exports) {
require('./_set-species')('Array');

},{"./_set-species":"node_modules/core-js/modules/_set-species.js"}],"node_modules/core-js/modules/es6.date.to-json.js":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');

$export($export.P + $export.F * require('./_fails')(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_to-object":"node_modules/core-js/modules/_to-object.js","./_to-primitive":"node_modules/core-js/modules/_to-primitive.js","./_fails":"node_modules/core-js/modules/_fails.js"}],"node_modules/core-js/modules/_date-to-primitive.js":[function(require,module,exports) {
'use strict';
var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};

},{"./_an-object":"node_modules/core-js/modules/_an-object.js","./_to-primitive":"node_modules/core-js/modules/_to-primitive.js"}],"node_modules/core-js/modules/es6.date.to-primitive.js":[function(require,module,exports) {
var TO_PRIMITIVE = require('./_wks')('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));

},{"./_wks":"node_modules/core-js/modules/_wks.js","./_hide":"node_modules/core-js/modules/_hide.js","./_date-to-primitive":"node_modules/core-js/modules/_date-to-primitive.js"}],"node_modules/core-js/modules/es6.function.has-instance.js":[function(require,module,exports) {
'use strict';
var isObject = require('./_is-object');
var getPrototypeOf = require('./_object-gpo');
var HAS_INSTANCE = require('./_wks')('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) require('./_object-dp').f(FunctionProto, HAS_INSTANCE, { value: function (O) {
  if (typeof this != 'function' || !isObject(O)) return false;
  if (!isObject(this.prototype)) return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
  return false;
} });

},{"./_is-object":"node_modules/core-js/modules/_is-object.js","./_object-gpo":"node_modules/core-js/modules/_object-gpo.js","./_wks":"node_modules/core-js/modules/_wks.js","./_object-dp":"node_modules/core-js/modules/_object-dp.js"}],"node_modules/core-js/modules/es6.function.name.js":[function(require,module,exports) {
var dP = require('./_object-dp').f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});

},{"./_object-dp":"node_modules/core-js/modules/_object-dp.js","./_descriptors":"node_modules/core-js/modules/_descriptors.js"}],"node_modules/core-js/modules/_redefine-all.js":[function(require,module,exports) {
var redefine = require('./_redefine');
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};

},{"./_redefine":"node_modules/core-js/modules/_redefine.js"}],"node_modules/core-js/modules/_an-instance.js":[function(require,module,exports) {
module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

},{}],"node_modules/core-js/modules/_for-of.js":[function(require,module,exports) {
var ctx = require('./_ctx');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var anObject = require('./_an-object');
var toLength = require('./_to-length');
var getIterFn = require('./core.get-iterator-method');
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;

},{"./_ctx":"node_modules/core-js/modules/_ctx.js","./_iter-call":"node_modules/core-js/modules/_iter-call.js","./_is-array-iter":"node_modules/core-js/modules/_is-array-iter.js","./_an-object":"node_modules/core-js/modules/_an-object.js","./_to-length":"node_modules/core-js/modules/_to-length.js","./core.get-iterator-method":"node_modules/core-js/modules/core.get-iterator-method.js"}],"node_modules/core-js/modules/_meta.js":[function(require,module,exports) {
var META = require('./_uid')('meta');
var isObject = require('./_is-object');
var has = require('./_has');
var setDesc = require('./_object-dp').f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !require('./_fails')(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

},{"./_uid":"node_modules/core-js/modules/_uid.js","./_is-object":"node_modules/core-js/modules/_is-object.js","./_has":"node_modules/core-js/modules/_has.js","./_object-dp":"node_modules/core-js/modules/_object-dp.js","./_fails":"node_modules/core-js/modules/_fails.js"}],"node_modules/core-js/modules/_validate-collection.js":[function(require,module,exports) {
var isObject = require('./_is-object');
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

},{"./_is-object":"node_modules/core-js/modules/_is-object.js"}],"node_modules/core-js/modules/_collection-strong.js":[function(require,module,exports) {
'use strict';
var dP = require('./_object-dp').f;
var create = require('./_object-create');
var redefineAll = require('./_redefine-all');
var ctx = require('./_ctx');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var $iterDefine = require('./_iter-define');
var step = require('./_iter-step');
var setSpecies = require('./_set-species');
var DESCRIPTORS = require('./_descriptors');
var fastKey = require('./_meta').fastKey;
var validate = require('./_validate-collection');
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};

},{"./_object-dp":"node_modules/core-js/modules/_object-dp.js","./_object-create":"node_modules/core-js/modules/_object-create.js","./_redefine-all":"node_modules/core-js/modules/_redefine-all.js","./_ctx":"node_modules/core-js/modules/_ctx.js","./_an-instance":"node_modules/core-js/modules/_an-instance.js","./_for-of":"node_modules/core-js/modules/_for-of.js","./_iter-define":"node_modules/core-js/modules/_iter-define.js","./_iter-step":"node_modules/core-js/modules/_iter-step.js","./_set-species":"node_modules/core-js/modules/_set-species.js","./_descriptors":"node_modules/core-js/modules/_descriptors.js","./_meta":"node_modules/core-js/modules/_meta.js","./_validate-collection":"node_modules/core-js/modules/_validate-collection.js"}],"node_modules/core-js/modules/_object-pie.js":[function(require,module,exports) {
exports.f = {}.propertyIsEnumerable;

},{}],"node_modules/core-js/modules/_object-gopd.js":[function(require,module,exports) {
var pIE = require('./_object-pie');
var createDesc = require('./_property-desc');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var has = require('./_has');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

},{"./_object-pie":"node_modules/core-js/modules/_object-pie.js","./_property-desc":"node_modules/core-js/modules/_property-desc.js","./_to-iobject":"node_modules/core-js/modules/_to-iobject.js","./_to-primitive":"node_modules/core-js/modules/_to-primitive.js","./_has":"node_modules/core-js/modules/_has.js","./_ie8-dom-define":"node_modules/core-js/modules/_ie8-dom-define.js","./_descriptors":"node_modules/core-js/modules/_descriptors.js"}],"node_modules/core-js/modules/_set-proto.js":[function(require,module,exports) {
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object');
var anObject = require('./_an-object');
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

},{"./_is-object":"node_modules/core-js/modules/_is-object.js","./_an-object":"node_modules/core-js/modules/_an-object.js","./_ctx":"node_modules/core-js/modules/_ctx.js","./_object-gopd":"node_modules/core-js/modules/_object-gopd.js"}],"node_modules/core-js/modules/_inherit-if-required.js":[function(require,module,exports) {
var isObject = require('./_is-object');
var setPrototypeOf = require('./_set-proto').set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};

},{"./_is-object":"node_modules/core-js/modules/_is-object.js","./_set-proto":"node_modules/core-js/modules/_set-proto.js"}],"node_modules/core-js/modules/_collection.js":[function(require,module,exports) {

'use strict';
var global = require('./_global');
var $export = require('./_export');
var redefine = require('./_redefine');
var redefineAll = require('./_redefine-all');
var meta = require('./_meta');
var forOf = require('./_for-of');
var anInstance = require('./_an-instance');
var isObject = require('./_is-object');
var fails = require('./_fails');
var $iterDetect = require('./_iter-detect');
var setToStringTag = require('./_set-to-string-tag');
var inheritIfRequired = require('./_inherit-if-required');

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};

},{"./_global":"node_modules/core-js/modules/_global.js","./_export":"node_modules/core-js/modules/_export.js","./_redefine":"node_modules/core-js/modules/_redefine.js","./_redefine-all":"node_modules/core-js/modules/_redefine-all.js","./_meta":"node_modules/core-js/modules/_meta.js","./_for-of":"node_modules/core-js/modules/_for-of.js","./_an-instance":"node_modules/core-js/modules/_an-instance.js","./_is-object":"node_modules/core-js/modules/_is-object.js","./_fails":"node_modules/core-js/modules/_fails.js","./_iter-detect":"node_modules/core-js/modules/_iter-detect.js","./_set-to-string-tag":"node_modules/core-js/modules/_set-to-string-tag.js","./_inherit-if-required":"node_modules/core-js/modules/_inherit-if-required.js"}],"node_modules/core-js/modules/es6.map.js":[function(require,module,exports) {
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var MAP = 'Map';

// 23.1 Map Objects
module.exports = require('./_collection')(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);

},{"./_collection-strong":"node_modules/core-js/modules/_collection-strong.js","./_validate-collection":"node_modules/core-js/modules/_validate-collection.js","./_collection":"node_modules/core-js/modules/_collection.js"}],"node_modules/core-js/modules/_math-log1p.js":[function(require,module,exports) {
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};

},{}],"node_modules/core-js/modules/es6.math.acosh.js":[function(require,module,exports) {
// 20.2.2.3 Math.acosh(x)
var $export = require('./_export');
var log1p = require('./_math-log1p');
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_math-log1p":"node_modules/core-js/modules/_math-log1p.js"}],"node_modules/core-js/modules/es6.math.asinh.js":[function(require,module,exports) {
// 20.2.2.5 Math.asinh(x)
var $export = require('./_export');
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });

},{"./_export":"node_modules/core-js/modules/_export.js"}],"node_modules/core-js/modules/es6.math.atanh.js":[function(require,module,exports) {
// 20.2.2.7 Math.atanh(x)
var $export = require('./_export');
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js"}],"node_modules/core-js/modules/_math-sign.js":[function(require,module,exports) {
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

},{}],"node_modules/core-js/modules/es6.math.cbrt.js":[function(require,module,exports) {
// 20.2.2.9 Math.cbrt(x)
var $export = require('./_export');
var sign = require('./_math-sign');

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_math-sign":"node_modules/core-js/modules/_math-sign.js"}],"node_modules/core-js/modules/es6.math.clz32.js":[function(require,module,exports) {
// 20.2.2.11 Math.clz32(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js"}],"node_modules/core-js/modules/es6.math.cosh.js":[function(require,module,exports) {
// 20.2.2.12 Math.cosh(x)
var $export = require('./_export');
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js"}],"node_modules/core-js/modules/_math-expm1.js":[function(require,module,exports) {
// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;

},{}],"node_modules/core-js/modules/es6.math.expm1.js":[function(require,module,exports) {
// 20.2.2.14 Math.expm1(x)
var $export = require('./_export');
var $expm1 = require('./_math-expm1');

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });

},{"./_export":"node_modules/core-js/modules/_export.js","./_math-expm1":"node_modules/core-js/modules/_math-expm1.js"}],"node_modules/core-js/modules/_math-fround.js":[function(require,module,exports) {
// 20.2.2.16 Math.fround(x)
var sign = require('./_math-sign');
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};

},{"./_math-sign":"node_modules/core-js/modules/_math-sign.js"}],"node_modules/core-js/modules/es6.math.fround.js":[function(require,module,exports) {
// 20.2.2.16 Math.fround(x)
var $export = require('./_export');

$export($export.S, 'Math', { fround: require('./_math-fround') });

},{"./_export":"node_modules/core-js/modules/_export.js","./_math-fround":"node_modules/core-js/modules/_math-fround.js"}],"node_modules/core-js/modules/es6.math.hypot.js":[function(require,module,exports) {
// 20.2.2.17 Math.hypot([value1[, value2[, â¦ ]]])
var $export = require('./_export');
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js"}],"node_modules/core-js/modules/es6.math.imul.js":[function(require,module,exports) {
// 20.2.2.18 Math.imul(x, y)
var $export = require('./_export');
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * require('./_fails')(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_fails":"node_modules/core-js/modules/_fails.js"}],"node_modules/core-js/modules/es6.math.log1p.js":[function(require,module,exports) {
// 20.2.2.20 Math.log1p(x)
var $export = require('./_export');

$export($export.S, 'Math', { log1p: require('./_math-log1p') });

},{"./_export":"node_modules/core-js/modules/_export.js","./_math-log1p":"node_modules/core-js/modules/_math-log1p.js"}],"node_modules/core-js/modules/es6.math.log10.js":[function(require,module,exports) {
// 20.2.2.21 Math.log10(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js"}],"node_modules/core-js/modules/es6.math.log2.js":[function(require,module,exports) {
// 20.2.2.22 Math.log2(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js"}],"node_modules/core-js/modules/es6.math.sign.js":[function(require,module,exports) {
// 20.2.2.28 Math.sign(x)
var $export = require('./_export');

$export($export.S, 'Math', { sign: require('./_math-sign') });

},{"./_export":"node_modules/core-js/modules/_export.js","./_math-sign":"node_modules/core-js/modules/_math-sign.js"}],"node_modules/core-js/modules/es6.math.sinh.js":[function(require,module,exports) {
// 20.2.2.30 Math.sinh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * require('./_fails')(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_math-expm1":"node_modules/core-js/modules/_math-expm1.js","./_fails":"node_modules/core-js/modules/_fails.js"}],"node_modules/core-js/modules/es6.math.tanh.js":[function(require,module,exports) {
// 20.2.2.33 Math.tanh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_math-expm1":"node_modules/core-js/modules/_math-expm1.js"}],"node_modules/core-js/modules/es6.math.trunc.js":[function(require,module,exports) {
// 20.2.2.34 Math.trunc(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js"}],"node_modules/core-js/modules/_object-gopn.js":[function(require,module,exports) {
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = require('./_object-keys-internal');
var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

},{"./_object-keys-internal":"node_modules/core-js/modules/_object-keys-internal.js","./_enum-bug-keys":"node_modules/core-js/modules/_enum-bug-keys.js"}],"node_modules/core-js/modules/_string-ws.js":[function(require,module,exports) {
module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

},{}],"node_modules/core-js/modules/_string-trim.js":[function(require,module,exports) {
var $export = require('./_export');
var defined = require('./_defined');
var fails = require('./_fails');
var spaces = require('./_string-ws');
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;

},{"./_export":"node_modules/core-js/modules/_export.js","./_defined":"node_modules/core-js/modules/_defined.js","./_fails":"node_modules/core-js/modules/_fails.js","./_string-ws":"node_modules/core-js/modules/_string-ws.js"}],"node_modules/core-js/modules/es6.number.constructor.js":[function(require,module,exports) {

'use strict';
var global = require('./_global');
var has = require('./_has');
var cof = require('./_cof');
var inheritIfRequired = require('./_inherit-if-required');
var toPrimitive = require('./_to-primitive');
var fails = require('./_fails');
var gOPN = require('./_object-gopn').f;
var gOPD = require('./_object-gopd').f;
var dP = require('./_object-dp').f;
var $trim = require('./_string-trim').trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = require('./_descriptors') ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  require('./_redefine')(global, NUMBER, $Number);
}

},{"./_global":"node_modules/core-js/modules/_global.js","./_has":"node_modules/core-js/modules/_has.js","./_cof":"node_modules/core-js/modules/_cof.js","./_inherit-if-required":"node_modules/core-js/modules/_inherit-if-required.js","./_to-primitive":"node_modules/core-js/modules/_to-primitive.js","./_fails":"node_modules/core-js/modules/_fails.js","./_object-gopn":"node_modules/core-js/modules/_object-gopn.js","./_object-gopd":"node_modules/core-js/modules/_object-gopd.js","./_object-dp":"node_modules/core-js/modules/_object-dp.js","./_string-trim":"node_modules/core-js/modules/_string-trim.js","./_object-create":"node_modules/core-js/modules/_object-create.js","./_descriptors":"node_modules/core-js/modules/_descriptors.js","./_redefine":"node_modules/core-js/modules/_redefine.js"}],"node_modules/core-js/modules/es6.number.epsilon.js":[function(require,module,exports) {
// 20.1.2.1 Number.EPSILON
var $export = require('./_export');

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });

},{"./_export":"node_modules/core-js/modules/_export.js"}],"node_modules/core-js/modules/es6.number.is-finite.js":[function(require,module,exports) {
// 20.1.2.2 Number.isFinite(number)
var $export = require('./_export');
var _isFinite = require('./_global').isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_global":"node_modules/core-js/modules/_global.js"}],"node_modules/core-js/modules/_is-integer.js":[function(require,module,exports) {
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./_is-object');
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

},{"./_is-object":"node_modules/core-js/modules/_is-object.js"}],"node_modules/core-js/modules/es6.number.is-integer.js":[function(require,module,exports) {
// 20.1.2.3 Number.isInteger(number)
var $export = require('./_export');

$export($export.S, 'Number', { isInteger: require('./_is-integer') });

},{"./_export":"node_modules/core-js/modules/_export.js","./_is-integer":"node_modules/core-js/modules/_is-integer.js"}],"node_modules/core-js/modules/es6.number.is-nan.js":[function(require,module,exports) {
// 20.1.2.4 Number.isNaN(number)
var $export = require('./_export');

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js"}],"node_modules/core-js/modules/es6.number.is-safe-integer.js":[function(require,module,exports) {
// 20.1.2.5 Number.isSafeInteger(number)
var $export = require('./_export');
var isInteger = require('./_is-integer');
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_is-integer":"node_modules/core-js/modules/_is-integer.js"}],"node_modules/core-js/modules/es6.number.max-safe-integer.js":[function(require,module,exports) {
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });

},{"./_export":"node_modules/core-js/modules/_export.js"}],"node_modules/core-js/modules/es6.number.min-safe-integer.js":[function(require,module,exports) {
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });

},{"./_export":"node_modules/core-js/modules/_export.js"}],"node_modules/core-js/modules/_parse-float.js":[function(require,module,exports) {
var $parseFloat = require('./_global').parseFloat;
var $trim = require('./_string-trim').trim;

module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;

},{"./_global":"node_modules/core-js/modules/_global.js","./_string-trim":"node_modules/core-js/modules/_string-trim.js","./_string-ws":"node_modules/core-js/modules/_string-ws.js"}],"node_modules/core-js/modules/es6.number.parse-float.js":[function(require,module,exports) {
var $export = require('./_export');
var $parseFloat = require('./_parse-float');
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });

},{"./_export":"node_modules/core-js/modules/_export.js","./_parse-float":"node_modules/core-js/modules/_parse-float.js"}],"node_modules/core-js/modules/_parse-int.js":[function(require,module,exports) {
var $parseInt = require('./_global').parseInt;
var $trim = require('./_string-trim').trim;
var ws = require('./_string-ws');
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;

},{"./_global":"node_modules/core-js/modules/_global.js","./_string-trim":"node_modules/core-js/modules/_string-trim.js","./_string-ws":"node_modules/core-js/modules/_string-ws.js"}],"node_modules/core-js/modules/es6.number.parse-int.js":[function(require,module,exports) {
var $export = require('./_export');
var $parseInt = require('./_parse-int');
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });

},{"./_export":"node_modules/core-js/modules/_export.js","./_parse-int":"node_modules/core-js/modules/_parse-int.js"}],"node_modules/core-js/modules/_object-gops.js":[function(require,module,exports) {
exports.f = Object.getOwnPropertySymbols;

},{}],"node_modules/core-js/modules/_object-assign.js":[function(require,module,exports) {
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;

},{"./_object-keys":"node_modules/core-js/modules/_object-keys.js","./_object-gops":"node_modules/core-js/modules/_object-gops.js","./_object-pie":"node_modules/core-js/modules/_object-pie.js","./_to-object":"node_modules/core-js/modules/_to-object.js","./_iobject":"node_modules/core-js/modules/_iobject.js","./_fails":"node_modules/core-js/modules/_fails.js"}],"node_modules/core-js/modules/es6.object.assign.js":[function(require,module,exports) {
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });

},{"./_export":"node_modules/core-js/modules/_export.js","./_object-assign":"node_modules/core-js/modules/_object-assign.js"}],"node_modules/core-js/modules/_object-forced-pam.js":[function(require,module,exports) {
'use strict';
// Forced replacement prototype accessors methods
module.exports = require('./_library') || !require('./_fails')(function () {
  var K = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call
  __defineSetter__.call(null, K, function () { /* empty */ });
  delete require('./_global')[K];
});

},{"./_library":"node_modules/core-js/modules/_library.js","./_fails":"node_modules/core-js/modules/_fails.js","./_global":"node_modules/core-js/modules/_global.js"}],"node_modules/core-js/modules/es7.object.define-getter.js":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var aFunction = require('./_a-function');
var $defineProperty = require('./_object-dp');

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter) {
    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_to-object":"node_modules/core-js/modules/_to-object.js","./_a-function":"node_modules/core-js/modules/_a-function.js","./_object-dp":"node_modules/core-js/modules/_object-dp.js","./_descriptors":"node_modules/core-js/modules/_descriptors.js","./_object-forced-pam":"node_modules/core-js/modules/_object-forced-pam.js"}],"node_modules/core-js/modules/es7.object.define-setter.js":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var aFunction = require('./_a-function');
var $defineProperty = require('./_object-dp');

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter) {
    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_to-object":"node_modules/core-js/modules/_to-object.js","./_a-function":"node_modules/core-js/modules/_a-function.js","./_object-dp":"node_modules/core-js/modules/_object-dp.js","./_descriptors":"node_modules/core-js/modules/_descriptors.js","./_object-forced-pam":"node_modules/core-js/modules/_object-forced-pam.js"}],"node_modules/core-js/modules/_object-to-array.js":[function(require,module,exports) {
var getKeys = require('./_object-keys');
var toIObject = require('./_to-iobject');
var isEnum = require('./_object-pie').f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) if (isEnum.call(O, key = keys[i++])) {
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};

},{"./_object-keys":"node_modules/core-js/modules/_object-keys.js","./_to-iobject":"node_modules/core-js/modules/_to-iobject.js","./_object-pie":"node_modules/core-js/modules/_object-pie.js"}],"node_modules/core-js/modules/es7.object.entries.js":[function(require,module,exports) {
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $entries = require('./_object-to-array')(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_object-to-array":"node_modules/core-js/modules/_object-to-array.js"}],"node_modules/core-js/modules/_object-sap.js":[function(require,module,exports) {
// most Object methods by ES6 should accept primitives
var $export = require('./_export');
var core = require('./_core');
var fails = require('./_fails');
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};

},{"./_export":"node_modules/core-js/modules/_export.js","./_core":"node_modules/core-js/modules/_core.js","./_fails":"node_modules/core-js/modules/_fails.js"}],"node_modules/core-js/modules/es6.object.freeze.js":[function(require,module,exports) {
// 19.1.2.5 Object.freeze(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});

},{"./_is-object":"node_modules/core-js/modules/_is-object.js","./_meta":"node_modules/core-js/modules/_meta.js","./_object-sap":"node_modules/core-js/modules/_object-sap.js"}],"node_modules/core-js/modules/es6.object.get-own-property-descriptor.js":[function(require,module,exports) {
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = require('./_to-iobject');
var $getOwnPropertyDescriptor = require('./_object-gopd').f;

require('./_object-sap')('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

},{"./_to-iobject":"node_modules/core-js/modules/_to-iobject.js","./_object-gopd":"node_modules/core-js/modules/_object-gopd.js","./_object-sap":"node_modules/core-js/modules/_object-sap.js"}],"node_modules/core-js/modules/_own-keys.js":[function(require,module,exports) {
// all object keys, includes non-enumerable and symbols
var gOPN = require('./_object-gopn');
var gOPS = require('./_object-gops');
var anObject = require('./_an-object');
var Reflect = require('./_global').Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};

},{"./_object-gopn":"node_modules/core-js/modules/_object-gopn.js","./_object-gops":"node_modules/core-js/modules/_object-gops.js","./_an-object":"node_modules/core-js/modules/_an-object.js","./_global":"node_modules/core-js/modules/_global.js"}],"node_modules/core-js/modules/es7.object.get-own-property-descriptors.js":[function(require,module,exports) {
// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = require('./_export');
var ownKeys = require('./_own-keys');
var toIObject = require('./_to-iobject');
var gOPD = require('./_object-gopd');
var createProperty = require('./_create-property');

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_own-keys":"node_modules/core-js/modules/_own-keys.js","./_to-iobject":"node_modules/core-js/modules/_to-iobject.js","./_object-gopd":"node_modules/core-js/modules/_object-gopd.js","./_create-property":"node_modules/core-js/modules/_create-property.js"}],"node_modules/core-js/modules/_object-gopn-ext.js":[function(require,module,exports) {
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject');
var gOPN = require('./_object-gopn').f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_to-iobject":"node_modules/core-js/modules/_to-iobject.js","./_object-gopn":"node_modules/core-js/modules/_object-gopn.js"}],"node_modules/core-js/modules/es6.object.get-own-property-names.js":[function(require,module,exports) {
// 19.1.2.7 Object.getOwnPropertyNames(O)
require('./_object-sap')('getOwnPropertyNames', function () {
  return require('./_object-gopn-ext').f;
});

},{"./_object-sap":"node_modules/core-js/modules/_object-sap.js","./_object-gopn-ext":"node_modules/core-js/modules/_object-gopn-ext.js"}],"node_modules/core-js/modules/es6.object.get-prototype-of.js":[function(require,module,exports) {
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = require('./_to-object');
var $getPrototypeOf = require('./_object-gpo');

require('./_object-sap')('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});

},{"./_to-object":"node_modules/core-js/modules/_to-object.js","./_object-gpo":"node_modules/core-js/modules/_object-gpo.js","./_object-sap":"node_modules/core-js/modules/_object-sap.js"}],"node_modules/core-js/modules/es7.object.lookup-getter.js":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');
var getPrototypeOf = require('./_object-gpo');
var getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupGetter__: function __lookupGetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.get;
    } while (O = getPrototypeOf(O));
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_to-object":"node_modules/core-js/modules/_to-object.js","./_to-primitive":"node_modules/core-js/modules/_to-primitive.js","./_object-gpo":"node_modules/core-js/modules/_object-gpo.js","./_object-gopd":"node_modules/core-js/modules/_object-gopd.js","./_descriptors":"node_modules/core-js/modules/_descriptors.js","./_object-forced-pam":"node_modules/core-js/modules/_object-forced-pam.js"}],"node_modules/core-js/modules/es7.object.lookup-setter.js":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');
var getPrototypeOf = require('./_object-gpo');
var getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupSetter__: function __lookupSetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.set;
    } while (O = getPrototypeOf(O));
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_to-object":"node_modules/core-js/modules/_to-object.js","./_to-primitive":"node_modules/core-js/modules/_to-primitive.js","./_object-gpo":"node_modules/core-js/modules/_object-gpo.js","./_object-gopd":"node_modules/core-js/modules/_object-gopd.js","./_descriptors":"node_modules/core-js/modules/_descriptors.js","./_object-forced-pam":"node_modules/core-js/modules/_object-forced-pam.js"}],"node_modules/core-js/modules/es6.object.prevent-extensions.js":[function(require,module,exports) {
// 19.1.2.15 Object.preventExtensions(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});

},{"./_is-object":"node_modules/core-js/modules/_is-object.js","./_meta":"node_modules/core-js/modules/_meta.js","./_object-sap":"node_modules/core-js/modules/_object-sap.js"}],"node_modules/core-js/modules/_same-value.js":[function(require,module,exports) {
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

},{}],"node_modules/core-js/modules/es6.object.is.js":[function(require,module,exports) {
// 19.1.3.10 Object.is(value1, value2)
var $export = require('./_export');
$export($export.S, 'Object', { is: require('./_same-value') });

},{"./_export":"node_modules/core-js/modules/_export.js","./_same-value":"node_modules/core-js/modules/_same-value.js"}],"node_modules/core-js/modules/es6.object.is-frozen.js":[function(require,module,exports) {
// 19.1.2.12 Object.isFrozen(O)
var isObject = require('./_is-object');

require('./_object-sap')('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});

},{"./_is-object":"node_modules/core-js/modules/_is-object.js","./_object-sap":"node_modules/core-js/modules/_object-sap.js"}],"node_modules/core-js/modules/es6.object.is-sealed.js":[function(require,module,exports) {
// 19.1.2.13 Object.isSealed(O)
var isObject = require('./_is-object');

require('./_object-sap')('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});

},{"./_is-object":"node_modules/core-js/modules/_is-object.js","./_object-sap":"node_modules/core-js/modules/_object-sap.js"}],"node_modules/core-js/modules/es6.object.is-extensible.js":[function(require,module,exports) {
// 19.1.2.11 Object.isExtensible(O)
var isObject = require('./_is-object');

require('./_object-sap')('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});

},{"./_is-object":"node_modules/core-js/modules/_is-object.js","./_object-sap":"node_modules/core-js/modules/_object-sap.js"}],"node_modules/core-js/modules/es6.object.keys.js":[function(require,module,exports) {
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object');
var $keys = require('./_object-keys');

require('./_object-sap')('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});

},{"./_to-object":"node_modules/core-js/modules/_to-object.js","./_object-keys":"node_modules/core-js/modules/_object-keys.js","./_object-sap":"node_modules/core-js/modules/_object-sap.js"}],"node_modules/core-js/modules/es6.object.seal.js":[function(require,module,exports) {
// 19.1.2.17 Object.seal(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});

},{"./_is-object":"node_modules/core-js/modules/_is-object.js","./_meta":"node_modules/core-js/modules/_meta.js","./_object-sap":"node_modules/core-js/modules/_object-sap.js"}],"node_modules/core-js/modules/es6.object.set-prototype-of.js":[function(require,module,exports) {
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });

},{"./_export":"node_modules/core-js/modules/_export.js","./_set-proto":"node_modules/core-js/modules/_set-proto.js"}],"node_modules/core-js/modules/es7.object.values.js":[function(require,module,exports) {
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $values = require('./_object-to-array')(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_object-to-array":"node_modules/core-js/modules/_object-to-array.js"}],"node_modules/core-js/modules/_species-constructor.js":[function(require,module,exports) {
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var SPECIES = require('./_wks')('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

},{"./_an-object":"node_modules/core-js/modules/_an-object.js","./_a-function":"node_modules/core-js/modules/_a-function.js","./_wks":"node_modules/core-js/modules/_wks.js"}],"node_modules/core-js/modules/_invoke.js":[function(require,module,exports) {
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};

},{}],"node_modules/core-js/modules/_task.js":[function(require,module,exports) {


var ctx = require('./_ctx');
var invoke = require('./_invoke');
var html = require('./_html');
var cel = require('./_dom-create');
var global = require('./_global');
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (require('./_cof')(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};

},{"./_ctx":"node_modules/core-js/modules/_ctx.js","./_invoke":"node_modules/core-js/modules/_invoke.js","./_html":"node_modules/core-js/modules/_html.js","./_dom-create":"node_modules/core-js/modules/_dom-create.js","./_global":"node_modules/core-js/modules/_global.js","./_cof":"node_modules/core-js/modules/_cof.js"}],"node_modules/core-js/modules/_microtask.js":[function(require,module,exports) {


var global = require('./_global');
var macrotask = require('./_task').set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = require('./_cof')(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};

},{"./_global":"node_modules/core-js/modules/_global.js","./_task":"node_modules/core-js/modules/_task.js","./_cof":"node_modules/core-js/modules/_cof.js"}],"node_modules/core-js/modules/_new-promise-capability.js":[function(require,module,exports) {
'use strict';
// 25.4.1.5 NewPromiseCapability(C)
var aFunction = require('./_a-function');

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"./_a-function":"node_modules/core-js/modules/_a-function.js"}],"node_modules/core-js/modules/_perform.js":[function(require,module,exports) {
module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

},{}],"node_modules/core-js/modules/_user-agent.js":[function(require,module,exports) {

var global = require('./_global');
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';

},{"./_global":"node_modules/core-js/modules/_global.js"}],"node_modules/core-js/modules/_promise-resolve.js":[function(require,module,exports) {
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var newPromiseCapability = require('./_new-promise-capability');

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"./_an-object":"node_modules/core-js/modules/_an-object.js","./_is-object":"node_modules/core-js/modules/_is-object.js","./_new-promise-capability":"node_modules/core-js/modules/_new-promise-capability.js"}],"node_modules/core-js/modules/es6.promise.js":[function(require,module,exports) {


'use strict';
var LIBRARY = require('./_library');
var global = require('./_global');
var ctx = require('./_ctx');
var classof = require('./_classof');
var $export = require('./_export');
var isObject = require('./_is-object');
var aFunction = require('./_a-function');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var speciesConstructor = require('./_species-constructor');
var task = require('./_task').set;
var microtask = require('./_microtask')();
var newPromiseCapabilityModule = require('./_new-promise-capability');
var perform = require('./_perform');
var userAgent = require('./_user-agent');
var promiseResolve = require('./_promise-resolve');
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

},{"./_library":"node_modules/core-js/modules/_library.js","./_global":"node_modules/core-js/modules/_global.js","./_ctx":"node_modules/core-js/modules/_ctx.js","./_classof":"node_modules/core-js/modules/_classof.js","./_export":"node_modules/core-js/modules/_export.js","./_is-object":"node_modules/core-js/modules/_is-object.js","./_a-function":"node_modules/core-js/modules/_a-function.js","./_an-instance":"node_modules/core-js/modules/_an-instance.js","./_for-of":"node_modules/core-js/modules/_for-of.js","./_species-constructor":"node_modules/core-js/modules/_species-constructor.js","./_task":"node_modules/core-js/modules/_task.js","./_microtask":"node_modules/core-js/modules/_microtask.js","./_new-promise-capability":"node_modules/core-js/modules/_new-promise-capability.js","./_perform":"node_modules/core-js/modules/_perform.js","./_user-agent":"node_modules/core-js/modules/_user-agent.js","./_promise-resolve":"node_modules/core-js/modules/_promise-resolve.js","./_wks":"node_modules/core-js/modules/_wks.js","./_redefine-all":"node_modules/core-js/modules/_redefine-all.js","./_set-to-string-tag":"node_modules/core-js/modules/_set-to-string-tag.js","./_set-species":"node_modules/core-js/modules/_set-species.js","./_core":"node_modules/core-js/modules/_core.js","./_iter-detect":"node_modules/core-js/modules/_iter-detect.js"}],"node_modules/core-js/modules/es7.promise.finally.js":[function(require,module,exports) {

// https://github.com/tc39/proposal-promise-finally
'use strict';
var $export = require('./_export');
var core = require('./_core');
var global = require('./_global');
var speciesConstructor = require('./_species-constructor');
var promiseResolve = require('./_promise-resolve');

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });

},{"./_export":"node_modules/core-js/modules/_export.js","./_core":"node_modules/core-js/modules/_core.js","./_global":"node_modules/core-js/modules/_global.js","./_species-constructor":"node_modules/core-js/modules/_species-constructor.js","./_promise-resolve":"node_modules/core-js/modules/_promise-resolve.js"}],"node_modules/core-js/modules/es6.reflect.apply.js":[function(require,module,exports) {
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = require('./_export');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var rApply = (require('./_global').Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !require('./_fails')(function () {
  rApply(function () { /* empty */ });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_a-function":"node_modules/core-js/modules/_a-function.js","./_an-object":"node_modules/core-js/modules/_an-object.js","./_global":"node_modules/core-js/modules/_global.js","./_fails":"node_modules/core-js/modules/_fails.js"}],"node_modules/core-js/modules/_bind.js":[function(require,module,exports) {
'use strict';
var aFunction = require('./_a-function');
var isObject = require('./_is-object');
var invoke = require('./_invoke');
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};

},{"./_a-function":"node_modules/core-js/modules/_a-function.js","./_is-object":"node_modules/core-js/modules/_is-object.js","./_invoke":"node_modules/core-js/modules/_invoke.js"}],"node_modules/core-js/modules/es6.reflect.construct.js":[function(require,module,exports) {
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = require('./_export');
var create = require('./_object-create');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var fails = require('./_fails');
var bind = require('./_bind');
var rConstruct = (require('./_global').Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () { /* empty */ });
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_object-create":"node_modules/core-js/modules/_object-create.js","./_a-function":"node_modules/core-js/modules/_a-function.js","./_an-object":"node_modules/core-js/modules/_an-object.js","./_is-object":"node_modules/core-js/modules/_is-object.js","./_fails":"node_modules/core-js/modules/_fails.js","./_bind":"node_modules/core-js/modules/_bind.js","./_global":"node_modules/core-js/modules/_global.js"}],"node_modules/core-js/modules/es6.reflect.define-property.js":[function(require,module,exports) {
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = require('./_object-dp');
var $export = require('./_export');
var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * require('./_fails')(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_object-dp":"node_modules/core-js/modules/_object-dp.js","./_export":"node_modules/core-js/modules/_export.js","./_an-object":"node_modules/core-js/modules/_an-object.js","./_to-primitive":"node_modules/core-js/modules/_to-primitive.js","./_fails":"node_modules/core-js/modules/_fails.js"}],"node_modules/core-js/modules/es6.reflect.delete-property.js":[function(require,module,exports) {
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = require('./_export');
var gOPD = require('./_object-gopd').f;
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_object-gopd":"node_modules/core-js/modules/_object-gopd.js","./_an-object":"node_modules/core-js/modules/_an-object.js"}],"node_modules/core-js/modules/es6.reflect.get.js":[function(require,module,exports) {
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var isObject = require('./_is-object');
var anObject = require('./_an-object');

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });

},{"./_object-gopd":"node_modules/core-js/modules/_object-gopd.js","./_object-gpo":"node_modules/core-js/modules/_object-gpo.js","./_has":"node_modules/core-js/modules/_has.js","./_export":"node_modules/core-js/modules/_export.js","./_is-object":"node_modules/core-js/modules/_is-object.js","./_an-object":"node_modules/core-js/modules/_an-object.js"}],"node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js":[function(require,module,exports) {
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = require('./_object-gopd');
var $export = require('./_export');
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});

},{"./_object-gopd":"node_modules/core-js/modules/_object-gopd.js","./_export":"node_modules/core-js/modules/_export.js","./_an-object":"node_modules/core-js/modules/_an-object.js"}],"node_modules/core-js/modules/es6.reflect.get-prototype-of.js":[function(require,module,exports) {
// 26.1.8 Reflect.getPrototypeOf(target)
var $export = require('./_export');
var getProto = require('./_object-gpo');
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_object-gpo":"node_modules/core-js/modules/_object-gpo.js","./_an-object":"node_modules/core-js/modules/_an-object.js"}],"node_modules/core-js/modules/es6.reflect.has.js":[function(require,module,exports) {
// 26.1.9 Reflect.has(target, propertyKey)
var $export = require('./_export');

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js"}],"node_modules/core-js/modules/es6.reflect.is-extensible.js":[function(require,module,exports) {
// 26.1.10 Reflect.isExtensible(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_an-object":"node_modules/core-js/modules/_an-object.js"}],"node_modules/core-js/modules/es6.reflect.own-keys.js":[function(require,module,exports) {
// 26.1.11 Reflect.ownKeys(target)
var $export = require('./_export');

$export($export.S, 'Reflect', { ownKeys: require('./_own-keys') });

},{"./_export":"node_modules/core-js/modules/_export.js","./_own-keys":"node_modules/core-js/modules/_own-keys.js"}],"node_modules/core-js/modules/es6.reflect.prevent-extensions.js":[function(require,module,exports) {
// 26.1.12 Reflect.preventExtensions(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_an-object":"node_modules/core-js/modules/_an-object.js"}],"node_modules/core-js/modules/es6.reflect.set.js":[function(require,module,exports) {
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = require('./_object-dp');
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var createDesc = require('./_property-desc');
var anObject = require('./_an-object');
var isObject = require('./_is-object');

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
    } else dP.f(receiver, propertyKey, createDesc(0, V));
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });

},{"./_object-dp":"node_modules/core-js/modules/_object-dp.js","./_object-gopd":"node_modules/core-js/modules/_object-gopd.js","./_object-gpo":"node_modules/core-js/modules/_object-gpo.js","./_has":"node_modules/core-js/modules/_has.js","./_export":"node_modules/core-js/modules/_export.js","./_property-desc":"node_modules/core-js/modules/_property-desc.js","./_an-object":"node_modules/core-js/modules/_an-object.js","./_is-object":"node_modules/core-js/modules/_is-object.js"}],"node_modules/core-js/modules/es6.reflect.set-prototype-of.js":[function(require,module,exports) {
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = require('./_export');
var setProto = require('./_set-proto');

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_set-proto":"node_modules/core-js/modules/_set-proto.js"}],"node_modules/core-js/modules/_is-regexp.js":[function(require,module,exports) {
// 7.2.8 IsRegExp(argument)
var isObject = require('./_is-object');
var cof = require('./_cof');
var MATCH = require('./_wks')('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};

},{"./_is-object":"node_modules/core-js/modules/_is-object.js","./_cof":"node_modules/core-js/modules/_cof.js","./_wks":"node_modules/core-js/modules/_wks.js"}],"node_modules/core-js/modules/_flags.js":[function(require,module,exports) {
'use strict';
// 21.2.5.3 get RegExp.prototype.flags
var anObject = require('./_an-object');
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

},{"./_an-object":"node_modules/core-js/modules/_an-object.js"}],"node_modules/core-js/modules/es6.regexp.constructor.js":[function(require,module,exports) {

var global = require('./_global');
var inheritIfRequired = require('./_inherit-if-required');
var dP = require('./_object-dp').f;
var gOPN = require('./_object-gopn').f;
var isRegExp = require('./_is-regexp');
var $flags = require('./_flags');
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {
  re2[require('./_wks')('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  require('./_redefine')(global, 'RegExp', $RegExp);
}

require('./_set-species')('RegExp');

},{"./_global":"node_modules/core-js/modules/_global.js","./_inherit-if-required":"node_modules/core-js/modules/_inherit-if-required.js","./_object-dp":"node_modules/core-js/modules/_object-dp.js","./_object-gopn":"node_modules/core-js/modules/_object-gopn.js","./_is-regexp":"node_modules/core-js/modules/_is-regexp.js","./_flags":"node_modules/core-js/modules/_flags.js","./_descriptors":"node_modules/core-js/modules/_descriptors.js","./_fails":"node_modules/core-js/modules/_fails.js","./_wks":"node_modules/core-js/modules/_wks.js","./_redefine":"node_modules/core-js/modules/_redefine.js","./_set-species":"node_modules/core-js/modules/_set-species.js"}],"node_modules/core-js/modules/es6.regexp.flags.js":[function(require,module,exports) {
// 21.2.5.3 get RegExp.prototype.flags()
if (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {
  configurable: true,
  get: require('./_flags')
});

},{"./_descriptors":"node_modules/core-js/modules/_descriptors.js","./_object-dp":"node_modules/core-js/modules/_object-dp.js","./_flags":"node_modules/core-js/modules/_flags.js"}],"node_modules/core-js/modules/_string-at.js":[function(require,module,exports) {
var toInteger = require('./_to-integer');
var defined = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

},{"./_to-integer":"node_modules/core-js/modules/_to-integer.js","./_defined":"node_modules/core-js/modules/_defined.js"}],"node_modules/core-js/modules/_advance-string-index.js":[function(require,module,exports) {
'use strict';
var at = require('./_string-at')(true);

 // `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? at(S, index).length : 1);
};

},{"./_string-at":"node_modules/core-js/modules/_string-at.js"}],"node_modules/core-js/modules/_regexp-exec-abstract.js":[function(require,module,exports) {
'use strict';

var classof = require('./_classof');
var builtinExec = RegExp.prototype.exec;

 // `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw new TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }
  if (classof(R) !== 'RegExp') {
    throw new TypeError('RegExp#exec called on incompatible receiver');
  }
  return builtinExec.call(R, S);
};

},{"./_classof":"node_modules/core-js/modules/_classof.js"}],"node_modules/core-js/modules/_regexp-exec.js":[function(require,module,exports) {
'use strict';

var regexpFlags = require('./_flags');

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var LAST_INDEX = 'lastIndex';

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/,
      re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
})();

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];

    match = nativeExec.call(re, str);

    if (UPDATES_LAST_INDEX_WRONG && match) {
      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      // eslint-disable-next-line no-loop-func
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;

},{"./_flags":"node_modules/core-js/modules/_flags.js"}],"node_modules/core-js/modules/es6.regexp.exec.js":[function(require,module,exports) {
'use strict';
var regexpExec = require('./_regexp-exec');
require('./_export')({
  target: 'RegExp',
  proto: true,
  forced: regexpExec !== /./.exec
}, {
  exec: regexpExec
});

},{"./_regexp-exec":"node_modules/core-js/modules/_regexp-exec.js","./_export":"node_modules/core-js/modules/_export.js"}],"node_modules/core-js/modules/_fix-re-wks.js":[function(require,module,exports) {
'use strict';
require('./es6.regexp.exec');
var redefine = require('./_redefine');
var hide = require('./_hide');
var fails = require('./_fails');
var defined = require('./_defined');
var wks = require('./_wks');
var regexpExec = require('./_regexp-exec');

var SPECIES = wks('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {
  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
})();

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;
    re.exec = function () { execCalled = true; return null; };
    if (KEY === 'split') {
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
    }
    re[SYMBOL]('');
    return !execCalled;
  }) : undefined;

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var fns = exec(
      defined,
      SYMBOL,
      ''[KEY],
      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
        if (regexp.exec === regexpExec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
          }
          return { done: true, value: nativeMethod.call(str, regexp, arg2) };
        }
        return { done: false };
      }
    );
    var strfn = fns[0];
    var rxfn = fns[1];

    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};

},{"./es6.regexp.exec":"node_modules/core-js/modules/es6.regexp.exec.js","./_redefine":"node_modules/core-js/modules/_redefine.js","./_hide":"node_modules/core-js/modules/_hide.js","./_fails":"node_modules/core-js/modules/_fails.js","./_defined":"node_modules/core-js/modules/_defined.js","./_wks":"node_modules/core-js/modules/_wks.js","./_regexp-exec":"node_modules/core-js/modules/_regexp-exec.js"}],"node_modules/core-js/modules/es6.regexp.match.js":[function(require,module,exports) {
'use strict';

var anObject = require('./_an-object');
var toLength = require('./_to-length');
var advanceStringIndex = require('./_advance-string-index');
var regExpExec = require('./_regexp-exec-abstract');

// @@match logic
require('./_fix-re-wks')('match', 1, function (defined, MATCH, $match, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative($match, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      if (!rx.global) return regExpExec(rx, S);
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});

},{"./_an-object":"node_modules/core-js/modules/_an-object.js","./_to-length":"node_modules/core-js/modules/_to-length.js","./_advance-string-index":"node_modules/core-js/modules/_advance-string-index.js","./_regexp-exec-abstract":"node_modules/core-js/modules/_regexp-exec-abstract.js","./_fix-re-wks":"node_modules/core-js/modules/_fix-re-wks.js"}],"node_modules/core-js/modules/es6.regexp.replace.js":[function(require,module,exports) {
var global = arguments[3];
'use strict';

var anObject = require('./_an-object');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var toInteger = require('./_to-integer');
var advanceStringIndex = require('./_advance-string-index');
var regExpExec = require('./_regexp-exec-abstract');
var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
require('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
  return [
    // `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = defined(this);
      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined
        ? fn.call(searchValue, O, replaceValue)
        : $replace.call(String(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      var res = maybeCallNative($replace, regexp, this, replaceValue);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);
      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;
        results.push(result);
        if (!global) break;
        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }
      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];
        var matched = String(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    }
  ];

    // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return $replace.call(replacement, symbols, function (match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$': return '$';
        case '&': return matched;
        case '`': return str.slice(0, position);
        case "'": return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default: // \d\d?
          var n = +ch;
          if (n === 0) return match;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return match;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});

},{"./_an-object":"node_modules/core-js/modules/_an-object.js","./_to-object":"node_modules/core-js/modules/_to-object.js","./_to-length":"node_modules/core-js/modules/_to-length.js","./_to-integer":"node_modules/core-js/modules/_to-integer.js","./_advance-string-index":"node_modules/core-js/modules/_advance-string-index.js","./_regexp-exec-abstract":"node_modules/core-js/modules/_regexp-exec-abstract.js","./_fix-re-wks":"node_modules/core-js/modules/_fix-re-wks.js"}],"node_modules/core-js/modules/es6.regexp.split.js":[function(require,module,exports) {
'use strict';

var isRegExp = require('./_is-regexp');
var anObject = require('./_an-object');
var speciesConstructor = require('./_species-constructor');
var advanceStringIndex = require('./_advance-string-index');
var toLength = require('./_to-length');
var callRegExpExec = require('./_regexp-exec-abstract');
var regexpExec = require('./_regexp-exec');
var fails = require('./_fails');
var $min = Math.min;
var $push = [].push;
var $SPLIT = 'split';
var LENGTH = 'length';
var LAST_INDEX = 'lastIndex';
var MAX_UINT32 = 0xffffffff;

// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
var SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });

// @@split logic
require('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return $split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy[LAST_INDEX];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
    };
  } else {
    internalSplit = $split;
  }

  return [
    // `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = defined(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined
        ? splitter.call(separator, O, limit)
        : internalSplit.call(String(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (SUPPORTS_Y ? 'y' : 'g');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;
        if (
          z === null ||
          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    }
  ];
});

},{"./_is-regexp":"node_modules/core-js/modules/_is-regexp.js","./_an-object":"node_modules/core-js/modules/_an-object.js","./_species-constructor":"node_modules/core-js/modules/_species-constructor.js","./_advance-string-index":"node_modules/core-js/modules/_advance-string-index.js","./_to-length":"node_modules/core-js/modules/_to-length.js","./_regexp-exec-abstract":"node_modules/core-js/modules/_regexp-exec-abstract.js","./_regexp-exec":"node_modules/core-js/modules/_regexp-exec.js","./_fails":"node_modules/core-js/modules/_fails.js","./_fix-re-wks":"node_modules/core-js/modules/_fix-re-wks.js"}],"node_modules/core-js/modules/es6.regexp.search.js":[function(require,module,exports) {
'use strict';

var anObject = require('./_an-object');
var sameValue = require('./_same-value');
var regExpExec = require('./_regexp-exec-abstract');

// @@search logic
require('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
  return [
    // `String.prototype.search` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.search
    function search(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[SEARCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    },
    // `RegExp.prototype[@@search]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
    function (regexp) {
      var res = maybeCallNative($search, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      var previousLastIndex = rx.lastIndex;
      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
      var result = regExpExec(rx, S);
      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }
  ];
});

},{"./_an-object":"node_modules/core-js/modules/_an-object.js","./_same-value":"node_modules/core-js/modules/_same-value.js","./_regexp-exec-abstract":"node_modules/core-js/modules/_regexp-exec-abstract.js","./_fix-re-wks":"node_modules/core-js/modules/_fix-re-wks.js"}],"node_modules/core-js/modules/es6.regexp.to-string.js":[function(require,module,exports) {

'use strict';
require('./es6.regexp.flags');
var anObject = require('./_an-object');
var $flags = require('./_flags');
var DESCRIPTORS = require('./_descriptors');
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}

},{"./es6.regexp.flags":"node_modules/core-js/modules/es6.regexp.flags.js","./_an-object":"node_modules/core-js/modules/_an-object.js","./_flags":"node_modules/core-js/modules/_flags.js","./_descriptors":"node_modules/core-js/modules/_descriptors.js","./_redefine":"node_modules/core-js/modules/_redefine.js","./_fails":"node_modules/core-js/modules/_fails.js"}],"node_modules/core-js/modules/es6.set.js":[function(require,module,exports) {
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var SET = 'Set';

// 23.2 Set Objects
module.exports = require('./_collection')(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);

},{"./_collection-strong":"node_modules/core-js/modules/_collection-strong.js","./_validate-collection":"node_modules/core-js/modules/_validate-collection.js","./_collection":"node_modules/core-js/modules/_collection.js"}],"node_modules/core-js/modules/_wks-ext.js":[function(require,module,exports) {
exports.f = require('./_wks');

},{"./_wks":"node_modules/core-js/modules/_wks.js"}],"node_modules/core-js/modules/_wks-define.js":[function(require,module,exports) {

var global = require('./_global');
var core = require('./_core');
var LIBRARY = require('./_library');
var wksExt = require('./_wks-ext');
var defineProperty = require('./_object-dp').f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};

},{"./_global":"node_modules/core-js/modules/_global.js","./_core":"node_modules/core-js/modules/_core.js","./_library":"node_modules/core-js/modules/_library.js","./_wks-ext":"node_modules/core-js/modules/_wks-ext.js","./_object-dp":"node_modules/core-js/modules/_object-dp.js"}],"node_modules/core-js/modules/_enum-keys.js":[function(require,module,exports) {
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};

},{"./_object-keys":"node_modules/core-js/modules/_object-keys.js","./_object-gops":"node_modules/core-js/modules/_object-gops.js","./_object-pie":"node_modules/core-js/modules/_object-pie.js"}],"node_modules/core-js/modules/es6.symbol.js":[function(require,module,exports) {

'use strict';
// ECMAScript 6 symbols shim
var global = require('./_global');
var has = require('./_has');
var DESCRIPTORS = require('./_descriptors');
var $export = require('./_export');
var redefine = require('./_redefine');
var META = require('./_meta').KEY;
var $fails = require('./_fails');
var shared = require('./_shared');
var setToStringTag = require('./_set-to-string-tag');
var uid = require('./_uid');
var wks = require('./_wks');
var wksExt = require('./_wks-ext');
var wksDefine = require('./_wks-define');
var enumKeys = require('./_enum-keys');
var isArray = require('./_is-array');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var createDesc = require('./_property-desc');
var _create = require('./_object-create');
var gOPNExt = require('./_object-gopn-ext');
var $GOPD = require('./_object-gopd');
var $DP = require('./_object-dp');
var $keys = require('./_object-keys');
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f = $propertyIsEnumerable;
  require('./_object-gops').f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !require('./_library')) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

},{"./_global":"node_modules/core-js/modules/_global.js","./_has":"node_modules/core-js/modules/_has.js","./_descriptors":"node_modules/core-js/modules/_descriptors.js","./_export":"node_modules/core-js/modules/_export.js","./_redefine":"node_modules/core-js/modules/_redefine.js","./_meta":"node_modules/core-js/modules/_meta.js","./_fails":"node_modules/core-js/modules/_fails.js","./_shared":"node_modules/core-js/modules/_shared.js","./_set-to-string-tag":"node_modules/core-js/modules/_set-to-string-tag.js","./_uid":"node_modules/core-js/modules/_uid.js","./_wks":"node_modules/core-js/modules/_wks.js","./_wks-ext":"node_modules/core-js/modules/_wks-ext.js","./_wks-define":"node_modules/core-js/modules/_wks-define.js","./_enum-keys":"node_modules/core-js/modules/_enum-keys.js","./_is-array":"node_modules/core-js/modules/_is-array.js","./_an-object":"node_modules/core-js/modules/_an-object.js","./_is-object":"node_modules/core-js/modules/_is-object.js","./_to-iobject":"node_modules/core-js/modules/_to-iobject.js","./_to-primitive":"node_modules/core-js/modules/_to-primitive.js","./_property-desc":"node_modules/core-js/modules/_property-desc.js","./_object-create":"node_modules/core-js/modules/_object-create.js","./_object-gopn-ext":"node_modules/core-js/modules/_object-gopn-ext.js","./_object-gopd":"node_modules/core-js/modules/_object-gopd.js","./_object-dp":"node_modules/core-js/modules/_object-dp.js","./_object-keys":"node_modules/core-js/modules/_object-keys.js","./_object-gopn":"node_modules/core-js/modules/_object-gopn.js","./_object-pie":"node_modules/core-js/modules/_object-pie.js","./_object-gops":"node_modules/core-js/modules/_object-gops.js","./_library":"node_modules/core-js/modules/_library.js","./_hide":"node_modules/core-js/modules/_hide.js"}],"node_modules/core-js/modules/es7.symbol.async-iterator.js":[function(require,module,exports) {
require('./_wks-define')('asyncIterator');

},{"./_wks-define":"node_modules/core-js/modules/_wks-define.js"}],"node_modules/core-js/modules/_string-html.js":[function(require,module,exports) {
var $export = require('./_export');
var fails = require('./_fails');
var defined = require('./_defined');
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};

},{"./_export":"node_modules/core-js/modules/_export.js","./_fails":"node_modules/core-js/modules/_fails.js","./_defined":"node_modules/core-js/modules/_defined.js"}],"node_modules/core-js/modules/es6.string.anchor.js":[function(require,module,exports) {
'use strict';
// B.2.3.2 String.prototype.anchor(name)
require('./_string-html')('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});

},{"./_string-html":"node_modules/core-js/modules/_string-html.js"}],"node_modules/core-js/modules/es6.string.big.js":[function(require,module,exports) {
'use strict';
// B.2.3.3 String.prototype.big()
require('./_string-html')('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});

},{"./_string-html":"node_modules/core-js/modules/_string-html.js"}],"node_modules/core-js/modules/es6.string.blink.js":[function(require,module,exports) {
'use strict';
// B.2.3.4 String.prototype.blink()
require('./_string-html')('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});

},{"./_string-html":"node_modules/core-js/modules/_string-html.js"}],"node_modules/core-js/modules/es6.string.bold.js":[function(require,module,exports) {
'use strict';
// B.2.3.5 String.prototype.bold()
require('./_string-html')('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});

},{"./_string-html":"node_modules/core-js/modules/_string-html.js"}],"node_modules/core-js/modules/es6.string.code-point-at.js":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $at = require('./_string-at')(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_string-at":"node_modules/core-js/modules/_string-at.js"}],"node_modules/core-js/modules/_string-context.js":[function(require,module,exports) {
// helper for String#{startsWith, endsWith, includes}
var isRegExp = require('./_is-regexp');
var defined = require('./_defined');

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};

},{"./_is-regexp":"node_modules/core-js/modules/_is-regexp.js","./_defined":"node_modules/core-js/modules/_defined.js"}],"node_modules/core-js/modules/_fails-is-regexp.js":[function(require,module,exports) {
var MATCH = require('./_wks')('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};

},{"./_wks":"node_modules/core-js/modules/_wks.js"}],"node_modules/core-js/modules/es6.string.ends-with.js":[function(require,module,exports) {
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';
var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_to-length":"node_modules/core-js/modules/_to-length.js","./_string-context":"node_modules/core-js/modules/_string-context.js","./_fails-is-regexp":"node_modules/core-js/modules/_fails-is-regexp.js"}],"node_modules/core-js/modules/es6.string.fixed.js":[function(require,module,exports) {
'use strict';
// B.2.3.6 String.prototype.fixed()
require('./_string-html')('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});

},{"./_string-html":"node_modules/core-js/modules/_string-html.js"}],"node_modules/core-js/modules/es6.string.fontcolor.js":[function(require,module,exports) {
'use strict';
// B.2.3.7 String.prototype.fontcolor(color)
require('./_string-html')('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});

},{"./_string-html":"node_modules/core-js/modules/_string-html.js"}],"node_modules/core-js/modules/es6.string.fontsize.js":[function(require,module,exports) {
'use strict';
// B.2.3.8 String.prototype.fontsize(size)
require('./_string-html')('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});

},{"./_string-html":"node_modules/core-js/modules/_string-html.js"}],"node_modules/core-js/modules/es6.string.from-code-point.js":[function(require,module,exports) {
var $export = require('./_export');
var toAbsoluteIndex = require('./_to-absolute-index');
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_to-absolute-index":"node_modules/core-js/modules/_to-absolute-index.js"}],"node_modules/core-js/modules/es6.string.includes.js":[function(require,module,exports) {
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';
var $export = require('./_export');
var context = require('./_string-context');
var INCLUDES = 'includes';

$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_string-context":"node_modules/core-js/modules/_string-context.js","./_fails-is-regexp":"node_modules/core-js/modules/_fails-is-regexp.js"}],"node_modules/core-js/modules/es6.string.italics.js":[function(require,module,exports) {
'use strict';
// B.2.3.9 String.prototype.italics()
require('./_string-html')('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});

},{"./_string-html":"node_modules/core-js/modules/_string-html.js"}],"node_modules/core-js/modules/es6.string.iterator.js":[function(require,module,exports) {
'use strict';
var $at = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

},{"./_string-at":"node_modules/core-js/modules/_string-at.js","./_iter-define":"node_modules/core-js/modules/_iter-define.js"}],"node_modules/core-js/modules/es6.string.link.js":[function(require,module,exports) {
'use strict';
// B.2.3.10 String.prototype.link(url)
require('./_string-html')('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});

},{"./_string-html":"node_modules/core-js/modules/_string-html.js"}],"node_modules/core-js/modules/_string-repeat.js":[function(require,module,exports) {
'use strict';
var toInteger = require('./_to-integer');
var defined = require('./_defined');

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};

},{"./_to-integer":"node_modules/core-js/modules/_to-integer.js","./_defined":"node_modules/core-js/modules/_defined.js"}],"node_modules/core-js/modules/_string-pad.js":[function(require,module,exports) {
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = require('./_to-length');
var repeat = require('./_string-repeat');
var defined = require('./_defined');

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

},{"./_to-length":"node_modules/core-js/modules/_to-length.js","./_string-repeat":"node_modules/core-js/modules/_string-repeat.js","./_defined":"node_modules/core-js/modules/_defined.js"}],"node_modules/core-js/modules/es7.string.pad-start.js":[function(require,module,exports) {
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_string-pad":"node_modules/core-js/modules/_string-pad.js","./_user-agent":"node_modules/core-js/modules/_user-agent.js"}],"node_modules/core-js/modules/es7.string.pad-end.js":[function(require,module,exports) {
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_string-pad":"node_modules/core-js/modules/_string-pad.js","./_user-agent":"node_modules/core-js/modules/_user-agent.js"}],"node_modules/core-js/modules/es6.string.raw.js":[function(require,module,exports) {
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    } return res.join('');
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_to-iobject":"node_modules/core-js/modules/_to-iobject.js","./_to-length":"node_modules/core-js/modules/_to-length.js"}],"node_modules/core-js/modules/es6.string.repeat.js":[function(require,module,exports) {
var $export = require('./_export');

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: require('./_string-repeat')
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_string-repeat":"node_modules/core-js/modules/_string-repeat.js"}],"node_modules/core-js/modules/es6.string.small.js":[function(require,module,exports) {
'use strict';
// B.2.3.11 String.prototype.small()
require('./_string-html')('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});

},{"./_string-html":"node_modules/core-js/modules/_string-html.js"}],"node_modules/core-js/modules/es6.string.starts-with.js":[function(require,module,exports) {
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';
var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_to-length":"node_modules/core-js/modules/_to-length.js","./_string-context":"node_modules/core-js/modules/_string-context.js","./_fails-is-regexp":"node_modules/core-js/modules/_fails-is-regexp.js"}],"node_modules/core-js/modules/es6.string.strike.js":[function(require,module,exports) {
'use strict';
// B.2.3.12 String.prototype.strike()
require('./_string-html')('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});

},{"./_string-html":"node_modules/core-js/modules/_string-html.js"}],"node_modules/core-js/modules/es6.string.sub.js":[function(require,module,exports) {
'use strict';
// B.2.3.13 String.prototype.sub()
require('./_string-html')('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});

},{"./_string-html":"node_modules/core-js/modules/_string-html.js"}],"node_modules/core-js/modules/es6.string.sup.js":[function(require,module,exports) {
'use strict';
// B.2.3.14 String.prototype.sup()
require('./_string-html')('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});

},{"./_string-html":"node_modules/core-js/modules/_string-html.js"}],"node_modules/core-js/modules/_typed.js":[function(require,module,exports) {

var global = require('./_global');
var hide = require('./_hide');
var uid = require('./_uid');
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};

},{"./_global":"node_modules/core-js/modules/_global.js","./_hide":"node_modules/core-js/modules/_hide.js","./_uid":"node_modules/core-js/modules/_uid.js"}],"node_modules/core-js/modules/_to-index.js":[function(require,module,exports) {
// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};

},{"./_to-integer":"node_modules/core-js/modules/_to-integer.js","./_to-length":"node_modules/core-js/modules/_to-length.js"}],"node_modules/core-js/modules/_typed-buffer.js":[function(require,module,exports) {

'use strict';
var global = require('./_global');
var DESCRIPTORS = require('./_descriptors');
var LIBRARY = require('./_library');
var $typed = require('./_typed');
var hide = require('./_hide');
var redefineAll = require('./_redefine-all');
var fails = require('./_fails');
var anInstance = require('./_an-instance');
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
var toIndex = require('./_to-index');
var gOPN = require('./_object-gopn').f;
var dP = require('./_object-dp').f;
var arrayFill = require('./_array-fill');
var setToStringTag = require('./_set-to-string-tag');
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;

},{"./_global":"node_modules/core-js/modules/_global.js","./_descriptors":"node_modules/core-js/modules/_descriptors.js","./_library":"node_modules/core-js/modules/_library.js","./_typed":"node_modules/core-js/modules/_typed.js","./_hide":"node_modules/core-js/modules/_hide.js","./_redefine-all":"node_modules/core-js/modules/_redefine-all.js","./_fails":"node_modules/core-js/modules/_fails.js","./_an-instance":"node_modules/core-js/modules/_an-instance.js","./_to-integer":"node_modules/core-js/modules/_to-integer.js","./_to-length":"node_modules/core-js/modules/_to-length.js","./_to-index":"node_modules/core-js/modules/_to-index.js","./_object-gopn":"node_modules/core-js/modules/_object-gopn.js","./_object-dp":"node_modules/core-js/modules/_object-dp.js","./_array-fill":"node_modules/core-js/modules/_array-fill.js","./_set-to-string-tag":"node_modules/core-js/modules/_set-to-string-tag.js"}],"node_modules/core-js/modules/es6.typed.array-buffer.js":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $typed = require('./_typed');
var buffer = require('./_typed-buffer');
var anObject = require('./_an-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
var isObject = require('./_is-object');
var ArrayBuffer = require('./_global').ArrayBuffer;
var speciesConstructor = require('./_species-constructor');
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * require('./_fails')(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var fin = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < fin) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

require('./_set-species')(ARRAY_BUFFER);

},{"./_export":"node_modules/core-js/modules/_export.js","./_typed":"node_modules/core-js/modules/_typed.js","./_typed-buffer":"node_modules/core-js/modules/_typed-buffer.js","./_an-object":"node_modules/core-js/modules/_an-object.js","./_to-absolute-index":"node_modules/core-js/modules/_to-absolute-index.js","./_to-length":"node_modules/core-js/modules/_to-length.js","./_is-object":"node_modules/core-js/modules/_is-object.js","./_global":"node_modules/core-js/modules/_global.js","./_species-constructor":"node_modules/core-js/modules/_species-constructor.js","./_fails":"node_modules/core-js/modules/_fails.js","./_set-species":"node_modules/core-js/modules/_set-species.js"}],"node_modules/core-js/modules/_typed-array.js":[function(require,module,exports) {
var global = arguments[3];
'use strict';
if (require('./_descriptors')) {
  var LIBRARY = require('./_library');
  var global = require('./_global');
  var fails = require('./_fails');
  var $export = require('./_export');
  var $typed = require('./_typed');
  var $buffer = require('./_typed-buffer');
  var ctx = require('./_ctx');
  var anInstance = require('./_an-instance');
  var propertyDesc = require('./_property-desc');
  var hide = require('./_hide');
  var redefineAll = require('./_redefine-all');
  var toInteger = require('./_to-integer');
  var toLength = require('./_to-length');
  var toIndex = require('./_to-index');
  var toAbsoluteIndex = require('./_to-absolute-index');
  var toPrimitive = require('./_to-primitive');
  var has = require('./_has');
  var classof = require('./_classof');
  var isObject = require('./_is-object');
  var toObject = require('./_to-object');
  var isArrayIter = require('./_is-array-iter');
  var create = require('./_object-create');
  var getPrototypeOf = require('./_object-gpo');
  var gOPN = require('./_object-gopn').f;
  var getIterFn = require('./core.get-iterator-method');
  var uid = require('./_uid');
  var wks = require('./_wks');
  var createArrayMethod = require('./_array-methods');
  var createArrayIncludes = require('./_array-includes');
  var speciesConstructor = require('./_species-constructor');
  var ArrayIterators = require('./es6.array.iterator');
  var Iterators = require('./_iterators');
  var $iterDetect = require('./_iter-detect');
  var setSpecies = require('./_set-species');
  var arrayFill = require('./_array-fill');
  var arrayCopyWithin = require('./_array-copy-within');
  var $DP = require('./_object-dp');
  var $GOPD = require('./_object-gopd');
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () { return this._d[internal]; } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      } O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/* ...items */) {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) { // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      } return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ) {
      target[key] = desc.value;
      return target;
    } return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () { /* noop */ },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () { return this[TYPED_ARRAY]; }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () { return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () { /* empty */ };

},{"./_descriptors":"node_modules/core-js/modules/_descriptors.js","./_library":"node_modules/core-js/modules/_library.js","./_global":"node_modules/core-js/modules/_global.js","./_fails":"node_modules/core-js/modules/_fails.js","./_export":"node_modules/core-js/modules/_export.js","./_typed":"node_modules/core-js/modules/_typed.js","./_typed-buffer":"node_modules/core-js/modules/_typed-buffer.js","./_ctx":"node_modules/core-js/modules/_ctx.js","./_an-instance":"node_modules/core-js/modules/_an-instance.js","./_property-desc":"node_modules/core-js/modules/_property-desc.js","./_hide":"node_modules/core-js/modules/_hide.js","./_redefine-all":"node_modules/core-js/modules/_redefine-all.js","./_to-integer":"node_modules/core-js/modules/_to-integer.js","./_to-length":"node_modules/core-js/modules/_to-length.js","./_to-index":"node_modules/core-js/modules/_to-index.js","./_to-absolute-index":"node_modules/core-js/modules/_to-absolute-index.js","./_to-primitive":"node_modules/core-js/modules/_to-primitive.js","./_has":"node_modules/core-js/modules/_has.js","./_classof":"node_modules/core-js/modules/_classof.js","./_is-object":"node_modules/core-js/modules/_is-object.js","./_to-object":"node_modules/core-js/modules/_to-object.js","./_is-array-iter":"node_modules/core-js/modules/_is-array-iter.js","./_object-create":"node_modules/core-js/modules/_object-create.js","./_object-gpo":"node_modules/core-js/modules/_object-gpo.js","./_object-gopn":"node_modules/core-js/modules/_object-gopn.js","./core.get-iterator-method":"node_modules/core-js/modules/core.get-iterator-method.js","./_uid":"node_modules/core-js/modules/_uid.js","./_wks":"node_modules/core-js/modules/_wks.js","./_array-methods":"node_modules/core-js/modules/_array-methods.js","./_array-includes":"node_modules/core-js/modules/_array-includes.js","./_species-constructor":"node_modules/core-js/modules/_species-constructor.js","./es6.array.iterator":"node_modules/core-js/modules/es6.array.iterator.js","./_iterators":"node_modules/core-js/modules/_iterators.js","./_iter-detect":"node_modules/core-js/modules/_iter-detect.js","./_set-species":"node_modules/core-js/modules/_set-species.js","./_array-fill":"node_modules/core-js/modules/_array-fill.js","./_array-copy-within":"node_modules/core-js/modules/_array-copy-within.js","./_object-dp":"node_modules/core-js/modules/_object-dp.js","./_object-gopd":"node_modules/core-js/modules/_object-gopd.js"}],"node_modules/core-js/modules/es6.typed.int8-array.js":[function(require,module,exports) {
require('./_typed-array')('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":"node_modules/core-js/modules/_typed-array.js"}],"node_modules/core-js/modules/es6.typed.uint8-array.js":[function(require,module,exports) {
require('./_typed-array')('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":"node_modules/core-js/modules/_typed-array.js"}],"node_modules/core-js/modules/es6.typed.uint8-clamped-array.js":[function(require,module,exports) {
require('./_typed-array')('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);

},{"./_typed-array":"node_modules/core-js/modules/_typed-array.js"}],"node_modules/core-js/modules/es6.typed.int16-array.js":[function(require,module,exports) {
require('./_typed-array')('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":"node_modules/core-js/modules/_typed-array.js"}],"node_modules/core-js/modules/es6.typed.uint16-array.js":[function(require,module,exports) {
require('./_typed-array')('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":"node_modules/core-js/modules/_typed-array.js"}],"node_modules/core-js/modules/es6.typed.int32-array.js":[function(require,module,exports) {
require('./_typed-array')('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":"node_modules/core-js/modules/_typed-array.js"}],"node_modules/core-js/modules/es6.typed.uint32-array.js":[function(require,module,exports) {
require('./_typed-array')('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":"node_modules/core-js/modules/_typed-array.js"}],"node_modules/core-js/modules/es6.typed.float32-array.js":[function(require,module,exports) {
require('./_typed-array')('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":"node_modules/core-js/modules/_typed-array.js"}],"node_modules/core-js/modules/es6.typed.float64-array.js":[function(require,module,exports) {
require('./_typed-array')('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":"node_modules/core-js/modules/_typed-array.js"}],"node_modules/core-js/modules/_collection-weak.js":[function(require,module,exports) {
'use strict';
var redefineAll = require('./_redefine-all');
var getWeak = require('./_meta').getWeak;
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var createArrayMethod = require('./_array-methods');
var $has = require('./_has');
var validate = require('./_validate-collection');
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

},{"./_redefine-all":"node_modules/core-js/modules/_redefine-all.js","./_meta":"node_modules/core-js/modules/_meta.js","./_an-object":"node_modules/core-js/modules/_an-object.js","./_is-object":"node_modules/core-js/modules/_is-object.js","./_an-instance":"node_modules/core-js/modules/_an-instance.js","./_for-of":"node_modules/core-js/modules/_for-of.js","./_array-methods":"node_modules/core-js/modules/_array-methods.js","./_has":"node_modules/core-js/modules/_has.js","./_validate-collection":"node_modules/core-js/modules/_validate-collection.js"}],"node_modules/core-js/modules/es6.weak-map.js":[function(require,module,exports) {

'use strict';
var global = require('./_global');
var each = require('./_array-methods')(0);
var redefine = require('./_redefine');
var meta = require('./_meta');
var assign = require('./_object-assign');
var weak = require('./_collection-weak');
var isObject = require('./_is-object');
var validate = require('./_validate-collection');
var NATIVE_WEAK_MAP = require('./_validate-collection');
var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (NATIVE_WEAK_MAP && IS_IE11) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}

},{"./_global":"node_modules/core-js/modules/_global.js","./_array-methods":"node_modules/core-js/modules/_array-methods.js","./_redefine":"node_modules/core-js/modules/_redefine.js","./_meta":"node_modules/core-js/modules/_meta.js","./_object-assign":"node_modules/core-js/modules/_object-assign.js","./_collection-weak":"node_modules/core-js/modules/_collection-weak.js","./_is-object":"node_modules/core-js/modules/_is-object.js","./_validate-collection":"node_modules/core-js/modules/_validate-collection.js","./_collection":"node_modules/core-js/modules/_collection.js"}],"node_modules/core-js/modules/es6.weak-set.js":[function(require,module,exports) {
'use strict';
var weak = require('./_collection-weak');
var validate = require('./_validate-collection');
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
require('./_collection')(WEAK_SET, function (get) {
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);

},{"./_collection-weak":"node_modules/core-js/modules/_collection-weak.js","./_validate-collection":"node_modules/core-js/modules/_validate-collection.js","./_collection":"node_modules/core-js/modules/_collection.js"}],"node_modules/core-js/modules/_flatten-into-array.js":[function(require,module,exports) {
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var isArray = require('./_is-array');
var isObject = require('./_is-object');
var toLength = require('./_to-length');
var ctx = require('./_ctx');
var IS_CONCAT_SPREADABLE = require('./_wks')('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      spreadable = false;
      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
}

module.exports = flattenIntoArray;

},{"./_is-array":"node_modules/core-js/modules/_is-array.js","./_is-object":"node_modules/core-js/modules/_is-object.js","./_to-length":"node_modules/core-js/modules/_to-length.js","./_ctx":"node_modules/core-js/modules/_ctx.js","./_wks":"node_modules/core-js/modules/_wks.js"}],"node_modules/core-js/modules/es7.array.flat-map.js":[function(require,module,exports) {
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
var $export = require('./_export');
var flattenIntoArray = require('./_flatten-into-array');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var aFunction = require('./_a-function');
var arraySpeciesCreate = require('./_array-species-create');

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

require('./_add-to-unscopables')('flatMap');

},{"./_export":"node_modules/core-js/modules/_export.js","./_flatten-into-array":"node_modules/core-js/modules/_flatten-into-array.js","./_to-object":"node_modules/core-js/modules/_to-object.js","./_to-length":"node_modules/core-js/modules/_to-length.js","./_a-function":"node_modules/core-js/modules/_a-function.js","./_array-species-create":"node_modules/core-js/modules/_array-species-create.js","./_add-to-unscopables":"node_modules/core-js/modules/_add-to-unscopables.js"}],"node_modules/core-js/modules/web.timers.js":[function(require,module,exports) {

// ie9- setTimeout & setInterval additional parameters fix
var global = require('./_global');
var $export = require('./_export');
var userAgent = require('./_user-agent');
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});

},{"./_global":"node_modules/core-js/modules/_global.js","./_export":"node_modules/core-js/modules/_export.js","./_user-agent":"node_modules/core-js/modules/_user-agent.js"}],"node_modules/core-js/modules/web.immediate.js":[function(require,module,exports) {
var $export = require('./_export');
var $task = require('./_task');
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});

},{"./_export":"node_modules/core-js/modules/_export.js","./_task":"node_modules/core-js/modules/_task.js"}],"node_modules/core-js/modules/web.dom.iterable.js":[function(require,module,exports) {

var $iterators = require('./es6.array.iterator');
var getKeys = require('./_object-keys');
var redefine = require('./_redefine');
var global = require('./_global');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var wks = require('./_wks');
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}

},{"./es6.array.iterator":"node_modules/core-js/modules/es6.array.iterator.js","./_object-keys":"node_modules/core-js/modules/_object-keys.js","./_redefine":"node_modules/core-js/modules/_redefine.js","./_global":"node_modules/core-js/modules/_global.js","./_hide":"node_modules/core-js/modules/_hide.js","./_iterators":"node_modules/core-js/modules/_iterators.js","./_wks":"node_modules/core-js/modules/_wks.js"}],"node_modules/regenerator-runtime/runtime.js":[function(require,module,exports) {
var global = arguments[3];
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() {
    return this || (typeof self === "object" && self);
  })() || Function("return this")()
);

},{}],"node_modules/three/build/three.module.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;
exports.WebGLRenderTargetCube = WebGLRenderTargetCube;
exports.WebGLRenderTarget = WebGLRenderTarget;
exports.WebGLRenderer = WebGLRenderer;
exports.FogExp2 = FogExp2;
exports.Fog = Fog;
exports.Scene = Scene;
exports.Sprite = Sprite;
exports.LOD = LOD;
exports.SkinnedMesh = SkinnedMesh;
exports.Skeleton = Skeleton;
exports.Bone = Bone;
exports.Mesh = Mesh;
exports.LineSegments = LineSegments;
exports.LineLoop = LineLoop;
exports.Line = Line;
exports.Points = Points;
exports.Group = Group;
exports.VideoTexture = VideoTexture;
exports.DataTexture = DataTexture;
exports.DataTexture3D = DataTexture3D;
exports.CompressedTexture = CompressedTexture;
exports.CubeTexture = CubeTexture;
exports.CanvasTexture = CanvasTexture;
exports.DepthTexture = DepthTexture;
exports.Texture = Texture;
exports.AnimationLoader = AnimationLoader;
exports.CompressedTextureLoader = CompressedTextureLoader;
exports.DataTextureLoader = DataTextureLoader;
exports.CubeTextureLoader = CubeTextureLoader;
exports.TextureLoader = TextureLoader;
exports.ObjectLoader = ObjectLoader;
exports.MaterialLoader = MaterialLoader;
exports.BufferGeometryLoader = BufferGeometryLoader;
exports.LoadingManager = LoadingManager;
exports.ImageLoader = ImageLoader;
exports.ImageBitmapLoader = ImageBitmapLoader;
exports.FontLoader = FontLoader;
exports.FileLoader = FileLoader;
exports.Loader = Loader;
exports.AudioLoader = AudioLoader;
exports.SpotLightShadow = SpotLightShadow;
exports.SpotLight = SpotLight;
exports.PointLight = PointLight;
exports.RectAreaLight = RectAreaLight;
exports.HemisphereLight = HemisphereLight;
exports.DirectionalLightShadow = DirectionalLightShadow;
exports.DirectionalLight = DirectionalLight;
exports.AmbientLight = AmbientLight;
exports.LightShadow = LightShadow;
exports.Light = Light;
exports.StereoCamera = StereoCamera;
exports.PerspectiveCamera = PerspectiveCamera;
exports.OrthographicCamera = OrthographicCamera;
exports.CubeCamera = CubeCamera;
exports.ArrayCamera = ArrayCamera;
exports.Camera = Camera;
exports.AudioListener = AudioListener;
exports.PositionalAudio = PositionalAudio;
exports.AudioAnalyser = AudioAnalyser;
exports.Audio = Audio;
exports.VectorKeyframeTrack = VectorKeyframeTrack;
exports.StringKeyframeTrack = StringKeyframeTrack;
exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;
exports.NumberKeyframeTrack = NumberKeyframeTrack;
exports.ColorKeyframeTrack = ColorKeyframeTrack;
exports.BooleanKeyframeTrack = BooleanKeyframeTrack;
exports.PropertyMixer = PropertyMixer;
exports.PropertyBinding = PropertyBinding;
exports.KeyframeTrack = KeyframeTrack;
exports.AnimationObjectGroup = AnimationObjectGroup;
exports.AnimationMixer = AnimationMixer;
exports.AnimationClip = AnimationClip;
exports.Uniform = Uniform;
exports.InstancedBufferGeometry = InstancedBufferGeometry;
exports.BufferGeometry = BufferGeometry;
exports.Geometry = Geometry;
exports.InterleavedBufferAttribute = InterleavedBufferAttribute;
exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;
exports.InterleavedBuffer = InterleavedBuffer;
exports.InstancedBufferAttribute = InstancedBufferAttribute;
exports.Face3 = Face3;
exports.Object3D = Object3D;
exports.Raycaster = Raycaster;
exports.Layers = Layers;
exports.EventDispatcher = EventDispatcher;
exports.Clock = Clock;
exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;
exports.LinearInterpolant = LinearInterpolant;
exports.DiscreteInterpolant = DiscreteInterpolant;
exports.CubicInterpolant = CubicInterpolant;
exports.Interpolant = Interpolant;
exports.Triangle = Triangle;
exports.Spherical = Spherical;
exports.Cylindrical = Cylindrical;
exports.Plane = Plane;
exports.Frustum = Frustum;
exports.Sphere = Sphere;
exports.Ray = Ray;
exports.Matrix4 = Matrix4;
exports.Matrix3 = Matrix3;
exports.Box3 = Box3;
exports.Box2 = Box2;
exports.Line3 = Line3;
exports.Euler = Euler;
exports.Vector4 = Vector4;
exports.Vector3 = Vector3;
exports.Vector2 = Vector2;
exports.Quaternion = Quaternion;
exports.Color = Color;
exports.ImmediateRenderObject = ImmediateRenderObject;
exports.VertexNormalsHelper = VertexNormalsHelper;
exports.SpotLightHelper = SpotLightHelper;
exports.SkeletonHelper = SkeletonHelper;
exports.PointLightHelper = PointLightHelper;
exports.RectAreaLightHelper = RectAreaLightHelper;
exports.HemisphereLightHelper = HemisphereLightHelper;
exports.GridHelper = GridHelper;
exports.PolarGridHelper = PolarGridHelper;
exports.PositionalAudioHelper = PositionalAudioHelper;
exports.FaceNormalsHelper = FaceNormalsHelper;
exports.DirectionalLightHelper = DirectionalLightHelper;
exports.CameraHelper = CameraHelper;
exports.BoxHelper = BoxHelper;
exports.Box3Helper = Box3Helper;
exports.PlaneHelper = PlaneHelper;
exports.ArrowHelper = ArrowHelper;
exports.AxesHelper = AxesHelper;
exports.Shape = Shape;
exports.Path = Path;
exports.ShapePath = ShapePath;
exports.Font = Font;
exports.CurvePath = CurvePath;
exports.Curve = Curve;
exports.WebGLUtils = WebGLUtils;
exports.WireframeGeometry = WireframeGeometry;
exports.ParametricGeometry = ParametricGeometry;
exports.ParametricBufferGeometry = ParametricBufferGeometry;
exports.TetrahedronGeometry = TetrahedronGeometry;
exports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;
exports.OctahedronGeometry = OctahedronGeometry;
exports.OctahedronBufferGeometry = OctahedronBufferGeometry;
exports.IcosahedronGeometry = IcosahedronGeometry;
exports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;
exports.DodecahedronGeometry = DodecahedronGeometry;
exports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;
exports.PolyhedronGeometry = PolyhedronGeometry;
exports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;
exports.TubeGeometry = TubeGeometry;
exports.TubeBufferGeometry = TubeBufferGeometry;
exports.TorusKnotGeometry = TorusKnotGeometry;
exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;
exports.TorusGeometry = TorusGeometry;
exports.TorusBufferGeometry = TorusBufferGeometry;
exports.TextGeometry = TextGeometry;
exports.TextBufferGeometry = TextBufferGeometry;
exports.SphereGeometry = SphereGeometry;
exports.SphereBufferGeometry = SphereBufferGeometry;
exports.RingGeometry = RingGeometry;
exports.RingBufferGeometry = RingBufferGeometry;
exports.PlaneGeometry = PlaneGeometry;
exports.PlaneBufferGeometry = PlaneBufferGeometry;
exports.LatheGeometry = LatheGeometry;
exports.LatheBufferGeometry = LatheBufferGeometry;
exports.ShapeGeometry = ShapeGeometry;
exports.ShapeBufferGeometry = ShapeBufferGeometry;
exports.ExtrudeGeometry = ExtrudeGeometry;
exports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;
exports.EdgesGeometry = EdgesGeometry;
exports.ConeGeometry = ConeGeometry;
exports.ConeBufferGeometry = ConeBufferGeometry;
exports.CylinderGeometry = CylinderGeometry;
exports.CylinderBufferGeometry = CylinderBufferGeometry;
exports.CircleGeometry = CircleGeometry;
exports.CircleBufferGeometry = CircleBufferGeometry;
exports.CubeGeometry = exports.BoxGeometry = BoxGeometry;
exports.BoxBufferGeometry = BoxBufferGeometry;
exports.ShadowMaterial = ShadowMaterial;
exports.SpriteMaterial = SpriteMaterial;
exports.RawShaderMaterial = RawShaderMaterial;
exports.ShaderMaterial = ShaderMaterial;
exports.PointsMaterial = PointsMaterial;
exports.MeshPhysicalMaterial = MeshPhysicalMaterial;
exports.MeshStandardMaterial = MeshStandardMaterial;
exports.MeshPhongMaterial = MeshPhongMaterial;
exports.MeshToonMaterial = MeshToonMaterial;
exports.MeshNormalMaterial = MeshNormalMaterial;
exports.MeshLambertMaterial = MeshLambertMaterial;
exports.MeshDepthMaterial = MeshDepthMaterial;
exports.MeshDistanceMaterial = MeshDistanceMaterial;
exports.MeshBasicMaterial = MeshBasicMaterial;
exports.MeshMatcapMaterial = MeshMatcapMaterial;
exports.LineDashedMaterial = LineDashedMaterial;
exports.LineBasicMaterial = LineBasicMaterial;
exports.Material = Material;
exports.Float64BufferAttribute = Float64BufferAttribute;
exports.Float32BufferAttribute = Float32BufferAttribute;
exports.Uint32BufferAttribute = Uint32BufferAttribute;
exports.Int32BufferAttribute = Int32BufferAttribute;
exports.Uint16BufferAttribute = Uint16BufferAttribute;
exports.Int16BufferAttribute = Int16BufferAttribute;
exports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;
exports.Uint8BufferAttribute = Uint8BufferAttribute;
exports.Int8BufferAttribute = Int8BufferAttribute;
exports.BufferAttribute = BufferAttribute;
exports.ArcCurve = ArcCurve;
exports.CatmullRomCurve3 = CatmullRomCurve3;
exports.CubicBezierCurve = CubicBezierCurve;
exports.CubicBezierCurve3 = CubicBezierCurve3;
exports.EllipseCurve = EllipseCurve;
exports.LineCurve = LineCurve;
exports.LineCurve3 = LineCurve3;
exports.QuadraticBezierCurve = QuadraticBezierCurve;
exports.QuadraticBezierCurve3 = QuadraticBezierCurve3;
exports.SplineCurve = SplineCurve;
exports.Face4 = Face4;
exports.MeshFaceMaterial = MeshFaceMaterial;
exports.MultiMaterial = MultiMaterial;
exports.PointCloud = PointCloud;
exports.Particle = Particle;
exports.ParticleSystem = ParticleSystem;
exports.PointCloudMaterial = PointCloudMaterial;
exports.ParticleBasicMaterial = ParticleBasicMaterial;
exports.ParticleSystemMaterial = ParticleSystemMaterial;
exports.Vertex = Vertex;
exports.DynamicBufferAttribute = DynamicBufferAttribute;
exports.Int8Attribute = Int8Attribute;
exports.Uint8Attribute = Uint8Attribute;
exports.Uint8ClampedAttribute = Uint8ClampedAttribute;
exports.Int16Attribute = Int16Attribute;
exports.Uint16Attribute = Uint16Attribute;
exports.Int32Attribute = Int32Attribute;
exports.Uint32Attribute = Uint32Attribute;
exports.Float32Attribute = Float32Attribute;
exports.Float64Attribute = Float64Attribute;
exports.ClosedSplineCurve3 = ClosedSplineCurve3;
exports.SplineCurve3 = SplineCurve3;
exports.Spline = Spline;
exports.AxisHelper = AxisHelper;
exports.BoundingBoxHelper = BoundingBoxHelper;
exports.EdgesHelper = EdgesHelper;
exports.WireframeHelper = WireframeHelper;
exports.XHRLoader = XHRLoader;
exports.BinaryTextureLoader = BinaryTextureLoader;
exports.Projector = Projector;
exports.CanvasRenderer = CanvasRenderer;
exports.JSONLoader = JSONLoader;
exports.LensFlare = LensFlare;
exports.AlphaFormat = exports.UnsignedInt248Type = exports.UnsignedShort565Type = exports.UnsignedShort5551Type = exports.UnsignedShort4444Type = exports.HalfFloatType = exports.FloatType = exports.UnsignedIntType = exports.IntType = exports.UnsignedShortType = exports.ShortType = exports.ByteType = exports.UnsignedByteType = exports.LinearMipMapLinearFilter = exports.LinearMipMapNearestFilter = exports.LinearFilter = exports.NearestMipMapLinearFilter = exports.NearestMipMapNearestFilter = exports.NearestFilter = exports.MirroredRepeatWrapping = exports.ClampToEdgeWrapping = exports.RepeatWrapping = exports.CubeUVRefractionMapping = exports.CubeUVReflectionMapping = exports.SphericalReflectionMapping = exports.EquirectangularRefractionMapping = exports.EquirectangularReflectionMapping = exports.CubeRefractionMapping = exports.CubeReflectionMapping = exports.UVMapping = exports.ACESFilmicToneMapping = exports.CineonToneMapping = exports.Uncharted2ToneMapping = exports.ReinhardToneMapping = exports.LinearToneMapping = exports.NoToneMapping = exports.AddOperation = exports.MixOperation = exports.MultiplyOperation = exports.NotEqualDepth = exports.GreaterDepth = exports.GreaterEqualDepth = exports.EqualDepth = exports.LessEqualDepth = exports.LessDepth = exports.AlwaysDepth = exports.NeverDepth = exports.SrcAlphaSaturateFactor = exports.OneMinusDstColorFactor = exports.DstColorFactor = exports.OneMinusDstAlphaFactor = exports.DstAlphaFactor = exports.OneMinusSrcAlphaFactor = exports.SrcAlphaFactor = exports.OneMinusSrcColorFactor = exports.SrcColorFactor = exports.OneFactor = exports.ZeroFactor = exports.MaxEquation = exports.MinEquation = exports.ReverseSubtractEquation = exports.SubtractEquation = exports.AddEquation = exports.CustomBlending = exports.MultiplyBlending = exports.SubtractiveBlending = exports.AdditiveBlending = exports.NormalBlending = exports.NoBlending = exports.VertexColors = exports.FaceColors = exports.NoColors = exports.SmoothShading = exports.FlatShading = exports.DoubleSide = exports.BackSide = exports.FrontSide = exports.PCFSoftShadowMap = exports.PCFShadowMap = exports.BasicShadowMap = exports.FrontFaceDirectionCCW = exports.FrontFaceDirectionCW = exports.CullFaceFrontBack = exports.CullFaceFront = exports.CullFaceBack = exports.CullFaceNone = exports.MOUSE = exports.REVISION = exports.ShapeUtils = exports.ImageUtils = exports.Math = exports.AnimationUtils = exports.AudioContext = exports.Cache = exports.LoaderUtils = exports.DefaultLoadingManager = exports.ShaderChunk = exports.UniformsUtils = exports.UniformsLib = exports.ShaderLib = void 0;
exports.SceneUtils = exports.GeometryUtils = exports.LinePieces = exports.LineStrip = exports.ObjectSpaceNormalMap = exports.TangentSpaceNormalMap = exports.RGBADepthPacking = exports.BasicDepthPacking = exports.RGBDEncoding = exports.RGBM16Encoding = exports.RGBM7Encoding = exports.LogLuvEncoding = exports.RGBEEncoding = exports.GammaEncoding = exports.sRGBEncoding = exports.LinearEncoding = exports.TriangleFanDrawMode = exports.TriangleStripDrawMode = exports.TrianglesDrawMode = exports.WrapAroundEnding = exports.ZeroSlopeEnding = exports.ZeroCurvatureEnding = exports.InterpolateSmooth = exports.InterpolateLinear = exports.InterpolateDiscrete = exports.LoopPingPong = exports.LoopRepeat = exports.LoopOnce = exports.RGBA_ASTC_12x12_Format = exports.RGBA_ASTC_12x10_Format = exports.RGBA_ASTC_10x10_Format = exports.RGBA_ASTC_10x8_Format = exports.RGBA_ASTC_10x6_Format = exports.RGBA_ASTC_10x5_Format = exports.RGBA_ASTC_8x8_Format = exports.RGBA_ASTC_8x6_Format = exports.RGBA_ASTC_8x5_Format = exports.RGBA_ASTC_6x6_Format = exports.RGBA_ASTC_6x5_Format = exports.RGBA_ASTC_5x5_Format = exports.RGBA_ASTC_5x4_Format = exports.RGBA_ASTC_4x4_Format = exports.RGB_ETC1_Format = exports.RGBA_PVRTC_2BPPV1_Format = exports.RGBA_PVRTC_4BPPV1_Format = exports.RGB_PVRTC_2BPPV1_Format = exports.RGB_PVRTC_4BPPV1_Format = exports.RGBA_S3TC_DXT5_Format = exports.RGBA_S3TC_DXT3_Format = exports.RGBA_S3TC_DXT1_Format = exports.RGB_S3TC_DXT1_Format = exports.RedFormat = exports.DepthStencilFormat = exports.DepthFormat = exports.RGBEFormat = exports.LuminanceAlphaFormat = exports.LuminanceFormat = exports.RGBAFormat = exports.RGBFormat = void 0;

// Polyfills
if (Number.EPSILON === undefined) {
  Number.EPSILON = Math.pow(2, -52);
}

if (Number.isInteger === undefined) {
  // Missing in IE
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger
  Number.isInteger = function (value) {
    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
  };
} //


if (Math.sign === undefined) {
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign
  Math.sign = function (x) {
    return x < 0 ? -1 : x > 0 ? 1 : +x;
  };
}

if ('name' in Function.prototype === false) {
  // Missing in IE
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name
  Object.defineProperty(Function.prototype, 'name', {
    get: function () {
      return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1];
    }
  });
}

if (Object.assign === undefined) {
  // Missing in IE
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
  (function () {
    Object.assign = function (target) {
      if (target === undefined || target === null) {
        throw new TypeError('Cannot convert undefined or null to object');
      }

      var output = Object(target);

      for (var index = 1; index < arguments.length; index++) {
        var source = arguments[index];

        if (source !== undefined && source !== null) {
          for (var nextKey in source) {
            if (Object.prototype.hasOwnProperty.call(source, nextKey)) {
              output[nextKey] = source[nextKey];
            }
          }
        }
      }

      return output;
    };
  })();
}
/**
 * https://github.com/mrdoob/eventdispatcher.js/
 */


function EventDispatcher() {}

Object.assign(EventDispatcher.prototype, {
  addEventListener: function (type, listener) {
    if (this._listeners === undefined) this._listeners = {};
    var listeners = this._listeners;

    if (listeners[type] === undefined) {
      listeners[type] = [];
    }

    if (listeners[type].indexOf(listener) === -1) {
      listeners[type].push(listener);
    }
  },
  hasEventListener: function (type, listener) {
    if (this._listeners === undefined) return false;
    var listeners = this._listeners;
    return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;
  },
  removeEventListener: function (type, listener) {
    if (this._listeners === undefined) return;
    var listeners = this._listeners;
    var listenerArray = listeners[type];

    if (listenerArray !== undefined) {
      var index = listenerArray.indexOf(listener);

      if (index !== -1) {
        listenerArray.splice(index, 1);
      }
    }
  },
  dispatchEvent: function (event) {
    if (this._listeners === undefined) return;
    var listeners = this._listeners;
    var listenerArray = listeners[event.type];

    if (listenerArray !== undefined) {
      event.target = this;
      var array = listenerArray.slice(0);

      for (var i = 0, l = array.length; i < l; i++) {
        array[i].call(this, event);
      }
    }
  }
});
var REVISION = '102';
exports.REVISION = REVISION;
var MOUSE = {
  LEFT: 0,
  MIDDLE: 1,
  RIGHT: 2
};
exports.MOUSE = MOUSE;
var CullFaceNone = 0;
exports.CullFaceNone = CullFaceNone;
var CullFaceBack = 1;
exports.CullFaceBack = CullFaceBack;
var CullFaceFront = 2;
exports.CullFaceFront = CullFaceFront;
var CullFaceFrontBack = 3;
exports.CullFaceFrontBack = CullFaceFrontBack;
var FrontFaceDirectionCW = 0;
exports.FrontFaceDirectionCW = FrontFaceDirectionCW;
var FrontFaceDirectionCCW = 1;
exports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;
var BasicShadowMap = 0;
exports.BasicShadowMap = BasicShadowMap;
var PCFShadowMap = 1;
exports.PCFShadowMap = PCFShadowMap;
var PCFSoftShadowMap = 2;
exports.PCFSoftShadowMap = PCFSoftShadowMap;
var FrontSide = 0;
exports.FrontSide = FrontSide;
var BackSide = 1;
exports.BackSide = BackSide;
var DoubleSide = 2;
exports.DoubleSide = DoubleSide;
var FlatShading = 1;
exports.FlatShading = FlatShading;
var SmoothShading = 2;
exports.SmoothShading = SmoothShading;
var NoColors = 0;
exports.NoColors = NoColors;
var FaceColors = 1;
exports.FaceColors = FaceColors;
var VertexColors = 2;
exports.VertexColors = VertexColors;
var NoBlending = 0;
exports.NoBlending = NoBlending;
var NormalBlending = 1;
exports.NormalBlending = NormalBlending;
var AdditiveBlending = 2;
exports.AdditiveBlending = AdditiveBlending;
var SubtractiveBlending = 3;
exports.SubtractiveBlending = SubtractiveBlending;
var MultiplyBlending = 4;
exports.MultiplyBlending = MultiplyBlending;
var CustomBlending = 5;
exports.CustomBlending = CustomBlending;
var AddEquation = 100;
exports.AddEquation = AddEquation;
var SubtractEquation = 101;
exports.SubtractEquation = SubtractEquation;
var ReverseSubtractEquation = 102;
exports.ReverseSubtractEquation = ReverseSubtractEquation;
var MinEquation = 103;
exports.MinEquation = MinEquation;
var MaxEquation = 104;
exports.MaxEquation = MaxEquation;
var ZeroFactor = 200;
exports.ZeroFactor = ZeroFactor;
var OneFactor = 201;
exports.OneFactor = OneFactor;
var SrcColorFactor = 202;
exports.SrcColorFactor = SrcColorFactor;
var OneMinusSrcColorFactor = 203;
exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;
var SrcAlphaFactor = 204;
exports.SrcAlphaFactor = SrcAlphaFactor;
var OneMinusSrcAlphaFactor = 205;
exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;
var DstAlphaFactor = 206;
exports.DstAlphaFactor = DstAlphaFactor;
var OneMinusDstAlphaFactor = 207;
exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;
var DstColorFactor = 208;
exports.DstColorFactor = DstColorFactor;
var OneMinusDstColorFactor = 209;
exports.OneMinusDstColorFactor = OneMinusDstColorFactor;
var SrcAlphaSaturateFactor = 210;
exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;
var NeverDepth = 0;
exports.NeverDepth = NeverDepth;
var AlwaysDepth = 1;
exports.AlwaysDepth = AlwaysDepth;
var LessDepth = 2;
exports.LessDepth = LessDepth;
var LessEqualDepth = 3;
exports.LessEqualDepth = LessEqualDepth;
var EqualDepth = 4;
exports.EqualDepth = EqualDepth;
var GreaterEqualDepth = 5;
exports.GreaterEqualDepth = GreaterEqualDepth;
var GreaterDepth = 6;
exports.GreaterDepth = GreaterDepth;
var NotEqualDepth = 7;
exports.NotEqualDepth = NotEqualDepth;
var MultiplyOperation = 0;
exports.MultiplyOperation = MultiplyOperation;
var MixOperation = 1;
exports.MixOperation = MixOperation;
var AddOperation = 2;
exports.AddOperation = AddOperation;
var NoToneMapping = 0;
exports.NoToneMapping = NoToneMapping;
var LinearToneMapping = 1;
exports.LinearToneMapping = LinearToneMapping;
var ReinhardToneMapping = 2;
exports.ReinhardToneMapping = ReinhardToneMapping;
var Uncharted2ToneMapping = 3;
exports.Uncharted2ToneMapping = Uncharted2ToneMapping;
var CineonToneMapping = 4;
exports.CineonToneMapping = CineonToneMapping;
var ACESFilmicToneMapping = 5;
exports.ACESFilmicToneMapping = ACESFilmicToneMapping;
var UVMapping = 300;
exports.UVMapping = UVMapping;
var CubeReflectionMapping = 301;
exports.CubeReflectionMapping = CubeReflectionMapping;
var CubeRefractionMapping = 302;
exports.CubeRefractionMapping = CubeRefractionMapping;
var EquirectangularReflectionMapping = 303;
exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;
var EquirectangularRefractionMapping = 304;
exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;
var SphericalReflectionMapping = 305;
exports.SphericalReflectionMapping = SphericalReflectionMapping;
var CubeUVReflectionMapping = 306;
exports.CubeUVReflectionMapping = CubeUVReflectionMapping;
var CubeUVRefractionMapping = 307;
exports.CubeUVRefractionMapping = CubeUVRefractionMapping;
var RepeatWrapping = 1000;
exports.RepeatWrapping = RepeatWrapping;
var ClampToEdgeWrapping = 1001;
exports.ClampToEdgeWrapping = ClampToEdgeWrapping;
var MirroredRepeatWrapping = 1002;
exports.MirroredRepeatWrapping = MirroredRepeatWrapping;
var NearestFilter = 1003;
exports.NearestFilter = NearestFilter;
var NearestMipMapNearestFilter = 1004;
exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;
var NearestMipMapLinearFilter = 1005;
exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;
var LinearFilter = 1006;
exports.LinearFilter = LinearFilter;
var LinearMipMapNearestFilter = 1007;
exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;
var LinearMipMapLinearFilter = 1008;
exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;
var UnsignedByteType = 1009;
exports.UnsignedByteType = UnsignedByteType;
var ByteType = 1010;
exports.ByteType = ByteType;
var ShortType = 1011;
exports.ShortType = ShortType;
var UnsignedShortType = 1012;
exports.UnsignedShortType = UnsignedShortType;
var IntType = 1013;
exports.IntType = IntType;
var UnsignedIntType = 1014;
exports.UnsignedIntType = UnsignedIntType;
var FloatType = 1015;
exports.FloatType = FloatType;
var HalfFloatType = 1016;
exports.HalfFloatType = HalfFloatType;
var UnsignedShort4444Type = 1017;
exports.UnsignedShort4444Type = UnsignedShort4444Type;
var UnsignedShort5551Type = 1018;
exports.UnsignedShort5551Type = UnsignedShort5551Type;
var UnsignedShort565Type = 1019;
exports.UnsignedShort565Type = UnsignedShort565Type;
var UnsignedInt248Type = 1020;
exports.UnsignedInt248Type = UnsignedInt248Type;
var AlphaFormat = 1021;
exports.AlphaFormat = AlphaFormat;
var RGBFormat = 1022;
exports.RGBFormat = RGBFormat;
var RGBAFormat = 1023;
exports.RGBAFormat = RGBAFormat;
var LuminanceFormat = 1024;
exports.LuminanceFormat = LuminanceFormat;
var LuminanceAlphaFormat = 1025;
exports.LuminanceAlphaFormat = LuminanceAlphaFormat;
var RGBEFormat = RGBAFormat;
exports.RGBEFormat = RGBEFormat;
var DepthFormat = 1026;
exports.DepthFormat = DepthFormat;
var DepthStencilFormat = 1027;
exports.DepthStencilFormat = DepthStencilFormat;
var RedFormat = 1028;
exports.RedFormat = RedFormat;
var RGB_S3TC_DXT1_Format = 33776;
exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;
var RGBA_S3TC_DXT1_Format = 33777;
exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;
var RGBA_S3TC_DXT3_Format = 33778;
exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;
var RGBA_S3TC_DXT5_Format = 33779;
exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;
var RGB_PVRTC_4BPPV1_Format = 35840;
exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;
var RGB_PVRTC_2BPPV1_Format = 35841;
exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;
var RGBA_PVRTC_4BPPV1_Format = 35842;
exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;
var RGBA_PVRTC_2BPPV1_Format = 35843;
exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;
var RGB_ETC1_Format = 36196;
exports.RGB_ETC1_Format = RGB_ETC1_Format;
var RGBA_ASTC_4x4_Format = 37808;
exports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;
var RGBA_ASTC_5x4_Format = 37809;
exports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;
var RGBA_ASTC_5x5_Format = 37810;
exports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;
var RGBA_ASTC_6x5_Format = 37811;
exports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;
var RGBA_ASTC_6x6_Format = 37812;
exports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;
var RGBA_ASTC_8x5_Format = 37813;
exports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;
var RGBA_ASTC_8x6_Format = 37814;
exports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;
var RGBA_ASTC_8x8_Format = 37815;
exports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;
var RGBA_ASTC_10x5_Format = 37816;
exports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;
var RGBA_ASTC_10x6_Format = 37817;
exports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;
var RGBA_ASTC_10x8_Format = 37818;
exports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;
var RGBA_ASTC_10x10_Format = 37819;
exports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;
var RGBA_ASTC_12x10_Format = 37820;
exports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;
var RGBA_ASTC_12x12_Format = 37821;
exports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;
var LoopOnce = 2200;
exports.LoopOnce = LoopOnce;
var LoopRepeat = 2201;
exports.LoopRepeat = LoopRepeat;
var LoopPingPong = 2202;
exports.LoopPingPong = LoopPingPong;
var InterpolateDiscrete = 2300;
exports.InterpolateDiscrete = InterpolateDiscrete;
var InterpolateLinear = 2301;
exports.InterpolateLinear = InterpolateLinear;
var InterpolateSmooth = 2302;
exports.InterpolateSmooth = InterpolateSmooth;
var ZeroCurvatureEnding = 2400;
exports.ZeroCurvatureEnding = ZeroCurvatureEnding;
var ZeroSlopeEnding = 2401;
exports.ZeroSlopeEnding = ZeroSlopeEnding;
var WrapAroundEnding = 2402;
exports.WrapAroundEnding = WrapAroundEnding;
var TrianglesDrawMode = 0;
exports.TrianglesDrawMode = TrianglesDrawMode;
var TriangleStripDrawMode = 1;
exports.TriangleStripDrawMode = TriangleStripDrawMode;
var TriangleFanDrawMode = 2;
exports.TriangleFanDrawMode = TriangleFanDrawMode;
var LinearEncoding = 3000;
exports.LinearEncoding = LinearEncoding;
var sRGBEncoding = 3001;
exports.sRGBEncoding = sRGBEncoding;
var GammaEncoding = 3007;
exports.GammaEncoding = GammaEncoding;
var RGBEEncoding = 3002;
exports.RGBEEncoding = RGBEEncoding;
var LogLuvEncoding = 3003;
exports.LogLuvEncoding = LogLuvEncoding;
var RGBM7Encoding = 3004;
exports.RGBM7Encoding = RGBM7Encoding;
var RGBM16Encoding = 3005;
exports.RGBM16Encoding = RGBM16Encoding;
var RGBDEncoding = 3006;
exports.RGBDEncoding = RGBDEncoding;
var BasicDepthPacking = 3200;
exports.BasicDepthPacking = BasicDepthPacking;
var RGBADepthPacking = 3201;
exports.RGBADepthPacking = RGBADepthPacking;
var TangentSpaceNormalMap = 0;
exports.TangentSpaceNormalMap = TangentSpaceNormalMap;
var ObjectSpaceNormalMap = 1;
/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

exports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;
var _Math = {
  DEG2RAD: Math.PI / 180,
  RAD2DEG: 180 / Math.PI,
  generateUUID: function () {
    // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
    var lut = [];

    for (var i = 0; i < 256; i++) {
      lut[i] = (i < 16 ? '0' : '') + i.toString(16);
    }

    return function generateUUID() {
      var d0 = Math.random() * 0xffffffff | 0;
      var d1 = Math.random() * 0xffffffff | 0;
      var d2 = Math.random() * 0xffffffff | 0;
      var d3 = Math.random() * 0xffffffff | 0;
      var uuid = lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff] + '-' + lut[d1 & 0xff] + lut[d1 >> 8 & 0xff] + '-' + lut[d1 >> 16 & 0x0f | 0x40] + lut[d1 >> 24 & 0xff] + '-' + lut[d2 & 0x3f | 0x80] + lut[d2 >> 8 & 0xff] + '-' + lut[d2 >> 16 & 0xff] + lut[d2 >> 24 & 0xff] + lut[d3 & 0xff] + lut[d3 >> 8 & 0xff] + lut[d3 >> 16 & 0xff] + lut[d3 >> 24 & 0xff]; // .toUpperCase() here flattens concatenated strings to save heap memory space.

      return uuid.toUpperCase();
    };
  }(),
  clamp: function (value, min, max) {
    return Math.max(min, Math.min(max, value));
  },
  // compute euclidian modulo of m % n
  // https://en.wikipedia.org/wiki/Modulo_operation
  euclideanModulo: function (n, m) {
    return (n % m + m) % m;
  },
  // Linear mapping from range <a1, a2> to range <b1, b2>
  mapLinear: function (x, a1, a2, b1, b2) {
    return b1 + (x - a1) * (b2 - b1) / (a2 - a1);
  },
  // https://en.wikipedia.org/wiki/Linear_interpolation
  lerp: function (x, y, t) {
    return (1 - t) * x + t * y;
  },
  // http://en.wikipedia.org/wiki/Smoothstep
  smoothstep: function (x, min, max) {
    if (x <= min) return 0;
    if (x >= max) return 1;
    x = (x - min) / (max - min);
    return x * x * (3 - 2 * x);
  },
  smootherstep: function (x, min, max) {
    if (x <= min) return 0;
    if (x >= max) return 1;
    x = (x - min) / (max - min);
    return x * x * x * (x * (x * 6 - 15) + 10);
  },
  // Random integer from <low, high> interval
  randInt: function (low, high) {
    return low + Math.floor(Math.random() * (high - low + 1));
  },
  // Random float from <low, high> interval
  randFloat: function (low, high) {
    return low + Math.random() * (high - low);
  },
  // Random float from <-range/2, range/2> interval
  randFloatSpread: function (range) {
    return range * (0.5 - Math.random());
  },
  degToRad: function (degrees) {
    return degrees * _Math.DEG2RAD;
  },
  radToDeg: function (radians) {
    return radians * _Math.RAD2DEG;
  },
  isPowerOfTwo: function (value) {
    return (value & value - 1) === 0 && value !== 0;
  },
  ceilPowerOfTwo: function (value) {
    return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
  },
  floorPowerOfTwo: function (value) {
    return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
  }
};
/**
 * @author mrdoob / http://mrdoob.com/
 * @author philogb / http://blog.thejit.org/
 * @author egraether / http://egraether.com/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 */

exports.Math = _Math;

function Vector2(x, y) {
  this.x = x || 0;
  this.y = y || 0;
}

Object.defineProperties(Vector2.prototype, {
  "width": {
    get: function () {
      return this.x;
    },
    set: function (value) {
      this.x = value;
    }
  },
  "height": {
    get: function () {
      return this.y;
    },
    set: function (value) {
      this.y = value;
    }
  }
});
Object.assign(Vector2.prototype, {
  isVector2: true,
  set: function (x, y) {
    this.x = x;
    this.y = y;
    return this;
  },
  setScalar: function (scalar) {
    this.x = scalar;
    this.y = scalar;
    return this;
  },
  setX: function (x) {
    this.x = x;
    return this;
  },
  setY: function (y) {
    this.y = y;
    return this;
  },
  setComponent: function (index, value) {
    switch (index) {
      case 0:
        this.x = value;
        break;

      case 1:
        this.y = value;
        break;

      default:
        throw new Error('index is out of range: ' + index);
    }

    return this;
  },
  getComponent: function (index) {
    switch (index) {
      case 0:
        return this.x;

      case 1:
        return this.y;

      default:
        throw new Error('index is out of range: ' + index);
    }
  },
  clone: function () {
    return new this.constructor(this.x, this.y);
  },
  copy: function (v) {
    this.x = v.x;
    this.y = v.y;
    return this;
  },
  add: function (v, w) {
    if (w !== undefined) {
      console.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
      return this.addVectors(v, w);
    }

    this.x += v.x;
    this.y += v.y;
    return this;
  },
  addScalar: function (s) {
    this.x += s;
    this.y += s;
    return this;
  },
  addVectors: function (a, b) {
    this.x = a.x + b.x;
    this.y = a.y + b.y;
    return this;
  },
  addScaledVector: function (v, s) {
    this.x += v.x * s;
    this.y += v.y * s;
    return this;
  },
  sub: function (v, w) {
    if (w !== undefined) {
      console.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
      return this.subVectors(v, w);
    }

    this.x -= v.x;
    this.y -= v.y;
    return this;
  },
  subScalar: function (s) {
    this.x -= s;
    this.y -= s;
    return this;
  },
  subVectors: function (a, b) {
    this.x = a.x - b.x;
    this.y = a.y - b.y;
    return this;
  },
  multiply: function (v) {
    this.x *= v.x;
    this.y *= v.y;
    return this;
  },
  multiplyScalar: function (scalar) {
    this.x *= scalar;
    this.y *= scalar;
    return this;
  },
  divide: function (v) {
    this.x /= v.x;
    this.y /= v.y;
    return this;
  },
  divideScalar: function (scalar) {
    return this.multiplyScalar(1 / scalar);
  },
  applyMatrix3: function (m) {
    var x = this.x,
        y = this.y;
    var e = m.elements;
    this.x = e[0] * x + e[3] * y + e[6];
    this.y = e[1] * x + e[4] * y + e[7];
    return this;
  },
  min: function (v) {
    this.x = Math.min(this.x, v.x);
    this.y = Math.min(this.y, v.y);
    return this;
  },
  max: function (v) {
    this.x = Math.max(this.x, v.x);
    this.y = Math.max(this.y, v.y);
    return this;
  },
  clamp: function (min, max) {
    // assumes min < max, componentwise
    this.x = Math.max(min.x, Math.min(max.x, this.x));
    this.y = Math.max(min.y, Math.min(max.y, this.y));
    return this;
  },
  clampScalar: function () {
    var min = new Vector2();
    var max = new Vector2();
    return function clampScalar(minVal, maxVal) {
      min.set(minVal, minVal);
      max.set(maxVal, maxVal);
      return this.clamp(min, max);
    };
  }(),
  clampLength: function (min, max) {
    var length = this.length();
    return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
  },
  floor: function () {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    return this;
  },
  ceil: function () {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    return this;
  },
  round: function () {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    return this;
  },
  roundToZero: function () {
    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
    return this;
  },
  negate: function () {
    this.x = -this.x;
    this.y = -this.y;
    return this;
  },
  dot: function (v) {
    return this.x * v.x + this.y * v.y;
  },
  cross: function (v) {
    return this.x * v.y - this.y * v.x;
  },
  lengthSq: function () {
    return this.x * this.x + this.y * this.y;
  },
  length: function () {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  },
  manhattanLength: function () {
    return Math.abs(this.x) + Math.abs(this.y);
  },
  normalize: function () {
    return this.divideScalar(this.length() || 1);
  },
  angle: function () {
    // computes the angle in radians with respect to the positive x-axis
    var angle = Math.atan2(this.y, this.x);
    if (angle < 0) angle += 2 * Math.PI;
    return angle;
  },
  distanceTo: function (v) {
    return Math.sqrt(this.distanceToSquared(v));
  },
  distanceToSquared: function (v) {
    var dx = this.x - v.x,
        dy = this.y - v.y;
    return dx * dx + dy * dy;
  },
  manhattanDistanceTo: function (v) {
    return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
  },
  setLength: function (length) {
    return this.normalize().multiplyScalar(length);
  },
  lerp: function (v, alpha) {
    this.x += (v.x - this.x) * alpha;
    this.y += (v.y - this.y) * alpha;
    return this;
  },
  lerpVectors: function (v1, v2, alpha) {
    return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);
  },
  equals: function (v) {
    return v.x === this.x && v.y === this.y;
  },
  fromArray: function (array, offset) {
    if (offset === undefined) offset = 0;
    this.x = array[offset];
    this.y = array[offset + 1];
    return this;
  },
  toArray: function (array, offset) {
    if (array === undefined) array = [];
    if (offset === undefined) offset = 0;
    array[offset] = this.x;
    array[offset + 1] = this.y;
    return array;
  },
  fromBufferAttribute: function (attribute, index, offset) {
    if (offset !== undefined) {
      console.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');
    }

    this.x = attribute.getX(index);
    this.y = attribute.getY(index);
    return this;
  },
  rotateAround: function (center, angle) {
    var c = Math.cos(angle),
        s = Math.sin(angle);
    var x = this.x - center.x;
    var y = this.y - center.y;
    this.x = x * c - y * s + center.x;
    this.y = x * s + y * c + center.y;
    return this;
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author philogb / http://blog.thejit.org/
 * @author jordi_ros / http://plattsoft.com
 * @author D1plo1d / http://github.com/D1plo1d
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author timknip / http://www.floorplanner.com/
 * @author bhouston / http://clara.io
 * @author WestLangley / http://github.com/WestLangley
 */

function Matrix4() {
  this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];

  if (arguments.length > 0) {
    console.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');
  }
}

Object.assign(Matrix4.prototype, {
  isMatrix4: true,
  set: function (n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
    var te = this.elements;
    te[0] = n11;
    te[4] = n12;
    te[8] = n13;
    te[12] = n14;
    te[1] = n21;
    te[5] = n22;
    te[9] = n23;
    te[13] = n24;
    te[2] = n31;
    te[6] = n32;
    te[10] = n33;
    te[14] = n34;
    te[3] = n41;
    te[7] = n42;
    te[11] = n43;
    te[15] = n44;
    return this;
  },
  identity: function () {
    this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    return this;
  },
  clone: function () {
    return new Matrix4().fromArray(this.elements);
  },
  copy: function (m) {
    var te = this.elements;
    var me = m.elements;
    te[0] = me[0];
    te[1] = me[1];
    te[2] = me[2];
    te[3] = me[3];
    te[4] = me[4];
    te[5] = me[5];
    te[6] = me[6];
    te[7] = me[7];
    te[8] = me[8];
    te[9] = me[9];
    te[10] = me[10];
    te[11] = me[11];
    te[12] = me[12];
    te[13] = me[13];
    te[14] = me[14];
    te[15] = me[15];
    return this;
  },
  copyPosition: function (m) {
    var te = this.elements,
        me = m.elements;
    te[12] = me[12];
    te[13] = me[13];
    te[14] = me[14];
    return this;
  },
  extractBasis: function (xAxis, yAxis, zAxis) {
    xAxis.setFromMatrixColumn(this, 0);
    yAxis.setFromMatrixColumn(this, 1);
    zAxis.setFromMatrixColumn(this, 2);
    return this;
  },
  makeBasis: function (xAxis, yAxis, zAxis) {
    this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);
    return this;
  },
  extractRotation: function () {
    var v1 = new Vector3();
    return function extractRotation(m) {
      // this method does not support reflection matrices
      var te = this.elements;
      var me = m.elements;
      var scaleX = 1 / v1.setFromMatrixColumn(m, 0).length();
      var scaleY = 1 / v1.setFromMatrixColumn(m, 1).length();
      var scaleZ = 1 / v1.setFromMatrixColumn(m, 2).length();
      te[0] = me[0] * scaleX;
      te[1] = me[1] * scaleX;
      te[2] = me[2] * scaleX;
      te[3] = 0;
      te[4] = me[4] * scaleY;
      te[5] = me[5] * scaleY;
      te[6] = me[6] * scaleY;
      te[7] = 0;
      te[8] = me[8] * scaleZ;
      te[9] = me[9] * scaleZ;
      te[10] = me[10] * scaleZ;
      te[11] = 0;
      te[12] = 0;
      te[13] = 0;
      te[14] = 0;
      te[15] = 1;
      return this;
    };
  }(),
  makeRotationFromEuler: function (euler) {
    if (!(euler && euler.isEuler)) {
      console.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');
    }

    var te = this.elements;
    var x = euler.x,
        y = euler.y,
        z = euler.z;
    var a = Math.cos(x),
        b = Math.sin(x);
    var c = Math.cos(y),
        d = Math.sin(y);
    var e = Math.cos(z),
        f = Math.sin(z);

    if (euler.order === 'XYZ') {
      var ae = a * e,
          af = a * f,
          be = b * e,
          bf = b * f;
      te[0] = c * e;
      te[4] = -c * f;
      te[8] = d;
      te[1] = af + be * d;
      te[5] = ae - bf * d;
      te[9] = -b * c;
      te[2] = bf - ae * d;
      te[6] = be + af * d;
      te[10] = a * c;
    } else if (euler.order === 'YXZ') {
      var ce = c * e,
          cf = c * f,
          de = d * e,
          df = d * f;
      te[0] = ce + df * b;
      te[4] = de * b - cf;
      te[8] = a * d;
      te[1] = a * f;
      te[5] = a * e;
      te[9] = -b;
      te[2] = cf * b - de;
      te[6] = df + ce * b;
      te[10] = a * c;
    } else if (euler.order === 'ZXY') {
      var ce = c * e,
          cf = c * f,
          de = d * e,
          df = d * f;
      te[0] = ce - df * b;
      te[4] = -a * f;
      te[8] = de + cf * b;
      te[1] = cf + de * b;
      te[5] = a * e;
      te[9] = df - ce * b;
      te[2] = -a * d;
      te[6] = b;
      te[10] = a * c;
    } else if (euler.order === 'ZYX') {
      var ae = a * e,
          af = a * f,
          be = b * e,
          bf = b * f;
      te[0] = c * e;
      te[4] = be * d - af;
      te[8] = ae * d + bf;
      te[1] = c * f;
      te[5] = bf * d + ae;
      te[9] = af * d - be;
      te[2] = -d;
      te[6] = b * c;
      te[10] = a * c;
    } else if (euler.order === 'YZX') {
      var ac = a * c,
          ad = a * d,
          bc = b * c,
          bd = b * d;
      te[0] = c * e;
      te[4] = bd - ac * f;
      te[8] = bc * f + ad;
      te[1] = f;
      te[5] = a * e;
      te[9] = -b * e;
      te[2] = -d * e;
      te[6] = ad * f + bc;
      te[10] = ac - bd * f;
    } else if (euler.order === 'XZY') {
      var ac = a * c,
          ad = a * d,
          bc = b * c,
          bd = b * d;
      te[0] = c * e;
      te[4] = -f;
      te[8] = d * e;
      te[1] = ac * f + bd;
      te[5] = a * e;
      te[9] = ad * f - bc;
      te[2] = bc * f - ad;
      te[6] = b * e;
      te[10] = bd * f + ac;
    } // bottom row


    te[3] = 0;
    te[7] = 0;
    te[11] = 0; // last column

    te[12] = 0;
    te[13] = 0;
    te[14] = 0;
    te[15] = 1;
    return this;
  },
  makeRotationFromQuaternion: function () {
    var zero = new Vector3(0, 0, 0);
    var one = new Vector3(1, 1, 1);
    return function makeRotationFromQuaternion(q) {
      return this.compose(zero, q, one);
    };
  }(),
  lookAt: function () {
    var x = new Vector3();
    var y = new Vector3();
    var z = new Vector3();
    return function lookAt(eye, target, up) {
      var te = this.elements;
      z.subVectors(eye, target);

      if (z.lengthSq() === 0) {
        // eye and target are in the same position
        z.z = 1;
      }

      z.normalize();
      x.crossVectors(up, z);

      if (x.lengthSq() === 0) {
        // up and z are parallel
        if (Math.abs(up.z) === 1) {
          z.x += 0.0001;
        } else {
          z.z += 0.0001;
        }

        z.normalize();
        x.crossVectors(up, z);
      }

      x.normalize();
      y.crossVectors(z, x);
      te[0] = x.x;
      te[4] = y.x;
      te[8] = z.x;
      te[1] = x.y;
      te[5] = y.y;
      te[9] = z.y;
      te[2] = x.z;
      te[6] = y.z;
      te[10] = z.z;
      return this;
    };
  }(),
  multiply: function (m, n) {
    if (n !== undefined) {
      console.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');
      return this.multiplyMatrices(m, n);
    }

    return this.multiplyMatrices(this, m);
  },
  premultiply: function (m) {
    return this.multiplyMatrices(m, this);
  },
  multiplyMatrices: function (a, b) {
    var ae = a.elements;
    var be = b.elements;
    var te = this.elements;
    var a11 = ae[0],
        a12 = ae[4],
        a13 = ae[8],
        a14 = ae[12];
    var a21 = ae[1],
        a22 = ae[5],
        a23 = ae[9],
        a24 = ae[13];
    var a31 = ae[2],
        a32 = ae[6],
        a33 = ae[10],
        a34 = ae[14];
    var a41 = ae[3],
        a42 = ae[7],
        a43 = ae[11],
        a44 = ae[15];
    var b11 = be[0],
        b12 = be[4],
        b13 = be[8],
        b14 = be[12];
    var b21 = be[1],
        b22 = be[5],
        b23 = be[9],
        b24 = be[13];
    var b31 = be[2],
        b32 = be[6],
        b33 = be[10],
        b34 = be[14];
    var b41 = be[3],
        b42 = be[7],
        b43 = be[11],
        b44 = be[15];
    te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
    te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
    te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
    te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
    te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
    te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
    te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
    te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
    te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
    te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
    te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
    te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
    te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
    te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
    te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
    te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
    return this;
  },
  multiplyScalar: function (s) {
    var te = this.elements;
    te[0] *= s;
    te[4] *= s;
    te[8] *= s;
    te[12] *= s;
    te[1] *= s;
    te[5] *= s;
    te[9] *= s;
    te[13] *= s;
    te[2] *= s;
    te[6] *= s;
    te[10] *= s;
    te[14] *= s;
    te[3] *= s;
    te[7] *= s;
    te[11] *= s;
    te[15] *= s;
    return this;
  },
  applyToBufferAttribute: function () {
    var v1 = new Vector3();
    return function applyToBufferAttribute(attribute) {
      for (var i = 0, l = attribute.count; i < l; i++) {
        v1.x = attribute.getX(i);
        v1.y = attribute.getY(i);
        v1.z = attribute.getZ(i);
        v1.applyMatrix4(this);
        attribute.setXYZ(i, v1.x, v1.y, v1.z);
      }

      return attribute;
    };
  }(),
  determinant: function () {
    var te = this.elements;
    var n11 = te[0],
        n12 = te[4],
        n13 = te[8],
        n14 = te[12];
    var n21 = te[1],
        n22 = te[5],
        n23 = te[9],
        n24 = te[13];
    var n31 = te[2],
        n32 = te[6],
        n33 = te[10],
        n34 = te[14];
    var n41 = te[3],
        n42 = te[7],
        n43 = te[11],
        n44 = te[15]; //TODO: make this more efficient
    //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

    return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
  },
  transpose: function () {
    var te = this.elements;
    var tmp;
    tmp = te[1];
    te[1] = te[4];
    te[4] = tmp;
    tmp = te[2];
    te[2] = te[8];
    te[8] = tmp;
    tmp = te[6];
    te[6] = te[9];
    te[9] = tmp;
    tmp = te[3];
    te[3] = te[12];
    te[12] = tmp;
    tmp = te[7];
    te[7] = te[13];
    te[13] = tmp;
    tmp = te[11];
    te[11] = te[14];
    te[14] = tmp;
    return this;
  },
  setPosition: function (v) {
    var te = this.elements;
    te[12] = v.x;
    te[13] = v.y;
    te[14] = v.z;
    return this;
  },
  getInverse: function (m, throwOnDegenerate) {
    // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
    var te = this.elements,
        me = m.elements,
        n11 = me[0],
        n21 = me[1],
        n31 = me[2],
        n41 = me[3],
        n12 = me[4],
        n22 = me[5],
        n32 = me[6],
        n42 = me[7],
        n13 = me[8],
        n23 = me[9],
        n33 = me[10],
        n43 = me[11],
        n14 = me[12],
        n24 = me[13],
        n34 = me[14],
        n44 = me[15],
        t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
        t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
        t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
        t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
    var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

    if (det === 0) {
      var msg = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";

      if (throwOnDegenerate === true) {
        throw new Error(msg);
      } else {
        console.warn(msg);
      }

      return this.identity();
    }

    var detInv = 1 / det;
    te[0] = t11 * detInv;
    te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
    te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
    te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
    te[4] = t12 * detInv;
    te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
    te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
    te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
    te[8] = t13 * detInv;
    te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
    te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
    te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
    te[12] = t14 * detInv;
    te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
    te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
    te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
    return this;
  },
  scale: function (v) {
    var te = this.elements;
    var x = v.x,
        y = v.y,
        z = v.z;
    te[0] *= x;
    te[4] *= y;
    te[8] *= z;
    te[1] *= x;
    te[5] *= y;
    te[9] *= z;
    te[2] *= x;
    te[6] *= y;
    te[10] *= z;
    te[3] *= x;
    te[7] *= y;
    te[11] *= z;
    return this;
  },
  getMaxScaleOnAxis: function () {
    var te = this.elements;
    var scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
    var scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
    var scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
    return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
  },
  makeTranslation: function (x, y, z) {
    this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);
    return this;
  },
  makeRotationX: function (theta) {
    var c = Math.cos(theta),
        s = Math.sin(theta);
    this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);
    return this;
  },
  makeRotationY: function (theta) {
    var c = Math.cos(theta),
        s = Math.sin(theta);
    this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);
    return this;
  },
  makeRotationZ: function (theta) {
    var c = Math.cos(theta),
        s = Math.sin(theta);
    this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    return this;
  },
  makeRotationAxis: function (axis, angle) {
    // Based on http://www.gamedev.net/reference/articles/article1199.asp
    var c = Math.cos(angle);
    var s = Math.sin(angle);
    var t = 1 - c;
    var x = axis.x,
        y = axis.y,
        z = axis.z;
    var tx = t * x,
        ty = t * y;
    this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);
    return this;
  },
  makeScale: function (x, y, z) {
    this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);
    return this;
  },
  makeShear: function (x, y, z) {
    this.set(1, y, z, 0, x, 1, z, 0, x, y, 1, 0, 0, 0, 0, 1);
    return this;
  },
  compose: function (position, quaternion, scale) {
    var te = this.elements;
    var x = quaternion._x,
        y = quaternion._y,
        z = quaternion._z,
        w = quaternion._w;
    var x2 = x + x,
        y2 = y + y,
        z2 = z + z;
    var xx = x * x2,
        xy = x * y2,
        xz = x * z2;
    var yy = y * y2,
        yz = y * z2,
        zz = z * z2;
    var wx = w * x2,
        wy = w * y2,
        wz = w * z2;
    var sx = scale.x,
        sy = scale.y,
        sz = scale.z;
    te[0] = (1 - (yy + zz)) * sx;
    te[1] = (xy + wz) * sx;
    te[2] = (xz - wy) * sx;
    te[3] = 0;
    te[4] = (xy - wz) * sy;
    te[5] = (1 - (xx + zz)) * sy;
    te[6] = (yz + wx) * sy;
    te[7] = 0;
    te[8] = (xz + wy) * sz;
    te[9] = (yz - wx) * sz;
    te[10] = (1 - (xx + yy)) * sz;
    te[11] = 0;
    te[12] = position.x;
    te[13] = position.y;
    te[14] = position.z;
    te[15] = 1;
    return this;
  },
  decompose: function () {
    var vector = new Vector3();
    var matrix = new Matrix4();
    return function decompose(position, quaternion, scale) {
      var te = this.elements;
      var sx = vector.set(te[0], te[1], te[2]).length();
      var sy = vector.set(te[4], te[5], te[6]).length();
      var sz = vector.set(te[8], te[9], te[10]).length(); // if determine is negative, we need to invert one scale

      var det = this.determinant();
      if (det < 0) sx = -sx;
      position.x = te[12];
      position.y = te[13];
      position.z = te[14]; // scale the rotation part

      matrix.copy(this);
      var invSX = 1 / sx;
      var invSY = 1 / sy;
      var invSZ = 1 / sz;
      matrix.elements[0] *= invSX;
      matrix.elements[1] *= invSX;
      matrix.elements[2] *= invSX;
      matrix.elements[4] *= invSY;
      matrix.elements[5] *= invSY;
      matrix.elements[6] *= invSY;
      matrix.elements[8] *= invSZ;
      matrix.elements[9] *= invSZ;
      matrix.elements[10] *= invSZ;
      quaternion.setFromRotationMatrix(matrix);
      scale.x = sx;
      scale.y = sy;
      scale.z = sz;
      return this;
    };
  }(),
  makePerspective: function (left, right, top, bottom, near, far) {
    if (far === undefined) {
      console.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');
    }

    var te = this.elements;
    var x = 2 * near / (right - left);
    var y = 2 * near / (top - bottom);
    var a = (right + left) / (right - left);
    var b = (top + bottom) / (top - bottom);
    var c = -(far + near) / (far - near);
    var d = -2 * far * near / (far - near);
    te[0] = x;
    te[4] = 0;
    te[8] = a;
    te[12] = 0;
    te[1] = 0;
    te[5] = y;
    te[9] = b;
    te[13] = 0;
    te[2] = 0;
    te[6] = 0;
    te[10] = c;
    te[14] = d;
    te[3] = 0;
    te[7] = 0;
    te[11] = -1;
    te[15] = 0;
    return this;
  },
  makeOrthographic: function (left, right, top, bottom, near, far) {
    var te = this.elements;
    var w = 1.0 / (right - left);
    var h = 1.0 / (top - bottom);
    var p = 1.0 / (far - near);
    var x = (right + left) * w;
    var y = (top + bottom) * h;
    var z = (far + near) * p;
    te[0] = 2 * w;
    te[4] = 0;
    te[8] = 0;
    te[12] = -x;
    te[1] = 0;
    te[5] = 2 * h;
    te[9] = 0;
    te[13] = -y;
    te[2] = 0;
    te[6] = 0;
    te[10] = -2 * p;
    te[14] = -z;
    te[3] = 0;
    te[7] = 0;
    te[11] = 0;
    te[15] = 1;
    return this;
  },
  equals: function (matrix) {
    var te = this.elements;
    var me = matrix.elements;

    for (var i = 0; i < 16; i++) {
      if (te[i] !== me[i]) return false;
    }

    return true;
  },
  fromArray: function (array, offset) {
    if (offset === undefined) offset = 0;

    for (var i = 0; i < 16; i++) {
      this.elements[i] = array[i + offset];
    }

    return this;
  },
  toArray: function (array, offset) {
    if (array === undefined) array = [];
    if (offset === undefined) offset = 0;
    var te = this.elements;
    array[offset] = te[0];
    array[offset + 1] = te[1];
    array[offset + 2] = te[2];
    array[offset + 3] = te[3];
    array[offset + 4] = te[4];
    array[offset + 5] = te[5];
    array[offset + 6] = te[6];
    array[offset + 7] = te[7];
    array[offset + 8] = te[8];
    array[offset + 9] = te[9];
    array[offset + 10] = te[10];
    array[offset + 11] = te[11];
    array[offset + 12] = te[12];
    array[offset + 13] = te[13];
    array[offset + 14] = te[14];
    array[offset + 15] = te[15];
    return array;
  }
});
/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://clara.io
 */

function Quaternion(x, y, z, w) {
  this._x = x || 0;
  this._y = y || 0;
  this._z = z || 0;
  this._w = w !== undefined ? w : 1;
}

Object.assign(Quaternion, {
  slerp: function (qa, qb, qm, t) {
    return qm.copy(qa).slerp(qb, t);
  },
  slerpFlat: function (dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
    // fuzz-free, array-based Quaternion SLERP operation
    var x0 = src0[srcOffset0 + 0],
        y0 = src0[srcOffset0 + 1],
        z0 = src0[srcOffset0 + 2],
        w0 = src0[srcOffset0 + 3],
        x1 = src1[srcOffset1 + 0],
        y1 = src1[srcOffset1 + 1],
        z1 = src1[srcOffset1 + 2],
        w1 = src1[srcOffset1 + 3];

    if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
      var s = 1 - t,
          cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
          dir = cos >= 0 ? 1 : -1,
          sqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:

      if (sqrSin > Number.EPSILON) {
        var sin = Math.sqrt(sqrSin),
            len = Math.atan2(sin, cos * dir);
        s = Math.sin(s * len) / sin;
        t = Math.sin(t * len) / sin;
      }

      var tDir = t * dir;
      x0 = x0 * s + x1 * tDir;
      y0 = y0 * s + y1 * tDir;
      z0 = z0 * s + z1 * tDir;
      w0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:

      if (s === 1 - t) {
        var f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
        x0 *= f;
        y0 *= f;
        z0 *= f;
        w0 *= f;
      }
    }

    dst[dstOffset] = x0;
    dst[dstOffset + 1] = y0;
    dst[dstOffset + 2] = z0;
    dst[dstOffset + 3] = w0;
  }
});
Object.defineProperties(Quaternion.prototype, {
  x: {
    get: function () {
      return this._x;
    },
    set: function (value) {
      this._x = value;
      this.onChangeCallback();
    }
  },
  y: {
    get: function () {
      return this._y;
    },
    set: function (value) {
      this._y = value;
      this.onChangeCallback();
    }
  },
  z: {
    get: function () {
      return this._z;
    },
    set: function (value) {
      this._z = value;
      this.onChangeCallback();
    }
  },
  w: {
    get: function () {
      return this._w;
    },
    set: function (value) {
      this._w = value;
      this.onChangeCallback();
    }
  }
});
Object.assign(Quaternion.prototype, {
  isQuaternion: true,
  set: function (x, y, z, w) {
    this._x = x;
    this._y = y;
    this._z = z;
    this._w = w;
    this.onChangeCallback();
    return this;
  },
  clone: function () {
    return new this.constructor(this._x, this._y, this._z, this._w);
  },
  copy: function (quaternion) {
    this._x = quaternion.x;
    this._y = quaternion.y;
    this._z = quaternion.z;
    this._w = quaternion.w;
    this.onChangeCallback();
    return this;
  },
  setFromEuler: function (euler, update) {
    if (!(euler && euler.isEuler)) {
      throw new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');
    }

    var x = euler._x,
        y = euler._y,
        z = euler._z,
        order = euler.order; // http://www.mathworks.com/matlabcentral/fileexchange/
    // 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
    //	content/SpinCalc.m

    var cos = Math.cos;
    var sin = Math.sin;
    var c1 = cos(x / 2);
    var c2 = cos(y / 2);
    var c3 = cos(z / 2);
    var s1 = sin(x / 2);
    var s2 = sin(y / 2);
    var s3 = sin(z / 2);

    if (order === 'XYZ') {
      this._x = s1 * c2 * c3 + c1 * s2 * s3;
      this._y = c1 * s2 * c3 - s1 * c2 * s3;
      this._z = c1 * c2 * s3 + s1 * s2 * c3;
      this._w = c1 * c2 * c3 - s1 * s2 * s3;
    } else if (order === 'YXZ') {
      this._x = s1 * c2 * c3 + c1 * s2 * s3;
      this._y = c1 * s2 * c3 - s1 * c2 * s3;
      this._z = c1 * c2 * s3 - s1 * s2 * c3;
      this._w = c1 * c2 * c3 + s1 * s2 * s3;
    } else if (order === 'ZXY') {
      this._x = s1 * c2 * c3 - c1 * s2 * s3;
      this._y = c1 * s2 * c3 + s1 * c2 * s3;
      this._z = c1 * c2 * s3 + s1 * s2 * c3;
      this._w = c1 * c2 * c3 - s1 * s2 * s3;
    } else if (order === 'ZYX') {
      this._x = s1 * c2 * c3 - c1 * s2 * s3;
      this._y = c1 * s2 * c3 + s1 * c2 * s3;
      this._z = c1 * c2 * s3 - s1 * s2 * c3;
      this._w = c1 * c2 * c3 + s1 * s2 * s3;
    } else if (order === 'YZX') {
      this._x = s1 * c2 * c3 + c1 * s2 * s3;
      this._y = c1 * s2 * c3 + s1 * c2 * s3;
      this._z = c1 * c2 * s3 - s1 * s2 * c3;
      this._w = c1 * c2 * c3 - s1 * s2 * s3;
    } else if (order === 'XZY') {
      this._x = s1 * c2 * c3 - c1 * s2 * s3;
      this._y = c1 * s2 * c3 - s1 * c2 * s3;
      this._z = c1 * c2 * s3 + s1 * s2 * c3;
      this._w = c1 * c2 * c3 + s1 * s2 * s3;
    }

    if (update !== false) this.onChangeCallback();
    return this;
  },
  setFromAxisAngle: function (axis, angle) {
    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
    // assumes axis is normalized
    var halfAngle = angle / 2,
        s = Math.sin(halfAngle);
    this._x = axis.x * s;
    this._y = axis.y * s;
    this._z = axis.z * s;
    this._w = Math.cos(halfAngle);
    this.onChangeCallback();
    return this;
  },
  setFromRotationMatrix: function (m) {
    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
    var te = m.elements,
        m11 = te[0],
        m12 = te[4],
        m13 = te[8],
        m21 = te[1],
        m22 = te[5],
        m23 = te[9],
        m31 = te[2],
        m32 = te[6],
        m33 = te[10],
        trace = m11 + m22 + m33,
        s;

    if (trace > 0) {
      s = 0.5 / Math.sqrt(trace + 1.0);
      this._w = 0.25 / s;
      this._x = (m32 - m23) * s;
      this._y = (m13 - m31) * s;
      this._z = (m21 - m12) * s;
    } else if (m11 > m22 && m11 > m33) {
      s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);
      this._w = (m32 - m23) / s;
      this._x = 0.25 * s;
      this._y = (m12 + m21) / s;
      this._z = (m13 + m31) / s;
    } else if (m22 > m33) {
      s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);
      this._w = (m13 - m31) / s;
      this._x = (m12 + m21) / s;
      this._y = 0.25 * s;
      this._z = (m23 + m32) / s;
    } else {
      s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);
      this._w = (m21 - m12) / s;
      this._x = (m13 + m31) / s;
      this._y = (m23 + m32) / s;
      this._z = 0.25 * s;
    }

    this.onChangeCallback();
    return this;
  },
  setFromUnitVectors: function () {
    // assumes direction vectors vFrom and vTo are normalized
    var v1 = new Vector3();
    var r;
    var EPS = 0.000001;
    return function setFromUnitVectors(vFrom, vTo) {
      if (v1 === undefined) v1 = new Vector3();
      r = vFrom.dot(vTo) + 1;

      if (r < EPS) {
        r = 0;

        if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
          v1.set(-vFrom.y, vFrom.x, 0);
        } else {
          v1.set(0, -vFrom.z, vFrom.y);
        }
      } else {
        v1.crossVectors(vFrom, vTo);
      }

      this._x = v1.x;
      this._y = v1.y;
      this._z = v1.z;
      this._w = r;
      return this.normalize();
    };
  }(),
  angleTo: function (q) {
    return 2 * Math.acos(Math.abs(_Math.clamp(this.dot(q), -1, 1)));
  },
  rotateTowards: function (q, step) {
    var angle = this.angleTo(q);
    if (angle === 0) return this;
    var t = Math.min(1, step / angle);
    this.slerp(q, t);
    return this;
  },
  inverse: function () {
    // quaternion is assumed to have unit length
    return this.conjugate();
  },
  conjugate: function () {
    this._x *= -1;
    this._y *= -1;
    this._z *= -1;
    this.onChangeCallback();
    return this;
  },
  dot: function (v) {
    return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
  },
  lengthSq: function () {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  },
  length: function () {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  },
  normalize: function () {
    var l = this.length();

    if (l === 0) {
      this._x = 0;
      this._y = 0;
      this._z = 0;
      this._w = 1;
    } else {
      l = 1 / l;
      this._x = this._x * l;
      this._y = this._y * l;
      this._z = this._z * l;
      this._w = this._w * l;
    }

    this.onChangeCallback();
    return this;
  },
  multiply: function (q, p) {
    if (p !== undefined) {
      console.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');
      return this.multiplyQuaternions(q, p);
    }

    return this.multiplyQuaternions(this, q);
  },
  premultiply: function (q) {
    return this.multiplyQuaternions(q, this);
  },
  multiplyQuaternions: function (a, b) {
    // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
    var qax = a._x,
        qay = a._y,
        qaz = a._z,
        qaw = a._w;
    var qbx = b._x,
        qby = b._y,
        qbz = b._z,
        qbw = b._w;
    this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
    this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
    this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
    this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
    this.onChangeCallback();
    return this;
  },
  slerp: function (qb, t) {
    if (t === 0) return this;
    if (t === 1) return this.copy(qb);
    var x = this._x,
        y = this._y,
        z = this._z,
        w = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

    var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

    if (cosHalfTheta < 0) {
      this._w = -qb._w;
      this._x = -qb._x;
      this._y = -qb._y;
      this._z = -qb._z;
      cosHalfTheta = -cosHalfTheta;
    } else {
      this.copy(qb);
    }

    if (cosHalfTheta >= 1.0) {
      this._w = w;
      this._x = x;
      this._y = y;
      this._z = z;
      return this;
    }

    var sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

    if (sqrSinHalfTheta <= Number.EPSILON) {
      var s = 1 - t;
      this._w = s * w + t * this._w;
      this._x = s * x + t * this._x;
      this._y = s * y + t * this._y;
      this._z = s * z + t * this._z;
      return this.normalize();
    }

    var sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
    var halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
    var ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,
        ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
    this._w = w * ratioA + this._w * ratioB;
    this._x = x * ratioA + this._x * ratioB;
    this._y = y * ratioA + this._y * ratioB;
    this._z = z * ratioA + this._z * ratioB;
    this.onChangeCallback();
    return this;
  },
  equals: function (quaternion) {
    return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
  },
  fromArray: function (array, offset) {
    if (offset === undefined) offset = 0;
    this._x = array[offset];
    this._y = array[offset + 1];
    this._z = array[offset + 2];
    this._w = array[offset + 3];
    this.onChangeCallback();
    return this;
  },
  toArray: function (array, offset) {
    if (array === undefined) array = [];
    if (offset === undefined) offset = 0;
    array[offset] = this._x;
    array[offset + 1] = this._y;
    array[offset + 2] = this._z;
    array[offset + 3] = this._w;
    return array;
  },
  onChange: function (callback) {
    this.onChangeCallback = callback;
    return this;
  },
  onChangeCallback: function () {}
});
/**
 * @author mrdoob / http://mrdoob.com/
 * @author kile / http://kile.stravaganza.org/
 * @author philogb / http://blog.thejit.org/
 * @author mikael emtinger / http://gomo.se/
 * @author egraether / http://egraether.com/
 * @author WestLangley / http://github.com/WestLangley
 */

function Vector3(x, y, z) {
  this.x = x || 0;
  this.y = y || 0;
  this.z = z || 0;
}

Object.assign(Vector3.prototype, {
  isVector3: true,
  set: function (x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
  },
  setScalar: function (scalar) {
    this.x = scalar;
    this.y = scalar;
    this.z = scalar;
    return this;
  },
  setX: function (x) {
    this.x = x;
    return this;
  },
  setY: function (y) {
    this.y = y;
    return this;
  },
  setZ: function (z) {
    this.z = z;
    return this;
  },
  setComponent: function (index, value) {
    switch (index) {
      case 0:
        this.x = value;
        break;

      case 1:
        this.y = value;
        break;

      case 2:
        this.z = value;
        break;

      default:
        throw new Error('index is out of range: ' + index);
    }

    return this;
  },
  getComponent: function (index) {
    switch (index) {
      case 0:
        return this.x;

      case 1:
        return this.y;

      case 2:
        return this.z;

      default:
        throw new Error('index is out of range: ' + index);
    }
  },
  clone: function () {
    return new this.constructor(this.x, this.y, this.z);
  },
  copy: function (v) {
    this.x = v.x;
    this.y = v.y;
    this.z = v.z;
    return this;
  },
  add: function (v, w) {
    if (w !== undefined) {
      console.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
      return this.addVectors(v, w);
    }

    this.x += v.x;
    this.y += v.y;
    this.z += v.z;
    return this;
  },
  addScalar: function (s) {
    this.x += s;
    this.y += s;
    this.z += s;
    return this;
  },
  addVectors: function (a, b) {
    this.x = a.x + b.x;
    this.y = a.y + b.y;
    this.z = a.z + b.z;
    return this;
  },
  addScaledVector: function (v, s) {
    this.x += v.x * s;
    this.y += v.y * s;
    this.z += v.z * s;
    return this;
  },
  sub: function (v, w) {
    if (w !== undefined) {
      console.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
      return this.subVectors(v, w);
    }

    this.x -= v.x;
    this.y -= v.y;
    this.z -= v.z;
    return this;
  },
  subScalar: function (s) {
    this.x -= s;
    this.y -= s;
    this.z -= s;
    return this;
  },
  subVectors: function (a, b) {
    this.x = a.x - b.x;
    this.y = a.y - b.y;
    this.z = a.z - b.z;
    return this;
  },
  multiply: function (v, w) {
    if (w !== undefined) {
      console.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');
      return this.multiplyVectors(v, w);
    }

    this.x *= v.x;
    this.y *= v.y;
    this.z *= v.z;
    return this;
  },
  multiplyScalar: function (scalar) {
    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;
    return this;
  },
  multiplyVectors: function (a, b) {
    this.x = a.x * b.x;
    this.y = a.y * b.y;
    this.z = a.z * b.z;
    return this;
  },
  applyEuler: function () {
    var quaternion = new Quaternion();
    return function applyEuler(euler) {
      if (!(euler && euler.isEuler)) {
        console.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');
      }

      return this.applyQuaternion(quaternion.setFromEuler(euler));
    };
  }(),
  applyAxisAngle: function () {
    var quaternion = new Quaternion();
    return function applyAxisAngle(axis, angle) {
      return this.applyQuaternion(quaternion.setFromAxisAngle(axis, angle));
    };
  }(),
  applyMatrix3: function (m) {
    var x = this.x,
        y = this.y,
        z = this.z;
    var e = m.elements;
    this.x = e[0] * x + e[3] * y + e[6] * z;
    this.y = e[1] * x + e[4] * y + e[7] * z;
    this.z = e[2] * x + e[5] * y + e[8] * z;
    return this;
  },
  applyMatrix4: function (m) {
    var x = this.x,
        y = this.y,
        z = this.z;
    var e = m.elements;
    var w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
    this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
    this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
    this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
    return this;
  },
  applyQuaternion: function (q) {
    var x = this.x,
        y = this.y,
        z = this.z;
    var qx = q.x,
        qy = q.y,
        qz = q.z,
        qw = q.w; // calculate quat * vector

    var ix = qw * x + qy * z - qz * y;
    var iy = qw * y + qz * x - qx * z;
    var iz = qw * z + qx * y - qy * x;
    var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat

    this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return this;
  },
  project: function (camera) {
    return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
  },
  unproject: function () {
    var matrix = new Matrix4();
    return function unproject(camera) {
      return this.applyMatrix4(matrix.getInverse(camera.projectionMatrix)).applyMatrix4(camera.matrixWorld);
    };
  }(),
  transformDirection: function (m) {
    // input: THREE.Matrix4 affine matrix
    // vector interpreted as a direction
    var x = this.x,
        y = this.y,
        z = this.z;
    var e = m.elements;
    this.x = e[0] * x + e[4] * y + e[8] * z;
    this.y = e[1] * x + e[5] * y + e[9] * z;
    this.z = e[2] * x + e[6] * y + e[10] * z;
    return this.normalize();
  },
  divide: function (v) {
    this.x /= v.x;
    this.y /= v.y;
    this.z /= v.z;
    return this;
  },
  divideScalar: function (scalar) {
    return this.multiplyScalar(1 / scalar);
  },
  min: function (v) {
    this.x = Math.min(this.x, v.x);
    this.y = Math.min(this.y, v.y);
    this.z = Math.min(this.z, v.z);
    return this;
  },
  max: function (v) {
    this.x = Math.max(this.x, v.x);
    this.y = Math.max(this.y, v.y);
    this.z = Math.max(this.z, v.z);
    return this;
  },
  clamp: function (min, max) {
    // assumes min < max, componentwise
    this.x = Math.max(min.x, Math.min(max.x, this.x));
    this.y = Math.max(min.y, Math.min(max.y, this.y));
    this.z = Math.max(min.z, Math.min(max.z, this.z));
    return this;
  },
  clampScalar: function () {
    var min = new Vector3();
    var max = new Vector3();
    return function clampScalar(minVal, maxVal) {
      min.set(minVal, minVal, minVal);
      max.set(maxVal, maxVal, maxVal);
      return this.clamp(min, max);
    };
  }(),
  clampLength: function (min, max) {
    var length = this.length();
    return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
  },
  floor: function () {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    return this;
  },
  ceil: function () {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    return this;
  },
  round: function () {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    return this;
  },
  roundToZero: function () {
    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
    this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
    return this;
  },
  negate: function () {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    return this;
  },
  dot: function (v) {
    return this.x * v.x + this.y * v.y + this.z * v.z;
  },
  // TODO lengthSquared?
  lengthSq: function () {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  },
  length: function () {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  },
  manhattanLength: function () {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  },
  normalize: function () {
    return this.divideScalar(this.length() || 1);
  },
  setLength: function (length) {
    return this.normalize().multiplyScalar(length);
  },
  lerp: function (v, alpha) {
    this.x += (v.x - this.x) * alpha;
    this.y += (v.y - this.y) * alpha;
    this.z += (v.z - this.z) * alpha;
    return this;
  },
  lerpVectors: function (v1, v2, alpha) {
    return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);
  },
  cross: function (v, w) {
    if (w !== undefined) {
      console.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');
      return this.crossVectors(v, w);
    }

    return this.crossVectors(this, v);
  },
  crossVectors: function (a, b) {
    var ax = a.x,
        ay = a.y,
        az = a.z;
    var bx = b.x,
        by = b.y,
        bz = b.z;
    this.x = ay * bz - az * by;
    this.y = az * bx - ax * bz;
    this.z = ax * by - ay * bx;
    return this;
  },
  projectOnVector: function (vector) {
    var scalar = vector.dot(this) / vector.lengthSq();
    return this.copy(vector).multiplyScalar(scalar);
  },
  projectOnPlane: function () {
    var v1 = new Vector3();
    return function projectOnPlane(planeNormal) {
      v1.copy(this).projectOnVector(planeNormal);
      return this.sub(v1);
    };
  }(),
  reflect: function () {
    // reflect incident vector off plane orthogonal to normal
    // normal is assumed to have unit length
    var v1 = new Vector3();
    return function reflect(normal) {
      return this.sub(v1.copy(normal).multiplyScalar(2 * this.dot(normal)));
    };
  }(),
  angleTo: function (v) {
    var theta = this.dot(v) / Math.sqrt(this.lengthSq() * v.lengthSq()); // clamp, to handle numerical problems

    return Math.acos(_Math.clamp(theta, -1, 1));
  },
  distanceTo: function (v) {
    return Math.sqrt(this.distanceToSquared(v));
  },
  distanceToSquared: function (v) {
    var dx = this.x - v.x,
        dy = this.y - v.y,
        dz = this.z - v.z;
    return dx * dx + dy * dy + dz * dz;
  },
  manhattanDistanceTo: function (v) {
    return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
  },
  setFromSpherical: function (s) {
    return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
  },
  setFromSphericalCoords: function (radius, phi, theta) {
    var sinPhiRadius = Math.sin(phi) * radius;
    this.x = sinPhiRadius * Math.sin(theta);
    this.y = Math.cos(phi) * radius;
    this.z = sinPhiRadius * Math.cos(theta);
    return this;
  },
  setFromCylindrical: function (c) {
    return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
  },
  setFromCylindricalCoords: function (radius, theta, y) {
    this.x = radius * Math.sin(theta);
    this.y = y;
    this.z = radius * Math.cos(theta);
    return this;
  },
  setFromMatrixPosition: function (m) {
    var e = m.elements;
    this.x = e[12];
    this.y = e[13];
    this.z = e[14];
    return this;
  },
  setFromMatrixScale: function (m) {
    var sx = this.setFromMatrixColumn(m, 0).length();
    var sy = this.setFromMatrixColumn(m, 1).length();
    var sz = this.setFromMatrixColumn(m, 2).length();
    this.x = sx;
    this.y = sy;
    this.z = sz;
    return this;
  },
  setFromMatrixColumn: function (m, index) {
    return this.fromArray(m.elements, index * 4);
  },
  equals: function (v) {
    return v.x === this.x && v.y === this.y && v.z === this.z;
  },
  fromArray: function (array, offset) {
    if (offset === undefined) offset = 0;
    this.x = array[offset];
    this.y = array[offset + 1];
    this.z = array[offset + 2];
    return this;
  },
  toArray: function (array, offset) {
    if (array === undefined) array = [];
    if (offset === undefined) offset = 0;
    array[offset] = this.x;
    array[offset + 1] = this.y;
    array[offset + 2] = this.z;
    return array;
  },
  fromBufferAttribute: function (attribute, index, offset) {
    if (offset !== undefined) {
      console.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');
    }

    this.x = attribute.getX(index);
    this.y = attribute.getY(index);
    this.z = attribute.getZ(index);
    return this;
  }
});
/**
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://clara.io
 * @author tschw
 */

function Matrix3() {
  this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];

  if (arguments.length > 0) {
    console.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');
  }
}

Object.assign(Matrix3.prototype, {
  isMatrix3: true,
  set: function (n11, n12, n13, n21, n22, n23, n31, n32, n33) {
    var te = this.elements;
    te[0] = n11;
    te[1] = n21;
    te[2] = n31;
    te[3] = n12;
    te[4] = n22;
    te[5] = n32;
    te[6] = n13;
    te[7] = n23;
    te[8] = n33;
    return this;
  },
  identity: function () {
    this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
    return this;
  },
  clone: function () {
    return new this.constructor().fromArray(this.elements);
  },
  copy: function (m) {
    var te = this.elements;
    var me = m.elements;
    te[0] = me[0];
    te[1] = me[1];
    te[2] = me[2];
    te[3] = me[3];
    te[4] = me[4];
    te[5] = me[5];
    te[6] = me[6];
    te[7] = me[7];
    te[8] = me[8];
    return this;
  },
  setFromMatrix4: function (m) {
    var me = m.elements;
    this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);
    return this;
  },
  applyToBufferAttribute: function () {
    var v1 = new Vector3();
    return function applyToBufferAttribute(attribute) {
      for (var i = 0, l = attribute.count; i < l; i++) {
        v1.x = attribute.getX(i);
        v1.y = attribute.getY(i);
        v1.z = attribute.getZ(i);
        v1.applyMatrix3(this);
        attribute.setXYZ(i, v1.x, v1.y, v1.z);
      }

      return attribute;
    };
  }(),
  multiply: function (m) {
    return this.multiplyMatrices(this, m);
  },
  premultiply: function (m) {
    return this.multiplyMatrices(m, this);
  },
  multiplyMatrices: function (a, b) {
    var ae = a.elements;
    var be = b.elements;
    var te = this.elements;
    var a11 = ae[0],
        a12 = ae[3],
        a13 = ae[6];
    var a21 = ae[1],
        a22 = ae[4],
        a23 = ae[7];
    var a31 = ae[2],
        a32 = ae[5],
        a33 = ae[8];
    var b11 = be[0],
        b12 = be[3],
        b13 = be[6];
    var b21 = be[1],
        b22 = be[4],
        b23 = be[7];
    var b31 = be[2],
        b32 = be[5],
        b33 = be[8];
    te[0] = a11 * b11 + a12 * b21 + a13 * b31;
    te[3] = a11 * b12 + a12 * b22 + a13 * b32;
    te[6] = a11 * b13 + a12 * b23 + a13 * b33;
    te[1] = a21 * b11 + a22 * b21 + a23 * b31;
    te[4] = a21 * b12 + a22 * b22 + a23 * b32;
    te[7] = a21 * b13 + a22 * b23 + a23 * b33;
    te[2] = a31 * b11 + a32 * b21 + a33 * b31;
    te[5] = a31 * b12 + a32 * b22 + a33 * b32;
    te[8] = a31 * b13 + a32 * b23 + a33 * b33;
    return this;
  },
  multiplyScalar: function (s) {
    var te = this.elements;
    te[0] *= s;
    te[3] *= s;
    te[6] *= s;
    te[1] *= s;
    te[4] *= s;
    te[7] *= s;
    te[2] *= s;
    te[5] *= s;
    te[8] *= s;
    return this;
  },
  determinant: function () {
    var te = this.elements;
    var a = te[0],
        b = te[1],
        c = te[2],
        d = te[3],
        e = te[4],
        f = te[5],
        g = te[6],
        h = te[7],
        i = te[8];
    return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
  },
  getInverse: function (matrix, throwOnDegenerate) {
    if (matrix && matrix.isMatrix4) {
      console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");
    }

    var me = matrix.elements,
        te = this.elements,
        n11 = me[0],
        n21 = me[1],
        n31 = me[2],
        n12 = me[3],
        n22 = me[4],
        n32 = me[5],
        n13 = me[6],
        n23 = me[7],
        n33 = me[8],
        t11 = n33 * n22 - n32 * n23,
        t12 = n32 * n13 - n33 * n12,
        t13 = n23 * n12 - n22 * n13,
        det = n11 * t11 + n21 * t12 + n31 * t13;

    if (det === 0) {
      var msg = "THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";

      if (throwOnDegenerate === true) {
        throw new Error(msg);
      } else {
        console.warn(msg);
      }

      return this.identity();
    }

    var detInv = 1 / det;
    te[0] = t11 * detInv;
    te[1] = (n31 * n23 - n33 * n21) * detInv;
    te[2] = (n32 * n21 - n31 * n22) * detInv;
    te[3] = t12 * detInv;
    te[4] = (n33 * n11 - n31 * n13) * detInv;
    te[5] = (n31 * n12 - n32 * n11) * detInv;
    te[6] = t13 * detInv;
    te[7] = (n21 * n13 - n23 * n11) * detInv;
    te[8] = (n22 * n11 - n21 * n12) * detInv;
    return this;
  },
  transpose: function () {
    var tmp,
        m = this.elements;
    tmp = m[1];
    m[1] = m[3];
    m[3] = tmp;
    tmp = m[2];
    m[2] = m[6];
    m[6] = tmp;
    tmp = m[5];
    m[5] = m[7];
    m[7] = tmp;
    return this;
  },
  getNormalMatrix: function (matrix4) {
    return this.setFromMatrix4(matrix4).getInverse(this).transpose();
  },
  transposeIntoArray: function (r) {
    var m = this.elements;
    r[0] = m[0];
    r[1] = m[3];
    r[2] = m[6];
    r[3] = m[1];
    r[4] = m[4];
    r[5] = m[7];
    r[6] = m[2];
    r[7] = m[5];
    r[8] = m[8];
    return this;
  },
  setUvTransform: function (tx, ty, sx, sy, rotation, cx, cy) {
    var c = Math.cos(rotation);
    var s = Math.sin(rotation);
    this.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);
  },
  scale: function (sx, sy) {
    var te = this.elements;
    te[0] *= sx;
    te[3] *= sx;
    te[6] *= sx;
    te[1] *= sy;
    te[4] *= sy;
    te[7] *= sy;
    return this;
  },
  rotate: function (theta) {
    var c = Math.cos(theta);
    var s = Math.sin(theta);
    var te = this.elements;
    var a11 = te[0],
        a12 = te[3],
        a13 = te[6];
    var a21 = te[1],
        a22 = te[4],
        a23 = te[7];
    te[0] = c * a11 + s * a21;
    te[3] = c * a12 + s * a22;
    te[6] = c * a13 + s * a23;
    te[1] = -s * a11 + c * a21;
    te[4] = -s * a12 + c * a22;
    te[7] = -s * a13 + c * a23;
    return this;
  },
  translate: function (tx, ty) {
    var te = this.elements;
    te[0] += tx * te[2];
    te[3] += tx * te[5];
    te[6] += tx * te[8];
    te[1] += ty * te[2];
    te[4] += ty * te[5];
    te[7] += ty * te[8];
    return this;
  },
  equals: function (matrix) {
    var te = this.elements;
    var me = matrix.elements;

    for (var i = 0; i < 9; i++) {
      if (te[i] !== me[i]) return false;
    }

    return true;
  },
  fromArray: function (array, offset) {
    if (offset === undefined) offset = 0;

    for (var i = 0; i < 9; i++) {
      this.elements[i] = array[i + offset];
    }

    return this;
  },
  toArray: function (array, offset) {
    if (array === undefined) array = [];
    if (offset === undefined) offset = 0;
    var te = this.elements;
    array[offset] = te[0];
    array[offset + 1] = te[1];
    array[offset + 2] = te[2];
    array[offset + 3] = te[3];
    array[offset + 4] = te[4];
    array[offset + 5] = te[5];
    array[offset + 6] = te[6];
    array[offset + 7] = te[7];
    array[offset + 8] = te[8];
    return array;
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author szimek / https://github.com/szimek/
 */

var _canvas;

var ImageUtils = {
  getDataURL: function (image) {
    var canvas;

    if (typeof HTMLCanvasElement == 'undefined') {
      return image.src;
    } else if (image instanceof HTMLCanvasElement) {
      canvas = image;
    } else {
      if (_canvas === undefined) _canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');
      _canvas.width = image.width;
      _canvas.height = image.height;

      var context = _canvas.getContext('2d');

      if (image instanceof ImageData) {
        context.putImageData(image, 0, 0);
      } else {
        context.drawImage(image, 0, 0, image.width, image.height);
      }

      canvas = _canvas;
    }

    if (canvas.width > 2048 || canvas.height > 2048) {
      return canvas.toDataURL('image/jpeg', 0.6);
    } else {
      return canvas.toDataURL('image/png');
    }
  }
};
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author szimek / https://github.com/szimek/
 */

exports.ImageUtils = ImageUtils;
var textureId = 0;

function Texture(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {
  Object.defineProperty(this, 'id', {
    value: textureId++
  });
  this.uuid = _Math.generateUUID();
  this.name = '';
  this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
  this.mipmaps = [];
  this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;
  this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
  this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;
  this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
  this.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;
  this.anisotropy = anisotropy !== undefined ? anisotropy : 1;
  this.format = format !== undefined ? format : RGBAFormat;
  this.type = type !== undefined ? type : UnsignedByteType;
  this.offset = new Vector2(0, 0);
  this.repeat = new Vector2(1, 1);
  this.center = new Vector2(0, 0);
  this.rotation = 0;
  this.matrixAutoUpdate = true;
  this.matrix = new Matrix3();
  this.generateMipmaps = true;
  this.premultiplyAlpha = false;
  this.flipY = true;
  this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
  // Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
  //
  // Also changing the encoding after already used by a Material will not automatically make the Material
  // update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.

  this.encoding = encoding !== undefined ? encoding : LinearEncoding;
  this.version = 0;
  this.onUpdate = null;
}

Texture.DEFAULT_IMAGE = undefined;
Texture.DEFAULT_MAPPING = UVMapping;
Texture.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
  constructor: Texture,
  isTexture: true,
  updateMatrix: function () {
    this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
  },
  clone: function () {
    return new this.constructor().copy(this);
  },
  copy: function (source) {
    this.name = source.name;
    this.image = source.image;
    this.mipmaps = source.mipmaps.slice(0);
    this.mapping = source.mapping;
    this.wrapS = source.wrapS;
    this.wrapT = source.wrapT;
    this.magFilter = source.magFilter;
    this.minFilter = source.minFilter;
    this.anisotropy = source.anisotropy;
    this.format = source.format;
    this.type = source.type;
    this.offset.copy(source.offset);
    this.repeat.copy(source.repeat);
    this.center.copy(source.center);
    this.rotation = source.rotation;
    this.matrixAutoUpdate = source.matrixAutoUpdate;
    this.matrix.copy(source.matrix);
    this.generateMipmaps = source.generateMipmaps;
    this.premultiplyAlpha = source.premultiplyAlpha;
    this.flipY = source.flipY;
    this.unpackAlignment = source.unpackAlignment;
    this.encoding = source.encoding;
    return this;
  },
  toJSON: function (meta) {
    var isRootObject = meta === undefined || typeof meta === 'string';

    if (!isRootObject && meta.textures[this.uuid] !== undefined) {
      return meta.textures[this.uuid];
    }

    var output = {
      metadata: {
        version: 4.5,
        type: 'Texture',
        generator: 'Texture.toJSON'
      },
      uuid: this.uuid,
      name: this.name,
      mapping: this.mapping,
      repeat: [this.repeat.x, this.repeat.y],
      offset: [this.offset.x, this.offset.y],
      center: [this.center.x, this.center.y],
      rotation: this.rotation,
      wrap: [this.wrapS, this.wrapT],
      format: this.format,
      type: this.type,
      encoding: this.encoding,
      minFilter: this.minFilter,
      magFilter: this.magFilter,
      anisotropy: this.anisotropy,
      flipY: this.flipY,
      premultiplyAlpha: this.premultiplyAlpha,
      unpackAlignment: this.unpackAlignment
    };

    if (this.image !== undefined) {
      // TODO: Move to THREE.Image
      var image = this.image;

      if (image.uuid === undefined) {
        image.uuid = _Math.generateUUID(); // UGH
      }

      if (!isRootObject && meta.images[image.uuid] === undefined) {
        var url;

        if (Array.isArray(image)) {
          // process array of images e.g. CubeTexture
          url = [];

          for (var i = 0, l = image.length; i < l; i++) {
            url.push(ImageUtils.getDataURL(image[i]));
          }
        } else {
          // process single image
          url = ImageUtils.getDataURL(image);
        }

        meta.images[image.uuid] = {
          uuid: image.uuid,
          url: url
        };
      }

      output.image = image.uuid;
    }

    if (!isRootObject) {
      meta.textures[this.uuid] = output;
    }

    return output;
  },
  dispose: function () {
    this.dispatchEvent({
      type: 'dispose'
    });
  },
  transformUv: function (uv) {
    if (this.mapping !== UVMapping) return uv;
    uv.applyMatrix3(this.matrix);

    if (uv.x < 0 || uv.x > 1) {
      switch (this.wrapS) {
        case RepeatWrapping:
          uv.x = uv.x - Math.floor(uv.x);
          break;

        case ClampToEdgeWrapping:
          uv.x = uv.x < 0 ? 0 : 1;
          break;

        case MirroredRepeatWrapping:
          if (Math.abs(Math.floor(uv.x) % 2) === 1) {
            uv.x = Math.ceil(uv.x) - uv.x;
          } else {
            uv.x = uv.x - Math.floor(uv.x);
          }

          break;
      }
    }

    if (uv.y < 0 || uv.y > 1) {
      switch (this.wrapT) {
        case RepeatWrapping:
          uv.y = uv.y - Math.floor(uv.y);
          break;

        case ClampToEdgeWrapping:
          uv.y = uv.y < 0 ? 0 : 1;
          break;

        case MirroredRepeatWrapping:
          if (Math.abs(Math.floor(uv.y) % 2) === 1) {
            uv.y = Math.ceil(uv.y) - uv.y;
          } else {
            uv.y = uv.y - Math.floor(uv.y);
          }

          break;
      }
    }

    if (this.flipY) {
      uv.y = 1 - uv.y;
    }

    return uv;
  }
});
Object.defineProperty(Texture.prototype, "needsUpdate", {
  set: function (value) {
    if (value === true) this.version++;
  }
});
/**
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author philogb / http://blog.thejit.org/
 * @author mikael emtinger / http://gomo.se/
 * @author egraether / http://egraether.com/
 * @author WestLangley / http://github.com/WestLangley
 */

function Vector4(x, y, z, w) {
  this.x = x || 0;
  this.y = y || 0;
  this.z = z || 0;
  this.w = w !== undefined ? w : 1;
}

Object.assign(Vector4.prototype, {
  isVector4: true,
  set: function (x, y, z, w) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
    return this;
  },
  setScalar: function (scalar) {
    this.x = scalar;
    this.y = scalar;
    this.z = scalar;
    this.w = scalar;
    return this;
  },
  setX: function (x) {
    this.x = x;
    return this;
  },
  setY: function (y) {
    this.y = y;
    return this;
  },
  setZ: function (z) {
    this.z = z;
    return this;
  },
  setW: function (w) {
    this.w = w;
    return this;
  },
  setComponent: function (index, value) {
    switch (index) {
      case 0:
        this.x = value;
        break;

      case 1:
        this.y = value;
        break;

      case 2:
        this.z = value;
        break;

      case 3:
        this.w = value;
        break;

      default:
        throw new Error('index is out of range: ' + index);
    }

    return this;
  },
  getComponent: function (index) {
    switch (index) {
      case 0:
        return this.x;

      case 1:
        return this.y;

      case 2:
        return this.z;

      case 3:
        return this.w;

      default:
        throw new Error('index is out of range: ' + index);
    }
  },
  clone: function () {
    return new this.constructor(this.x, this.y, this.z, this.w);
  },
  copy: function (v) {
    this.x = v.x;
    this.y = v.y;
    this.z = v.z;
    this.w = v.w !== undefined ? v.w : 1;
    return this;
  },
  add: function (v, w) {
    if (w !== undefined) {
      console.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
      return this.addVectors(v, w);
    }

    this.x += v.x;
    this.y += v.y;
    this.z += v.z;
    this.w += v.w;
    return this;
  },
  addScalar: function (s) {
    this.x += s;
    this.y += s;
    this.z += s;
    this.w += s;
    return this;
  },
  addVectors: function (a, b) {
    this.x = a.x + b.x;
    this.y = a.y + b.y;
    this.z = a.z + b.z;
    this.w = a.w + b.w;
    return this;
  },
  addScaledVector: function (v, s) {
    this.x += v.x * s;
    this.y += v.y * s;
    this.z += v.z * s;
    this.w += v.w * s;
    return this;
  },
  sub: function (v, w) {
    if (w !== undefined) {
      console.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
      return this.subVectors(v, w);
    }

    this.x -= v.x;
    this.y -= v.y;
    this.z -= v.z;
    this.w -= v.w;
    return this;
  },
  subScalar: function (s) {
    this.x -= s;
    this.y -= s;
    this.z -= s;
    this.w -= s;
    return this;
  },
  subVectors: function (a, b) {
    this.x = a.x - b.x;
    this.y = a.y - b.y;
    this.z = a.z - b.z;
    this.w = a.w - b.w;
    return this;
  },
  multiplyScalar: function (scalar) {
    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;
    this.w *= scalar;
    return this;
  },
  applyMatrix4: function (m) {
    var x = this.x,
        y = this.y,
        z = this.z,
        w = this.w;
    var e = m.elements;
    this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
    this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
    this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
    this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;
    return this;
  },
  divideScalar: function (scalar) {
    return this.multiplyScalar(1 / scalar);
  },
  setAxisAngleFromQuaternion: function (q) {
    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
    // q is assumed to be normalized
    this.w = 2 * Math.acos(q.w);
    var s = Math.sqrt(1 - q.w * q.w);

    if (s < 0.0001) {
      this.x = 1;
      this.y = 0;
      this.z = 0;
    } else {
      this.x = q.x / s;
      this.y = q.y / s;
      this.z = q.z / s;
    }

    return this;
  },
  setAxisAngleFromRotationMatrix: function (m) {
    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
    var angle,
        x,
        y,
        z,
        // variables for result
    epsilon = 0.01,
        // margin to allow for rounding errors
    epsilon2 = 0.1,
        // margin to distinguish between 0 and 180 degrees
    te = m.elements,
        m11 = te[0],
        m12 = te[4],
        m13 = te[8],
        m21 = te[1],
        m22 = te[5],
        m23 = te[9],
        m31 = te[2],
        m32 = te[6],
        m33 = te[10];

    if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
      // singularity found
      // first check for identity matrix which must have +1 for all terms
      // in leading diagonal and zero in other terms
      if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
        // this singularity is identity matrix so angle = 0
        this.set(1, 0, 0, 0);
        return this; // zero angle, arbitrary axis
      } // otherwise this singularity is angle = 180


      angle = Math.PI;
      var xx = (m11 + 1) / 2;
      var yy = (m22 + 1) / 2;
      var zz = (m33 + 1) / 2;
      var xy = (m12 + m21) / 4;
      var xz = (m13 + m31) / 4;
      var yz = (m23 + m32) / 4;

      if (xx > yy && xx > zz) {
        // m11 is the largest diagonal term
        if (xx < epsilon) {
          x = 0;
          y = 0.707106781;
          z = 0.707106781;
        } else {
          x = Math.sqrt(xx);
          y = xy / x;
          z = xz / x;
        }
      } else if (yy > zz) {
        // m22 is the largest diagonal term
        if (yy < epsilon) {
          x = 0.707106781;
          y = 0;
          z = 0.707106781;
        } else {
          y = Math.sqrt(yy);
          x = xy / y;
          z = yz / y;
        }
      } else {
        // m33 is the largest diagonal term so base result on this
        if (zz < epsilon) {
          x = 0.707106781;
          y = 0.707106781;
          z = 0;
        } else {
          z = Math.sqrt(zz);
          x = xz / z;
          y = yz / z;
        }
      }

      this.set(x, y, z, angle);
      return this; // return 180 deg rotation
    } // as we have reached here there are no singularities so we can handle normally


    var s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize

    if (Math.abs(s) < 0.001) s = 1; // prevent divide by zero, should not happen if matrix is orthogonal and should be
    // caught by singularity test above, but I've left it in just in case

    this.x = (m32 - m23) / s;
    this.y = (m13 - m31) / s;
    this.z = (m21 - m12) / s;
    this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
    return this;
  },
  min: function (v) {
    this.x = Math.min(this.x, v.x);
    this.y = Math.min(this.y, v.y);
    this.z = Math.min(this.z, v.z);
    this.w = Math.min(this.w, v.w);
    return this;
  },
  max: function (v) {
    this.x = Math.max(this.x, v.x);
    this.y = Math.max(this.y, v.y);
    this.z = Math.max(this.z, v.z);
    this.w = Math.max(this.w, v.w);
    return this;
  },
  clamp: function (min, max) {
    // assumes min < max, componentwise
    this.x = Math.max(min.x, Math.min(max.x, this.x));
    this.y = Math.max(min.y, Math.min(max.y, this.y));
    this.z = Math.max(min.z, Math.min(max.z, this.z));
    this.w = Math.max(min.w, Math.min(max.w, this.w));
    return this;
  },
  clampScalar: function () {
    var min, max;
    return function clampScalar(minVal, maxVal) {
      if (min === undefined) {
        min = new Vector4();
        max = new Vector4();
      }

      min.set(minVal, minVal, minVal, minVal);
      max.set(maxVal, maxVal, maxVal, maxVal);
      return this.clamp(min, max);
    };
  }(),
  clampLength: function (min, max) {
    var length = this.length();
    return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
  },
  floor: function () {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    this.w = Math.floor(this.w);
    return this;
  },
  ceil: function () {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    this.w = Math.ceil(this.w);
    return this;
  },
  round: function () {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    this.w = Math.round(this.w);
    return this;
  },
  roundToZero: function () {
    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
    this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
    this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);
    return this;
  },
  negate: function () {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    this.w = -this.w;
    return this;
  },
  dot: function (v) {
    return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
  },
  lengthSq: function () {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  },
  length: function () {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  },
  manhattanLength: function () {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  },
  normalize: function () {
    return this.divideScalar(this.length() || 1);
  },
  setLength: function (length) {
    return this.normalize().multiplyScalar(length);
  },
  lerp: function (v, alpha) {
    this.x += (v.x - this.x) * alpha;
    this.y += (v.y - this.y) * alpha;
    this.z += (v.z - this.z) * alpha;
    this.w += (v.w - this.w) * alpha;
    return this;
  },
  lerpVectors: function (v1, v2, alpha) {
    return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);
  },
  equals: function (v) {
    return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;
  },
  fromArray: function (array, offset) {
    if (offset === undefined) offset = 0;
    this.x = array[offset];
    this.y = array[offset + 1];
    this.z = array[offset + 2];
    this.w = array[offset + 3];
    return this;
  },
  toArray: function (array, offset) {
    if (array === undefined) array = [];
    if (offset === undefined) offset = 0;
    array[offset] = this.x;
    array[offset + 1] = this.y;
    array[offset + 2] = this.z;
    array[offset + 3] = this.w;
    return array;
  },
  fromBufferAttribute: function (attribute, index, offset) {
    if (offset !== undefined) {
      console.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');
    }

    this.x = attribute.getX(index);
    this.y = attribute.getY(index);
    this.z = attribute.getZ(index);
    this.w = attribute.getW(index);
    return this;
  }
});
/**
 * @author szimek / https://github.com/szimek/
 * @author alteredq / http://alteredqualia.com/
 * @author Marius Kintel / https://github.com/kintel
 */

/*
 In options, we can specify:
 * Texture parameters for an auto-generated target texture
 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
*/

function WebGLRenderTarget(width, height, options) {
  this.width = width;
  this.height = height;
  this.scissor = new Vector4(0, 0, width, height);
  this.scissorTest = false;
  this.viewport = new Vector4(0, 0, width, height);
  options = options || {};
  this.texture = new Texture(undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);
  this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
  this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;
  this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
  this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
  this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;
}

WebGLRenderTarget.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
  constructor: WebGLRenderTarget,
  isWebGLRenderTarget: true,
  setSize: function (width, height) {
    if (this.width !== width || this.height !== height) {
      this.width = width;
      this.height = height;
      this.dispose();
    }

    this.viewport.set(0, 0, width, height);
    this.scissor.set(0, 0, width, height);
  },
  clone: function () {
    return new this.constructor().copy(this);
  },
  copy: function (source) {
    this.width = source.width;
    this.height = source.height;
    this.viewport.copy(source.viewport);
    this.texture = source.texture.clone();
    this.depthBuffer = source.depthBuffer;
    this.stencilBuffer = source.stencilBuffer;
    this.depthTexture = source.depthTexture;
    return this;
  },
  dispose: function () {
    this.dispatchEvent({
      type: 'dispose'
    });
  }
});
/**
 * @author Mugen87 / https://github.com/Mugen87
 * @author Matt DesLauriers / @mattdesl
 */

function WebGLMultisampleRenderTarget(width, height, options) {
  WebGLRenderTarget.call(this, width, height, options);
  this.samples = 4;
}

WebGLMultisampleRenderTarget.prototype = Object.assign(Object.create(WebGLRenderTarget.prototype), {
  constructor: WebGLMultisampleRenderTarget,
  isWebGLMultisampleRenderTarget: true,
  copy: function (source) {
    WebGLRenderTarget.prototype.copy.call(this, source);
    this.samples = source.samples;
    return this;
  }
});
/**
 * @author alteredq / http://alteredqualia.com
 */

function WebGLRenderTargetCube(width, height, options) {
  WebGLRenderTarget.call(this, width, height, options);
}

WebGLRenderTargetCube.prototype = Object.create(WebGLRenderTarget.prototype);
WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;
WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;
/**
 * @author alteredq / http://alteredqualia.com/
 */

function DataTexture(data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {
  Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
  this.image = {
    data: data,
    width: width,
    height: height
  };
  this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
  this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;
  this.generateMipmaps = false;
  this.flipY = false;
  this.unpackAlignment = 1;
}

DataTexture.prototype = Object.create(Texture.prototype);
DataTexture.prototype.constructor = DataTexture;
DataTexture.prototype.isDataTexture = true;
/**
 * @author bhouston / http://clara.io
 * @author WestLangley / http://github.com/WestLangley
 */

function Box3(min, max) {
  this.min = min !== undefined ? min : new Vector3(+Infinity, +Infinity, +Infinity);
  this.max = max !== undefined ? max : new Vector3(-Infinity, -Infinity, -Infinity);
}

Object.assign(Box3.prototype, {
  isBox3: true,
  set: function (min, max) {
    this.min.copy(min);
    this.max.copy(max);
    return this;
  },
  setFromArray: function (array) {
    var minX = +Infinity;
    var minY = +Infinity;
    var minZ = +Infinity;
    var maxX = -Infinity;
    var maxY = -Infinity;
    var maxZ = -Infinity;

    for (var i = 0, l = array.length; i < l; i += 3) {
      var x = array[i];
      var y = array[i + 1];
      var z = array[i + 2];
      if (x < minX) minX = x;
      if (y < minY) minY = y;
      if (z < minZ) minZ = z;
      if (x > maxX) maxX = x;
      if (y > maxY) maxY = y;
      if (z > maxZ) maxZ = z;
    }

    this.min.set(minX, minY, minZ);
    this.max.set(maxX, maxY, maxZ);
    return this;
  },
  setFromBufferAttribute: function (attribute) {
    var minX = +Infinity;
    var minY = +Infinity;
    var minZ = +Infinity;
    var maxX = -Infinity;
    var maxY = -Infinity;
    var maxZ = -Infinity;

    for (var i = 0, l = attribute.count; i < l; i++) {
      var x = attribute.getX(i);
      var y = attribute.getY(i);
      var z = attribute.getZ(i);
      if (x < minX) minX = x;
      if (y < minY) minY = y;
      if (z < minZ) minZ = z;
      if (x > maxX) maxX = x;
      if (y > maxY) maxY = y;
      if (z > maxZ) maxZ = z;
    }

    this.min.set(minX, minY, minZ);
    this.max.set(maxX, maxY, maxZ);
    return this;
  },
  setFromPoints: function (points) {
    this.makeEmpty();

    for (var i = 0, il = points.length; i < il; i++) {
      this.expandByPoint(points[i]);
    }

    return this;
  },
  setFromCenterAndSize: function () {
    var v1 = new Vector3();
    return function setFromCenterAndSize(center, size) {
      var halfSize = v1.copy(size).multiplyScalar(0.5);
      this.min.copy(center).sub(halfSize);
      this.max.copy(center).add(halfSize);
      return this;
    };
  }(),
  setFromObject: function (object) {
    this.makeEmpty();
    return this.expandByObject(object);
  },
  clone: function () {
    return new this.constructor().copy(this);
  },
  copy: function (box) {
    this.min.copy(box.min);
    this.max.copy(box.max);
    return this;
  },
  makeEmpty: function () {
    this.min.x = this.min.y = this.min.z = +Infinity;
    this.max.x = this.max.y = this.max.z = -Infinity;
    return this;
  },
  isEmpty: function () {
    // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  },
  getCenter: function (target) {
    if (target === undefined) {
      console.warn('THREE.Box3: .getCenter() target is now required');
      target = new Vector3();
    }

    return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
  },
  getSize: function (target) {
    if (target === undefined) {
      console.warn('THREE.Box3: .getSize() target is now required');
      target = new Vector3();
    }

    return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
  },
  expandByPoint: function (point) {
    this.min.min(point);
    this.max.max(point);
    return this;
  },
  expandByVector: function (vector) {
    this.min.sub(vector);
    this.max.add(vector);
    return this;
  },
  expandByScalar: function (scalar) {
    this.min.addScalar(-scalar);
    this.max.addScalar(scalar);
    return this;
  },
  expandByObject: function () {
    // Computes the world-axis-aligned bounding box of an object (including its children),
    // accounting for both the object's, and children's, world transforms
    var scope, i, l;
    var v1 = new Vector3();

    function traverse(node) {
      var geometry = node.geometry;

      if (geometry !== undefined) {
        if (geometry.isGeometry) {
          var vertices = geometry.vertices;

          for (i = 0, l = vertices.length; i < l; i++) {
            v1.copy(vertices[i]);
            v1.applyMatrix4(node.matrixWorld);
            scope.expandByPoint(v1);
          }
        } else if (geometry.isBufferGeometry) {
          var attribute = geometry.attributes.position;

          if (attribute !== undefined) {
            for (i = 0, l = attribute.count; i < l; i++) {
              v1.fromBufferAttribute(attribute, i).applyMatrix4(node.matrixWorld);
              scope.expandByPoint(v1);
            }
          }
        }
      }
    }

    return function expandByObject(object) {
      scope = this;
      object.updateMatrixWorld(true);
      object.traverse(traverse);
      return this;
    };
  }(),
  containsPoint: function (point) {
    return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;
  },
  containsBox: function (box) {
    return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
  },
  getParameter: function (point, target) {
    // This can potentially have a divide by zero if the box
    // has a size dimension of 0.
    if (target === undefined) {
      console.warn('THREE.Box3: .getParameter() target is now required');
      target = new Vector3();
    }

    return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));
  },
  intersectsBox: function (box) {
    // using 6 splitting planes to rule out intersections.
    return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
  },
  intersectsSphere: function () {
    var closestPoint = new Vector3();
    return function intersectsSphere(sphere) {
      // Find the point on the AABB closest to the sphere center.
      this.clampPoint(sphere.center, closestPoint); // If that point is inside the sphere, the AABB and sphere intersect.

      return closestPoint.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
    };
  }(),
  intersectsPlane: function (plane) {
    // We compute the minimum and maximum dot product values. If those values
    // are on the same side (back or front) of the plane, then there is no intersection.
    var min, max;

    if (plane.normal.x > 0) {
      min = plane.normal.x * this.min.x;
      max = plane.normal.x * this.max.x;
    } else {
      min = plane.normal.x * this.max.x;
      max = plane.normal.x * this.min.x;
    }

    if (plane.normal.y > 0) {
      min += plane.normal.y * this.min.y;
      max += plane.normal.y * this.max.y;
    } else {
      min += plane.normal.y * this.max.y;
      max += plane.normal.y * this.min.y;
    }

    if (plane.normal.z > 0) {
      min += plane.normal.z * this.min.z;
      max += plane.normal.z * this.max.z;
    } else {
      min += plane.normal.z * this.max.z;
      max += plane.normal.z * this.min.z;
    }

    return min <= -plane.constant && max >= -plane.constant;
  },
  intersectsTriangle: function () {
    // triangle centered vertices
    var v0 = new Vector3();
    var v1 = new Vector3();
    var v2 = new Vector3(); // triangle edge vectors

    var f0 = new Vector3();
    var f1 = new Vector3();
    var f2 = new Vector3();
    var testAxis = new Vector3();
    var center = new Vector3();
    var extents = new Vector3();
    var triangleNormal = new Vector3();

    function satForAxes(axes) {
      var i, j;

      for (i = 0, j = axes.length - 3; i <= j; i += 3) {
        testAxis.fromArray(axes, i); // project the aabb onto the seperating axis

        var r = extents.x * Math.abs(testAxis.x) + extents.y * Math.abs(testAxis.y) + extents.z * Math.abs(testAxis.z); // project all 3 vertices of the triangle onto the seperating axis

        var p0 = v0.dot(testAxis);
        var p1 = v1.dot(testAxis);
        var p2 = v2.dot(testAxis); // actual test, basically see if either of the most extreme of the triangle points intersects r

        if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {
          // points of the projected triangle are outside the projected half-length of the aabb
          // the axis is seperating and we can exit
          return false;
        }
      }

      return true;
    }

    return function intersectsTriangle(triangle) {
      if (this.isEmpty()) {
        return false;
      } // compute box center and extents


      this.getCenter(center);
      extents.subVectors(this.max, center); // translate triangle to aabb origin

      v0.subVectors(triangle.a, center);
      v1.subVectors(triangle.b, center);
      v2.subVectors(triangle.c, center); // compute edge vectors for triangle

      f0.subVectors(v1, v0);
      f1.subVectors(v2, v1);
      f2.subVectors(v0, v2); // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
      // make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
      // axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)

      var axes = [0, -f0.z, f0.y, 0, -f1.z, f1.y, 0, -f2.z, f2.y, f0.z, 0, -f0.x, f1.z, 0, -f1.x, f2.z, 0, -f2.x, -f0.y, f0.x, 0, -f1.y, f1.x, 0, -f2.y, f2.x, 0];

      if (!satForAxes(axes)) {
        return false;
      } // test 3 face normals from the aabb


      axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];

      if (!satForAxes(axes)) {
        return false;
      } // finally testing the face normal of the triangle
      // use already existing triangle edge vectors here


      triangleNormal.crossVectors(f0, f1);
      axes = [triangleNormal.x, triangleNormal.y, triangleNormal.z];
      return satForAxes(axes);
    };
  }(),
  clampPoint: function (point, target) {
    if (target === undefined) {
      console.warn('THREE.Box3: .clampPoint() target is now required');
      target = new Vector3();
    }

    return target.copy(point).clamp(this.min, this.max);
  },
  distanceToPoint: function () {
    var v1 = new Vector3();
    return function distanceToPoint(point) {
      var clampedPoint = v1.copy(point).clamp(this.min, this.max);
      return clampedPoint.sub(point).length();
    };
  }(),
  getBoundingSphere: function () {
    var v1 = new Vector3();
    return function getBoundingSphere(target) {
      if (target === undefined) {
        console.warn('THREE.Box3: .getBoundingSphere() target is now required');
        target = new Sphere();
      }

      this.getCenter(target.center);
      target.radius = this.getSize(v1).length() * 0.5;
      return target;
    };
  }(),
  intersect: function (box) {
    this.min.max(box.min);
    this.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.

    if (this.isEmpty()) this.makeEmpty();
    return this;
  },
  union: function (box) {
    this.min.min(box.min);
    this.max.max(box.max);
    return this;
  },
  applyMatrix4: function () {
    var points = [new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3(), new Vector3()];
    return function applyMatrix4(matrix) {
      // transform of empty box is an empty box.
      if (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below

      points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000

      points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001

      points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010

      points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011

      points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100

      points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101

      points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110

      points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111

      this.setFromPoints(points);
      return this;
    };
  }(),
  translate: function (offset) {
    this.min.add(offset);
    this.max.add(offset);
    return this;
  },
  equals: function (box) {
    return box.min.equals(this.min) && box.max.equals(this.max);
  }
});
/**
 * @author bhouston / http://clara.io
 * @author mrdoob / http://mrdoob.com/
 */

function Sphere(center, radius) {
  this.center = center !== undefined ? center : new Vector3();
  this.radius = radius !== undefined ? radius : 0;
}

Object.assign(Sphere.prototype, {
  set: function (center, radius) {
    this.center.copy(center);
    this.radius = radius;
    return this;
  },
  setFromPoints: function () {
    var box = new Box3();
    return function setFromPoints(points, optionalCenter) {
      var center = this.center;

      if (optionalCenter !== undefined) {
        center.copy(optionalCenter);
      } else {
        box.setFromPoints(points).getCenter(center);
      }

      var maxRadiusSq = 0;

      for (var i = 0, il = points.length; i < il; i++) {
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));
      }

      this.radius = Math.sqrt(maxRadiusSq);
      return this;
    };
  }(),
  clone: function () {
    return new this.constructor().copy(this);
  },
  copy: function (sphere) {
    this.center.copy(sphere.center);
    this.radius = sphere.radius;
    return this;
  },
  empty: function () {
    return this.radius <= 0;
  },
  containsPoint: function (point) {
    return point.distanceToSquared(this.center) <= this.radius * this.radius;
  },
  distanceToPoint: function (point) {
    return point.distanceTo(this.center) - this.radius;
  },
  intersectsSphere: function (sphere) {
    var radiusSum = this.radius + sphere.radius;
    return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
  },
  intersectsBox: function (box) {
    return box.intersectsSphere(this);
  },
  intersectsPlane: function (plane) {
    return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
  },
  clampPoint: function (point, target) {
    var deltaLengthSq = this.center.distanceToSquared(point);

    if (target === undefined) {
      console.warn('THREE.Sphere: .clampPoint() target is now required');
      target = new Vector3();
    }

    target.copy(point);

    if (deltaLengthSq > this.radius * this.radius) {
      target.sub(this.center).normalize();
      target.multiplyScalar(this.radius).add(this.center);
    }

    return target;
  },
  getBoundingBox: function (target) {
    if (target === undefined) {
      console.warn('THREE.Sphere: .getBoundingBox() target is now required');
      target = new Box3();
    }

    target.set(this.center, this.center);
    target.expandByScalar(this.radius);
    return target;
  },
  applyMatrix4: function (matrix) {
    this.center.applyMatrix4(matrix);
    this.radius = this.radius * matrix.getMaxScaleOnAxis();
    return this;
  },
  translate: function (offset) {
    this.center.add(offset);
    return this;
  },
  equals: function (sphere) {
    return sphere.center.equals(this.center) && sphere.radius === this.radius;
  }
});
/**
 * @author bhouston / http://clara.io
 */

function Plane(normal, constant) {
  // normal is assumed to be normalized
  this.normal = normal !== undefined ? normal : new Vector3(1, 0, 0);
  this.constant = constant !== undefined ? constant : 0;
}

Object.assign(Plane.prototype, {
  set: function (normal, constant) {
    this.normal.copy(normal);
    this.constant = constant;
    return this;
  },
  setComponents: function (x, y, z, w) {
    this.normal.set(x, y, z);
    this.constant = w;
    return this;
  },
  setFromNormalAndCoplanarPoint: function (normal, point) {
    this.normal.copy(normal);
    this.constant = -point.dot(this.normal);
    return this;
  },
  setFromCoplanarPoints: function () {
    var v1 = new Vector3();
    var v2 = new Vector3();
    return function setFromCoplanarPoints(a, b, c) {
      var normal = v1.subVectors(c, b).cross(v2.subVectors(a, b)).normalize(); // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

      this.setFromNormalAndCoplanarPoint(normal, a);
      return this;
    };
  }(),
  clone: function () {
    return new this.constructor().copy(this);
  },
  copy: function (plane) {
    this.normal.copy(plane.normal);
    this.constant = plane.constant;
    return this;
  },
  normalize: function () {
    // Note: will lead to a divide by zero if the plane is invalid.
    var inverseNormalLength = 1.0 / this.normal.length();
    this.normal.multiplyScalar(inverseNormalLength);
    this.constant *= inverseNormalLength;
    return this;
  },
  negate: function () {
    this.constant *= -1;
    this.normal.negate();
    return this;
  },
  distanceToPoint: function (point) {
    return this.normal.dot(point) + this.constant;
  },
  distanceToSphere: function (sphere) {
    return this.distanceToPoint(sphere.center) - sphere.radius;
  },
  projectPoint: function (point, target) {
    if (target === undefined) {
      console.warn('THREE.Plane: .projectPoint() target is now required');
      target = new Vector3();
    }

    return target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);
  },
  intersectLine: function () {
    var v1 = new Vector3();
    return function intersectLine(line, target) {
      if (target === undefined) {
        console.warn('THREE.Plane: .intersectLine() target is now required');
        target = new Vector3();
      }

      var direction = line.delta(v1);
      var denominator = this.normal.dot(direction);

      if (denominator === 0) {
        // line is coplanar, return origin
        if (this.distanceToPoint(line.start) === 0) {
          return target.copy(line.start);
        } // Unsure if this is the correct method to handle this case.


        return undefined;
      }

      var t = -(line.start.dot(this.normal) + this.constant) / denominator;

      if (t < 0 || t > 1) {
        return undefined;
      }

      return target.copy(direction).multiplyScalar(t).add(line.start);
    };
  }(),
  intersectsLine: function (line) {
    // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
    var startSign = this.distanceToPoint(line.start);
    var endSign = this.distanceToPoint(line.end);
    return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
  },
  intersectsBox: function (box) {
    return box.intersectsPlane(this);
  },
  intersectsSphere: function (sphere) {
    return sphere.intersectsPlane(this);
  },
  coplanarPoint: function (target) {
    if (target === undefined) {
      console.warn('THREE.Plane: .coplanarPoint() target is now required');
      target = new Vector3();
    }

    return target.copy(this.normal).multiplyScalar(-this.constant);
  },
  applyMatrix4: function () {
    var v1 = new Vector3();
    var m1 = new Matrix3();
    return function applyMatrix4(matrix, optionalNormalMatrix) {
      var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix(matrix);
      var referencePoint = this.coplanarPoint(v1).applyMatrix4(matrix);
      var normal = this.normal.applyMatrix3(normalMatrix).normalize();
      this.constant = -referencePoint.dot(normal);
      return this;
    };
  }(),
  translate: function (offset) {
    this.constant -= offset.dot(this.normal);
    return this;
  },
  equals: function (plane) {
    return plane.normal.equals(this.normal) && plane.constant === this.constant;
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author bhouston / http://clara.io
 */

function Frustum(p0, p1, p2, p3, p4, p5) {
  this.planes = [p0 !== undefined ? p0 : new Plane(), p1 !== undefined ? p1 : new Plane(), p2 !== undefined ? p2 : new Plane(), p3 !== undefined ? p3 : new Plane(), p4 !== undefined ? p4 : new Plane(), p5 !== undefined ? p5 : new Plane()];
}

Object.assign(Frustum.prototype, {
  set: function (p0, p1, p2, p3, p4, p5) {
    var planes = this.planes;
    planes[0].copy(p0);
    planes[1].copy(p1);
    planes[2].copy(p2);
    planes[3].copy(p3);
    planes[4].copy(p4);
    planes[5].copy(p5);
    return this;
  },
  clone: function () {
    return new this.constructor().copy(this);
  },
  copy: function (frustum) {
    var planes = this.planes;

    for (var i = 0; i < 6; i++) {
      planes[i].copy(frustum.planes[i]);
    }

    return this;
  },
  setFromMatrix: function (m) {
    var planes = this.planes;
    var me = m.elements;
    var me0 = me[0],
        me1 = me[1],
        me2 = me[2],
        me3 = me[3];
    var me4 = me[4],
        me5 = me[5],
        me6 = me[6],
        me7 = me[7];
    var me8 = me[8],
        me9 = me[9],
        me10 = me[10],
        me11 = me[11];
    var me12 = me[12],
        me13 = me[13],
        me14 = me[14],
        me15 = me[15];
    planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
    planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
    planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
    planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
    planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
    planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
    return this;
  },
  intersectsObject: function () {
    var sphere = new Sphere();
    return function intersectsObject(object) {
      var geometry = object.geometry;
      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
      sphere.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);
      return this.intersectsSphere(sphere);
    };
  }(),
  intersectsSprite: function () {
    var sphere = new Sphere();
    return function intersectsSprite(sprite) {
      sphere.center.set(0, 0, 0);
      sphere.radius = 0.7071067811865476;
      sphere.applyMatrix4(sprite.matrixWorld);
      return this.intersectsSphere(sphere);
    };
  }(),
  intersectsSphere: function (sphere) {
    var planes = this.planes;
    var center = sphere.center;
    var negRadius = -sphere.radius;

    for (var i = 0; i < 6; i++) {
      var distance = planes[i].distanceToPoint(center);

      if (distance < negRadius) {
        return false;
      }
    }

    return true;
  },
  intersectsBox: function () {
    var p = new Vector3();
    return function intersectsBox(box) {
      var planes = this.planes;

      for (var i = 0; i < 6; i++) {
        var plane = planes[i]; // corner at max distance

        p.x = plane.normal.x > 0 ? box.max.x : box.min.x;
        p.y = plane.normal.y > 0 ? box.max.y : box.min.y;
        p.z = plane.normal.z > 0 ? box.max.z : box.min.z;

        if (plane.distanceToPoint(p) < 0) {
          return false;
        }
      }

      return true;
    };
  }(),
  containsPoint: function (point) {
    var planes = this.planes;

    for (var i = 0; i < 6; i++) {
      if (planes[i].distanceToPoint(point) < 0) {
        return false;
      }
    }

    return true;
  }
});
var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";
var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";
var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif";
var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif";
var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";
var begin_vertex = "vec3 transformed = vec3( position );";
var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";
var bsdfs = "vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick( specularColor, dotNV );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}";
var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";
var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";
var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvarying vec3 vViewPosition;\n#endif";
var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif";
var color_fragment = "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";
var color_pars_fragment = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";
var color_pars_vertex = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";
var color_vertex = "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif";
var common = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}";
var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif";
var defaultnormal_vertex = "vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = normalMatrix * objectTangent;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";
var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";
var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif";
var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";
var encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}";
var envmap_fragment = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";
var envmap_pars_fragment = "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";
var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";
var envmap_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";
var fog_vertex = "#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif";
var fog_pars_vertex = "#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif";
var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";
var gradientmap_pars_fragment = "#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif";
var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif";
var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";
var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif";
var lights_pars_begin = "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif";
var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif";
var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";
var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif";
var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#endif\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\tfloat clearCoatInv = 1.0 - clearCoatDHR;\n\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec3 singleScattering = vec3( 0.0 );\n\t\tvec3 multiScattering = vec3( 0.0 );\n\t\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\t\tvec3 diffuse = material.diffuseColor;\n\t\treflectedLight.indirectSpecular += clearCoatInv * radiance * singleScattering;\n\t\treflectedLight.indirectDiffuse += multiScattering * cosineWeightedIrradiance;\n\t\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n\t#else\n\t\treflectedLight.indirectSpecular += clearCoatInv * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#endif\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearCoatRadiance = vec3( 0.0 );\n#endif";
var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\n\t#ifndef STANDARD\n\t\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\n\t#endif\n#endif";
var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, irradiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif";
var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n#endif";
var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";
var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif";
var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif";
var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";
var map_particle_fragment = "#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif";
var map_particle_pars_fragment = "#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif";
var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";
var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";
var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif";
var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";
var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif";
var normal_fragment_begin = "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t#endif\n#endif";
var normal_fragment_maps = "#ifdef USE_NORMALMAP\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t#ifdef FLIP_SIDED\n\t\t\tnormal = - normal;\n\t\t#endif\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\tnormal = normalize( normalMatrix * normal );\n\t#else\n\t\t#ifdef USE_TANGENT\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy = normalScale * mapN.xy;\n\t\t\tnormal = normalize( vTBN * mapN );\n\t\t#else\n\t\t\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\t\t#endif\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif";
var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tuniform mat3 normalMatrix;\n\t#else\n\t\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\t\tvec2 st0 = dFdx( vUv.st );\n\t\t\tvec2 st1 = dFdy( vUv.st );\n\t\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\t\tvec3 N = normalize( surf_norm );\n\t\t\tmat3 tsn = mat3( S, T, N );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy *= normalScale;\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\treturn normalize( tsn * mapN );\n\t\t}\n\t#endif\n#endif";
var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";
var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";
var project_vertex = "vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;";
var dithering_fragment = "#if defined( DITHERING )\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
var dithering_pars_fragment = "#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";
var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";
var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";
var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";
var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif";
var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif";
var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}";
var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif";
var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";
var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";
var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";
var tonemapping_fragment = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
var tonemapping_pars_fragment = "#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}";
var uv_pars_fragment = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif";
var uv_pars_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif";
var uv_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";
var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";
var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif";
var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif";
var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif";
var background_frag = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
var background_vert = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
var cube_frag = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
var cube_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";
var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}";
var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}";
var distanceRGBA_frag = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";
var distanceRGBA_vert = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";
var equirect_frag = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
var equirect_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";
var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";
var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";
var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
var meshmatcap_frag = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
var meshmatcap_vert = "#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";
var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
var meshphysical_frag = "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
var meshphysical_vert = "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
var normal_frag = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}";
var normal_vert = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";
var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";
var shadow_frag = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}";
var shadow_vert = "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
var sprite_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
var sprite_vert = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";
var ShaderChunk = {
  alphamap_fragment: alphamap_fragment,
  alphamap_pars_fragment: alphamap_pars_fragment,
  alphatest_fragment: alphatest_fragment,
  aomap_fragment: aomap_fragment,
  aomap_pars_fragment: aomap_pars_fragment,
  begin_vertex: begin_vertex,
  beginnormal_vertex: beginnormal_vertex,
  bsdfs: bsdfs,
  bumpmap_pars_fragment: bumpmap_pars_fragment,
  clipping_planes_fragment: clipping_planes_fragment,
  clipping_planes_pars_fragment: clipping_planes_pars_fragment,
  clipping_planes_pars_vertex: clipping_planes_pars_vertex,
  clipping_planes_vertex: clipping_planes_vertex,
  color_fragment: color_fragment,
  color_pars_fragment: color_pars_fragment,
  color_pars_vertex: color_pars_vertex,
  color_vertex: color_vertex,
  common: common,
  cube_uv_reflection_fragment: cube_uv_reflection_fragment,
  defaultnormal_vertex: defaultnormal_vertex,
  displacementmap_pars_vertex: displacementmap_pars_vertex,
  displacementmap_vertex: displacementmap_vertex,
  emissivemap_fragment: emissivemap_fragment,
  emissivemap_pars_fragment: emissivemap_pars_fragment,
  encodings_fragment: encodings_fragment,
  encodings_pars_fragment: encodings_pars_fragment,
  envmap_fragment: envmap_fragment,
  envmap_pars_fragment: envmap_pars_fragment,
  envmap_pars_vertex: envmap_pars_vertex,
  envmap_physical_pars_fragment: envmap_physical_pars_fragment,
  envmap_vertex: envmap_vertex,
  fog_vertex: fog_vertex,
  fog_pars_vertex: fog_pars_vertex,
  fog_fragment: fog_fragment,
  fog_pars_fragment: fog_pars_fragment,
  gradientmap_pars_fragment: gradientmap_pars_fragment,
  lightmap_fragment: lightmap_fragment,
  lightmap_pars_fragment: lightmap_pars_fragment,
  lights_lambert_vertex: lights_lambert_vertex,
  lights_pars_begin: lights_pars_begin,
  lights_phong_fragment: lights_phong_fragment,
  lights_phong_pars_fragment: lights_phong_pars_fragment,
  lights_physical_fragment: lights_physical_fragment,
  lights_physical_pars_fragment: lights_physical_pars_fragment,
  lights_fragment_begin: lights_fragment_begin,
  lights_fragment_maps: lights_fragment_maps,
  lights_fragment_end: lights_fragment_end,
  logdepthbuf_fragment: logdepthbuf_fragment,
  logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
  logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
  logdepthbuf_vertex: logdepthbuf_vertex,
  map_fragment: map_fragment,
  map_pars_fragment: map_pars_fragment,
  map_particle_fragment: map_particle_fragment,
  map_particle_pars_fragment: map_particle_pars_fragment,
  metalnessmap_fragment: metalnessmap_fragment,
  metalnessmap_pars_fragment: metalnessmap_pars_fragment,
  morphnormal_vertex: morphnormal_vertex,
  morphtarget_pars_vertex: morphtarget_pars_vertex,
  morphtarget_vertex: morphtarget_vertex,
  normal_fragment_begin: normal_fragment_begin,
  normal_fragment_maps: normal_fragment_maps,
  normalmap_pars_fragment: normalmap_pars_fragment,
  packing: packing,
  premultiplied_alpha_fragment: premultiplied_alpha_fragment,
  project_vertex: project_vertex,
  dithering_fragment: dithering_fragment,
  dithering_pars_fragment: dithering_pars_fragment,
  roughnessmap_fragment: roughnessmap_fragment,
  roughnessmap_pars_fragment: roughnessmap_pars_fragment,
  shadowmap_pars_fragment: shadowmap_pars_fragment,
  shadowmap_pars_vertex: shadowmap_pars_vertex,
  shadowmap_vertex: shadowmap_vertex,
  shadowmask_pars_fragment: shadowmask_pars_fragment,
  skinbase_vertex: skinbase_vertex,
  skinning_pars_vertex: skinning_pars_vertex,
  skinning_vertex: skinning_vertex,
  skinnormal_vertex: skinnormal_vertex,
  specularmap_fragment: specularmap_fragment,
  specularmap_pars_fragment: specularmap_pars_fragment,
  tonemapping_fragment: tonemapping_fragment,
  tonemapping_pars_fragment: tonemapping_pars_fragment,
  uv_pars_fragment: uv_pars_fragment,
  uv_pars_vertex: uv_pars_vertex,
  uv_vertex: uv_vertex,
  uv2_pars_fragment: uv2_pars_fragment,
  uv2_pars_vertex: uv2_pars_vertex,
  uv2_vertex: uv2_vertex,
  worldpos_vertex: worldpos_vertex,
  background_frag: background_frag,
  background_vert: background_vert,
  cube_frag: cube_frag,
  cube_vert: cube_vert,
  depth_frag: depth_frag,
  depth_vert: depth_vert,
  distanceRGBA_frag: distanceRGBA_frag,
  distanceRGBA_vert: distanceRGBA_vert,
  equirect_frag: equirect_frag,
  equirect_vert: equirect_vert,
  linedashed_frag: linedashed_frag,
  linedashed_vert: linedashed_vert,
  meshbasic_frag: meshbasic_frag,
  meshbasic_vert: meshbasic_vert,
  meshlambert_frag: meshlambert_frag,
  meshlambert_vert: meshlambert_vert,
  meshmatcap_frag: meshmatcap_frag,
  meshmatcap_vert: meshmatcap_vert,
  meshphong_frag: meshphong_frag,
  meshphong_vert: meshphong_vert,
  meshphysical_frag: meshphysical_frag,
  meshphysical_vert: meshphysical_vert,
  normal_frag: normal_frag,
  normal_vert: normal_vert,
  points_frag: points_frag,
  points_vert: points_vert,
  shadow_frag: shadow_frag,
  shadow_vert: shadow_vert,
  sprite_frag: sprite_frag,
  sprite_vert: sprite_vert
};
/**
 * Uniform Utilities
 */

exports.ShaderChunk = ShaderChunk;

function cloneUniforms(src) {
  var dst = {};

  for (var u in src) {
    dst[u] = {};

    for (var p in src[u]) {
      var property = src[u][p];

      if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture)) {
        dst[u][p] = property.clone();
      } else if (Array.isArray(property)) {
        dst[u][p] = property.slice();
      } else {
        dst[u][p] = property;
      }
    }
  }

  return dst;
}

function mergeUniforms(uniforms) {
  var merged = {};

  for (var u = 0; u < uniforms.length; u++) {
    var tmp = cloneUniforms(uniforms[u]);

    for (var p in tmp) {
      merged[p] = tmp[p];
    }
  }

  return merged;
} // Legacy


var UniformsUtils = {
  clone: cloneUniforms,
  merge: mergeUniforms
};
/**
 * @author mrdoob / http://mrdoob.com/
 */

exports.UniformsUtils = UniformsUtils;
var ColorKeywords = {
  'aliceblue': 0xF0F8FF,
  'antiquewhite': 0xFAEBD7,
  'aqua': 0x00FFFF,
  'aquamarine': 0x7FFFD4,
  'azure': 0xF0FFFF,
  'beige': 0xF5F5DC,
  'bisque': 0xFFE4C4,
  'black': 0x000000,
  'blanchedalmond': 0xFFEBCD,
  'blue': 0x0000FF,
  'blueviolet': 0x8A2BE2,
  'brown': 0xA52A2A,
  'burlywood': 0xDEB887,
  'cadetblue': 0x5F9EA0,
  'chartreuse': 0x7FFF00,
  'chocolate': 0xD2691E,
  'coral': 0xFF7F50,
  'cornflowerblue': 0x6495ED,
  'cornsilk': 0xFFF8DC,
  'crimson': 0xDC143C,
  'cyan': 0x00FFFF,
  'darkblue': 0x00008B,
  'darkcyan': 0x008B8B,
  'darkgoldenrod': 0xB8860B,
  'darkgray': 0xA9A9A9,
  'darkgreen': 0x006400,
  'darkgrey': 0xA9A9A9,
  'darkkhaki': 0xBDB76B,
  'darkmagenta': 0x8B008B,
  'darkolivegreen': 0x556B2F,
  'darkorange': 0xFF8C00,
  'darkorchid': 0x9932CC,
  'darkred': 0x8B0000,
  'darksalmon': 0xE9967A,
  'darkseagreen': 0x8FBC8F,
  'darkslateblue': 0x483D8B,
  'darkslategray': 0x2F4F4F,
  'darkslategrey': 0x2F4F4F,
  'darkturquoise': 0x00CED1,
  'darkviolet': 0x9400D3,
  'deeppink': 0xFF1493,
  'deepskyblue': 0x00BFFF,
  'dimgray': 0x696969,
  'dimgrey': 0x696969,
  'dodgerblue': 0x1E90FF,
  'firebrick': 0xB22222,
  'floralwhite': 0xFFFAF0,
  'forestgreen': 0x228B22,
  'fuchsia': 0xFF00FF,
  'gainsboro': 0xDCDCDC,
  'ghostwhite': 0xF8F8FF,
  'gold': 0xFFD700,
  'goldenrod': 0xDAA520,
  'gray': 0x808080,
  'green': 0x008000,
  'greenyellow': 0xADFF2F,
  'grey': 0x808080,
  'honeydew': 0xF0FFF0,
  'hotpink': 0xFF69B4,
  'indianred': 0xCD5C5C,
  'indigo': 0x4B0082,
  'ivory': 0xFFFFF0,
  'khaki': 0xF0E68C,
  'lavender': 0xE6E6FA,
  'lavenderblush': 0xFFF0F5,
  'lawngreen': 0x7CFC00,
  'lemonchiffon': 0xFFFACD,
  'lightblue': 0xADD8E6,
  'lightcoral': 0xF08080,
  'lightcyan': 0xE0FFFF,
  'lightgoldenrodyellow': 0xFAFAD2,
  'lightgray': 0xD3D3D3,
  'lightgreen': 0x90EE90,
  'lightgrey': 0xD3D3D3,
  'lightpink': 0xFFB6C1,
  'lightsalmon': 0xFFA07A,
  'lightseagreen': 0x20B2AA,
  'lightskyblue': 0x87CEFA,
  'lightslategray': 0x778899,
  'lightslategrey': 0x778899,
  'lightsteelblue': 0xB0C4DE,
  'lightyellow': 0xFFFFE0,
  'lime': 0x00FF00,
  'limegreen': 0x32CD32,
  'linen': 0xFAF0E6,
  'magenta': 0xFF00FF,
  'maroon': 0x800000,
  'mediumaquamarine': 0x66CDAA,
  'mediumblue': 0x0000CD,
  'mediumorchid': 0xBA55D3,
  'mediumpurple': 0x9370DB,
  'mediumseagreen': 0x3CB371,
  'mediumslateblue': 0x7B68EE,
  'mediumspringgreen': 0x00FA9A,
  'mediumturquoise': 0x48D1CC,
  'mediumvioletred': 0xC71585,
  'midnightblue': 0x191970,
  'mintcream': 0xF5FFFA,
  'mistyrose': 0xFFE4E1,
  'moccasin': 0xFFE4B5,
  'navajowhite': 0xFFDEAD,
  'navy': 0x000080,
  'oldlace': 0xFDF5E6,
  'olive': 0x808000,
  'olivedrab': 0x6B8E23,
  'orange': 0xFFA500,
  'orangered': 0xFF4500,
  'orchid': 0xDA70D6,
  'palegoldenrod': 0xEEE8AA,
  'palegreen': 0x98FB98,
  'paleturquoise': 0xAFEEEE,
  'palevioletred': 0xDB7093,
  'papayawhip': 0xFFEFD5,
  'peachpuff': 0xFFDAB9,
  'peru': 0xCD853F,
  'pink': 0xFFC0CB,
  'plum': 0xDDA0DD,
  'powderblue': 0xB0E0E6,
  'purple': 0x800080,
  'rebeccapurple': 0x663399,
  'red': 0xFF0000,
  'rosybrown': 0xBC8F8F,
  'royalblue': 0x4169E1,
  'saddlebrown': 0x8B4513,
  'salmon': 0xFA8072,
  'sandybrown': 0xF4A460,
  'seagreen': 0x2E8B57,
  'seashell': 0xFFF5EE,
  'sienna': 0xA0522D,
  'silver': 0xC0C0C0,
  'skyblue': 0x87CEEB,
  'slateblue': 0x6A5ACD,
  'slategray': 0x708090,
  'slategrey': 0x708090,
  'snow': 0xFFFAFA,
  'springgreen': 0x00FF7F,
  'steelblue': 0x4682B4,
  'tan': 0xD2B48C,
  'teal': 0x008080,
  'thistle': 0xD8BFD8,
  'tomato': 0xFF6347,
  'turquoise': 0x40E0D0,
  'violet': 0xEE82EE,
  'wheat': 0xF5DEB3,
  'white': 0xFFFFFF,
  'whitesmoke': 0xF5F5F5,
  'yellow': 0xFFFF00,
  'yellowgreen': 0x9ACD32
};

function Color(r, g, b) {
  if (g === undefined && b === undefined) {
    // r is THREE.Color, hex or string
    return this.set(r);
  }

  return this.setRGB(r, g, b);
}

Object.assign(Color.prototype, {
  isColor: true,
  r: 1,
  g: 1,
  b: 1,
  set: function (value) {
    if (value && value.isColor) {
      this.copy(value);
    } else if (typeof value === 'number') {
      this.setHex(value);
    } else if (typeof value === 'string') {
      this.setStyle(value);
    }

    return this;
  },
  setScalar: function (scalar) {
    this.r = scalar;
    this.g = scalar;
    this.b = scalar;
    return this;
  },
  setHex: function (hex) {
    hex = Math.floor(hex);
    this.r = (hex >> 16 & 255) / 255;
    this.g = (hex >> 8 & 255) / 255;
    this.b = (hex & 255) / 255;
    return this;
  },
  setRGB: function (r, g, b) {
    this.r = r;
    this.g = g;
    this.b = b;
    return this;
  },
  setHSL: function () {
    function hue2rgb(p, q, t) {
      if (t < 0) t += 1;
      if (t > 1) t -= 1;
      if (t < 1 / 6) return p + (q - p) * 6 * t;
      if (t < 1 / 2) return q;
      if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);
      return p;
    }

    return function setHSL(h, s, l) {
      // h,s,l ranges are in 0.0 - 1.0
      h = _Math.euclideanModulo(h, 1);
      s = _Math.clamp(s, 0, 1);
      l = _Math.clamp(l, 0, 1);

      if (s === 0) {
        this.r = this.g = this.b = l;
      } else {
        var p = l <= 0.5 ? l * (1 + s) : l + s - l * s;
        var q = 2 * l - p;
        this.r = hue2rgb(q, p, h + 1 / 3);
        this.g = hue2rgb(q, p, h);
        this.b = hue2rgb(q, p, h - 1 / 3);
      }

      return this;
    };
  }(),
  setStyle: function (style) {
    function handleAlpha(string) {
      if (string === undefined) return;

      if (parseFloat(string) < 1) {
        console.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');
      }
    }

    var m;

    if (m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(style)) {
      // rgb / hsl
      var color;
      var name = m[1];
      var components = m[2];

      switch (name) {
        case 'rgb':
        case 'rgba':
          if (color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)) {
            // rgb(255,0,0) rgba(255,0,0,0.5)
            this.r = Math.min(255, parseInt(color[1], 10)) / 255;
            this.g = Math.min(255, parseInt(color[2], 10)) / 255;
            this.b = Math.min(255, parseInt(color[3], 10)) / 255;
            handleAlpha(color[5]);
            return this;
          }

          if (color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)) {
            // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
            this.r = Math.min(100, parseInt(color[1], 10)) / 100;
            this.g = Math.min(100, parseInt(color[2], 10)) / 100;
            this.b = Math.min(100, parseInt(color[3], 10)) / 100;
            handleAlpha(color[5]);
            return this;
          }

          break;

        case 'hsl':
        case 'hsla':
          if (color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)) {
            // hsl(120,50%,50%) hsla(120,50%,50%,0.5)
            var h = parseFloat(color[1]) / 360;
            var s = parseInt(color[2], 10) / 100;
            var l = parseInt(color[3], 10) / 100;
            handleAlpha(color[5]);
            return this.setHSL(h, s, l);
          }

          break;
      }
    } else if (m = /^\#([A-Fa-f0-9]+)$/.exec(style)) {
      // hex color
      var hex = m[1];
      var size = hex.length;

      if (size === 3) {
        // #ff0
        this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;
        this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;
        this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;
        return this;
      } else if (size === 6) {
        // #ff0000
        this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;
        this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;
        this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;
        return this;
      }
    }

    if (style && style.length > 0) {
      // color keywords
      var hex = ColorKeywords[style];

      if (hex !== undefined) {
        // red
        this.setHex(hex);
      } else {
        // unknown color
        console.warn('THREE.Color: Unknown color ' + style);
      }
    }

    return this;
  },
  clone: function () {
    return new this.constructor(this.r, this.g, this.b);
  },
  copy: function (color) {
    this.r = color.r;
    this.g = color.g;
    this.b = color.b;
    return this;
  },
  copyGammaToLinear: function (color, gammaFactor) {
    if (gammaFactor === undefined) gammaFactor = 2.0;
    this.r = Math.pow(color.r, gammaFactor);
    this.g = Math.pow(color.g, gammaFactor);
    this.b = Math.pow(color.b, gammaFactor);
    return this;
  },
  copyLinearToGamma: function (color, gammaFactor) {
    if (gammaFactor === undefined) gammaFactor = 2.0;
    var safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;
    this.r = Math.pow(color.r, safeInverse);
    this.g = Math.pow(color.g, safeInverse);
    this.b = Math.pow(color.b, safeInverse);
    return this;
  },
  convertGammaToLinear: function (gammaFactor) {
    this.copyGammaToLinear(this, gammaFactor);
    return this;
  },
  convertLinearToGamma: function (gammaFactor) {
    this.copyLinearToGamma(this, gammaFactor);
    return this;
  },
  copySRGBToLinear: function () {
    function SRGBToLinear(c) {
      return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);
    }

    return function copySRGBToLinear(color) {
      this.r = SRGBToLinear(color.r);
      this.g = SRGBToLinear(color.g);
      this.b = SRGBToLinear(color.b);
      return this;
    };
  }(),
  copyLinearToSRGB: function () {
    function LinearToSRGB(c) {
      return c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
    }

    return function copyLinearToSRGB(color) {
      this.r = LinearToSRGB(color.r);
      this.g = LinearToSRGB(color.g);
      this.b = LinearToSRGB(color.b);
      return this;
    };
  }(),
  convertSRGBToLinear: function () {
    this.copySRGBToLinear(this);
    return this;
  },
  convertLinearToSRGB: function () {
    this.copyLinearToSRGB(this);
    return this;
  },
  getHex: function () {
    return this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;
  },
  getHexString: function () {
    return ('000000' + this.getHex().toString(16)).slice(-6);
  },
  getHSL: function (target) {
    // h,s,l ranges are in 0.0 - 1.0
    if (target === undefined) {
      console.warn('THREE.Color: .getHSL() target is now required');
      target = {
        h: 0,
        s: 0,
        l: 0
      };
    }

    var r = this.r,
        g = this.g,
        b = this.b;
    var max = Math.max(r, g, b);
    var min = Math.min(r, g, b);
    var hue, saturation;
    var lightness = (min + max) / 2.0;

    if (min === max) {
      hue = 0;
      saturation = 0;
    } else {
      var delta = max - min;
      saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);

      switch (max) {
        case r:
          hue = (g - b) / delta + (g < b ? 6 : 0);
          break;

        case g:
          hue = (b - r) / delta + 2;
          break;

        case b:
          hue = (r - g) / delta + 4;
          break;
      }

      hue /= 6;
    }

    target.h = hue;
    target.s = saturation;
    target.l = lightness;
    return target;
  },
  getStyle: function () {
    return 'rgb(' + (this.r * 255 | 0) + ',' + (this.g * 255 | 0) + ',' + (this.b * 255 | 0) + ')';
  },
  offsetHSL: function () {
    var hsl = {};
    return function (h, s, l) {
      this.getHSL(hsl);
      hsl.h += h;
      hsl.s += s;
      hsl.l += l;
      this.setHSL(hsl.h, hsl.s, hsl.l);
      return this;
    };
  }(),
  add: function (color) {
    this.r += color.r;
    this.g += color.g;
    this.b += color.b;
    return this;
  },
  addColors: function (color1, color2) {
    this.r = color1.r + color2.r;
    this.g = color1.g + color2.g;
    this.b = color1.b + color2.b;
    return this;
  },
  addScalar: function (s) {
    this.r += s;
    this.g += s;
    this.b += s;
    return this;
  },
  sub: function (color) {
    this.r = Math.max(0, this.r - color.r);
    this.g = Math.max(0, this.g - color.g);
    this.b = Math.max(0, this.b - color.b);
    return this;
  },
  multiply: function (color) {
    this.r *= color.r;
    this.g *= color.g;
    this.b *= color.b;
    return this;
  },
  multiplyScalar: function (s) {
    this.r *= s;
    this.g *= s;
    this.b *= s;
    return this;
  },
  lerp: function (color, alpha) {
    this.r += (color.r - this.r) * alpha;
    this.g += (color.g - this.g) * alpha;
    this.b += (color.b - this.b) * alpha;
    return this;
  },
  lerpHSL: function () {
    var hslA = {
      h: 0,
      s: 0,
      l: 0
    };
    var hslB = {
      h: 0,
      s: 0,
      l: 0
    };
    return function lerpHSL(color, alpha) {
      this.getHSL(hslA);
      color.getHSL(hslB);

      var h = _Math.lerp(hslA.h, hslB.h, alpha);

      var s = _Math.lerp(hslA.s, hslB.s, alpha);

      var l = _Math.lerp(hslA.l, hslB.l, alpha);

      this.setHSL(h, s, l);
      return this;
    };
  }(),
  equals: function (c) {
    return c.r === this.r && c.g === this.g && c.b === this.b;
  },
  fromArray: function (array, offset) {
    if (offset === undefined) offset = 0;
    this.r = array[offset];
    this.g = array[offset + 1];
    this.b = array[offset + 2];
    return this;
  },
  toArray: function (array, offset) {
    if (array === undefined) array = [];
    if (offset === undefined) offset = 0;
    array[offset] = this.r;
    array[offset + 1] = this.g;
    array[offset + 2] = this.b;
    return array;
  },
  toJSON: function () {
    return this.getHex();
  }
});
/**
 * Uniforms library for shared webgl shaders
 */

var UniformsLib = {
  common: {
    diffuse: {
      value: new Color(0xeeeeee)
    },
    opacity: {
      value: 1.0
    },
    map: {
      value: null
    },
    uvTransform: {
      value: new Matrix3()
    },
    alphaMap: {
      value: null
    }
  },
  specularmap: {
    specularMap: {
      value: null
    }
  },
  envmap: {
    envMap: {
      value: null
    },
    flipEnvMap: {
      value: -1
    },
    reflectivity: {
      value: 1.0
    },
    refractionRatio: {
      value: 0.98
    },
    maxMipLevel: {
      value: 0
    }
  },
  aomap: {
    aoMap: {
      value: null
    },
    aoMapIntensity: {
      value: 1
    }
  },
  lightmap: {
    lightMap: {
      value: null
    },
    lightMapIntensity: {
      value: 1
    }
  },
  emissivemap: {
    emissiveMap: {
      value: null
    }
  },
  bumpmap: {
    bumpMap: {
      value: null
    },
    bumpScale: {
      value: 1
    }
  },
  normalmap: {
    normalMap: {
      value: null
    },
    normalScale: {
      value: new Vector2(1, 1)
    }
  },
  displacementmap: {
    displacementMap: {
      value: null
    },
    displacementScale: {
      value: 1
    },
    displacementBias: {
      value: 0
    }
  },
  roughnessmap: {
    roughnessMap: {
      value: null
    }
  },
  metalnessmap: {
    metalnessMap: {
      value: null
    }
  },
  gradientmap: {
    gradientMap: {
      value: null
    }
  },
  fog: {
    fogDensity: {
      value: 0.00025
    },
    fogNear: {
      value: 1
    },
    fogFar: {
      value: 2000
    },
    fogColor: {
      value: new Color(0xffffff)
    }
  },
  lights: {
    ambientLightColor: {
      value: []
    },
    directionalLights: {
      value: [],
      properties: {
        direction: {},
        color: {},
        shadow: {},
        shadowBias: {},
        shadowRadius: {},
        shadowMapSize: {}
      }
    },
    directionalShadowMap: {
      value: []
    },
    directionalShadowMatrix: {
      value: []
    },
    spotLights: {
      value: [],
      properties: {
        color: {},
        position: {},
        direction: {},
        distance: {},
        coneCos: {},
        penumbraCos: {},
        decay: {},
        shadow: {},
        shadowBias: {},
        shadowRadius: {},
        shadowMapSize: {}
      }
    },
    spotShadowMap: {
      value: []
    },
    spotShadowMatrix: {
      value: []
    },
    pointLights: {
      value: [],
      properties: {
        color: {},
        position: {},
        decay: {},
        distance: {},
        shadow: {},
        shadowBias: {},
        shadowRadius: {},
        shadowMapSize: {},
        shadowCameraNear: {},
        shadowCameraFar: {}
      }
    },
    pointShadowMap: {
      value: []
    },
    pointShadowMatrix: {
      value: []
    },
    hemisphereLights: {
      value: [],
      properties: {
        direction: {},
        skyColor: {},
        groundColor: {}
      }
    },
    // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
    rectAreaLights: {
      value: [],
      properties: {
        color: {},
        position: {},
        width: {},
        height: {}
      }
    }
  },
  points: {
    diffuse: {
      value: new Color(0xeeeeee)
    },
    opacity: {
      value: 1.0
    },
    size: {
      value: 1.0
    },
    scale: {
      value: 1.0
    },
    map: {
      value: null
    },
    uvTransform: {
      value: new Matrix3()
    }
  },
  sprite: {
    diffuse: {
      value: new Color(0xeeeeee)
    },
    opacity: {
      value: 1.0
    },
    center: {
      value: new Vector2(0.5, 0.5)
    },
    rotation: {
      value: 0.0
    },
    map: {
      value: null
    },
    uvTransform: {
      value: new Matrix3()
    }
  }
};
/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 */

exports.UniformsLib = UniformsLib;
var ShaderLib = {
  basic: {
    uniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.fog]),
    vertexShader: ShaderChunk.meshbasic_vert,
    fragmentShader: ShaderChunk.meshbasic_frag
  },
  lambert: {
    uniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.fog, UniformsLib.lights, {
      emissive: {
        value: new Color(0x000000)
      }
    }]),
    vertexShader: ShaderChunk.meshlambert_vert,
    fragmentShader: ShaderChunk.meshlambert_frag
  },
  phong: {
    uniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.gradientmap, UniformsLib.fog, UniformsLib.lights, {
      emissive: {
        value: new Color(0x000000)
      },
      specular: {
        value: new Color(0x111111)
      },
      shininess: {
        value: 30
      }
    }]),
    vertexShader: ShaderChunk.meshphong_vert,
    fragmentShader: ShaderChunk.meshphong_frag
  },
  standard: {
    uniforms: mergeUniforms([UniformsLib.common, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.roughnessmap, UniformsLib.metalnessmap, UniformsLib.fog, UniformsLib.lights, {
      emissive: {
        value: new Color(0x000000)
      },
      roughness: {
        value: 0.5
      },
      metalness: {
        value: 0.5
      },
      envMapIntensity: {
        value: 1 // temporary

      }
    }]),
    vertexShader: ShaderChunk.meshphysical_vert,
    fragmentShader: ShaderChunk.meshphysical_frag
  },
  matcap: {
    uniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, {
      matcap: {
        value: null
      }
    }]),
    vertexShader: ShaderChunk.meshmatcap_vert,
    fragmentShader: ShaderChunk.meshmatcap_frag
  },
  points: {
    uniforms: mergeUniforms([UniformsLib.points, UniformsLib.fog]),
    vertexShader: ShaderChunk.points_vert,
    fragmentShader: ShaderChunk.points_frag
  },
  dashed: {
    uniforms: mergeUniforms([UniformsLib.common, UniformsLib.fog, {
      scale: {
        value: 1
      },
      dashSize: {
        value: 1
      },
      totalSize: {
        value: 2
      }
    }]),
    vertexShader: ShaderChunk.linedashed_vert,
    fragmentShader: ShaderChunk.linedashed_frag
  },
  depth: {
    uniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap]),
    vertexShader: ShaderChunk.depth_vert,
    fragmentShader: ShaderChunk.depth_frag
  },
  normal: {
    uniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, {
      opacity: {
        value: 1.0
      }
    }]),
    vertexShader: ShaderChunk.normal_vert,
    fragmentShader: ShaderChunk.normal_frag
  },
  sprite: {
    uniforms: mergeUniforms([UniformsLib.sprite, UniformsLib.fog]),
    vertexShader: ShaderChunk.sprite_vert,
    fragmentShader: ShaderChunk.sprite_frag
  },
  background: {
    uniforms: {
      uvTransform: {
        value: new Matrix3()
      },
      t2D: {
        value: null
      }
    },
    vertexShader: ShaderChunk.background_vert,
    fragmentShader: ShaderChunk.background_frag
  },

  /* -------------------------------------------------------------------------
  //	Cube map shader
   ------------------------------------------------------------------------- */
  cube: {
    uniforms: {
      tCube: {
        value: null
      },
      tFlip: {
        value: -1
      },
      opacity: {
        value: 1.0
      }
    },
    vertexShader: ShaderChunk.cube_vert,
    fragmentShader: ShaderChunk.cube_frag
  },
  equirect: {
    uniforms: {
      tEquirect: {
        value: null
      }
    },
    vertexShader: ShaderChunk.equirect_vert,
    fragmentShader: ShaderChunk.equirect_frag
  },
  distanceRGBA: {
    uniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap, {
      referencePosition: {
        value: new Vector3()
      },
      nearDistance: {
        value: 1
      },
      farDistance: {
        value: 1000
      }
    }]),
    vertexShader: ShaderChunk.distanceRGBA_vert,
    fragmentShader: ShaderChunk.distanceRGBA_frag
  },
  shadow: {
    uniforms: mergeUniforms([UniformsLib.lights, UniformsLib.fog, {
      color: {
        value: new Color(0x00000)
      },
      opacity: {
        value: 1.0
      }
    }]),
    vertexShader: ShaderChunk.shadow_vert,
    fragmentShader: ShaderChunk.shadow_frag
  }
};
exports.ShaderLib = ShaderLib;
ShaderLib.physical = {
  uniforms: mergeUniforms([ShaderLib.standard.uniforms, {
    clearCoat: {
      value: 0
    },
    clearCoatRoughness: {
      value: 0
    }
  }]),
  vertexShader: ShaderChunk.meshphysical_vert,
  fragmentShader: ShaderChunk.meshphysical_frag
};
/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLAnimation() {
  var context = null;
  var isAnimating = false;
  var animationLoop = null;

  function onAnimationFrame(time, frame) {
    if (isAnimating === false) return;
    animationLoop(time, frame);
    context.requestAnimationFrame(onAnimationFrame);
  }

  return {
    start: function () {
      if (isAnimating === true) return;
      if (animationLoop === null) return;
      context.requestAnimationFrame(onAnimationFrame);
      isAnimating = true;
    },
    stop: function () {
      isAnimating = false;
    },
    setAnimationLoop: function (callback) {
      animationLoop = callback;
    },
    setContext: function (value) {
      context = value;
    }
  };
}
/**
 * @author mrdoob / http://mrdoob.com/
 */


function WebGLAttributes(gl) {
  var buffers = new WeakMap();

  function createBuffer(attribute, bufferType) {
    var array = attribute.array;
    var usage = attribute.dynamic ? 35048 : 35044;
    var buffer = gl.createBuffer();
    gl.bindBuffer(bufferType, buffer);
    gl.bufferData(bufferType, array, usage);
    attribute.onUploadCallback();
    var type = 5126;

    if (array instanceof Float32Array) {
      type = 5126;
    } else if (array instanceof Float64Array) {
      console.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.');
    } else if (array instanceof Uint16Array) {
      type = 5123;
    } else if (array instanceof Int16Array) {
      type = 5122;
    } else if (array instanceof Uint32Array) {
      type = 5125;
    } else if (array instanceof Int32Array) {
      type = 5124;
    } else if (array instanceof Int8Array) {
      type = 5120;
    } else if (array instanceof Uint8Array) {
      type = 5121;
    }

    return {
      buffer: buffer,
      type: type,
      bytesPerElement: array.BYTES_PER_ELEMENT,
      version: attribute.version
    };
  }

  function updateBuffer(buffer, attribute, bufferType) {
    var array = attribute.array;
    var updateRange = attribute.updateRange;
    gl.bindBuffer(bufferType, buffer);

    if (attribute.dynamic === false) {
      gl.bufferData(bufferType, array, 35044);
    } else if (updateRange.count === -1) {
      // Not using update ranges
      gl.bufferSubData(bufferType, 0, array);
    } else if (updateRange.count === 0) {
      console.error('THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.');
    } else {
      gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));
      updateRange.count = -1; // reset range
    }
  } //


  function get(attribute) {
    if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
    return buffers.get(attribute);
  }

  function remove(attribute) {
    if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
    var data = buffers.get(attribute);

    if (data) {
      gl.deleteBuffer(data.buffer);
      buffers.delete(attribute);
    }
  }

  function update(attribute, bufferType) {
    if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
    var data = buffers.get(attribute);

    if (data === undefined) {
      buffers.set(attribute, createBuffer(attribute, bufferType));
    } else if (data.version < attribute.version) {
      updateBuffer(data.buffer, attribute, bufferType);
      data.version = attribute.version;
    }
  }

  return {
    get: get,
    remove: remove,
    update: update
  };
}
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */


function Face3(a, b, c, normal, color, materialIndex) {
  this.a = a;
  this.b = b;
  this.c = c;
  this.normal = normal && normal.isVector3 ? normal : new Vector3();
  this.vertexNormals = Array.isArray(normal) ? normal : [];
  this.color = color && color.isColor ? color : new Color();
  this.vertexColors = Array.isArray(color) ? color : [];
  this.materialIndex = materialIndex !== undefined ? materialIndex : 0;
}

Object.assign(Face3.prototype, {
  clone: function () {
    return new this.constructor().copy(this);
  },
  copy: function (source) {
    this.a = source.a;
    this.b = source.b;
    this.c = source.c;
    this.normal.copy(source.normal);
    this.color.copy(source.color);
    this.materialIndex = source.materialIndex;

    for (var i = 0, il = source.vertexNormals.length; i < il; i++) {
      this.vertexNormals[i] = source.vertexNormals[i].clone();
    }

    for (var i = 0, il = source.vertexColors.length; i < il; i++) {
      this.vertexColors[i] = source.vertexColors[i].clone();
    }

    return this;
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://clara.io
 */

function Euler(x, y, z, order) {
  this._x = x || 0;
  this._y = y || 0;
  this._z = z || 0;
  this._order = order || Euler.DefaultOrder;
}

Euler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];
Euler.DefaultOrder = 'XYZ';
Object.defineProperties(Euler.prototype, {
  x: {
    get: function () {
      return this._x;
    },
    set: function (value) {
      this._x = value;
      this.onChangeCallback();
    }
  },
  y: {
    get: function () {
      return this._y;
    },
    set: function (value) {
      this._y = value;
      this.onChangeCallback();
    }
  },
  z: {
    get: function () {
      return this._z;
    },
    set: function (value) {
      this._z = value;
      this.onChangeCallback();
    }
  },
  order: {
    get: function () {
      return this._order;
    },
    set: function (value) {
      this._order = value;
      this.onChangeCallback();
    }
  }
});
Object.assign(Euler.prototype, {
  isEuler: true,
  set: function (x, y, z, order) {
    this._x = x;
    this._y = y;
    this._z = z;
    this._order = order || this._order;
    this.onChangeCallback();
    return this;
  },
  clone: function () {
    return new this.constructor(this._x, this._y, this._z, this._order);
  },
  copy: function (euler) {
    this._x = euler._x;
    this._y = euler._y;
    this._z = euler._z;
    this._order = euler._order;
    this.onChangeCallback();
    return this;
  },
  setFromRotationMatrix: function (m, order, update) {
    var clamp = _Math.clamp; // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

    var te = m.elements;
    var m11 = te[0],
        m12 = te[4],
        m13 = te[8];
    var m21 = te[1],
        m22 = te[5],
        m23 = te[9];
    var m31 = te[2],
        m32 = te[6],
        m33 = te[10];
    order = order || this._order;

    if (order === 'XYZ') {
      this._y = Math.asin(clamp(m13, -1, 1));

      if (Math.abs(m13) < 0.99999) {
        this._x = Math.atan2(-m23, m33);
        this._z = Math.atan2(-m12, m11);
      } else {
        this._x = Math.atan2(m32, m22);
        this._z = 0;
      }
    } else if (order === 'YXZ') {
      this._x = Math.asin(-clamp(m23, -1, 1));

      if (Math.abs(m23) < 0.99999) {
        this._y = Math.atan2(m13, m33);
        this._z = Math.atan2(m21, m22);
      } else {
        this._y = Math.atan2(-m31, m11);
        this._z = 0;
      }
    } else if (order === 'ZXY') {
      this._x = Math.asin(clamp(m32, -1, 1));

      if (Math.abs(m32) < 0.99999) {
        this._y = Math.atan2(-m31, m33);
        this._z = Math.atan2(-m12, m22);
      } else {
        this._y = 0;
        this._z = Math.atan2(m21, m11);
      }
    } else if (order === 'ZYX') {
      this._y = Math.asin(-clamp(m31, -1, 1));

      if (Math.abs(m31) < 0.99999) {
        this._x = Math.atan2(m32, m33);
        this._z = Math.atan2(m21, m11);
      } else {
        this._x = 0;
        this._z = Math.atan2(-m12, m22);
      }
    } else if (order === 'YZX') {
      this._z = Math.asin(clamp(m21, -1, 1));

      if (Math.abs(m21) < 0.99999) {
        this._x = Math.atan2(-m23, m22);
        this._y = Math.atan2(-m31, m11);
      } else {
        this._x = 0;
        this._y = Math.atan2(m13, m33);
      }
    } else if (order === 'XZY') {
      this._z = Math.asin(-clamp(m12, -1, 1));

      if (Math.abs(m12) < 0.99999) {
        this._x = Math.atan2(m32, m22);
        this._y = Math.atan2(m13, m11);
      } else {
        this._x = Math.atan2(-m23, m33);
        this._y = 0;
      }
    } else {
      console.warn('THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order);
    }

    this._order = order;
    if (update !== false) this.onChangeCallback();
    return this;
  },
  setFromQuaternion: function () {
    var matrix = new Matrix4();
    return function setFromQuaternion(q, order, update) {
      matrix.makeRotationFromQuaternion(q);
      return this.setFromRotationMatrix(matrix, order, update);
    };
  }(),
  setFromVector3: function (v, order) {
    return this.set(v.x, v.y, v.z, order || this._order);
  },
  reorder: function () {
    // WARNING: this discards revolution information -bhouston
    var q = new Quaternion();
    return function reorder(newOrder) {
      q.setFromEuler(this);
      return this.setFromQuaternion(q, newOrder);
    };
  }(),
  equals: function (euler) {
    return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
  },
  fromArray: function (array) {
    this._x = array[0];
    this._y = array[1];
    this._z = array[2];
    if (array[3] !== undefined) this._order = array[3];
    this.onChangeCallback();
    return this;
  },
  toArray: function (array, offset) {
    if (array === undefined) array = [];
    if (offset === undefined) offset = 0;
    array[offset] = this._x;
    array[offset + 1] = this._y;
    array[offset + 2] = this._z;
    array[offset + 3] = this._order;
    return array;
  },
  toVector3: function (optionalResult) {
    if (optionalResult) {
      return optionalResult.set(this._x, this._y, this._z);
    } else {
      return new Vector3(this._x, this._y, this._z);
    }
  },
  onChange: function (callback) {
    this.onChangeCallback = callback;
    return this;
  },
  onChangeCallback: function () {}
});
/**
 * @author mrdoob / http://mrdoob.com/
 */

function Layers() {
  this.mask = 1 | 0;
}

Object.assign(Layers.prototype, {
  set: function (channel) {
    this.mask = 1 << channel | 0;
  },
  enable: function (channel) {
    this.mask |= 1 << channel | 0;
  },
  toggle: function (channel) {
    this.mask ^= 1 << channel | 0;
  },
  disable: function (channel) {
    this.mask &= ~(1 << channel | 0);
  },
  test: function (layers) {
    return (this.mask & layers.mask) !== 0;
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author elephantatwork / www.elephantatwork.ch
 */

var object3DId = 0;

function Object3D() {
  Object.defineProperty(this, 'id', {
    value: object3DId++
  });
  this.uuid = _Math.generateUUID();
  this.name = '';
  this.type = 'Object3D';
  this.parent = null;
  this.children = [];
  this.up = Object3D.DefaultUp.clone();
  var position = new Vector3();
  var rotation = new Euler();
  var quaternion = new Quaternion();
  var scale = new Vector3(1, 1, 1);

  function onRotationChange() {
    quaternion.setFromEuler(rotation, false);
  }

  function onQuaternionChange() {
    rotation.setFromQuaternion(quaternion, undefined, false);
  }

  rotation.onChange(onRotationChange);
  quaternion.onChange(onQuaternionChange);
  Object.defineProperties(this, {
    position: {
      configurable: true,
      enumerable: true,
      value: position
    },
    rotation: {
      configurable: true,
      enumerable: true,
      value: rotation
    },
    quaternion: {
      configurable: true,
      enumerable: true,
      value: quaternion
    },
    scale: {
      configurable: true,
      enumerable: true,
      value: scale
    },
    modelViewMatrix: {
      value: new Matrix4()
    },
    normalMatrix: {
      value: new Matrix3()
    }
  });
  this.matrix = new Matrix4();
  this.matrixWorld = new Matrix4();
  this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
  this.matrixWorldNeedsUpdate = false;
  this.layers = new Layers();
  this.visible = true;
  this.castShadow = false;
  this.receiveShadow = false;
  this.frustumCulled = true;
  this.renderOrder = 0;
  this.userData = {};
}

Object3D.DefaultUp = new Vector3(0, 1, 0);
Object3D.DefaultMatrixAutoUpdate = true;
Object3D.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
  constructor: Object3D,
  isObject3D: true,
  onBeforeRender: function () {},
  onAfterRender: function () {},
  applyMatrix: function (matrix) {
    this.matrix.multiplyMatrices(matrix, this.matrix);
    this.matrix.decompose(this.position, this.quaternion, this.scale);
  },
  applyQuaternion: function (q) {
    this.quaternion.premultiply(q);
    return this;
  },
  setRotationFromAxisAngle: function (axis, angle) {
    // assumes axis is normalized
    this.quaternion.setFromAxisAngle(axis, angle);
  },
  setRotationFromEuler: function (euler) {
    this.quaternion.setFromEuler(euler, true);
  },
  setRotationFromMatrix: function (m) {
    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
    this.quaternion.setFromRotationMatrix(m);
  },
  setRotationFromQuaternion: function (q) {
    // assumes q is normalized
    this.quaternion.copy(q);
  },
  rotateOnAxis: function () {
    // rotate object on axis in object space
    // axis is assumed to be normalized
    var q1 = new Quaternion();
    return function rotateOnAxis(axis, angle) {
      q1.setFromAxisAngle(axis, angle);
      this.quaternion.multiply(q1);
      return this;
    };
  }(),
  rotateOnWorldAxis: function () {
    // rotate object on axis in world space
    // axis is assumed to be normalized
    // method assumes no rotated parent
    var q1 = new Quaternion();
    return function rotateOnWorldAxis(axis, angle) {
      q1.setFromAxisAngle(axis, angle);
      this.quaternion.premultiply(q1);
      return this;
    };
  }(),
  rotateX: function () {
    var v1 = new Vector3(1, 0, 0);
    return function rotateX(angle) {
      return this.rotateOnAxis(v1, angle);
    };
  }(),
  rotateY: function () {
    var v1 = new Vector3(0, 1, 0);
    return function rotateY(angle) {
      return this.rotateOnAxis(v1, angle);
    };
  }(),
  rotateZ: function () {
    var v1 = new Vector3(0, 0, 1);
    return function rotateZ(angle) {
      return this.rotateOnAxis(v1, angle);
    };
  }(),
  translateOnAxis: function () {
    // translate object by distance along axis in object space
    // axis is assumed to be normalized
    var v1 = new Vector3();
    return function translateOnAxis(axis, distance) {
      v1.copy(axis).applyQuaternion(this.quaternion);
      this.position.add(v1.multiplyScalar(distance));
      return this;
    };
  }(),
  translateX: function () {
    var v1 = new Vector3(1, 0, 0);
    return function translateX(distance) {
      return this.translateOnAxis(v1, distance);
    };
  }(),
  translateY: function () {
    var v1 = new Vector3(0, 1, 0);
    return function translateY(distance) {
      return this.translateOnAxis(v1, distance);
    };
  }(),
  translateZ: function () {
    var v1 = new Vector3(0, 0, 1);
    return function translateZ(distance) {
      return this.translateOnAxis(v1, distance);
    };
  }(),
  localToWorld: function (vector) {
    return vector.applyMatrix4(this.matrixWorld);
  },
  worldToLocal: function () {
    var m1 = new Matrix4();
    return function worldToLocal(vector) {
      return vector.applyMatrix4(m1.getInverse(this.matrixWorld));
    };
  }(),
  lookAt: function () {
    // This method does not support objects having non-uniformly-scaled parent(s)
    var q1 = new Quaternion();
    var m1 = new Matrix4();
    var target = new Vector3();
    var position = new Vector3();
    return function lookAt(x, y, z) {
      if (x.isVector3) {
        target.copy(x);
      } else {
        target.set(x, y, z);
      }

      var parent = this.parent;
      this.updateWorldMatrix(true, false);
      position.setFromMatrixPosition(this.matrixWorld);

      if (this.isCamera || this.isLight) {
        m1.lookAt(position, target, this.up);
      } else {
        m1.lookAt(target, position, this.up);
      }

      this.quaternion.setFromRotationMatrix(m1);

      if (parent) {
        m1.extractRotation(parent.matrixWorld);
        q1.setFromRotationMatrix(m1);
        this.quaternion.premultiply(q1.inverse());
      }
    };
  }(),
  add: function (object) {
    if (arguments.length > 1) {
      for (var i = 0; i < arguments.length; i++) {
        this.add(arguments[i]);
      }

      return this;
    }

    if (object === this) {
      console.error("THREE.Object3D.add: object can't be added as a child of itself.", object);
      return this;
    }

    if (object && object.isObject3D) {
      if (object.parent !== null) {
        object.parent.remove(object);
      }

      object.parent = this;
      object.dispatchEvent({
        type: 'added'
      });
      this.children.push(object);
    } else {
      console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object);
    }

    return this;
  },
  remove: function (object) {
    if (arguments.length > 1) {
      for (var i = 0; i < arguments.length; i++) {
        this.remove(arguments[i]);
      }

      return this;
    }

    var index = this.children.indexOf(object);

    if (index !== -1) {
      object.parent = null;
      object.dispatchEvent({
        type: 'removed'
      });
      this.children.splice(index, 1);
    }

    return this;
  },
  getObjectById: function (id) {
    return this.getObjectByProperty('id', id);
  },
  getObjectByName: function (name) {
    return this.getObjectByProperty('name', name);
  },
  getObjectByProperty: function (name, value) {
    if (this[name] === value) return this;

    for (var i = 0, l = this.children.length; i < l; i++) {
      var child = this.children[i];
      var object = child.getObjectByProperty(name, value);

      if (object !== undefined) {
        return object;
      }
    }

    return undefined;
  },
  getWorldPosition: function (target) {
    if (target === undefined) {
      console.warn('THREE.Object3D: .getWorldPosition() target is now required');
      target = new Vector3();
    }

    this.updateMatrixWorld(true);
    return target.setFromMatrixPosition(this.matrixWorld);
  },
  getWorldQuaternion: function () {
    var position = new Vector3();
    var scale = new Vector3();
    return function getWorldQuaternion(target) {
      if (target === undefined) {
        console.warn('THREE.Object3D: .getWorldQuaternion() target is now required');
        target = new Quaternion();
      }

      this.updateMatrixWorld(true);
      this.matrixWorld.decompose(position, target, scale);
      return target;
    };
  }(),
  getWorldScale: function () {
    var position = new Vector3();
    var quaternion = new Quaternion();
    return function getWorldScale(target) {
      if (target === undefined) {
        console.warn('THREE.Object3D: .getWorldScale() target is now required');
        target = new Vector3();
      }

      this.updateMatrixWorld(true);
      this.matrixWorld.decompose(position, quaternion, target);
      return target;
    };
  }(),
  getWorldDirection: function (target) {
    if (target === undefined) {
      console.warn('THREE.Object3D: .getWorldDirection() target is now required');
      target = new Vector3();
    }

    this.updateMatrixWorld(true);
    var e = this.matrixWorld.elements;
    return target.set(e[8], e[9], e[10]).normalize();
  },
  raycast: function () {},
  traverse: function (callback) {
    callback(this);
    var children = this.children;

    for (var i = 0, l = children.length; i < l; i++) {
      children[i].traverse(callback);
    }
  },
  traverseVisible: function (callback) {
    if (this.visible === false) return;
    callback(this);
    var children = this.children;

    for (var i = 0, l = children.length; i < l; i++) {
      children[i].traverseVisible(callback);
    }
  },
  traverseAncestors: function (callback) {
    var parent = this.parent;

    if (parent !== null) {
      callback(parent);
      parent.traverseAncestors(callback);
    }
  },
  updateMatrix: function () {
    this.matrix.compose(this.position, this.quaternion, this.scale);
    this.matrixWorldNeedsUpdate = true;
  },
  updateMatrixWorld: function (force) {
    if (this.matrixAutoUpdate) this.updateMatrix();

    if (this.matrixWorldNeedsUpdate || force) {
      if (this.parent === null) {
        this.matrixWorld.copy(this.matrix);
      } else {
        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
      }

      this.matrixWorldNeedsUpdate = false;
      force = true;
    } // update children


    var children = this.children;

    for (var i = 0, l = children.length; i < l; i++) {
      children[i].updateMatrixWorld(force);
    }
  },
  updateWorldMatrix: function (updateParents, updateChildren) {
    var parent = this.parent;

    if (updateParents === true && parent !== null) {
      parent.updateWorldMatrix(true, false);
    }

    if (this.matrixAutoUpdate) this.updateMatrix();

    if (this.parent === null) {
      this.matrixWorld.copy(this.matrix);
    } else {
      this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
    } // update children


    if (updateChildren === true) {
      var children = this.children;

      for (var i = 0, l = children.length; i < l; i++) {
        children[i].updateWorldMatrix(false, true);
      }
    }
  },
  toJSON: function (meta) {
    // meta is a string when called from JSON.stringify
    var isRootObject = meta === undefined || typeof meta === 'string';
    var output = {}; // meta is a hash used to collect geometries, materials.
    // not providing it implies that this is the root object
    // being serialized.

    if (isRootObject) {
      // initialize meta obj
      meta = {
        geometries: {},
        materials: {},
        textures: {},
        images: {},
        shapes: {}
      };
      output.metadata = {
        version: 4.5,
        type: 'Object',
        generator: 'Object3D.toJSON'
      };
    } // standard Object3D serialization


    var object = {};
    object.uuid = this.uuid;
    object.type = this.type;
    if (this.name !== '') object.name = this.name;
    if (this.castShadow === true) object.castShadow = true;
    if (this.receiveShadow === true) object.receiveShadow = true;
    if (this.visible === false) object.visible = false;
    if (this.frustumCulled === false) object.frustumCulled = false;
    if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;
    if (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;
    object.layers = this.layers.mask;
    object.matrix = this.matrix.toArray();
    if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false; // object specific properties

    if (this.isMesh && this.drawMode !== TrianglesDrawMode) object.drawMode = this.drawMode; //

    function serialize(library, element) {
      if (library[element.uuid] === undefined) {
        library[element.uuid] = element.toJSON(meta);
      }

      return element.uuid;
    }

    if (this.isMesh || this.isLine || this.isPoints) {
      object.geometry = serialize(meta.geometries, this.geometry);
      var parameters = this.geometry.parameters;

      if (parameters !== undefined && parameters.shapes !== undefined) {
        var shapes = parameters.shapes;

        if (Array.isArray(shapes)) {
          for (var i = 0, l = shapes.length; i < l; i++) {
            var shape = shapes[i];
            serialize(meta.shapes, shape);
          }
        } else {
          serialize(meta.shapes, shapes);
        }
      }
    }

    if (this.material !== undefined) {
      if (Array.isArray(this.material)) {
        var uuids = [];

        for (var i = 0, l = this.material.length; i < l; i++) {
          uuids.push(serialize(meta.materials, this.material[i]));
        }

        object.material = uuids;
      } else {
        object.material = serialize(meta.materials, this.material);
      }
    } //


    if (this.children.length > 0) {
      object.children = [];

      for (var i = 0; i < this.children.length; i++) {
        object.children.push(this.children[i].toJSON(meta).object);
      }
    }

    if (isRootObject) {
      var geometries = extractFromCache(meta.geometries);
      var materials = extractFromCache(meta.materials);
      var textures = extractFromCache(meta.textures);
      var images = extractFromCache(meta.images);
      var shapes = extractFromCache(meta.shapes);
      if (geometries.length > 0) output.geometries = geometries;
      if (materials.length > 0) output.materials = materials;
      if (textures.length > 0) output.textures = textures;
      if (images.length > 0) output.images = images;
      if (shapes.length > 0) output.shapes = shapes;
    }

    output.object = object;
    return output; // extract data from the cache hash
    // remove metadata on each item
    // and return as array

    function extractFromCache(cache) {
      var values = [];

      for (var key in cache) {
        var data = cache[key];
        delete data.metadata;
        values.push(data);
      }

      return values;
    }
  },
  clone: function (recursive) {
    return new this.constructor().copy(this, recursive);
  },
  copy: function (source, recursive) {
    if (recursive === undefined) recursive = true;
    this.name = source.name;
    this.up.copy(source.up);
    this.position.copy(source.position);
    this.quaternion.copy(source.quaternion);
    this.scale.copy(source.scale);
    this.matrix.copy(source.matrix);
    this.matrixWorld.copy(source.matrixWorld);
    this.matrixAutoUpdate = source.matrixAutoUpdate;
    this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
    this.layers.mask = source.layers.mask;
    this.visible = source.visible;
    this.castShadow = source.castShadow;
    this.receiveShadow = source.receiveShadow;
    this.frustumCulled = source.frustumCulled;
    this.renderOrder = source.renderOrder;
    this.userData = JSON.parse(JSON.stringify(source.userData));

    if (recursive === true) {
      for (var i = 0; i < source.children.length; i++) {
        var child = source.children[i];
        this.add(child.clone());
      }
    }

    return this;
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 * @author kile / http://kile.stravaganza.org/
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author bhouston / http://clara.io
 */

var geometryId = 0; // Geometry uses even numbers as Id

function Geometry() {
  Object.defineProperty(this, 'id', {
    value: geometryId += 2
  });
  this.uuid = _Math.generateUUID();
  this.name = '';
  this.type = 'Geometry';
  this.vertices = [];
  this.colors = [];
  this.faces = [];
  this.faceVertexUvs = [[]];
  this.morphTargets = [];
  this.morphNormals = [];
  this.skinWeights = [];
  this.skinIndices = [];
  this.lineDistances = [];
  this.boundingBox = null;
  this.boundingSphere = null; // update flags

  this.elementsNeedUpdate = false;
  this.verticesNeedUpdate = false;
  this.uvsNeedUpdate = false;
  this.normalsNeedUpdate = false;
  this.colorsNeedUpdate = false;
  this.lineDistancesNeedUpdate = false;
  this.groupsNeedUpdate = false;
}

Geometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
  constructor: Geometry,
  isGeometry: true,
  applyMatrix: function (matrix) {
    var normalMatrix = new Matrix3().getNormalMatrix(matrix);

    for (var i = 0, il = this.vertices.length; i < il; i++) {
      var vertex = this.vertices[i];
      vertex.applyMatrix4(matrix);
    }

    for (var i = 0, il = this.faces.length; i < il; i++) {
      var face = this.faces[i];
      face.normal.applyMatrix3(normalMatrix).normalize();

      for (var j = 0, jl = face.vertexNormals.length; j < jl; j++) {
        face.vertexNormals[j].applyMatrix3(normalMatrix).normalize();
      }
    }

    if (this.boundingBox !== null) {
      this.computeBoundingBox();
    }

    if (this.boundingSphere !== null) {
      this.computeBoundingSphere();
    }

    this.verticesNeedUpdate = true;
    this.normalsNeedUpdate = true;
    return this;
  },
  rotateX: function () {
    // rotate geometry around world x-axis
    var m1 = new Matrix4();
    return function rotateX(angle) {
      m1.makeRotationX(angle);
      this.applyMatrix(m1);
      return this;
    };
  }(),
  rotateY: function () {
    // rotate geometry around world y-axis
    var m1 = new Matrix4();
    return function rotateY(angle) {
      m1.makeRotationY(angle);
      this.applyMatrix(m1);
      return this;
    };
  }(),
  rotateZ: function () {
    // rotate geometry around world z-axis
    var m1 = new Matrix4();
    return function rotateZ(angle) {
      m1.makeRotationZ(angle);
      this.applyMatrix(m1);
      return this;
    };
  }(),
  translate: function () {
    // translate geometry
    var m1 = new Matrix4();
    return function translate(x, y, z) {
      m1.makeTranslation(x, y, z);
      this.applyMatrix(m1);
      return this;
    };
  }(),
  scale: function () {
    // scale geometry
    var m1 = new Matrix4();
    return function scale(x, y, z) {
      m1.makeScale(x, y, z);
      this.applyMatrix(m1);
      return this;
    };
  }(),
  lookAt: function () {
    var obj = new Object3D();
    return function lookAt(vector) {
      obj.lookAt(vector);
      obj.updateMatrix();
      this.applyMatrix(obj.matrix);
    };
  }(),
  fromBufferGeometry: function (geometry) {
    var scope = this;
    var indices = geometry.index !== null ? geometry.index.array : undefined;
    var attributes = geometry.attributes;
    var positions = attributes.position.array;
    var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
    var colors = attributes.color !== undefined ? attributes.color.array : undefined;
    var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
    var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;
    if (uvs2 !== undefined) this.faceVertexUvs[1] = [];

    for (var i = 0, j = 0; i < positions.length; i += 3, j += 2) {
      scope.vertices.push(new Vector3().fromArray(positions, i));

      if (colors !== undefined) {
        scope.colors.push(new Color().fromArray(colors, i));
      }
    }

    function addFace(a, b, c, materialIndex) {
      var vertexColors = colors === undefined ? [] : [scope.colors[a].clone(), scope.colors[b].clone(), scope.colors[c].clone()];
      var vertexNormals = normals === undefined ? [] : [new Vector3().fromArray(normals, a * 3), new Vector3().fromArray(normals, b * 3), new Vector3().fromArray(normals, c * 3)];
      var face = new Face3(a, b, c, vertexNormals, vertexColors, materialIndex);
      scope.faces.push(face);

      if (uvs !== undefined) {
        scope.faceVertexUvs[0].push([new Vector2().fromArray(uvs, a * 2), new Vector2().fromArray(uvs, b * 2), new Vector2().fromArray(uvs, c * 2)]);
      }

      if (uvs2 !== undefined) {
        scope.faceVertexUvs[1].push([new Vector2().fromArray(uvs2, a * 2), new Vector2().fromArray(uvs2, b * 2), new Vector2().fromArray(uvs2, c * 2)]);
      }
    }

    var groups = geometry.groups;

    if (groups.length > 0) {
      for (var i = 0; i < groups.length; i++) {
        var group = groups[i];
        var start = group.start;
        var count = group.count;

        for (var j = start, jl = start + count; j < jl; j += 3) {
          if (indices !== undefined) {
            addFace(indices[j], indices[j + 1], indices[j + 2], group.materialIndex);
          } else {
            addFace(j, j + 1, j + 2, group.materialIndex);
          }
        }
      }
    } else {
      if (indices !== undefined) {
        for (var i = 0; i < indices.length; i += 3) {
          addFace(indices[i], indices[i + 1], indices[i + 2]);
        }
      } else {
        for (var i = 0; i < positions.length / 3; i += 3) {
          addFace(i, i + 1, i + 2);
        }
      }
    }

    this.computeFaceNormals();

    if (geometry.boundingBox !== null) {
      this.boundingBox = geometry.boundingBox.clone();
    }

    if (geometry.boundingSphere !== null) {
      this.boundingSphere = geometry.boundingSphere.clone();
    }

    return this;
  },
  center: function () {
    var offset = new Vector3();
    return function center() {
      this.computeBoundingBox();
      this.boundingBox.getCenter(offset).negate();
      this.translate(offset.x, offset.y, offset.z);
      return this;
    };
  }(),
  normalize: function () {
    this.computeBoundingSphere();
    var center = this.boundingSphere.center;
    var radius = this.boundingSphere.radius;
    var s = radius === 0 ? 1 : 1.0 / radius;
    var matrix = new Matrix4();
    matrix.set(s, 0, 0, -s * center.x, 0, s, 0, -s * center.y, 0, 0, s, -s * center.z, 0, 0, 0, 1);
    this.applyMatrix(matrix);
    return this;
  },
  computeFaceNormals: function () {
    var cb = new Vector3(),
        ab = new Vector3();

    for (var f = 0, fl = this.faces.length; f < fl; f++) {
      var face = this.faces[f];
      var vA = this.vertices[face.a];
      var vB = this.vertices[face.b];
      var vC = this.vertices[face.c];
      cb.subVectors(vC, vB);
      ab.subVectors(vA, vB);
      cb.cross(ab);
      cb.normalize();
      face.normal.copy(cb);
    }
  },
  computeVertexNormals: function (areaWeighted) {
    if (areaWeighted === undefined) areaWeighted = true;
    var v, vl, f, fl, face, vertices;
    vertices = new Array(this.vertices.length);

    for (v = 0, vl = this.vertices.length; v < vl; v++) {
      vertices[v] = new Vector3();
    }

    if (areaWeighted) {
      // vertex normals weighted by triangle areas
      // http://www.iquilezles.org/www/articles/normals/normals.htm
      var vA, vB, vC;
      var cb = new Vector3(),
          ab = new Vector3();

      for (f = 0, fl = this.faces.length; f < fl; f++) {
        face = this.faces[f];
        vA = this.vertices[face.a];
        vB = this.vertices[face.b];
        vC = this.vertices[face.c];
        cb.subVectors(vC, vB);
        ab.subVectors(vA, vB);
        cb.cross(ab);
        vertices[face.a].add(cb);
        vertices[face.b].add(cb);
        vertices[face.c].add(cb);
      }
    } else {
      this.computeFaceNormals();

      for (f = 0, fl = this.faces.length; f < fl; f++) {
        face = this.faces[f];
        vertices[face.a].add(face.normal);
        vertices[face.b].add(face.normal);
        vertices[face.c].add(face.normal);
      }
    }

    for (v = 0, vl = this.vertices.length; v < vl; v++) {
      vertices[v].normalize();
    }

    for (f = 0, fl = this.faces.length; f < fl; f++) {
      face = this.faces[f];
      var vertexNormals = face.vertexNormals;

      if (vertexNormals.length === 3) {
        vertexNormals[0].copy(vertices[face.a]);
        vertexNormals[1].copy(vertices[face.b]);
        vertexNormals[2].copy(vertices[face.c]);
      } else {
        vertexNormals[0] = vertices[face.a].clone();
        vertexNormals[1] = vertices[face.b].clone();
        vertexNormals[2] = vertices[face.c].clone();
      }
    }

    if (this.faces.length > 0) {
      this.normalsNeedUpdate = true;
    }
  },
  computeFlatVertexNormals: function () {
    var f, fl, face;
    this.computeFaceNormals();

    for (f = 0, fl = this.faces.length; f < fl; f++) {
      face = this.faces[f];
      var vertexNormals = face.vertexNormals;

      if (vertexNormals.length === 3) {
        vertexNormals[0].copy(face.normal);
        vertexNormals[1].copy(face.normal);
        vertexNormals[2].copy(face.normal);
      } else {
        vertexNormals[0] = face.normal.clone();
        vertexNormals[1] = face.normal.clone();
        vertexNormals[2] = face.normal.clone();
      }
    }

    if (this.faces.length > 0) {
      this.normalsNeedUpdate = true;
    }
  },
  computeMorphNormals: function () {
    var i, il, f, fl, face; // save original normals
    // - create temp variables on first access
    //   otherwise just copy (for faster repeated calls)

    for (f = 0, fl = this.faces.length; f < fl; f++) {
      face = this.faces[f];

      if (!face.__originalFaceNormal) {
        face.__originalFaceNormal = face.normal.clone();
      } else {
        face.__originalFaceNormal.copy(face.normal);
      }

      if (!face.__originalVertexNormals) face.__originalVertexNormals = [];

      for (i = 0, il = face.vertexNormals.length; i < il; i++) {
        if (!face.__originalVertexNormals[i]) {
          face.__originalVertexNormals[i] = face.vertexNormals[i].clone();
        } else {
          face.__originalVertexNormals[i].copy(face.vertexNormals[i]);
        }
      }
    } // use temp geometry to compute face and vertex normals for each morph


    var tmpGeo = new Geometry();
    tmpGeo.faces = this.faces;

    for (i = 0, il = this.morphTargets.length; i < il; i++) {
      // create on first access
      if (!this.morphNormals[i]) {
        this.morphNormals[i] = {};
        this.morphNormals[i].faceNormals = [];
        this.morphNormals[i].vertexNormals = [];
        var dstNormalsFace = this.morphNormals[i].faceNormals;
        var dstNormalsVertex = this.morphNormals[i].vertexNormals;
        var faceNormal, vertexNormals;

        for (f = 0, fl = this.faces.length; f < fl; f++) {
          faceNormal = new Vector3();
          vertexNormals = {
            a: new Vector3(),
            b: new Vector3(),
            c: new Vector3()
          };
          dstNormalsFace.push(faceNormal);
          dstNormalsVertex.push(vertexNormals);
        }
      }

      var morphNormals = this.morphNormals[i]; // set vertices to morph target

      tmpGeo.vertices = this.morphTargets[i].vertices; // compute morph normals

      tmpGeo.computeFaceNormals();
      tmpGeo.computeVertexNormals(); // store morph normals

      var faceNormal, vertexNormals;

      for (f = 0, fl = this.faces.length; f < fl; f++) {
        face = this.faces[f];
        faceNormal = morphNormals.faceNormals[f];
        vertexNormals = morphNormals.vertexNormals[f];
        faceNormal.copy(face.normal);
        vertexNormals.a.copy(face.vertexNormals[0]);
        vertexNormals.b.copy(face.vertexNormals[1]);
        vertexNormals.c.copy(face.vertexNormals[2]);
      }
    } // restore original normals


    for (f = 0, fl = this.faces.length; f < fl; f++) {
      face = this.faces[f];
      face.normal = face.__originalFaceNormal;
      face.vertexNormals = face.__originalVertexNormals;
    }
  },
  computeBoundingBox: function () {
    if (this.boundingBox === null) {
      this.boundingBox = new Box3();
    }

    this.boundingBox.setFromPoints(this.vertices);
  },
  computeBoundingSphere: function () {
    if (this.boundingSphere === null) {
      this.boundingSphere = new Sphere();
    }

    this.boundingSphere.setFromPoints(this.vertices);
  },
  merge: function (geometry, matrix, materialIndexOffset) {
    if (!(geometry && geometry.isGeometry)) {
      console.error('THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry);
      return;
    }

    var normalMatrix,
        vertexOffset = this.vertices.length,
        vertices1 = this.vertices,
        vertices2 = geometry.vertices,
        faces1 = this.faces,
        faces2 = geometry.faces,
        uvs1 = this.faceVertexUvs[0],
        uvs2 = geometry.faceVertexUvs[0],
        colors1 = this.colors,
        colors2 = geometry.colors;
    if (materialIndexOffset === undefined) materialIndexOffset = 0;

    if (matrix !== undefined) {
      normalMatrix = new Matrix3().getNormalMatrix(matrix);
    } // vertices


    for (var i = 0, il = vertices2.length; i < il; i++) {
      var vertex = vertices2[i];
      var vertexCopy = vertex.clone();
      if (matrix !== undefined) vertexCopy.applyMatrix4(matrix);
      vertices1.push(vertexCopy);
    } // colors


    for (var i = 0, il = colors2.length; i < il; i++) {
      colors1.push(colors2[i].clone());
    } // faces


    for (i = 0, il = faces2.length; i < il; i++) {
      var face = faces2[i],
          faceCopy,
          normal,
          color,
          faceVertexNormals = face.vertexNormals,
          faceVertexColors = face.vertexColors;
      faceCopy = new Face3(face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset);
      faceCopy.normal.copy(face.normal);

      if (normalMatrix !== undefined) {
        faceCopy.normal.applyMatrix3(normalMatrix).normalize();
      }

      for (var j = 0, jl = faceVertexNormals.length; j < jl; j++) {
        normal = faceVertexNormals[j].clone();

        if (normalMatrix !== undefined) {
          normal.applyMatrix3(normalMatrix).normalize();
        }

        faceCopy.vertexNormals.push(normal);
      }

      faceCopy.color.copy(face.color);

      for (var j = 0, jl = faceVertexColors.length; j < jl; j++) {
        color = faceVertexColors[j];
        faceCopy.vertexColors.push(color.clone());
      }

      faceCopy.materialIndex = face.materialIndex + materialIndexOffset;
      faces1.push(faceCopy);
    } // uvs


    for (i = 0, il = uvs2.length; i < il; i++) {
      var uv = uvs2[i],
          uvCopy = [];

      if (uv === undefined) {
        continue;
      }

      for (var j = 0, jl = uv.length; j < jl; j++) {
        uvCopy.push(uv[j].clone());
      }

      uvs1.push(uvCopy);
    }
  },
  mergeMesh: function (mesh) {
    if (!(mesh && mesh.isMesh)) {
      console.error('THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh);
      return;
    }

    if (mesh.matrixAutoUpdate) mesh.updateMatrix();
    this.merge(mesh.geometry, mesh.matrix);
  },

  /*
   * Checks for duplicate vertices with hashmap.
   * Duplicated vertices are removed
   * and faces' vertices are updated.
   */
  mergeVertices: function () {
    var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)

    var unique = [],
        changes = [];
    var v, key;
    var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001

    var precision = Math.pow(10, precisionPoints);
    var i, il, face;
    var indices, j, jl;

    for (i = 0, il = this.vertices.length; i < il; i++) {
      v = this.vertices[i];
      key = Math.round(v.x * precision) + '_' + Math.round(v.y * precision) + '_' + Math.round(v.z * precision);

      if (verticesMap[key] === undefined) {
        verticesMap[key] = i;
        unique.push(this.vertices[i]);
        changes[i] = unique.length - 1;
      } else {
        //console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
        changes[i] = changes[verticesMap[key]];
      }
    } // if faces are completely degenerate after merging vertices, we
    // have to remove them from the geometry.


    var faceIndicesToRemove = [];

    for (i = 0, il = this.faces.length; i < il; i++) {
      face = this.faces[i];
      face.a = changes[face.a];
      face.b = changes[face.b];
      face.c = changes[face.c];
      indices = [face.a, face.b, face.c]; // if any duplicate vertices are found in a Face3
      // we have to remove the face as nothing can be saved

      for (var n = 0; n < 3; n++) {
        if (indices[n] === indices[(n + 1) % 3]) {
          faceIndicesToRemove.push(i);
          break;
        }
      }
    }

    for (i = faceIndicesToRemove.length - 1; i >= 0; i--) {
      var idx = faceIndicesToRemove[i];
      this.faces.splice(idx, 1);

      for (j = 0, jl = this.faceVertexUvs.length; j < jl; j++) {
        this.faceVertexUvs[j].splice(idx, 1);
      }
    } // Use unique set of vertices


    var diff = this.vertices.length - unique.length;
    this.vertices = unique;
    return diff;
  },
  setFromPoints: function (points) {
    this.vertices = [];

    for (var i = 0, l = points.length; i < l; i++) {
      var point = points[i];
      this.vertices.push(new Vector3(point.x, point.y, point.z || 0));
    }

    return this;
  },
  sortFacesByMaterialIndex: function () {
    var faces = this.faces;
    var length = faces.length; // tag faces

    for (var i = 0; i < length; i++) {
      faces[i]._id = i;
    } // sort faces


    function materialIndexSort(a, b) {
      return a.materialIndex - b.materialIndex;
    }

    faces.sort(materialIndexSort); // sort uvs

    var uvs1 = this.faceVertexUvs[0];
    var uvs2 = this.faceVertexUvs[1];
    var newUvs1, newUvs2;
    if (uvs1 && uvs1.length === length) newUvs1 = [];
    if (uvs2 && uvs2.length === length) newUvs2 = [];

    for (var i = 0; i < length; i++) {
      var id = faces[i]._id;
      if (newUvs1) newUvs1.push(uvs1[id]);
      if (newUvs2) newUvs2.push(uvs2[id]);
    }

    if (newUvs1) this.faceVertexUvs[0] = newUvs1;
    if (newUvs2) this.faceVertexUvs[1] = newUvs2;
  },
  toJSON: function () {
    var data = {
      metadata: {
        version: 4.5,
        type: 'Geometry',
        generator: 'Geometry.toJSON'
      }
    }; // standard Geometry serialization

    data.uuid = this.uuid;
    data.type = this.type;
    if (this.name !== '') data.name = this.name;

    if (this.parameters !== undefined) {
      var parameters = this.parameters;

      for (var key in parameters) {
        if (parameters[key] !== undefined) data[key] = parameters[key];
      }

      return data;
    }

    var vertices = [];

    for (var i = 0; i < this.vertices.length; i++) {
      var vertex = this.vertices[i];
      vertices.push(vertex.x, vertex.y, vertex.z);
    }

    var faces = [];
    var normals = [];
    var normalsHash = {};
    var colors = [];
    var colorsHash = {};
    var uvs = [];
    var uvsHash = {};

    for (var i = 0; i < this.faces.length; i++) {
      var face = this.faces[i];
      var hasMaterial = true;
      var hasFaceUv = false; // deprecated

      var hasFaceVertexUv = this.faceVertexUvs[0][i] !== undefined;
      var hasFaceNormal = face.normal.length() > 0;
      var hasFaceVertexNormal = face.vertexNormals.length > 0;
      var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
      var hasFaceVertexColor = face.vertexColors.length > 0;
      var faceType = 0;
      faceType = setBit(faceType, 0, 0); // isQuad

      faceType = setBit(faceType, 1, hasMaterial);
      faceType = setBit(faceType, 2, hasFaceUv);
      faceType = setBit(faceType, 3, hasFaceVertexUv);
      faceType = setBit(faceType, 4, hasFaceNormal);
      faceType = setBit(faceType, 5, hasFaceVertexNormal);
      faceType = setBit(faceType, 6, hasFaceColor);
      faceType = setBit(faceType, 7, hasFaceVertexColor);
      faces.push(faceType);
      faces.push(face.a, face.b, face.c);
      faces.push(face.materialIndex);

      if (hasFaceVertexUv) {
        var faceVertexUvs = this.faceVertexUvs[0][i];
        faces.push(getUvIndex(faceVertexUvs[0]), getUvIndex(faceVertexUvs[1]), getUvIndex(faceVertexUvs[2]));
      }

      if (hasFaceNormal) {
        faces.push(getNormalIndex(face.normal));
      }

      if (hasFaceVertexNormal) {
        var vertexNormals = face.vertexNormals;
        faces.push(getNormalIndex(vertexNormals[0]), getNormalIndex(vertexNormals[1]), getNormalIndex(vertexNormals[2]));
      }

      if (hasFaceColor) {
        faces.push(getColorIndex(face.color));
      }

      if (hasFaceVertexColor) {
        var vertexColors = face.vertexColors;
        faces.push(getColorIndex(vertexColors[0]), getColorIndex(vertexColors[1]), getColorIndex(vertexColors[2]));
      }
    }

    function setBit(value, position, enabled) {
      return enabled ? value | 1 << position : value & ~(1 << position);
    }

    function getNormalIndex(normal) {
      var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();

      if (normalsHash[hash] !== undefined) {
        return normalsHash[hash];
      }

      normalsHash[hash] = normals.length / 3;
      normals.push(normal.x, normal.y, normal.z);
      return normalsHash[hash];
    }

    function getColorIndex(color) {
      var hash = color.r.toString() + color.g.toString() + color.b.toString();

      if (colorsHash[hash] !== undefined) {
        return colorsHash[hash];
      }

      colorsHash[hash] = colors.length;
      colors.push(color.getHex());
      return colorsHash[hash];
    }

    function getUvIndex(uv) {
      var hash = uv.x.toString() + uv.y.toString();

      if (uvsHash[hash] !== undefined) {
        return uvsHash[hash];
      }

      uvsHash[hash] = uvs.length / 2;
      uvs.push(uv.x, uv.y);
      return uvsHash[hash];
    }

    data.data = {};
    data.data.vertices = vertices;
    data.data.normals = normals;
    if (colors.length > 0) data.data.colors = colors;
    if (uvs.length > 0) data.data.uvs = [uvs]; // temporal backward compatibility

    data.data.faces = faces;
    return data;
  },
  clone: function () {
    /*
     // Handle primitives
    	 var parameters = this.parameters;
    	 if ( parameters !== undefined ) {
    	 var values = [];
    	 for ( var key in parameters ) {
    	 values.push( parameters[ key ] );
    	 }
    	 var geometry = Object.create( this.constructor.prototype );
     this.constructor.apply( geometry, values );
     return geometry;
    	 }
    	 return new this.constructor().copy( this );
     */
    return new Geometry().copy(this);
  },
  copy: function (source) {
    var i, il, j, jl, k, kl; // reset

    this.vertices = [];
    this.colors = [];
    this.faces = [];
    this.faceVertexUvs = [[]];
    this.morphTargets = [];
    this.morphNormals = [];
    this.skinWeights = [];
    this.skinIndices = [];
    this.lineDistances = [];
    this.boundingBox = null;
    this.boundingSphere = null; // name

    this.name = source.name; // vertices

    var vertices = source.vertices;

    for (i = 0, il = vertices.length; i < il; i++) {
      this.vertices.push(vertices[i].clone());
    } // colors


    var colors = source.colors;

    for (i = 0, il = colors.length; i < il; i++) {
      this.colors.push(colors[i].clone());
    } // faces


    var faces = source.faces;

    for (i = 0, il = faces.length; i < il; i++) {
      this.faces.push(faces[i].clone());
    } // face vertex uvs


    for (i = 0, il = source.faceVertexUvs.length; i < il; i++) {
      var faceVertexUvs = source.faceVertexUvs[i];

      if (this.faceVertexUvs[i] === undefined) {
        this.faceVertexUvs[i] = [];
      }

      for (j = 0, jl = faceVertexUvs.length; j < jl; j++) {
        var uvs = faceVertexUvs[j],
            uvsCopy = [];

        for (k = 0, kl = uvs.length; k < kl; k++) {
          var uv = uvs[k];
          uvsCopy.push(uv.clone());
        }

        this.faceVertexUvs[i].push(uvsCopy);
      }
    } // morph targets


    var morphTargets = source.morphTargets;

    for (i = 0, il = morphTargets.length; i < il; i++) {
      var morphTarget = {};
      morphTarget.name = morphTargets[i].name; // vertices

      if (morphTargets[i].vertices !== undefined) {
        morphTarget.vertices = [];

        for (j = 0, jl = morphTargets[i].vertices.length; j < jl; j++) {
          morphTarget.vertices.push(morphTargets[i].vertices[j].clone());
        }
      } // normals


      if (morphTargets[i].normals !== undefined) {
        morphTarget.normals = [];

        for (j = 0, jl = morphTargets[i].normals.length; j < jl; j++) {
          morphTarget.normals.push(morphTargets[i].normals[j].clone());
        }
      }

      this.morphTargets.push(morphTarget);
    } // morph normals


    var morphNormals = source.morphNormals;

    for (i = 0, il = morphNormals.length; i < il; i++) {
      var morphNormal = {}; // vertex normals

      if (morphNormals[i].vertexNormals !== undefined) {
        morphNormal.vertexNormals = [];

        for (j = 0, jl = morphNormals[i].vertexNormals.length; j < jl; j++) {
          var srcVertexNormal = morphNormals[i].vertexNormals[j];
          var destVertexNormal = {};
          destVertexNormal.a = srcVertexNormal.a.clone();
          destVertexNormal.b = srcVertexNormal.b.clone();
          destVertexNormal.c = srcVertexNormal.c.clone();
          morphNormal.vertexNormals.push(destVertexNormal);
        }
      } // face normals


      if (morphNormals[i].faceNormals !== undefined) {
        morphNormal.faceNormals = [];

        for (j = 0, jl = morphNormals[i].faceNormals.length; j < jl; j++) {
          morphNormal.faceNormals.push(morphNormals[i].faceNormals[j].clone());
        }
      }

      this.morphNormals.push(morphNormal);
    } // skin weights


    var skinWeights = source.skinWeights;

    for (i = 0, il = skinWeights.length; i < il; i++) {
      this.skinWeights.push(skinWeights[i].clone());
    } // skin indices


    var skinIndices = source.skinIndices;

    for (i = 0, il = skinIndices.length; i < il; i++) {
      this.skinIndices.push(skinIndices[i].clone());
    } // line distances


    var lineDistances = source.lineDistances;

    for (i = 0, il = lineDistances.length; i < il; i++) {
      this.lineDistances.push(lineDistances[i]);
    } // bounding box


    var boundingBox = source.boundingBox;

    if (boundingBox !== null) {
      this.boundingBox = boundingBox.clone();
    } // bounding sphere


    var boundingSphere = source.boundingSphere;

    if (boundingSphere !== null) {
      this.boundingSphere = boundingSphere.clone();
    } // update flags


    this.elementsNeedUpdate = source.elementsNeedUpdate;
    this.verticesNeedUpdate = source.verticesNeedUpdate;
    this.uvsNeedUpdate = source.uvsNeedUpdate;
    this.normalsNeedUpdate = source.normalsNeedUpdate;
    this.colorsNeedUpdate = source.colorsNeedUpdate;
    this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;
    this.groupsNeedUpdate = source.groupsNeedUpdate;
    return this;
  },
  dispose: function () {
    this.dispatchEvent({
      type: 'dispose'
    });
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 */

function BufferAttribute(array, itemSize, normalized) {
  if (Array.isArray(array)) {
    throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');
  }

  this.name = '';
  this.array = array;
  this.itemSize = itemSize;
  this.count = array !== undefined ? array.length / itemSize : 0;
  this.normalized = normalized === true;
  this.dynamic = false;
  this.updateRange = {
    offset: 0,
    count: -1
  };
  this.version = 0;
}

Object.defineProperty(BufferAttribute.prototype, 'needsUpdate', {
  set: function (value) {
    if (value === true) this.version++;
  }
});
Object.assign(BufferAttribute.prototype, {
  isBufferAttribute: true,
  onUploadCallback: function () {},
  setArray: function (array) {
    if (Array.isArray(array)) {
      throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');
    }

    this.count = array !== undefined ? array.length / this.itemSize : 0;
    this.array = array;
    return this;
  },
  setDynamic: function (value) {
    this.dynamic = value;
    return this;
  },
  copy: function (source) {
    this.name = source.name;
    this.array = new source.array.constructor(source.array);
    this.itemSize = source.itemSize;
    this.count = source.count;
    this.normalized = source.normalized;
    this.dynamic = source.dynamic;
    return this;
  },
  copyAt: function (index1, attribute, index2) {
    index1 *= this.itemSize;
    index2 *= attribute.itemSize;

    for (var i = 0, l = this.itemSize; i < l; i++) {
      this.array[index1 + i] = attribute.array[index2 + i];
    }

    return this;
  },
  copyArray: function (array) {
    this.array.set(array);
    return this;
  },
  copyColorsArray: function (colors) {
    var array = this.array,
        offset = 0;

    for (var i = 0, l = colors.length; i < l; i++) {
      var color = colors[i];

      if (color === undefined) {
        console.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);
        color = new Color();
      }

      array[offset++] = color.r;
      array[offset++] = color.g;
      array[offset++] = color.b;
    }

    return this;
  },
  copyVector2sArray: function (vectors) {
    var array = this.array,
        offset = 0;

    for (var i = 0, l = vectors.length; i < l; i++) {
      var vector = vectors[i];

      if (vector === undefined) {
        console.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);
        vector = new Vector2();
      }

      array[offset++] = vector.x;
      array[offset++] = vector.y;
    }

    return this;
  },
  copyVector3sArray: function (vectors) {
    var array = this.array,
        offset = 0;

    for (var i = 0, l = vectors.length; i < l; i++) {
      var vector = vectors[i];

      if (vector === undefined) {
        console.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);
        vector = new Vector3();
      }

      array[offset++] = vector.x;
      array[offset++] = vector.y;
      array[offset++] = vector.z;
    }

    return this;
  },
  copyVector4sArray: function (vectors) {
    var array = this.array,
        offset = 0;

    for (var i = 0, l = vectors.length; i < l; i++) {
      var vector = vectors[i];

      if (vector === undefined) {
        console.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);
        vector = new Vector4();
      }

      array[offset++] = vector.x;
      array[offset++] = vector.y;
      array[offset++] = vector.z;
      array[offset++] = vector.w;
    }

    return this;
  },
  set: function (value, offset) {
    if (offset === undefined) offset = 0;
    this.array.set(value, offset);
    return this;
  },
  getX: function (index) {
    return this.array[index * this.itemSize];
  },
  setX: function (index, x) {
    this.array[index * this.itemSize] = x;
    return this;
  },
  getY: function (index) {
    return this.array[index * this.itemSize + 1];
  },
  setY: function (index, y) {
    this.array[index * this.itemSize + 1] = y;
    return this;
  },
  getZ: function (index) {
    return this.array[index * this.itemSize + 2];
  },
  setZ: function (index, z) {
    this.array[index * this.itemSize + 2] = z;
    return this;
  },
  getW: function (index) {
    return this.array[index * this.itemSize + 3];
  },
  setW: function (index, w) {
    this.array[index * this.itemSize + 3] = w;
    return this;
  },
  setXY: function (index, x, y) {
    index *= this.itemSize;
    this.array[index + 0] = x;
    this.array[index + 1] = y;
    return this;
  },
  setXYZ: function (index, x, y, z) {
    index *= this.itemSize;
    this.array[index + 0] = x;
    this.array[index + 1] = y;
    this.array[index + 2] = z;
    return this;
  },
  setXYZW: function (index, x, y, z, w) {
    index *= this.itemSize;
    this.array[index + 0] = x;
    this.array[index + 1] = y;
    this.array[index + 2] = z;
    this.array[index + 3] = w;
    return this;
  },
  onUpload: function (callback) {
    this.onUploadCallback = callback;
    return this;
  },
  clone: function () {
    return new this.constructor(this.array, this.itemSize).copy(this);
  }
}); //

function Int8BufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Int8Array(array), itemSize, normalized);
}

Int8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Int8BufferAttribute.prototype.constructor = Int8BufferAttribute;

function Uint8BufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Uint8Array(array), itemSize, normalized);
}

Uint8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Uint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;

function Uint8ClampedBufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Uint8ClampedArray(array), itemSize, normalized);
}

Uint8ClampedBufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Uint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;

function Int16BufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Int16Array(array), itemSize, normalized);
}

Int16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Int16BufferAttribute.prototype.constructor = Int16BufferAttribute;

function Uint16BufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);
}

Uint16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;

function Int32BufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Int32Array(array), itemSize, normalized);
}

Int32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Int32BufferAttribute.prototype.constructor = Int32BufferAttribute;

function Uint32BufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Uint32Array(array), itemSize, normalized);
}

Uint32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;

function Float32BufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Float32Array(array), itemSize, normalized);
}

Float32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;

function Float64BufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Float64Array(array), itemSize, normalized);
}

Float64BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Float64BufferAttribute.prototype.constructor = Float64BufferAttribute;
/**
 * @author mrdoob / http://mrdoob.com/
 */

function DirectGeometry() {
  this.vertices = [];
  this.normals = [];
  this.colors = [];
  this.uvs = [];
  this.uvs2 = [];
  this.groups = [];
  this.morphTargets = {};
  this.skinWeights = [];
  this.skinIndices = []; // this.lineDistances = [];

  this.boundingBox = null;
  this.boundingSphere = null; // update flags

  this.verticesNeedUpdate = false;
  this.normalsNeedUpdate = false;
  this.colorsNeedUpdate = false;
  this.uvsNeedUpdate = false;
  this.groupsNeedUpdate = false;
}

Object.assign(DirectGeometry.prototype, {
  computeGroups: function (geometry) {
    var group;
    var groups = [];
    var materialIndex = undefined;
    var faces = geometry.faces;

    for (var i = 0; i < faces.length; i++) {
      var face = faces[i]; // materials

      if (face.materialIndex !== materialIndex) {
        materialIndex = face.materialIndex;

        if (group !== undefined) {
          group.count = i * 3 - group.start;
          groups.push(group);
        }

        group = {
          start: i * 3,
          materialIndex: materialIndex
        };
      }
    }

    if (group !== undefined) {
      group.count = i * 3 - group.start;
      groups.push(group);
    }

    this.groups = groups;
  },
  fromGeometry: function (geometry) {
    var faces = geometry.faces;
    var vertices = geometry.vertices;
    var faceVertexUvs = geometry.faceVertexUvs;
    var hasFaceVertexUv = faceVertexUvs[0] && faceVertexUvs[0].length > 0;
    var hasFaceVertexUv2 = faceVertexUvs[1] && faceVertexUvs[1].length > 0; // morphs

    var morphTargets = geometry.morphTargets;
    var morphTargetsLength = morphTargets.length;
    var morphTargetsPosition;

    if (morphTargetsLength > 0) {
      morphTargetsPosition = [];

      for (var i = 0; i < morphTargetsLength; i++) {
        morphTargetsPosition[i] = {
          name: morphTargets[i].name,
          data: []
        };
      }

      this.morphTargets.position = morphTargetsPosition;
    }

    var morphNormals = geometry.morphNormals;
    var morphNormalsLength = morphNormals.length;
    var morphTargetsNormal;

    if (morphNormalsLength > 0) {
      morphTargetsNormal = [];

      for (var i = 0; i < morphNormalsLength; i++) {
        morphTargetsNormal[i] = {
          name: morphNormals[i].name,
          data: []
        };
      }

      this.morphTargets.normal = morphTargetsNormal;
    } // skins


    var skinIndices = geometry.skinIndices;
    var skinWeights = geometry.skinWeights;
    var hasSkinIndices = skinIndices.length === vertices.length;
    var hasSkinWeights = skinWeights.length === vertices.length; //

    if (vertices.length > 0 && faces.length === 0) {
      console.error('THREE.DirectGeometry: Faceless geometries are not supported.');
    }

    for (var i = 0; i < faces.length; i++) {
      var face = faces[i];
      this.vertices.push(vertices[face.a], vertices[face.b], vertices[face.c]);
      var vertexNormals = face.vertexNormals;

      if (vertexNormals.length === 3) {
        this.normals.push(vertexNormals[0], vertexNormals[1], vertexNormals[2]);
      } else {
        var normal = face.normal;
        this.normals.push(normal, normal, normal);
      }

      var vertexColors = face.vertexColors;

      if (vertexColors.length === 3) {
        this.colors.push(vertexColors[0], vertexColors[1], vertexColors[2]);
      } else {
        var color = face.color;
        this.colors.push(color, color, color);
      }

      if (hasFaceVertexUv === true) {
        var vertexUvs = faceVertexUvs[0][i];

        if (vertexUvs !== undefined) {
          this.uvs.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);
        } else {
          console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i);
          this.uvs.push(new Vector2(), new Vector2(), new Vector2());
        }
      }

      if (hasFaceVertexUv2 === true) {
        var vertexUvs = faceVertexUvs[1][i];

        if (vertexUvs !== undefined) {
          this.uvs2.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);
        } else {
          console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i);
          this.uvs2.push(new Vector2(), new Vector2(), new Vector2());
        }
      } // morphs


      for (var j = 0; j < morphTargetsLength; j++) {
        var morphTarget = morphTargets[j].vertices;
        morphTargetsPosition[j].data.push(morphTarget[face.a], morphTarget[face.b], morphTarget[face.c]);
      }

      for (var j = 0; j < morphNormalsLength; j++) {
        var morphNormal = morphNormals[j].vertexNormals[i];
        morphTargetsNormal[j].data.push(morphNormal.a, morphNormal.b, morphNormal.c);
      } // skins


      if (hasSkinIndices) {
        this.skinIndices.push(skinIndices[face.a], skinIndices[face.b], skinIndices[face.c]);
      }

      if (hasSkinWeights) {
        this.skinWeights.push(skinWeights[face.a], skinWeights[face.b], skinWeights[face.c]);
      }
    }

    this.computeGroups(geometry);
    this.verticesNeedUpdate = geometry.verticesNeedUpdate;
    this.normalsNeedUpdate = geometry.normalsNeedUpdate;
    this.colorsNeedUpdate = geometry.colorsNeedUpdate;
    this.uvsNeedUpdate = geometry.uvsNeedUpdate;
    this.groupsNeedUpdate = geometry.groupsNeedUpdate;
    return this;
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 */

function arrayMax(array) {
  if (array.length === 0) return -Infinity;
  var max = array[0];

  for (var i = 1, l = array.length; i < l; ++i) {
    if (array[i] > max) max = array[i];
  }

  return max;
}
/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */


var bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id

function BufferGeometry() {
  Object.defineProperty(this, 'id', {
    value: bufferGeometryId += 2
  });
  this.uuid = _Math.generateUUID();
  this.name = '';
  this.type = 'BufferGeometry';
  this.index = null;
  this.attributes = {};
  this.morphAttributes = {};
  this.groups = [];
  this.boundingBox = null;
  this.boundingSphere = null;
  this.drawRange = {
    start: 0,
    count: Infinity
  };
  this.userData = {};
}

BufferGeometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
  constructor: BufferGeometry,
  isBufferGeometry: true,
  getIndex: function () {
    return this.index;
  },
  setIndex: function (index) {
    if (Array.isArray(index)) {
      this.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);
    } else {
      this.index = index;
    }
  },
  addAttribute: function (name, attribute) {
    if (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {
      console.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');
      return this.addAttribute(name, new BufferAttribute(arguments[1], arguments[2]));
    }

    if (name === 'index') {
      console.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');
      this.setIndex(attribute);
      return this;
    }

    this.attributes[name] = attribute;
    return this;
  },
  getAttribute: function (name) {
    return this.attributes[name];
  },
  removeAttribute: function (name) {
    delete this.attributes[name];
    return this;
  },
  addGroup: function (start, count, materialIndex) {
    this.groups.push({
      start: start,
      count: count,
      materialIndex: materialIndex !== undefined ? materialIndex : 0
    });
  },
  clearGroups: function () {
    this.groups = [];
  },
  setDrawRange: function (start, count) {
    this.drawRange.start = start;
    this.drawRange.count = count;
  },
  applyMatrix: function (matrix) {
    var position = this.attributes.position;

    if (position !== undefined) {
      matrix.applyToBufferAttribute(position);
      position.needsUpdate = true;
    }

    var normal = this.attributes.normal;

    if (normal !== undefined) {
      var normalMatrix = new Matrix3().getNormalMatrix(matrix);
      normalMatrix.applyToBufferAttribute(normal);
      normal.needsUpdate = true;
    }

    var tangent = this.attributes.tangent;

    if (tangent !== undefined) {
      var normalMatrix = new Matrix3().getNormalMatrix(matrix); // Tangent is vec4, but the '.w' component is a sign value (+1/-1).

      normalMatrix.applyToBufferAttribute(tangent);
      tangent.needsUpdate = true;
    }

    if (this.boundingBox !== null) {
      this.computeBoundingBox();
    }

    if (this.boundingSphere !== null) {
      this.computeBoundingSphere();
    }

    return this;
  },
  rotateX: function () {
    // rotate geometry around world x-axis
    var m1 = new Matrix4();
    return function rotateX(angle) {
      m1.makeRotationX(angle);
      this.applyMatrix(m1);
      return this;
    };
  }(),
  rotateY: function () {
    // rotate geometry around world y-axis
    var m1 = new Matrix4();
    return function rotateY(angle) {
      m1.makeRotationY(angle);
      this.applyMatrix(m1);
      return this;
    };
  }(),
  rotateZ: function () {
    // rotate geometry around world z-axis
    var m1 = new Matrix4();
    return function rotateZ(angle) {
      m1.makeRotationZ(angle);
      this.applyMatrix(m1);
      return this;
    };
  }(),
  translate: function () {
    // translate geometry
    var m1 = new Matrix4();
    return function translate(x, y, z) {
      m1.makeTranslation(x, y, z);
      this.applyMatrix(m1);
      return this;
    };
  }(),
  scale: function () {
    // scale geometry
    var m1 = new Matrix4();
    return function scale(x, y, z) {
      m1.makeScale(x, y, z);
      this.applyMatrix(m1);
      return this;
    };
  }(),
  lookAt: function () {
    var obj = new Object3D();
    return function lookAt(vector) {
      obj.lookAt(vector);
      obj.updateMatrix();
      this.applyMatrix(obj.matrix);
    };
  }(),
  center: function () {
    var offset = new Vector3();
    return function center() {
      this.computeBoundingBox();
      this.boundingBox.getCenter(offset).negate();
      this.translate(offset.x, offset.y, offset.z);
      return this;
    };
  }(),
  setFromObject: function (object) {
    // console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );
    var geometry = object.geometry;

    if (object.isPoints || object.isLine) {
      var positions = new Float32BufferAttribute(geometry.vertices.length * 3, 3);
      var colors = new Float32BufferAttribute(geometry.colors.length * 3, 3);
      this.addAttribute('position', positions.copyVector3sArray(geometry.vertices));
      this.addAttribute('color', colors.copyColorsArray(geometry.colors));

      if (geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length) {
        var lineDistances = new Float32BufferAttribute(geometry.lineDistances.length, 1);
        this.addAttribute('lineDistance', lineDistances.copyArray(geometry.lineDistances));
      }

      if (geometry.boundingSphere !== null) {
        this.boundingSphere = geometry.boundingSphere.clone();
      }

      if (geometry.boundingBox !== null) {
        this.boundingBox = geometry.boundingBox.clone();
      }
    } else if (object.isMesh) {
      if (geometry && geometry.isGeometry) {
        this.fromGeometry(geometry);
      }
    }

    return this;
  },
  setFromPoints: function (points) {
    var position = [];

    for (var i = 0, l = points.length; i < l; i++) {
      var point = points[i];
      position.push(point.x, point.y, point.z || 0);
    }

    this.addAttribute('position', new Float32BufferAttribute(position, 3));
    return this;
  },
  updateFromObject: function (object) {
    var geometry = object.geometry;

    if (object.isMesh) {
      var direct = geometry.__directGeometry;

      if (geometry.elementsNeedUpdate === true) {
        direct = undefined;
        geometry.elementsNeedUpdate = false;
      }

      if (direct === undefined) {
        return this.fromGeometry(geometry);
      }

      direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
      direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
      direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
      direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
      direct.groupsNeedUpdate = geometry.groupsNeedUpdate;
      geometry.verticesNeedUpdate = false;
      geometry.normalsNeedUpdate = false;
      geometry.colorsNeedUpdate = false;
      geometry.uvsNeedUpdate = false;
      geometry.groupsNeedUpdate = false;
      geometry = direct;
    }

    var attribute;

    if (geometry.verticesNeedUpdate === true) {
      attribute = this.attributes.position;

      if (attribute !== undefined) {
        attribute.copyVector3sArray(geometry.vertices);
        attribute.needsUpdate = true;
      }

      geometry.verticesNeedUpdate = false;
    }

    if (geometry.normalsNeedUpdate === true) {
      attribute = this.attributes.normal;

      if (attribute !== undefined) {
        attribute.copyVector3sArray(geometry.normals);
        attribute.needsUpdate = true;
      }

      geometry.normalsNeedUpdate = false;
    }

    if (geometry.colorsNeedUpdate === true) {
      attribute = this.attributes.color;

      if (attribute !== undefined) {
        attribute.copyColorsArray(geometry.colors);
        attribute.needsUpdate = true;
      }

      geometry.colorsNeedUpdate = false;
    }

    if (geometry.uvsNeedUpdate) {
      attribute = this.attributes.uv;

      if (attribute !== undefined) {
        attribute.copyVector2sArray(geometry.uvs);
        attribute.needsUpdate = true;
      }

      geometry.uvsNeedUpdate = false;
    }

    if (geometry.lineDistancesNeedUpdate) {
      attribute = this.attributes.lineDistance;

      if (attribute !== undefined) {
        attribute.copyArray(geometry.lineDistances);
        attribute.needsUpdate = true;
      }

      geometry.lineDistancesNeedUpdate = false;
    }

    if (geometry.groupsNeedUpdate) {
      geometry.computeGroups(object.geometry);
      this.groups = geometry.groups;
      geometry.groupsNeedUpdate = false;
    }

    return this;
  },
  fromGeometry: function (geometry) {
    geometry.__directGeometry = new DirectGeometry().fromGeometry(geometry);
    return this.fromDirectGeometry(geometry.__directGeometry);
  },
  fromDirectGeometry: function (geometry) {
    var positions = new Float32Array(geometry.vertices.length * 3);
    this.addAttribute('position', new BufferAttribute(positions, 3).copyVector3sArray(geometry.vertices));

    if (geometry.normals.length > 0) {
      var normals = new Float32Array(geometry.normals.length * 3);
      this.addAttribute('normal', new BufferAttribute(normals, 3).copyVector3sArray(geometry.normals));
    }

    if (geometry.colors.length > 0) {
      var colors = new Float32Array(geometry.colors.length * 3);
      this.addAttribute('color', new BufferAttribute(colors, 3).copyColorsArray(geometry.colors));
    }

    if (geometry.uvs.length > 0) {
      var uvs = new Float32Array(geometry.uvs.length * 2);
      this.addAttribute('uv', new BufferAttribute(uvs, 2).copyVector2sArray(geometry.uvs));
    }

    if (geometry.uvs2.length > 0) {
      var uvs2 = new Float32Array(geometry.uvs2.length * 2);
      this.addAttribute('uv2', new BufferAttribute(uvs2, 2).copyVector2sArray(geometry.uvs2));
    } // groups


    this.groups = geometry.groups; // morphs

    for (var name in geometry.morphTargets) {
      var array = [];
      var morphTargets = geometry.morphTargets[name];

      for (var i = 0, l = morphTargets.length; i < l; i++) {
        var morphTarget = morphTargets[i];
        var attribute = new Float32BufferAttribute(morphTarget.data.length * 3, 3);
        attribute.name = morphTarget.name;
        array.push(attribute.copyVector3sArray(morphTarget.data));
      }

      this.morphAttributes[name] = array;
    } // skinning


    if (geometry.skinIndices.length > 0) {
      var skinIndices = new Float32BufferAttribute(geometry.skinIndices.length * 4, 4);
      this.addAttribute('skinIndex', skinIndices.copyVector4sArray(geometry.skinIndices));
    }

    if (geometry.skinWeights.length > 0) {
      var skinWeights = new Float32BufferAttribute(geometry.skinWeights.length * 4, 4);
      this.addAttribute('skinWeight', skinWeights.copyVector4sArray(geometry.skinWeights));
    } //


    if (geometry.boundingSphere !== null) {
      this.boundingSphere = geometry.boundingSphere.clone();
    }

    if (geometry.boundingBox !== null) {
      this.boundingBox = geometry.boundingBox.clone();
    }

    return this;
  },
  computeBoundingBox: function () {
    if (this.boundingBox === null) {
      this.boundingBox = new Box3();
    }

    var position = this.attributes.position;

    if (position !== undefined) {
      this.boundingBox.setFromBufferAttribute(position);
    } else {
      this.boundingBox.makeEmpty();
    }

    if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
      console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
    }
  },
  computeBoundingSphere: function () {
    var box = new Box3();
    var vector = new Vector3();
    return function computeBoundingSphere() {
      if (this.boundingSphere === null) {
        this.boundingSphere = new Sphere();
      }

      var position = this.attributes.position;

      if (position) {
        var center = this.boundingSphere.center;
        box.setFromBufferAttribute(position);
        box.getCenter(center); // hoping to find a boundingSphere with a radius smaller than the
        // boundingSphere of the boundingBox: sqrt(3) smaller in the best case

        var maxRadiusSq = 0;

        for (var i = 0, il = position.count; i < il; i++) {
          vector.x = position.getX(i);
          vector.y = position.getY(i);
          vector.z = position.getZ(i);
          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(vector));
        }

        this.boundingSphere.radius = Math.sqrt(maxRadiusSq);

        if (isNaN(this.boundingSphere.radius)) {
          console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
        }
      }
    };
  }(),
  computeFaceNormals: function () {// backwards compatibility
  },
  computeVertexNormals: function () {
    var index = this.index;
    var attributes = this.attributes;

    if (attributes.position) {
      var positions = attributes.position.array;

      if (attributes.normal === undefined) {
        this.addAttribute('normal', new BufferAttribute(new Float32Array(positions.length), 3));
      } else {
        // reset existing normals to zero
        var array = attributes.normal.array;

        for (var i = 0, il = array.length; i < il; i++) {
          array[i] = 0;
        }
      }

      var normals = attributes.normal.array;
      var vA, vB, vC;
      var pA = new Vector3(),
          pB = new Vector3(),
          pC = new Vector3();
      var cb = new Vector3(),
          ab = new Vector3(); // indexed elements

      if (index) {
        var indices = index.array;

        for (var i = 0, il = index.count; i < il; i += 3) {
          vA = indices[i + 0] * 3;
          vB = indices[i + 1] * 3;
          vC = indices[i + 2] * 3;
          pA.fromArray(positions, vA);
          pB.fromArray(positions, vB);
          pC.fromArray(positions, vC);
          cb.subVectors(pC, pB);
          ab.subVectors(pA, pB);
          cb.cross(ab);
          normals[vA] += cb.x;
          normals[vA + 1] += cb.y;
          normals[vA + 2] += cb.z;
          normals[vB] += cb.x;
          normals[vB + 1] += cb.y;
          normals[vB + 2] += cb.z;
          normals[vC] += cb.x;
          normals[vC + 1] += cb.y;
          normals[vC + 2] += cb.z;
        }
      } else {
        // non-indexed elements (unconnected triangle soup)
        for (var i = 0, il = positions.length; i < il; i += 9) {
          pA.fromArray(positions, i);
          pB.fromArray(positions, i + 3);
          pC.fromArray(positions, i + 6);
          cb.subVectors(pC, pB);
          ab.subVectors(pA, pB);
          cb.cross(ab);
          normals[i] = cb.x;
          normals[i + 1] = cb.y;
          normals[i + 2] = cb.z;
          normals[i + 3] = cb.x;
          normals[i + 4] = cb.y;
          normals[i + 5] = cb.z;
          normals[i + 6] = cb.x;
          normals[i + 7] = cb.y;
          normals[i + 8] = cb.z;
        }
      }

      this.normalizeNormals();
      attributes.normal.needsUpdate = true;
    }
  },
  merge: function (geometry, offset) {
    if (!(geometry && geometry.isBufferGeometry)) {
      console.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);
      return;
    }

    if (offset === undefined) {
      offset = 0;
      console.warn('THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. ' + 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.');
    }

    var attributes = this.attributes;

    for (var key in attributes) {
      if (geometry.attributes[key] === undefined) continue;
      var attribute1 = attributes[key];
      var attributeArray1 = attribute1.array;
      var attribute2 = geometry.attributes[key];
      var attributeArray2 = attribute2.array;
      var attributeSize = attribute2.itemSize;

      for (var i = 0, j = attributeSize * offset; i < attributeArray2.length; i++, j++) {
        attributeArray1[j] = attributeArray2[i];
      }
    }

    return this;
  },
  normalizeNormals: function () {
    var vector = new Vector3();
    return function normalizeNormals() {
      var normals = this.attributes.normal;

      for (var i = 0, il = normals.count; i < il; i++) {
        vector.x = normals.getX(i);
        vector.y = normals.getY(i);
        vector.z = normals.getZ(i);
        vector.normalize();
        normals.setXYZ(i, vector.x, vector.y, vector.z);
      }
    };
  }(),
  toNonIndexed: function () {
    function convertBufferAttribute(attribute, indices) {
      var array = attribute.array;
      var itemSize = attribute.itemSize;
      var array2 = new array.constructor(indices.length * itemSize);
      var index = 0,
          index2 = 0;

      for (var i = 0, l = indices.length; i < l; i++) {
        index = indices[i] * itemSize;

        for (var j = 0; j < itemSize; j++) {
          array2[index2++] = array[index++];
        }
      }

      return new BufferAttribute(array2, itemSize);
    } //


    if (this.index === null) {
      console.warn('THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.');
      return this;
    }

    var geometry2 = new BufferGeometry();
    var indices = this.index.array;
    var attributes = this.attributes; // attributes

    for (var name in attributes) {
      var attribute = attributes[name];
      var newAttribute = convertBufferAttribute(attribute, indices);
      geometry2.addAttribute(name, newAttribute);
    } // morph attributes


    var morphAttributes = this.morphAttributes;

    for (name in morphAttributes) {
      var morphArray = [];
      var morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes

      for (var i = 0, il = morphAttribute.length; i < il; i++) {
        var attribute = morphAttribute[i];
        var newAttribute = convertBufferAttribute(attribute, indices);
        morphArray.push(newAttribute);
      }

      geometry2.morphAttributes[name] = morphArray;
    } // groups


    var groups = this.groups;

    for (var i = 0, l = groups.length; i < l; i++) {
      var group = groups[i];
      geometry2.addGroup(group.start, group.count, group.materialIndex);
    }

    return geometry2;
  },
  toJSON: function () {
    var data = {
      metadata: {
        version: 4.5,
        type: 'BufferGeometry',
        generator: 'BufferGeometry.toJSON'
      }
    }; // standard BufferGeometry serialization

    data.uuid = this.uuid;
    data.type = this.type;
    if (this.name !== '') data.name = this.name;
    if (Object.keys(this.userData).length > 0) data.userData = this.userData;

    if (this.parameters !== undefined) {
      var parameters = this.parameters;

      for (var key in parameters) {
        if (parameters[key] !== undefined) data[key] = parameters[key];
      }

      return data;
    }

    data.data = {
      attributes: {}
    };
    var index = this.index;

    if (index !== null) {
      data.data.index = {
        type: index.array.constructor.name,
        array: Array.prototype.slice.call(index.array)
      };
    }

    var attributes = this.attributes;

    for (var key in attributes) {
      var attribute = attributes[key];
      var attributeData = {
        itemSize: attribute.itemSize,
        type: attribute.array.constructor.name,
        array: Array.prototype.slice.call(attribute.array),
        normalized: attribute.normalized
      };
      if (attribute.name !== '') attributeData.name = attribute.name;
      data.data.attributes[key] = attributeData;
    }

    var morphAttributes = {};
    var hasMorphAttributes = false;

    for (var key in this.morphAttributes) {
      var attributeArray = this.morphAttributes[key];
      var array = [];

      for (var i = 0, il = attributeArray.length; i < il; i++) {
        var attribute = attributeArray[i];
        var attributeData = {
          itemSize: attribute.itemSize,
          type: attribute.array.constructor.name,
          array: Array.prototype.slice.call(attribute.array),
          normalized: attribute.normalized
        };
        if (attribute.name !== '') attributeData.name = attribute.name;
        array.push(attributeData);
      }

      if (array.length > 0) {
        morphAttributes[key] = array;
        hasMorphAttributes = true;
      }
    }

    if (hasMorphAttributes) data.data.morphAttributes = morphAttributes;
    var groups = this.groups;

    if (groups.length > 0) {
      data.data.groups = JSON.parse(JSON.stringify(groups));
    }

    var boundingSphere = this.boundingSphere;

    if (boundingSphere !== null) {
      data.data.boundingSphere = {
        center: boundingSphere.center.toArray(),
        radius: boundingSphere.radius
      };
    }

    return data;
  },
  clone: function () {
    /*
     // Handle primitives
    	 var parameters = this.parameters;
    	 if ( parameters !== undefined ) {
    	 var values = [];
    	 for ( var key in parameters ) {
    	 values.push( parameters[ key ] );
    	 }
    	 var geometry = Object.create( this.constructor.prototype );
     this.constructor.apply( geometry, values );
     return geometry;
    	 }
    	 return new this.constructor().copy( this );
     */
    return new BufferGeometry().copy(this);
  },
  copy: function (source) {
    var name, i, l; // reset

    this.index = null;
    this.attributes = {};
    this.morphAttributes = {};
    this.groups = [];
    this.boundingBox = null;
    this.boundingSphere = null; // name

    this.name = source.name; // index

    var index = source.index;

    if (index !== null) {
      this.setIndex(index.clone());
    } // attributes


    var attributes = source.attributes;

    for (name in attributes) {
      var attribute = attributes[name];
      this.addAttribute(name, attribute.clone());
    } // morph attributes


    var morphAttributes = source.morphAttributes;

    for (name in morphAttributes) {
      var array = [];
      var morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes

      for (i = 0, l = morphAttribute.length; i < l; i++) {
        array.push(morphAttribute[i].clone());
      }

      this.morphAttributes[name] = array;
    } // groups


    var groups = source.groups;

    for (i = 0, l = groups.length; i < l; i++) {
      var group = groups[i];
      this.addGroup(group.start, group.count, group.materialIndex);
    } // bounding box


    var boundingBox = source.boundingBox;

    if (boundingBox !== null) {
      this.boundingBox = boundingBox.clone();
    } // bounding sphere


    var boundingSphere = source.boundingSphere;

    if (boundingSphere !== null) {
      this.boundingSphere = boundingSphere.clone();
    } // draw range


    this.drawRange.start = source.drawRange.start;
    this.drawRange.count = source.drawRange.count; // user data

    this.userData = source.userData;
    return this;
  },
  dispose: function () {
    this.dispatchEvent({
      type: 'dispose'
    });
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */
// BoxGeometry

function BoxGeometry(width, height, depth, widthSegments, heightSegments, depthSegments) {
  Geometry.call(this);
  this.type = 'BoxGeometry';
  this.parameters = {
    width: width,
    height: height,
    depth: depth,
    widthSegments: widthSegments,
    heightSegments: heightSegments,
    depthSegments: depthSegments
  };
  this.fromBufferGeometry(new BoxBufferGeometry(width, height, depth, widthSegments, heightSegments, depthSegments));
  this.mergeVertices();
}

BoxGeometry.prototype = Object.create(Geometry.prototype);
BoxGeometry.prototype.constructor = BoxGeometry; // BoxBufferGeometry

function BoxBufferGeometry(width, height, depth, widthSegments, heightSegments, depthSegments) {
  BufferGeometry.call(this);
  this.type = 'BoxBufferGeometry';
  this.parameters = {
    width: width,
    height: height,
    depth: depth,
    widthSegments: widthSegments,
    heightSegments: heightSegments,
    depthSegments: depthSegments
  };
  var scope = this;
  width = width || 1;
  height = height || 1;
  depth = depth || 1; // segments

  widthSegments = Math.floor(widthSegments) || 1;
  heightSegments = Math.floor(heightSegments) || 1;
  depthSegments = Math.floor(depthSegments) || 1; // buffers

  var indices = [];
  var vertices = [];
  var normals = [];
  var uvs = []; // helper variables

  var numberOfVertices = 0;
  var groupStart = 0; // build each side of the box geometry

  buildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px

  buildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx

  buildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py

  buildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny

  buildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz

  buildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz
  // build geometry

  this.setIndex(indices);
  this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
  this.addAttribute('normal', new Float32BufferAttribute(normals, 3));
  this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));

  function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {
    var segmentWidth = width / gridX;
    var segmentHeight = height / gridY;
    var widthHalf = width / 2;
    var heightHalf = height / 2;
    var depthHalf = depth / 2;
    var gridX1 = gridX + 1;
    var gridY1 = gridY + 1;
    var vertexCounter = 0;
    var groupCount = 0;
    var ix, iy;
    var vector = new Vector3(); // generate vertices, normals and uvs

    for (iy = 0; iy < gridY1; iy++) {
      var y = iy * segmentHeight - heightHalf;

      for (ix = 0; ix < gridX1; ix++) {
        var x = ix * segmentWidth - widthHalf; // set values to correct vector component

        vector[u] = x * udir;
        vector[v] = y * vdir;
        vector[w] = depthHalf; // now apply vector to vertex buffer

        vertices.push(vector.x, vector.y, vector.z); // set values to correct vector component

        vector[u] = 0;
        vector[v] = 0;
        vector[w] = depth > 0 ? 1 : -1; // now apply vector to normal buffer

        normals.push(vector.x, vector.y, vector.z); // uvs

        uvs.push(ix / gridX);
        uvs.push(1 - iy / gridY); // counters

        vertexCounter += 1;
      }
    } // indices
    // 1. you need three indices to draw a single face
    // 2. a single segment consists of two faces
    // 3. so we need to generate six (2*3) indices per segment


    for (iy = 0; iy < gridY; iy++) {
      for (ix = 0; ix < gridX; ix++) {
        var a = numberOfVertices + ix + gridX1 * iy;
        var b = numberOfVertices + ix + gridX1 * (iy + 1);
        var c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
        var d = numberOfVertices + (ix + 1) + gridX1 * iy; // faces

        indices.push(a, b, d);
        indices.push(b, c, d); // increase counter

        groupCount += 6;
      }
    } // add a group to the geometry. this will ensure multi material support


    scope.addGroup(groupStart, groupCount, materialIndex); // calculate new start value for groups

    groupStart += groupCount; // update total number of vertices

    numberOfVertices += vertexCounter;
  }
}

BoxBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;
/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */
// PlaneGeometry

function PlaneGeometry(width, height, widthSegments, heightSegments) {
  Geometry.call(this);
  this.type = 'PlaneGeometry';
  this.parameters = {
    width: width,
    height: height,
    widthSegments: widthSegments,
    heightSegments: heightSegments
  };
  this.fromBufferGeometry(new PlaneBufferGeometry(width, height, widthSegments, heightSegments));
  this.mergeVertices();
}

PlaneGeometry.prototype = Object.create(Geometry.prototype);
PlaneGeometry.prototype.constructor = PlaneGeometry; // PlaneBufferGeometry

function PlaneBufferGeometry(width, height, widthSegments, heightSegments) {
  BufferGeometry.call(this);
  this.type = 'PlaneBufferGeometry';
  this.parameters = {
    width: width,
    height: height,
    widthSegments: widthSegments,
    heightSegments: heightSegments
  };
  width = width || 1;
  height = height || 1;
  var width_half = width / 2;
  var height_half = height / 2;
  var gridX = Math.floor(widthSegments) || 1;
  var gridY = Math.floor(heightSegments) || 1;
  var gridX1 = gridX + 1;
  var gridY1 = gridY + 1;
  var segment_width = width / gridX;
  var segment_height = height / gridY;
  var ix, iy; // buffers

  var indices = [];
  var vertices = [];
  var normals = [];
  var uvs = []; // generate vertices, normals and uvs

  for (iy = 0; iy < gridY1; iy++) {
    var y = iy * segment_height - height_half;

    for (ix = 0; ix < gridX1; ix++) {
      var x = ix * segment_width - width_half;
      vertices.push(x, -y, 0);
      normals.push(0, 0, 1);
      uvs.push(ix / gridX);
      uvs.push(1 - iy / gridY);
    }
  } // indices


  for (iy = 0; iy < gridY; iy++) {
    for (ix = 0; ix < gridX; ix++) {
      var a = ix + gridX1 * iy;
      var b = ix + gridX1 * (iy + 1);
      var c = ix + 1 + gridX1 * (iy + 1);
      var d = ix + 1 + gridX1 * iy; // faces

      indices.push(a, b, d);
      indices.push(b, c, d);
    }
  } // build geometry


  this.setIndex(indices);
  this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
  this.addAttribute('normal', new Float32BufferAttribute(normals, 3));
  this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));
}

PlaneBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

var materialId = 0;

function Material() {
  Object.defineProperty(this, 'id', {
    value: materialId++
  });
  this.uuid = _Math.generateUUID();
  this.name = '';
  this.type = 'Material';
  this.fog = true;
  this.lights = true;
  this.blending = NormalBlending;
  this.side = FrontSide;
  this.flatShading = false;
  this.vertexTangents = false;
  this.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors

  this.opacity = 1;
  this.transparent = false;
  this.blendSrc = SrcAlphaFactor;
  this.blendDst = OneMinusSrcAlphaFactor;
  this.blendEquation = AddEquation;
  this.blendSrcAlpha = null;
  this.blendDstAlpha = null;
  this.blendEquationAlpha = null;
  this.depthFunc = LessEqualDepth;
  this.depthTest = true;
  this.depthWrite = true;
  this.clippingPlanes = null;
  this.clipIntersection = false;
  this.clipShadows = false;
  this.shadowSide = null;
  this.colorWrite = true;
  this.precision = null; // override the renderer's default precision for this material

  this.polygonOffset = false;
  this.polygonOffsetFactor = 0;
  this.polygonOffsetUnits = 0;
  this.dithering = false;
  this.alphaTest = 0;
  this.premultipliedAlpha = false;
  this.visible = true;
  this.userData = {};
  this.needsUpdate = true;
}

Material.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
  constructor: Material,
  isMaterial: true,
  onBeforeCompile: function () {},
  setValues: function (values) {
    if (values === undefined) return;

    for (var key in values) {
      var newValue = values[key];

      if (newValue === undefined) {
        console.warn("THREE.Material: '" + key + "' parameter is undefined.");
        continue;
      } // for backward compatability if shading is set in the constructor


      if (key === 'shading') {
        console.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');
        this.flatShading = newValue === FlatShading ? true : false;
        continue;
      }

      var currentValue = this[key];

      if (currentValue === undefined) {
        console.warn("THREE." + this.type + ": '" + key + "' is not a property of this material.");
        continue;
      }

      if (currentValue && currentValue.isColor) {
        currentValue.set(newValue);
      } else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {
        currentValue.copy(newValue);
      } else {
        this[key] = newValue;
      }
    }
  },
  toJSON: function (meta) {
    var isRoot = meta === undefined || typeof meta === 'string';

    if (isRoot) {
      meta = {
        textures: {},
        images: {}
      };
    }

    var data = {
      metadata: {
        version: 4.5,
        type: 'Material',
        generator: 'Material.toJSON'
      }
    }; // standard Material serialization

    data.uuid = this.uuid;
    data.type = this.type;
    if (this.name !== '') data.name = this.name;
    if (this.color && this.color.isColor) data.color = this.color.getHex();
    if (this.roughness !== undefined) data.roughness = this.roughness;
    if (this.metalness !== undefined) data.metalness = this.metalness;
    if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();
    if (this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;
    if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();
    if (this.shininess !== undefined) data.shininess = this.shininess;
    if (this.clearCoat !== undefined) data.clearCoat = this.clearCoat;
    if (this.clearCoatRoughness !== undefined) data.clearCoatRoughness = this.clearCoatRoughness;
    if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;
    if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;
    if (this.lightMap && this.lightMap.isTexture) data.lightMap = this.lightMap.toJSON(meta).uuid;

    if (this.aoMap && this.aoMap.isTexture) {
      data.aoMap = this.aoMap.toJSON(meta).uuid;
      data.aoMapIntensity = this.aoMapIntensity;
    }

    if (this.bumpMap && this.bumpMap.isTexture) {
      data.bumpMap = this.bumpMap.toJSON(meta).uuid;
      data.bumpScale = this.bumpScale;
    }

    if (this.normalMap && this.normalMap.isTexture) {
      data.normalMap = this.normalMap.toJSON(meta).uuid;
      data.normalMapType = this.normalMapType;
      data.normalScale = this.normalScale.toArray();
    }

    if (this.displacementMap && this.displacementMap.isTexture) {
      data.displacementMap = this.displacementMap.toJSON(meta).uuid;
      data.displacementScale = this.displacementScale;
      data.displacementBias = this.displacementBias;
    }

    if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
    if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
    if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
    if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;

    if (this.envMap && this.envMap.isTexture) {
      data.envMap = this.envMap.toJSON(meta).uuid;
      data.reflectivity = this.reflectivity; // Scale behind envMap

      if (this.combine !== undefined) data.combine = this.combine;
      if (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;
    }

    if (this.gradientMap && this.gradientMap.isTexture) {
      data.gradientMap = this.gradientMap.toJSON(meta).uuid;
    }

    if (this.size !== undefined) data.size = this.size;
    if (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;
    if (this.blending !== NormalBlending) data.blending = this.blending;
    if (this.flatShading === true) data.flatShading = this.flatShading;
    if (this.side !== FrontSide) data.side = this.side;
    if (this.vertexColors !== NoColors) data.vertexColors = this.vertexColors;
    if (this.opacity < 1) data.opacity = this.opacity;
    if (this.transparent === true) data.transparent = this.transparent;
    data.depthFunc = this.depthFunc;
    data.depthTest = this.depthTest;
    data.depthWrite = this.depthWrite; // rotation (SpriteMaterial)

    if (this.rotation !== 0) data.rotation = this.rotation;
    if (this.polygonOffset === true) data.polygonOffset = true;
    if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;
    if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;
    if (this.linewidth !== 1) data.linewidth = this.linewidth;
    if (this.dashSize !== undefined) data.dashSize = this.dashSize;
    if (this.gapSize !== undefined) data.gapSize = this.gapSize;
    if (this.scale !== undefined) data.scale = this.scale;
    if (this.dithering === true) data.dithering = true;
    if (this.alphaTest > 0) data.alphaTest = this.alphaTest;
    if (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;
    if (this.wireframe === true) data.wireframe = this.wireframe;
    if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;
    if (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;
    if (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;
    if (this.morphTargets === true) data.morphTargets = true;
    if (this.skinning === true) data.skinning = true;
    if (this.visible === false) data.visible = false;
    if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData; // TODO: Copied from Object3D.toJSON

    function extractFromCache(cache) {
      var values = [];

      for (var key in cache) {
        var data = cache[key];
        delete data.metadata;
        values.push(data);
      }

      return values;
    }

    if (isRoot) {
      var textures = extractFromCache(meta.textures);
      var images = extractFromCache(meta.images);
      if (textures.length > 0) data.textures = textures;
      if (images.length > 0) data.images = images;
    }

    return data;
  },
  clone: function () {
    return new this.constructor().copy(this);
  },
  copy: function (source) {
    this.name = source.name;
    this.fog = source.fog;
    this.lights = source.lights;
    this.blending = source.blending;
    this.side = source.side;
    this.flatShading = source.flatShading;
    this.vertexColors = source.vertexColors;
    this.opacity = source.opacity;
    this.transparent = source.transparent;
    this.blendSrc = source.blendSrc;
    this.blendDst = source.blendDst;
    this.blendEquation = source.blendEquation;
    this.blendSrcAlpha = source.blendSrcAlpha;
    this.blendDstAlpha = source.blendDstAlpha;
    this.blendEquationAlpha = source.blendEquationAlpha;
    this.depthFunc = source.depthFunc;
    this.depthTest = source.depthTest;
    this.depthWrite = source.depthWrite;
    this.colorWrite = source.colorWrite;
    this.precision = source.precision;
    this.polygonOffset = source.polygonOffset;
    this.polygonOffsetFactor = source.polygonOffsetFactor;
    this.polygonOffsetUnits = source.polygonOffsetUnits;
    this.dithering = source.dithering;
    this.alphaTest = source.alphaTest;
    this.premultipliedAlpha = source.premultipliedAlpha;
    this.visible = source.visible;
    this.userData = JSON.parse(JSON.stringify(source.userData));
    this.clipShadows = source.clipShadows;
    this.clipIntersection = source.clipIntersection;
    var srcPlanes = source.clippingPlanes,
        dstPlanes = null;

    if (srcPlanes !== null) {
      var n = srcPlanes.length;
      dstPlanes = new Array(n);

      for (var i = 0; i !== n; ++i) dstPlanes[i] = srcPlanes[i].clone();
    }

    this.clippingPlanes = dstPlanes;
    this.shadowSide = source.shadowSide;
    return this;
  },
  dispose: function () {
    this.dispatchEvent({
      type: 'dispose'
    });
  }
});
var default_vertex = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
var default_fragment = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  defines: { "label" : "value" },
 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
 *
 *  fragmentShader: <string>,
 *  vertexShader: <string>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  lights: <bool>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */

function ShaderMaterial(parameters) {
  Material.call(this);
  this.type = 'ShaderMaterial';
  this.defines = {};
  this.uniforms = {};
  this.vertexShader = default_vertex;
  this.fragmentShader = default_fragment;
  this.linewidth = 1;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.fog = false; // set to use scene fog

  this.lights = false; // set to use scene lights

  this.clipping = false; // set to use user-defined clipping planes

  this.skinning = false; // set to use skinning attribute streams

  this.morphTargets = false; // set to use morph targets

  this.morphNormals = false; // set to use morph normals

  this.extensions = {
    derivatives: false,
    // set to use derivatives
    fragDepth: false,
    // set to use fragment depth values
    drawBuffers: false,
    // set to use draw buffers
    shaderTextureLOD: false // set to use shader texture LOD

  }; // When rendered geometry doesn't include these attributes but the material does,
  // use these default values in WebGL. This avoids errors when buffer data is missing.

  this.defaultAttributeValues = {
    'color': [1, 1, 1],
    'uv': [0, 0],
    'uv2': [0, 0]
  };
  this.index0AttributeName = undefined;
  this.uniformsNeedUpdate = false;

  if (parameters !== undefined) {
    if (parameters.attributes !== undefined) {
      console.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');
    }

    this.setValues(parameters);
  }
}

ShaderMaterial.prototype = Object.create(Material.prototype);
ShaderMaterial.prototype.constructor = ShaderMaterial;
ShaderMaterial.prototype.isShaderMaterial = true;

ShaderMaterial.prototype.copy = function (source) {
  Material.prototype.copy.call(this, source);
  this.fragmentShader = source.fragmentShader;
  this.vertexShader = source.vertexShader;
  this.uniforms = cloneUniforms(source.uniforms);
  this.defines = Object.assign({}, source.defines);
  this.wireframe = source.wireframe;
  this.wireframeLinewidth = source.wireframeLinewidth;
  this.lights = source.lights;
  this.clipping = source.clipping;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.morphNormals = source.morphNormals;
  this.extensions = source.extensions;
  return this;
};

ShaderMaterial.prototype.toJSON = function (meta) {
  var data = Material.prototype.toJSON.call(this, meta);
  data.uniforms = {};

  for (var name in this.uniforms) {
    var uniform = this.uniforms[name];
    var value = uniform.value;

    if (value && value.isTexture) {
      data.uniforms[name] = {
        type: 't',
        value: value.toJSON(meta).uuid
      };
    } else if (value && value.isColor) {
      data.uniforms[name] = {
        type: 'c',
        value: value.getHex()
      };
    } else if (value && value.isVector2) {
      data.uniforms[name] = {
        type: 'v2',
        value: value.toArray()
      };
    } else if (value && value.isVector3) {
      data.uniforms[name] = {
        type: 'v3',
        value: value.toArray()
      };
    } else if (value && value.isVector4) {
      data.uniforms[name] = {
        type: 'v4',
        value: value.toArray()
      };
    } else if (value && value.isMatrix3) {
      data.uniforms[name] = {
        type: 'm3',
        value: value.toArray()
      };
    } else if (value && value.isMatrix4) {
      data.uniforms[name] = {
        type: 'm4',
        value: value.toArray()
      };
    } else {
      data.uniforms[name] = {
        value: value
      }; // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far
    }
  }

  if (Object.keys(this.defines).length > 0) data.defines = this.defines;
  data.vertexShader = this.vertexShader;
  data.fragmentShader = this.fragmentShader;
  var extensions = {};

  for (var key in this.extensions) {
    if (this.extensions[key] === true) extensions[key] = true;
  }

  if (Object.keys(extensions).length > 0) data.extensions = extensions;
  return data;
};
/**
 * @author bhouston / http://clara.io
 */


function Ray(origin, direction) {
  this.origin = origin !== undefined ? origin : new Vector3();
  this.direction = direction !== undefined ? direction : new Vector3();
}

Object.assign(Ray.prototype, {
  set: function (origin, direction) {
    this.origin.copy(origin);
    this.direction.copy(direction);
    return this;
  },
  clone: function () {
    return new this.constructor().copy(this);
  },
  copy: function (ray) {
    this.origin.copy(ray.origin);
    this.direction.copy(ray.direction);
    return this;
  },
  at: function (t, target) {
    if (target === undefined) {
      console.warn('THREE.Ray: .at() target is now required');
      target = new Vector3();
    }

    return target.copy(this.direction).multiplyScalar(t).add(this.origin);
  },
  lookAt: function (v) {
    this.direction.copy(v).sub(this.origin).normalize();
    return this;
  },
  recast: function () {
    var v1 = new Vector3();
    return function recast(t) {
      this.origin.copy(this.at(t, v1));
      return this;
    };
  }(),
  closestPointToPoint: function (point, target) {
    if (target === undefined) {
      console.warn('THREE.Ray: .closestPointToPoint() target is now required');
      target = new Vector3();
    }

    target.subVectors(point, this.origin);
    var directionDistance = target.dot(this.direction);

    if (directionDistance < 0) {
      return target.copy(this.origin);
    }

    return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
  },
  distanceToPoint: function (point) {
    return Math.sqrt(this.distanceSqToPoint(point));
  },
  distanceSqToPoint: function () {
    var v1 = new Vector3();
    return function distanceSqToPoint(point) {
      var directionDistance = v1.subVectors(point, this.origin).dot(this.direction); // point behind the ray

      if (directionDistance < 0) {
        return this.origin.distanceToSquared(point);
      }

      v1.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
      return v1.distanceToSquared(point);
    };
  }(),
  distanceSqToSegment: function () {
    var segCenter = new Vector3();
    var segDir = new Vector3();
    var diff = new Vector3();
    return function distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
      // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
      // It returns the min distance between the ray and the segment
      // defined by v0 and v1
      // It can also set two optional targets :
      // - The closest point on the ray
      // - The closest point on the segment
      segCenter.copy(v0).add(v1).multiplyScalar(0.5);
      segDir.copy(v1).sub(v0).normalize();
      diff.copy(this.origin).sub(segCenter);
      var segExtent = v0.distanceTo(v1) * 0.5;
      var a01 = -this.direction.dot(segDir);
      var b0 = diff.dot(this.direction);
      var b1 = -diff.dot(segDir);
      var c = diff.lengthSq();
      var det = Math.abs(1 - a01 * a01);
      var s0, s1, sqrDist, extDet;

      if (det > 0) {
        // The ray and segment are not parallel.
        s0 = a01 * b1 - b0;
        s1 = a01 * b0 - b1;
        extDet = segExtent * det;

        if (s0 >= 0) {
          if (s1 >= -extDet) {
            if (s1 <= extDet) {
              // region 0
              // Minimum at interior points of ray and segment.
              var invDet = 1 / det;
              s0 *= invDet;
              s1 *= invDet;
              sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
            } else {
              // region 1
              s1 = segExtent;
              s0 = Math.max(0, -(a01 * s1 + b0));
              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
            }
          } else {
            // region 5
            s1 = -segExtent;
            s0 = Math.max(0, -(a01 * s1 + b0));
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
        } else {
          if (s1 <= -extDet) {
            // region 4
            s0 = Math.max(0, -(-a01 * segExtent + b0));
            s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          } else if (s1 <= extDet) {
            // region 3
            s0 = 0;
            s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = s1 * (s1 + 2 * b1) + c;
          } else {
            // region 2
            s0 = Math.max(0, -(a01 * segExtent + b0));
            s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
          }
        }
      } else {
        // Ray and segment are parallel.
        s1 = a01 > 0 ? -segExtent : segExtent;
        s0 = Math.max(0, -(a01 * s1 + b0));
        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
      }

      if (optionalPointOnRay) {
        optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);
      }

      if (optionalPointOnSegment) {
        optionalPointOnSegment.copy(segDir).multiplyScalar(s1).add(segCenter);
      }

      return sqrDist;
    };
  }(),
  intersectSphere: function () {
    var v1 = new Vector3();
    return function intersectSphere(sphere, target) {
      v1.subVectors(sphere.center, this.origin);
      var tca = v1.dot(this.direction);
      var d2 = v1.dot(v1) - tca * tca;
      var radius2 = sphere.radius * sphere.radius;
      if (d2 > radius2) return null;
      var thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere

      var t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere

      var t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null

      if (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:
      // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
      // in order to always return an intersect point that is in front of the ray.

      if (t0 < 0) return this.at(t1, target); // else t0 is in front of the ray, so return the first collision point scaled by t0

      return this.at(t0, target);
    };
  }(),
  intersectsSphere: function (sphere) {
    return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
  },
  distanceToPlane: function (plane) {
    var denominator = plane.normal.dot(this.direction);

    if (denominator === 0) {
      // line is coplanar, return origin
      if (plane.distanceToPoint(this.origin) === 0) {
        return 0;
      } // Null is preferable to undefined since undefined means.... it is undefined


      return null;
    }

    var t = -(this.origin.dot(plane.normal) + plane.constant) / denominator; // Return if the ray never intersects the plane

    return t >= 0 ? t : null;
  },
  intersectPlane: function (plane, target) {
    var t = this.distanceToPlane(plane);

    if (t === null) {
      return null;
    }

    return this.at(t, target);
  },
  intersectsPlane: function (plane) {
    // check if the ray lies on the plane first
    var distToPoint = plane.distanceToPoint(this.origin);

    if (distToPoint === 0) {
      return true;
    }

    var denominator = plane.normal.dot(this.direction);

    if (denominator * distToPoint < 0) {
      return true;
    } // ray origin is behind the plane (and is pointing behind it)


    return false;
  },
  intersectBox: function (box, target) {
    var tmin, tmax, tymin, tymax, tzmin, tzmax;
    var invdirx = 1 / this.direction.x,
        invdiry = 1 / this.direction.y,
        invdirz = 1 / this.direction.z;
    var origin = this.origin;

    if (invdirx >= 0) {
      tmin = (box.min.x - origin.x) * invdirx;
      tmax = (box.max.x - origin.x) * invdirx;
    } else {
      tmin = (box.max.x - origin.x) * invdirx;
      tmax = (box.min.x - origin.x) * invdirx;
    }

    if (invdiry >= 0) {
      tymin = (box.min.y - origin.y) * invdiry;
      tymax = (box.max.y - origin.y) * invdiry;
    } else {
      tymin = (box.max.y - origin.y) * invdiry;
      tymax = (box.min.y - origin.y) * invdiry;
    }

    if (tmin > tymax || tymin > tmax) return null; // These lines also handle the case where tmin or tmax is NaN
    // (result of 0 * Infinity). x !== x returns true if x is NaN

    if (tymin > tmin || tmin !== tmin) tmin = tymin;
    if (tymax < tmax || tmax !== tmax) tmax = tymax;

    if (invdirz >= 0) {
      tzmin = (box.min.z - origin.z) * invdirz;
      tzmax = (box.max.z - origin.z) * invdirz;
    } else {
      tzmin = (box.max.z - origin.z) * invdirz;
      tzmax = (box.min.z - origin.z) * invdirz;
    }

    if (tmin > tzmax || tzmin > tmax) return null;
    if (tzmin > tmin || tmin !== tmin) tmin = tzmin;
    if (tzmax < tmax || tmax !== tmax) tmax = tzmax; //return point closest to the ray (positive side)

    if (tmax < 0) return null;
    return this.at(tmin >= 0 ? tmin : tmax, target);
  },
  intersectsBox: function () {
    var v = new Vector3();
    return function intersectsBox(box) {
      return this.intersectBox(box, v) !== null;
    };
  }(),
  intersectTriangle: function () {
    // Compute the offset origin, edges, and normal.
    var diff = new Vector3();
    var edge1 = new Vector3();
    var edge2 = new Vector3();
    var normal = new Vector3();
    return function intersectTriangle(a, b, c, backfaceCulling, target) {
      // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h
      edge1.subVectors(b, a);
      edge2.subVectors(c, a);
      normal.crossVectors(edge1, edge2); // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
      // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
      //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
      //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
      //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)

      var DdN = this.direction.dot(normal);
      var sign;

      if (DdN > 0) {
        if (backfaceCulling) return null;
        sign = 1;
      } else if (DdN < 0) {
        sign = -1;
        DdN = -DdN;
      } else {
        return null;
      }

      diff.subVectors(this.origin, a);
      var DdQxE2 = sign * this.direction.dot(edge2.crossVectors(diff, edge2)); // b1 < 0, no intersection

      if (DdQxE2 < 0) {
        return null;
      }

      var DdE1xQ = sign * this.direction.dot(edge1.cross(diff)); // b2 < 0, no intersection

      if (DdE1xQ < 0) {
        return null;
      } // b1+b2 > 1, no intersection


      if (DdQxE2 + DdE1xQ > DdN) {
        return null;
      } // Line intersects triangle, check if ray does.


      var QdN = -sign * diff.dot(normal); // t < 0, no intersection

      if (QdN < 0) {
        return null;
      } // Ray intersects triangle.


      return this.at(QdN / DdN, target);
    };
  }(),
  applyMatrix4: function (matrix4) {
    this.origin.applyMatrix4(matrix4);
    this.direction.transformDirection(matrix4);
    return this;
  },
  equals: function (ray) {
    return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
  }
});
/**
 * @author bhouston / http://clara.io
 * @author mrdoob / http://mrdoob.com/
 */

function Triangle(a, b, c) {
  this.a = a !== undefined ? a : new Vector3();
  this.b = b !== undefined ? b : new Vector3();
  this.c = c !== undefined ? c : new Vector3();
}

Object.assign(Triangle, {
  getNormal: function () {
    var v0 = new Vector3();
    return function getNormal(a, b, c, target) {
      if (target === undefined) {
        console.warn('THREE.Triangle: .getNormal() target is now required');
        target = new Vector3();
      }

      target.subVectors(c, b);
      v0.subVectors(a, b);
      target.cross(v0);
      var targetLengthSq = target.lengthSq();

      if (targetLengthSq > 0) {
        return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
      }

      return target.set(0, 0, 0);
    };
  }(),
  // static/instance method to calculate barycentric coordinates
  // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
  getBarycoord: function () {
    var v0 = new Vector3();
    var v1 = new Vector3();
    var v2 = new Vector3();
    return function getBarycoord(point, a, b, c, target) {
      v0.subVectors(c, a);
      v1.subVectors(b, a);
      v2.subVectors(point, a);
      var dot00 = v0.dot(v0);
      var dot01 = v0.dot(v1);
      var dot02 = v0.dot(v2);
      var dot11 = v1.dot(v1);
      var dot12 = v1.dot(v2);
      var denom = dot00 * dot11 - dot01 * dot01;

      if (target === undefined) {
        console.warn('THREE.Triangle: .getBarycoord() target is now required');
        target = new Vector3();
      } // collinear or singular triangle


      if (denom === 0) {
        // arbitrary location outside of triangle?
        // not sure if this is the best idea, maybe should be returning undefined
        return target.set(-2, -1, -1);
      }

      var invDenom = 1 / denom;
      var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
      var v = (dot00 * dot12 - dot01 * dot02) * invDenom; // barycentric coordinates must always sum to 1

      return target.set(1 - u - v, v, u);
    };
  }(),
  containsPoint: function () {
    var v1 = new Vector3();
    return function containsPoint(point, a, b, c) {
      Triangle.getBarycoord(point, a, b, c, v1);
      return v1.x >= 0 && v1.y >= 0 && v1.x + v1.y <= 1;
    };
  }(),
  getUV: function () {
    var barycoord = new Vector3();
    return function getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {
      this.getBarycoord(point, p1, p2, p3, barycoord);
      target.set(0, 0);
      target.addScaledVector(uv1, barycoord.x);
      target.addScaledVector(uv2, barycoord.y);
      target.addScaledVector(uv3, barycoord.z);
      return target;
    };
  }()
});
Object.assign(Triangle.prototype, {
  set: function (a, b, c) {
    this.a.copy(a);
    this.b.copy(b);
    this.c.copy(c);
    return this;
  },
  setFromPointsAndIndices: function (points, i0, i1, i2) {
    this.a.copy(points[i0]);
    this.b.copy(points[i1]);
    this.c.copy(points[i2]);
    return this;
  },
  clone: function () {
    return new this.constructor().copy(this);
  },
  copy: function (triangle) {
    this.a.copy(triangle.a);
    this.b.copy(triangle.b);
    this.c.copy(triangle.c);
    return this;
  },
  getArea: function () {
    var v0 = new Vector3();
    var v1 = new Vector3();
    return function getArea() {
      v0.subVectors(this.c, this.b);
      v1.subVectors(this.a, this.b);
      return v0.cross(v1).length() * 0.5;
    };
  }(),
  getMidpoint: function (target) {
    if (target === undefined) {
      console.warn('THREE.Triangle: .getMidpoint() target is now required');
      target = new Vector3();
    }

    return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
  },
  getNormal: function (target) {
    return Triangle.getNormal(this.a, this.b, this.c, target);
  },
  getPlane: function (target) {
    if (target === undefined) {
      console.warn('THREE.Triangle: .getPlane() target is now required');
      target = new Vector3();
    }

    return target.setFromCoplanarPoints(this.a, this.b, this.c);
  },
  getBarycoord: function (point, target) {
    return Triangle.getBarycoord(point, this.a, this.b, this.c, target);
  },
  containsPoint: function (point) {
    return Triangle.containsPoint(point, this.a, this.b, this.c);
  },
  getUV: function (point, uv1, uv2, uv3, result) {
    return Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, result);
  },
  intersectsBox: function (box) {
    return box.intersectsTriangle(this);
  },
  closestPointToPoint: function () {
    var vab = new Vector3();
    var vac = new Vector3();
    var vbc = new Vector3();
    var vap = new Vector3();
    var vbp = new Vector3();
    var vcp = new Vector3();
    return function closestPointToPoint(p, target) {
      if (target === undefined) {
        console.warn('THREE.Triangle: .closestPointToPoint() target is now required');
        target = new Vector3();
      }

      var a = this.a,
          b = this.b,
          c = this.c;
      var v, w; // algorithm thanks to Real-Time Collision Detection by Christer Ericson,
      // published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
      // under the accompanying license; see chapter 5.1.5 for detailed explanation.
      // basically, we're distinguishing which of the voronoi regions of the triangle
      // the point lies in with the minimum amount of redundant computation.

      vab.subVectors(b, a);
      vac.subVectors(c, a);
      vap.subVectors(p, a);
      var d1 = vab.dot(vap);
      var d2 = vac.dot(vap);

      if (d1 <= 0 && d2 <= 0) {
        // vertex region of A; barycentric coords (1, 0, 0)
        return target.copy(a);
      }

      vbp.subVectors(p, b);
      var d3 = vab.dot(vbp);
      var d4 = vac.dot(vbp);

      if (d3 >= 0 && d4 <= d3) {
        // vertex region of B; barycentric coords (0, 1, 0)
        return target.copy(b);
      }

      var vc = d1 * d4 - d3 * d2;

      if (vc <= 0 && d1 >= 0 && d3 <= 0) {
        v = d1 / (d1 - d3); // edge region of AB; barycentric coords (1-v, v, 0)

        return target.copy(a).addScaledVector(vab, v);
      }

      vcp.subVectors(p, c);
      var d5 = vab.dot(vcp);
      var d6 = vac.dot(vcp);

      if (d6 >= 0 && d5 <= d6) {
        // vertex region of C; barycentric coords (0, 0, 1)
        return target.copy(c);
      }

      var vb = d5 * d2 - d1 * d6;

      if (vb <= 0 && d2 >= 0 && d6 <= 0) {
        w = d2 / (d2 - d6); // edge region of AC; barycentric coords (1-w, 0, w)

        return target.copy(a).addScaledVector(vac, w);
      }

      var va = d3 * d6 - d5 * d4;

      if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
        vbc.subVectors(c, b);
        w = (d4 - d3) / (d4 - d3 + (d5 - d6)); // edge region of BC; barycentric coords (0, 1-w, w)

        return target.copy(b).addScaledVector(vbc, w); // edge region of BC
      } // face region


      var denom = 1 / (va + vb + vc); // u = va * denom

      v = vb * denom;
      w = vc * denom;
      return target.copy(a).addScaledVector(vab, v).addScaledVector(vac, w);
    };
  }(),
  equals: function (triangle) {
    return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>
 * }
 */

function MeshBasicMaterial(parameters) {
  Material.call(this);
  this.type = 'MeshBasicMaterial';
  this.color = new Color(0xffffff); // emissive

  this.map = null;
  this.lightMap = null;
  this.lightMapIntensity = 1.0;
  this.aoMap = null;
  this.aoMapIntensity = 1.0;
  this.specularMap = null;
  this.alphaMap = null;
  this.envMap = null;
  this.combine = MultiplyOperation;
  this.reflectivity = 1;
  this.refractionRatio = 0.98;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.wireframeLinecap = 'round';
  this.wireframeLinejoin = 'round';
  this.skinning = false;
  this.morphTargets = false;
  this.lights = false;
  this.setValues(parameters);
}

MeshBasicMaterial.prototype = Object.create(Material.prototype);
MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;
MeshBasicMaterial.prototype.isMeshBasicMaterial = true;

MeshBasicMaterial.prototype.copy = function (source) {
  Material.prototype.copy.call(this, source);
  this.color.copy(source.color);
  this.map = source.map;
  this.lightMap = source.lightMap;
  this.lightMapIntensity = source.lightMapIntensity;
  this.aoMap = source.aoMap;
  this.aoMapIntensity = source.aoMapIntensity;
  this.specularMap = source.specularMap;
  this.alphaMap = source.alphaMap;
  this.envMap = source.envMap;
  this.combine = source.combine;
  this.reflectivity = source.reflectivity;
  this.refractionRatio = source.refractionRatio;
  this.wireframe = source.wireframe;
  this.wireframeLinewidth = source.wireframeLinewidth;
  this.wireframeLinecap = source.wireframeLinecap;
  this.wireframeLinejoin = source.wireframeLinejoin;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  return this;
};
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author jonobr1 / http://jonobr1.com/
 */


function Mesh(geometry, material) {
  Object3D.call(this);
  this.type = 'Mesh';
  this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
  this.material = material !== undefined ? material : new MeshBasicMaterial({
    color: Math.random() * 0xffffff
  });
  this.drawMode = TrianglesDrawMode;
  this.updateMorphTargets();
}

Mesh.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Mesh,
  isMesh: true,
  setDrawMode: function (value) {
    this.drawMode = value;
  },
  copy: function (source) {
    Object3D.prototype.copy.call(this, source);
    this.drawMode = source.drawMode;

    if (source.morphTargetInfluences !== undefined) {
      this.morphTargetInfluences = source.morphTargetInfluences.slice();
    }

    if (source.morphTargetDictionary !== undefined) {
      this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
    }

    return this;
  },
  updateMorphTargets: function () {
    var geometry = this.geometry;
    var m, ml, name;

    if (geometry.isBufferGeometry) {
      var morphAttributes = geometry.morphAttributes;
      var keys = Object.keys(morphAttributes);

      if (keys.length > 0) {
        var morphAttribute = morphAttributes[keys[0]];

        if (morphAttribute !== undefined) {
          this.morphTargetInfluences = [];
          this.morphTargetDictionary = {};

          for (m = 0, ml = morphAttribute.length; m < ml; m++) {
            name = morphAttribute[m].name || String(m);
            this.morphTargetInfluences.push(0);
            this.morphTargetDictionary[name] = m;
          }
        }
      }
    } else {
      var morphTargets = geometry.morphTargets;

      if (morphTargets !== undefined && morphTargets.length > 0) {
        console.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
      }
    }
  },
  raycast: function () {
    var inverseMatrix = new Matrix4();
    var ray = new Ray();
    var sphere = new Sphere();
    var vA = new Vector3();
    var vB = new Vector3();
    var vC = new Vector3();
    var tempA = new Vector3();
    var tempB = new Vector3();
    var tempC = new Vector3();
    var uvA = new Vector2();
    var uvB = new Vector2();
    var uvC = new Vector2();
    var intersectionPoint = new Vector3();
    var intersectionPointWorld = new Vector3();

    function checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {
      var intersect;

      if (material.side === BackSide) {
        intersect = ray.intersectTriangle(pC, pB, pA, true, point);
      } else {
        intersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);
      }

      if (intersect === null) return null;
      intersectionPointWorld.copy(point);
      intersectionPointWorld.applyMatrix4(object.matrixWorld);
      var distance = raycaster.ray.origin.distanceTo(intersectionPointWorld);
      if (distance < raycaster.near || distance > raycaster.far) return null;
      return {
        distance: distance,
        point: intersectionPointWorld.clone(),
        object: object
      };
    }

    function checkBufferGeometryIntersection(object, material, raycaster, ray, position, uv, a, b, c) {
      vA.fromBufferAttribute(position, a);
      vB.fromBufferAttribute(position, b);
      vC.fromBufferAttribute(position, c);
      var intersection = checkIntersection(object, material, raycaster, ray, vA, vB, vC, intersectionPoint);

      if (intersection) {
        if (uv) {
          uvA.fromBufferAttribute(uv, a);
          uvB.fromBufferAttribute(uv, b);
          uvC.fromBufferAttribute(uv, c);
          intersection.uv = Triangle.getUV(intersectionPoint, vA, vB, vC, uvA, uvB, uvC, new Vector2());
        }

        var face = new Face3(a, b, c);
        Triangle.getNormal(vA, vB, vC, face.normal);
        intersection.face = face;
      }

      return intersection;
    }

    return function raycast(raycaster, intersects) {
      var geometry = this.geometry;
      var material = this.material;
      var matrixWorld = this.matrixWorld;
      if (material === undefined) return; // Checking boundingSphere distance to ray

      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
      sphere.copy(geometry.boundingSphere);
      sphere.applyMatrix4(matrixWorld);
      if (raycaster.ray.intersectsSphere(sphere) === false) return; //

      inverseMatrix.getInverse(matrixWorld);
      ray.copy(raycaster.ray).applyMatrix4(inverseMatrix); // Check boundingBox before continuing

      if (geometry.boundingBox !== null) {
        if (ray.intersectsBox(geometry.boundingBox) === false) return;
      }

      var intersection;

      if (geometry.isBufferGeometry) {
        var a, b, c;
        var index = geometry.index;
        var position = geometry.attributes.position;
        var uv = geometry.attributes.uv;
        var groups = geometry.groups;
        var drawRange = geometry.drawRange;
        var i, j, il, jl;
        var group, groupMaterial;
        var start, end;

        if (index !== null) {
          // indexed buffer geometry
          if (Array.isArray(material)) {
            for (i = 0, il = groups.length; i < il; i++) {
              group = groups[i];
              groupMaterial = material[group.materialIndex];
              start = Math.max(group.start, drawRange.start);
              end = Math.min(group.start + group.count, drawRange.start + drawRange.count);

              for (j = start, jl = end; j < jl; j += 3) {
                a = index.getX(j);
                b = index.getX(j + 1);
                c = index.getX(j + 2);
                intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, ray, position, uv, a, b, c);

                if (intersection) {
                  intersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics

                  intersection.face.materialIndex = group.materialIndex;
                  intersects.push(intersection);
                }
              }
            }
          } else {
            start = Math.max(0, drawRange.start);
            end = Math.min(index.count, drawRange.start + drawRange.count);

            for (i = start, il = end; i < il; i += 3) {
              a = index.getX(i);
              b = index.getX(i + 1);
              c = index.getX(i + 2);
              intersection = checkBufferGeometryIntersection(this, material, raycaster, ray, position, uv, a, b, c);

              if (intersection) {
                intersection.faceIndex = Math.floor(i / 3); // triangle number in indexed buffer semantics

                intersects.push(intersection);
              }
            }
          }
        } else if (position !== undefined) {
          // non-indexed buffer geometry
          if (Array.isArray(material)) {
            for (i = 0, il = groups.length; i < il; i++) {
              group = groups[i];
              groupMaterial = material[group.materialIndex];
              start = Math.max(group.start, drawRange.start);
              end = Math.min(group.start + group.count, drawRange.start + drawRange.count);

              for (j = start, jl = end; j < jl; j += 3) {
                a = j;
                b = j + 1;
                c = j + 2;
                intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, ray, position, uv, a, b, c);

                if (intersection) {
                  intersection.faceIndex = Math.floor(j / 3); // triangle number in non-indexed buffer semantics

                  intersection.face.materialIndex = group.materialIndex;
                  intersects.push(intersection);
                }
              }
            }
          } else {
            start = Math.max(0, drawRange.start);
            end = Math.min(position.count, drawRange.start + drawRange.count);

            for (i = start, il = end; i < il; i += 3) {
              a = i;
              b = i + 1;
              c = i + 2;
              intersection = checkBufferGeometryIntersection(this, material, raycaster, ray, position, uv, a, b, c);

              if (intersection) {
                intersection.faceIndex = Math.floor(i / 3); // triangle number in non-indexed buffer semantics

                intersects.push(intersection);
              }
            }
          }
        }
      } else if (geometry.isGeometry) {
        var fvA, fvB, fvC;
        var isMultiMaterial = Array.isArray(material);
        var vertices = geometry.vertices;
        var faces = geometry.faces;
        var uvs;
        var faceVertexUvs = geometry.faceVertexUvs[0];
        if (faceVertexUvs.length > 0) uvs = faceVertexUvs;

        for (var f = 0, fl = faces.length; f < fl; f++) {
          var face = faces[f];
          var faceMaterial = isMultiMaterial ? material[face.materialIndex] : material;
          if (faceMaterial === undefined) continue;
          fvA = vertices[face.a];
          fvB = vertices[face.b];
          fvC = vertices[face.c];

          if (faceMaterial.morphTargets === true) {
            var morphTargets = geometry.morphTargets;
            var morphInfluences = this.morphTargetInfluences;
            vA.set(0, 0, 0);
            vB.set(0, 0, 0);
            vC.set(0, 0, 0);

            for (var t = 0, tl = morphTargets.length; t < tl; t++) {
              var influence = morphInfluences[t];
              if (influence === 0) continue;
              var targets = morphTargets[t].vertices;
              vA.addScaledVector(tempA.subVectors(targets[face.a], fvA), influence);
              vB.addScaledVector(tempB.subVectors(targets[face.b], fvB), influence);
              vC.addScaledVector(tempC.subVectors(targets[face.c], fvC), influence);
            }

            vA.add(fvA);
            vB.add(fvB);
            vC.add(fvC);
            fvA = vA;
            fvB = vB;
            fvC = vC;
          }

          intersection = checkIntersection(this, faceMaterial, raycaster, ray, fvA, fvB, fvC, intersectionPoint);

          if (intersection) {
            if (uvs && uvs[f]) {
              var uvs_f = uvs[f];
              uvA.copy(uvs_f[0]);
              uvB.copy(uvs_f[1]);
              uvC.copy(uvs_f[2]);
              intersection.uv = Triangle.getUV(intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC, new Vector2());
            }

            intersection.face = face;
            intersection.faceIndex = f;
            intersects.push(intersection);
          }
        }
      }
    };
  }(),
  clone: function () {
    return new this.constructor(this.geometry, this.material).copy(this);
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLBackground(renderer, state, objects, premultipliedAlpha) {
  var clearColor = new Color(0x000000);
  var clearAlpha = 0;
  var planeMesh;
  var boxMesh; // Store the current background texture and its `version`
  // so we can recompile the material accordingly.

  var currentBackground = null;
  var currentBackgroundVersion = 0;

  function render(renderList, scene, camera, forceClear) {
    var background = scene.background;

    if (background === null) {
      setClear(clearColor, clearAlpha);
      currentBackground = null;
      currentBackgroundVersion = 0;
    } else if (background && background.isColor) {
      setClear(background, 1);
      forceClear = true;
      currentBackground = null;
      currentBackgroundVersion = 0;
    }

    if (renderer.autoClear || forceClear) {
      renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);
    }

    if (background && (background.isCubeTexture || background.isWebGLRenderTargetCube)) {
      if (boxMesh === undefined) {
        boxMesh = new Mesh(new BoxBufferGeometry(1, 1, 1), new ShaderMaterial({
          type: 'BackgroundCubeMaterial',
          uniforms: cloneUniforms(ShaderLib.cube.uniforms),
          vertexShader: ShaderLib.cube.vertexShader,
          fragmentShader: ShaderLib.cube.fragmentShader,
          side: BackSide,
          depthTest: false,
          depthWrite: false,
          fog: false
        }));
        boxMesh.geometry.removeAttribute('normal');
        boxMesh.geometry.removeAttribute('uv');

        boxMesh.onBeforeRender = function (renderer, scene, camera) {
          this.matrixWorld.copyPosition(camera.matrixWorld);
        }; // enable code injection for non-built-in material


        Object.defineProperty(boxMesh.material, 'map', {
          get: function () {
            return this.uniforms.tCube.value;
          }
        });
        objects.update(boxMesh);
      }

      var texture = background.isWebGLRenderTargetCube ? background.texture : background;
      boxMesh.material.uniforms.tCube.value = texture;
      boxMesh.material.uniforms.tFlip.value = background.isWebGLRenderTargetCube ? 1 : -1;

      if (currentBackground !== background || currentBackgroundVersion !== texture.version) {
        boxMesh.material.needsUpdate = true;
        currentBackground = background;
        currentBackgroundVersion = texture.version;
      } // push to the pre-sorted opaque render list


      renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);
    } else if (background && background.isTexture) {
      if (planeMesh === undefined) {
        planeMesh = new Mesh(new PlaneBufferGeometry(2, 2), new ShaderMaterial({
          type: 'BackgroundMaterial',
          uniforms: cloneUniforms(ShaderLib.background.uniforms),
          vertexShader: ShaderLib.background.vertexShader,
          fragmentShader: ShaderLib.background.fragmentShader,
          side: FrontSide,
          depthTest: false,
          depthWrite: false,
          fog: false
        }));
        planeMesh.geometry.removeAttribute('normal'); // enable code injection for non-built-in material

        Object.defineProperty(planeMesh.material, 'map', {
          get: function () {
            return this.uniforms.t2D.value;
          }
        });
        objects.update(planeMesh);
      }

      planeMesh.material.uniforms.t2D.value = background;

      if (background.matrixAutoUpdate === true) {
        background.updateMatrix();
      }

      planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);

      if (currentBackground !== background || currentBackgroundVersion !== background.version) {
        planeMesh.material.needsUpdate = true;
        currentBackground = background;
        currentBackgroundVersion = background.version;
      } // push to the pre-sorted opaque render list


      renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);
    }
  }

  function setClear(color, alpha) {
    state.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);
  }

  return {
    getClearColor: function () {
      return clearColor;
    },
    setClearColor: function (color, alpha) {
      clearColor.set(color);
      clearAlpha = alpha !== undefined ? alpha : 1;
      setClear(clearColor, clearAlpha);
    },
    getClearAlpha: function () {
      return clearAlpha;
    },
    setClearAlpha: function (alpha) {
      clearAlpha = alpha;
      setClear(clearColor, clearAlpha);
    },
    render: render
  };
}
/**
 * @author mrdoob / http://mrdoob.com/
 */


function WebGLBufferRenderer(gl, extensions, info, capabilities) {
  var mode;

  function setMode(value) {
    mode = value;
  }

  function render(start, count) {
    gl.drawArrays(mode, start, count);
    info.update(count, mode);
  }

  function renderInstances(geometry, start, count) {
    var extension;

    if (capabilities.isWebGL2) {
      extension = gl;
    } else {
      extension = extensions.get('ANGLE_instanced_arrays');

      if (extension === null) {
        console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');
        return;
      }
    }

    extension[capabilities.isWebGL2 ? 'drawArraysInstanced' : 'drawArraysInstancedANGLE'](mode, start, count, geometry.maxInstancedCount);
    info.update(count, mode, geometry.maxInstancedCount);
  } //


  this.setMode = setMode;
  this.render = render;
  this.renderInstances = renderInstances;
}
/**
 * @author mrdoob / http://mrdoob.com/
 */


function WebGLCapabilities(gl, extensions, parameters) {
  var maxAnisotropy;

  function getMaxAnisotropy() {
    if (maxAnisotropy !== undefined) return maxAnisotropy;
    var extension = extensions.get('EXT_texture_filter_anisotropic');

    if (extension !== null) {
      maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    } else {
      maxAnisotropy = 0;
    }

    return maxAnisotropy;
  }

  function getMaxPrecision(precision) {
    if (precision === 'highp') {
      if (gl.getShaderPrecisionFormat(35633, 36338).precision > 0 && gl.getShaderPrecisionFormat(35632, 36338).precision > 0) {
        return 'highp';
      }

      precision = 'mediump';
    }

    if (precision === 'mediump') {
      if (gl.getShaderPrecisionFormat(35633, 36337).precision > 0 && gl.getShaderPrecisionFormat(35632, 36337).precision > 0) {
        return 'mediump';
      }
    }

    return 'lowp';
  }

  var isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext;
  var precision = parameters.precision !== undefined ? parameters.precision : 'highp';
  var maxPrecision = getMaxPrecision(precision);

  if (maxPrecision !== precision) {
    console.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.');
    precision = maxPrecision;
  }

  var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
  var maxTextures = gl.getParameter(34930);
  var maxVertexTextures = gl.getParameter(35660);
  var maxTextureSize = gl.getParameter(3379);
  var maxCubemapSize = gl.getParameter(34076);
  var maxAttributes = gl.getParameter(34921);
  var maxVertexUniforms = gl.getParameter(36347);
  var maxVaryings = gl.getParameter(36348);
  var maxFragmentUniforms = gl.getParameter(36349);
  var vertexTextures = maxVertexTextures > 0;
  var floatFragmentTextures = isWebGL2 || !!extensions.get('OES_texture_float');
  var floatVertexTextures = vertexTextures && floatFragmentTextures;
  var maxSamples = isWebGL2 ? gl.getParameter(36183) : 0;
  return {
    isWebGL2: isWebGL2,
    getMaxAnisotropy: getMaxAnisotropy,
    getMaxPrecision: getMaxPrecision,
    precision: precision,
    logarithmicDepthBuffer: logarithmicDepthBuffer,
    maxTextures: maxTextures,
    maxVertexTextures: maxVertexTextures,
    maxTextureSize: maxTextureSize,
    maxCubemapSize: maxCubemapSize,
    maxAttributes: maxAttributes,
    maxVertexUniforms: maxVertexUniforms,
    maxVaryings: maxVaryings,
    maxFragmentUniforms: maxFragmentUniforms,
    vertexTextures: vertexTextures,
    floatFragmentTextures: floatFragmentTextures,
    floatVertexTextures: floatVertexTextures,
    maxSamples: maxSamples
  };
}
/**
 * @author tschw
 */


function WebGLClipping() {
  var scope = this,
      globalState = null,
      numGlobalPlanes = 0,
      localClippingEnabled = false,
      renderingShadows = false,
      plane = new Plane(),
      viewNormalMatrix = new Matrix3(),
      uniform = {
    value: null,
    needsUpdate: false
  };
  this.uniform = uniform;
  this.numPlanes = 0;
  this.numIntersection = 0;

  this.init = function (planes, enableLocalClipping, camera) {
    var enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to
    // run another frame in order to reset the state:
    numGlobalPlanes !== 0 || localClippingEnabled;
    localClippingEnabled = enableLocalClipping;
    globalState = projectPlanes(planes, camera, 0);
    numGlobalPlanes = planes.length;
    return enabled;
  };

  this.beginShadows = function () {
    renderingShadows = true;
    projectPlanes(null);
  };

  this.endShadows = function () {
    renderingShadows = false;
    resetGlobalState();
  };

  this.setState = function (planes, clipIntersection, clipShadows, camera, cache, fromCache) {
    if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {
      // there's no local clipping
      if (renderingShadows) {
        // there's no global clipping
        projectPlanes(null);
      } else {
        resetGlobalState();
      }
    } else {
      var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
          lGlobal = nGlobal * 4,
          dstArray = cache.clippingState || null;
      uniform.value = dstArray; // ensure unique state

      dstArray = projectPlanes(planes, camera, lGlobal, fromCache);

      for (var i = 0; i !== lGlobal; ++i) {
        dstArray[i] = globalState[i];
      }

      cache.clippingState = dstArray;
      this.numIntersection = clipIntersection ? this.numPlanes : 0;
      this.numPlanes += nGlobal;
    }
  };

  function resetGlobalState() {
    if (uniform.value !== globalState) {
      uniform.value = globalState;
      uniform.needsUpdate = numGlobalPlanes > 0;
    }

    scope.numPlanes = numGlobalPlanes;
    scope.numIntersection = 0;
  }

  function projectPlanes(planes, camera, dstOffset, skipTransform) {
    var nPlanes = planes !== null ? planes.length : 0,
        dstArray = null;

    if (nPlanes !== 0) {
      dstArray = uniform.value;

      if (skipTransform !== true || dstArray === null) {
        var flatSize = dstOffset + nPlanes * 4,
            viewMatrix = camera.matrixWorldInverse;
        viewNormalMatrix.getNormalMatrix(viewMatrix);

        if (dstArray === null || dstArray.length < flatSize) {
          dstArray = new Float32Array(flatSize);
        }

        for (var i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {
          plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);
          plane.normal.toArray(dstArray, i4);
          dstArray[i4 + 3] = plane.constant;
        }
      }

      uniform.value = dstArray;
      uniform.needsUpdate = true;
    }

    scope.numPlanes = nPlanes;
    return dstArray;
  }
}
/**
 * @author mrdoob / http://mrdoob.com/
 */


function WebGLExtensions(gl) {
  var extensions = {};
  return {
    get: function (name) {
      if (extensions[name] !== undefined) {
        return extensions[name];
      }

      var extension;

      switch (name) {
        case 'WEBGL_depth_texture':
          extension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');
          break;

        case 'EXT_texture_filter_anisotropic':
          extension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
          break;

        case 'WEBGL_compressed_texture_s3tc':
          extension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
          break;

        case 'WEBGL_compressed_texture_pvrtc':
          extension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');
          break;

        default:
          extension = gl.getExtension(name);
      }

      if (extension === null) {
        console.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');
      }

      extensions[name] = extension;
      return extension;
    }
  };
}
/**
 * @author mrdoob / http://mrdoob.com/
 */


function WebGLGeometries(gl, attributes, info) {
  var geometries = {};
  var wireframeAttributes = {};

  function onGeometryDispose(event) {
    var geometry = event.target;
    var buffergeometry = geometries[geometry.id];

    if (buffergeometry.index !== null) {
      attributes.remove(buffergeometry.index);
    }

    for (var name in buffergeometry.attributes) {
      attributes.remove(buffergeometry.attributes[name]);
    }

    geometry.removeEventListener('dispose', onGeometryDispose);
    delete geometries[geometry.id];
    var attribute = wireframeAttributes[buffergeometry.id];

    if (attribute) {
      attributes.remove(attribute);
      delete wireframeAttributes[buffergeometry.id];
    } //


    info.memory.geometries--;
  }

  function get(object, geometry) {
    var buffergeometry = geometries[geometry.id];
    if (buffergeometry) return buffergeometry;
    geometry.addEventListener('dispose', onGeometryDispose);

    if (geometry.isBufferGeometry) {
      buffergeometry = geometry;
    } else if (geometry.isGeometry) {
      if (geometry._bufferGeometry === undefined) {
        geometry._bufferGeometry = new BufferGeometry().setFromObject(object);
      }

      buffergeometry = geometry._bufferGeometry;
    }

    geometries[geometry.id] = buffergeometry;
    info.memory.geometries++;
    return buffergeometry;
  }

  function update(geometry) {
    var index = geometry.index;
    var geometryAttributes = geometry.attributes;

    if (index !== null) {
      attributes.update(index, 34963);
    }

    for (var name in geometryAttributes) {
      attributes.update(geometryAttributes[name], 34962);
    } // morph targets


    var morphAttributes = geometry.morphAttributes;

    for (var name in morphAttributes) {
      var array = morphAttributes[name];

      for (var i = 0, l = array.length; i < l; i++) {
        attributes.update(array[i], 34962);
      }
    }
  }

  function getWireframeAttribute(geometry) {
    var attribute = wireframeAttributes[geometry.id];
    if (attribute) return attribute;
    var indices = [];
    var geometryIndex = geometry.index;
    var geometryAttributes = geometry.attributes; // console.time( 'wireframe' );

    if (geometryIndex !== null) {
      var array = geometryIndex.array;

      for (var i = 0, l = array.length; i < l; i += 3) {
        var a = array[i + 0];
        var b = array[i + 1];
        var c = array[i + 2];
        indices.push(a, b, b, c, c, a);
      }
    } else {
      var array = geometryAttributes.position.array;

      for (var i = 0, l = array.length / 3 - 1; i < l; i += 3) {
        var a = i + 0;
        var b = i + 1;
        var c = i + 2;
        indices.push(a, b, b, c, c, a);
      }
    } // console.timeEnd( 'wireframe' );


    attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);
    attributes.update(attribute, 34963);
    wireframeAttributes[geometry.id] = attribute;
    return attribute;
  }

  return {
    get: get,
    update: update,
    getWireframeAttribute: getWireframeAttribute
  };
}
/**
 * @author mrdoob / http://mrdoob.com/
 */


function WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {
  var mode;

  function setMode(value) {
    mode = value;
  }

  var type, bytesPerElement;

  function setIndex(value) {
    type = value.type;
    bytesPerElement = value.bytesPerElement;
  }

  function render(start, count) {
    gl.drawElements(mode, count, type, start * bytesPerElement);
    info.update(count, mode);
  }

  function renderInstances(geometry, start, count) {
    var extension;

    if (capabilities.isWebGL2) {
      extension = gl;
    } else {
      var extension = extensions.get('ANGLE_instanced_arrays');

      if (extension === null) {
        console.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');
        return;
      }
    }

    extension[capabilities.isWebGL2 ? 'drawElementsInstanced' : 'drawElementsInstancedANGLE'](mode, count, type, start * bytesPerElement, geometry.maxInstancedCount);
    info.update(count, mode, geometry.maxInstancedCount);
  } //


  this.setMode = setMode;
  this.setIndex = setIndex;
  this.render = render;
  this.renderInstances = renderInstances;
}
/**
 * @author Mugen87 / https://github.com/Mugen87
 */


function WebGLInfo(gl) {
  var memory = {
    geometries: 0,
    textures: 0
  };
  var render = {
    frame: 0,
    calls: 0,
    triangles: 0,
    points: 0,
    lines: 0
  };

  function update(count, mode, instanceCount) {
    instanceCount = instanceCount || 1;
    render.calls++;

    switch (mode) {
      case 4:
        render.triangles += instanceCount * (count / 3);
        break;

      case 5:
      case 6:
        render.triangles += instanceCount * (count - 2);
        break;

      case 1:
        render.lines += instanceCount * (count / 2);
        break;

      case 3:
        render.lines += instanceCount * (count - 1);
        break;

      case 2:
        render.lines += instanceCount * count;
        break;

      case 0:
        render.points += instanceCount * count;
        break;

      default:
        console.error('THREE.WebGLInfo: Unknown draw mode:', mode);
        break;
    }
  }

  function reset() {
    render.frame++;
    render.calls = 0;
    render.triangles = 0;
    render.points = 0;
    render.lines = 0;
  }

  return {
    memory: memory,
    render: render,
    programs: null,
    autoReset: true,
    reset: reset,
    update: update
  };
}
/**
 * @author mrdoob / http://mrdoob.com/
 */


function absNumericalSort(a, b) {
  return Math.abs(b[1]) - Math.abs(a[1]);
}

function WebGLMorphtargets(gl) {
  var influencesList = {};
  var morphInfluences = new Float32Array(8);

  function update(object, geometry, material, program) {
    var objectInfluences = object.morphTargetInfluences;
    var length = objectInfluences.length;
    var influences = influencesList[geometry.id];

    if (influences === undefined) {
      // initialise list
      influences = [];

      for (var i = 0; i < length; i++) {
        influences[i] = [i, 0];
      }

      influencesList[geometry.id] = influences;
    }

    var morphTargets = material.morphTargets && geometry.morphAttributes.position;
    var morphNormals = material.morphNormals && geometry.morphAttributes.normal; // Remove current morphAttributes

    for (var i = 0; i < length; i++) {
      var influence = influences[i];

      if (influence[1] !== 0) {
        if (morphTargets) geometry.removeAttribute('morphTarget' + i);
        if (morphNormals) geometry.removeAttribute('morphNormal' + i);
      }
    } // Collect influences


    for (var i = 0; i < length; i++) {
      var influence = influences[i];
      influence[0] = i;
      influence[1] = objectInfluences[i];
    }

    influences.sort(absNumericalSort); // Add morphAttributes

    for (var i = 0; i < 8; i++) {
      var influence = influences[i];

      if (influence) {
        var index = influence[0];
        var value = influence[1];

        if (value) {
          if (morphTargets) geometry.addAttribute('morphTarget' + i, morphTargets[index]);
          if (morphNormals) geometry.addAttribute('morphNormal' + i, morphNormals[index]);
          morphInfluences[i] = value;
          continue;
        }
      }

      morphInfluences[i] = 0;
    }

    program.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);
  }

  return {
    update: update
  };
}
/**
 * @author mrdoob / http://mrdoob.com/
 */


function WebGLObjects(geometries, info) {
  var updateList = {};

  function update(object) {
    var frame = info.render.frame;
    var geometry = object.geometry;
    var buffergeometry = geometries.get(object, geometry); // Update once per frame

    if (updateList[buffergeometry.id] !== frame) {
      if (geometry.isGeometry) {
        buffergeometry.updateFromObject(object);
      }

      geometries.update(buffergeometry);
      updateList[buffergeometry.id] = frame;
    }

    return buffergeometry;
  }

  function dispose() {
    updateList = {};
  }

  return {
    update: update,
    dispose: dispose
  };
}
/**
 * @author mrdoob / http://mrdoob.com/
 */


function CubeTexture(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {
  images = images !== undefined ? images : [];
  mapping = mapping !== undefined ? mapping : CubeReflectionMapping;
  format = format !== undefined ? format : RGBFormat;
  Texture.call(this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
  this.flipY = false;
}

CubeTexture.prototype = Object.create(Texture.prototype);
CubeTexture.prototype.constructor = CubeTexture;
CubeTexture.prototype.isCubeTexture = true;
Object.defineProperty(CubeTexture.prototype, 'images', {
  get: function () {
    return this.image;
  },
  set: function (value) {
    this.image = value;
  }
});
/**
 * @author Artur Trzesiok
 */

function DataTexture3D(data, width, height, depth) {
  // We're going to add .setXXX() methods for setting properties later.
  // Users can still set in DataTexture3D directly.
  //
  //	var texture = new THREE.DataTexture3D( data, width, height, depth );
  // 	texture.anisotropy = 16;
  //
  // See #14839
  Texture.call(this, null);
  this.image = {
    data: data,
    width: width,
    height: height,
    depth: depth
  };
  this.magFilter = NearestFilter;
  this.minFilter = NearestFilter;
  this.wrapR = ClampToEdgeWrapping;
  this.generateMipmaps = false;
  this.flipY = false;
}

DataTexture3D.prototype = Object.create(Texture.prototype);
DataTexture3D.prototype.constructor = DataTexture3D;
DataTexture3D.prototype.isDataTexture3D = true;
/**
 * @author tschw
 * @author Mugen87 / https://github.com/Mugen87
 * @author mrdoob / http://mrdoob.com/
 *
 * Uniforms of a program.
 * Those form a tree structure with a special top-level container for the root,
 * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.
 *
 *
 * Properties of inner nodes including the top-level container:
 *
 * .seq - array of nested uniforms
 * .map - nested uniforms by name
 *
 *
 * Methods of all nodes except the top-level container:
 *
 * .setValue( gl, value, [renderer] )
 *
 * 		uploads a uniform value(s)
 *  	the 'renderer' parameter is needed for sampler uniforms
 *
 *
 * Static methods of the top-level container (renderer factorizations):
 *
 * .upload( gl, seq, values, renderer )
 *
 * 		sets uniforms in 'seq' to 'values[id].value'
 *
 * .seqWithValue( seq, values ) : filteredSeq
 *
 * 		filters 'seq' entries with corresponding entry in values
 *
 *
 * Methods of the top-level container (renderer factorizations):
 *
 * .setValue( gl, name, value )
 *
 * 		sets uniform with  name 'name' to 'value'
 *
 * .set( gl, obj, prop )
 *
 * 		sets uniform from object and property with same name than uniform
 *
 * .setOptional( gl, obj, prop )
 *
 * 		like .set for an optional property of the object
 *
 */

var emptyTexture = new Texture();
var emptyTexture3d = new DataTexture3D();
var emptyCubeTexture = new CubeTexture(); // --- Base for inner nodes (including the root) ---

function UniformContainer() {
  this.seq = [];
  this.map = {};
} // --- Utilities ---
// Array Caches (provide typed arrays for temporary by size)


var arrayCacheF32 = [];
var arrayCacheI32 = []; // Float32Array caches used for uploading Matrix uniforms

var mat4array = new Float32Array(16);
var mat3array = new Float32Array(9);
var mat2array = new Float32Array(4); // Flattening for arrays of vectors and matrices

function flatten(array, nBlocks, blockSize) {
  var firstElem = array[0];
  if (firstElem <= 0 || firstElem > 0) return array; // unoptimized: ! isNaN( firstElem )
  // see http://jacksondunstan.com/articles/983

  var n = nBlocks * blockSize,
      r = arrayCacheF32[n];

  if (r === undefined) {
    r = new Float32Array(n);
    arrayCacheF32[n] = r;
  }

  if (nBlocks !== 0) {
    firstElem.toArray(r, 0);

    for (var i = 1, offset = 0; i !== nBlocks; ++i) {
      offset += blockSize;
      array[i].toArray(r, offset);
    }
  }

  return r;
}

function arraysEqual(a, b) {
  if (a.length !== b.length) return false;

  for (var i = 0, l = a.length; i < l; i++) {
    if (a[i] !== b[i]) return false;
  }

  return true;
}

function copyArray(a, b) {
  for (var i = 0, l = b.length; i < l; i++) {
    a[i] = b[i];
  }
} // Texture unit allocation


function allocTexUnits(renderer, n) {
  var r = arrayCacheI32[n];

  if (r === undefined) {
    r = new Int32Array(n);
    arrayCacheI32[n] = r;
  }

  for (var i = 0; i !== n; ++i) r[i] = renderer.allocTextureUnit();

  return r;
} // --- Setters ---
// Note: Defining these methods externally, because they come in a bunch
// and this way their names minify.
// Single scalar


function setValue1f(gl, v) {
  var cache = this.cache;
  if (cache[0] === v) return;
  gl.uniform1f(this.addr, v);
  cache[0] = v;
}

function setValue1i(gl, v) {
  var cache = this.cache;
  if (cache[0] === v) return;
  gl.uniform1i(this.addr, v);
  cache[0] = v;
} // Single float vector (from flat array or THREE.VectorN)


function setValue2fv(gl, v) {
  var cache = this.cache;

  if (v.x !== undefined) {
    if (cache[0] !== v.x || cache[1] !== v.y) {
      gl.uniform2f(this.addr, v.x, v.y);
      cache[0] = v.x;
      cache[1] = v.y;
    }
  } else {
    if (arraysEqual(cache, v)) return;
    gl.uniform2fv(this.addr, v);
    copyArray(cache, v);
  }
}

function setValue3fv(gl, v) {
  var cache = this.cache;

  if (v.x !== undefined) {
    if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
      gl.uniform3f(this.addr, v.x, v.y, v.z);
      cache[0] = v.x;
      cache[1] = v.y;
      cache[2] = v.z;
    }
  } else if (v.r !== undefined) {
    if (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {
      gl.uniform3f(this.addr, v.r, v.g, v.b);
      cache[0] = v.r;
      cache[1] = v.g;
      cache[2] = v.b;
    }
  } else {
    if (arraysEqual(cache, v)) return;
    gl.uniform3fv(this.addr, v);
    copyArray(cache, v);
  }
}

function setValue4fv(gl, v) {
  var cache = this.cache;

  if (v.x !== undefined) {
    if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
      gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);
      cache[0] = v.x;
      cache[1] = v.y;
      cache[2] = v.z;
      cache[3] = v.w;
    }
  } else {
    if (arraysEqual(cache, v)) return;
    gl.uniform4fv(this.addr, v);
    copyArray(cache, v);
  }
} // Single matrix (from flat array or MatrixN)


function setValue2fm(gl, v) {
  var cache = this.cache;
  var elements = v.elements;

  if (elements === undefined) {
    if (arraysEqual(cache, v)) return;
    gl.uniformMatrix2fv(this.addr, false, v);
    copyArray(cache, v);
  } else {
    if (arraysEqual(cache, elements)) return;
    mat2array.set(elements);
    gl.uniformMatrix2fv(this.addr, false, mat2array);
    copyArray(cache, elements);
  }
}

function setValue3fm(gl, v) {
  var cache = this.cache;
  var elements = v.elements;

  if (elements === undefined) {
    if (arraysEqual(cache, v)) return;
    gl.uniformMatrix3fv(this.addr, false, v);
    copyArray(cache, v);
  } else {
    if (arraysEqual(cache, elements)) return;
    mat3array.set(elements);
    gl.uniformMatrix3fv(this.addr, false, mat3array);
    copyArray(cache, elements);
  }
}

function setValue4fm(gl, v) {
  var cache = this.cache;
  var elements = v.elements;

  if (elements === undefined) {
    if (arraysEqual(cache, v)) return;
    gl.uniformMatrix4fv(this.addr, false, v);
    copyArray(cache, v);
  } else {
    if (arraysEqual(cache, elements)) return;
    mat4array.set(elements);
    gl.uniformMatrix4fv(this.addr, false, mat4array);
    copyArray(cache, elements);
  }
} // Single texture (2D / Cube)


function setValueT1(gl, v, renderer) {
  var cache = this.cache;
  var unit = renderer.allocTextureUnit();

  if (cache[0] !== unit) {
    gl.uniform1i(this.addr, unit);
    cache[0] = unit;
  }

  renderer.setTexture2D(v || emptyTexture, unit);
}

function setValueT3D1(gl, v, renderer) {
  var cache = this.cache;
  var unit = renderer.allocTextureUnit();

  if (cache[0] !== unit) {
    gl.uniform1i(this.addr, unit);
    cache[0] = unit;
  }

  renderer.setTexture3D(v || emptyTexture3d, unit);
}

function setValueT6(gl, v, renderer) {
  var cache = this.cache;
  var unit = renderer.allocTextureUnit();

  if (cache[0] !== unit) {
    gl.uniform1i(this.addr, unit);
    cache[0] = unit;
  }

  renderer.setTextureCube(v || emptyCubeTexture, unit);
} // Integer / Boolean vectors or arrays thereof (always flat arrays)


function setValue2iv(gl, v) {
  var cache = this.cache;
  if (arraysEqual(cache, v)) return;
  gl.uniform2iv(this.addr, v);
  copyArray(cache, v);
}

function setValue3iv(gl, v) {
  var cache = this.cache;
  if (arraysEqual(cache, v)) return;
  gl.uniform3iv(this.addr, v);
  copyArray(cache, v);
}

function setValue4iv(gl, v) {
  var cache = this.cache;
  if (arraysEqual(cache, v)) return;
  gl.uniform4iv(this.addr, v);
  copyArray(cache, v);
} // Helper to pick the right setter for the singular case


function getSingularSetter(type) {
  switch (type) {
    case 0x1406:
      return setValue1f;
    // FLOAT

    case 0x8b50:
      return setValue2fv;
    // _VEC2

    case 0x8b51:
      return setValue3fv;
    // _VEC3

    case 0x8b52:
      return setValue4fv;
    // _VEC4

    case 0x8b5a:
      return setValue2fm;
    // _MAT2

    case 0x8b5b:
      return setValue3fm;
    // _MAT3

    case 0x8b5c:
      return setValue4fm;
    // _MAT4

    case 0x8b5e:
    case 0x8d66:
      return setValueT1;
    // SAMPLER_2D, SAMPLER_EXTERNAL_OES

    case 0x8B5F:
      return setValueT3D1;
    // SAMPLER_3D

    case 0x8b60:
      return setValueT6;
    // SAMPLER_CUBE

    case 0x1404:
    case 0x8b56:
      return setValue1i;
    // INT, BOOL

    case 0x8b53:
    case 0x8b57:
      return setValue2iv;
    // _VEC2

    case 0x8b54:
    case 0x8b58:
      return setValue3iv;
    // _VEC3

    case 0x8b55:
    case 0x8b59:
      return setValue4iv;
    // _VEC4
  }
} // Array of scalars


function setValue1fv(gl, v) {
  var cache = this.cache;
  if (arraysEqual(cache, v)) return;
  gl.uniform1fv(this.addr, v);
  copyArray(cache, v);
}

function setValue1iv(gl, v) {
  var cache = this.cache;
  if (arraysEqual(cache, v)) return;
  gl.uniform1iv(this.addr, v);
  copyArray(cache, v);
} // Array of vectors (flat or from THREE classes)


function setValueV2a(gl, v) {
  var cache = this.cache;
  var data = flatten(v, this.size, 2);
  if (arraysEqual(cache, data)) return;
  gl.uniform2fv(this.addr, data);
  this.updateCache(data);
}

function setValueV3a(gl, v) {
  var cache = this.cache;
  var data = flatten(v, this.size, 3);
  if (arraysEqual(cache, data)) return;
  gl.uniform3fv(this.addr, data);
  this.updateCache(data);
}

function setValueV4a(gl, v) {
  var cache = this.cache;
  var data = flatten(v, this.size, 4);
  if (arraysEqual(cache, data)) return;
  gl.uniform4fv(this.addr, data);
  this.updateCache(data);
} // Array of matrices (flat or from THREE clases)


function setValueM2a(gl, v) {
  var cache = this.cache;
  var data = flatten(v, this.size, 4);
  if (arraysEqual(cache, data)) return;
  gl.uniformMatrix2fv(this.addr, false, data);
  this.updateCache(data);
}

function setValueM3a(gl, v) {
  var cache = this.cache;
  var data = flatten(v, this.size, 9);
  if (arraysEqual(cache, data)) return;
  gl.uniformMatrix3fv(this.addr, false, data);
  this.updateCache(data);
}

function setValueM4a(gl, v) {
  var cache = this.cache;
  var data = flatten(v, this.size, 16);
  if (arraysEqual(cache, data)) return;
  gl.uniformMatrix4fv(this.addr, false, data);
  this.updateCache(data);
} // Array of textures (2D / Cube)


function setValueT1a(gl, v, renderer) {
  var cache = this.cache;
  var n = v.length;
  var units = allocTexUnits(renderer, n);

  if (arraysEqual(cache, units) === false) {
    gl.uniform1iv(this.addr, units);
    copyArray(cache, units);
  }

  for (var i = 0; i !== n; ++i) {
    renderer.setTexture2D(v[i] || emptyTexture, units[i]);
  }
}

function setValueT6a(gl, v, renderer) {
  var cache = this.cache;
  var n = v.length;
  var units = allocTexUnits(renderer, n);

  if (arraysEqual(cache, units) === false) {
    gl.uniform1iv(this.addr, units);
    copyArray(cache, units);
  }

  for (var i = 0; i !== n; ++i) {
    renderer.setTextureCube(v[i] || emptyCubeTexture, units[i]);
  }
} // Helper to pick the right setter for a pure (bottom-level) array


function getPureArraySetter(type) {
  switch (type) {
    case 0x1406:
      return setValue1fv;
    // FLOAT

    case 0x8b50:
      return setValueV2a;
    // _VEC2

    case 0x8b51:
      return setValueV3a;
    // _VEC3

    case 0x8b52:
      return setValueV4a;
    // _VEC4

    case 0x8b5a:
      return setValueM2a;
    // _MAT2

    case 0x8b5b:
      return setValueM3a;
    // _MAT3

    case 0x8b5c:
      return setValueM4a;
    // _MAT4

    case 0x8b5e:
      return setValueT1a;
    // SAMPLER_2D

    case 0x8b60:
      return setValueT6a;
    // SAMPLER_CUBE

    case 0x1404:
    case 0x8b56:
      return setValue1iv;
    // INT, BOOL

    case 0x8b53:
    case 0x8b57:
      return setValue2iv;
    // _VEC2

    case 0x8b54:
    case 0x8b58:
      return setValue3iv;
    // _VEC3

    case 0x8b55:
    case 0x8b59:
      return setValue4iv;
    // _VEC4
  }
} // --- Uniform Classes ---


function SingleUniform(id, activeInfo, addr) {
  this.id = id;
  this.addr = addr;
  this.cache = [];
  this.setValue = getSingularSetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG
}

function PureArrayUniform(id, activeInfo, addr) {
  this.id = id;
  this.addr = addr;
  this.cache = [];
  this.size = activeInfo.size;
  this.setValue = getPureArraySetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG
}

PureArrayUniform.prototype.updateCache = function (data) {
  var cache = this.cache;

  if (data instanceof Float32Array && cache.length !== data.length) {
    this.cache = new Float32Array(data.length);
  }

  copyArray(cache, data);
};

function StructuredUniform(id) {
  this.id = id;
  UniformContainer.call(this); // mix-in
}

StructuredUniform.prototype.setValue = function (gl, value, renderer) {
  var seq = this.seq;

  for (var i = 0, n = seq.length; i !== n; ++i) {
    var u = seq[i];
    u.setValue(gl, value[u.id], renderer);
  }
}; // --- Top-level ---
// Parser - builds up the property tree from the path strings


var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g; // extracts
// 	- the identifier (member name or array index)
//  - followed by an optional right bracket (found when array index)
//  - followed by an optional left bracket or dot (type of subscript)
//
// Note: These portions can be read in a non-overlapping fashion and
// allow straightforward parsing of the hierarchy that WebGL encodes
// in the uniform names.

function addUniform(container, uniformObject) {
  container.seq.push(uniformObject);
  container.map[uniformObject.id] = uniformObject;
}

function parseUniform(activeInfo, addr, container) {
  var path = activeInfo.name,
      pathLength = path.length; // reset RegExp object, because of the early exit of a previous run

  RePathPart.lastIndex = 0;

  while (true) {
    var match = RePathPart.exec(path),
        matchEnd = RePathPart.lastIndex,
        id = match[1],
        idIsIndex = match[2] === ']',
        subscript = match[3];
    if (idIsIndex) id = id | 0; // convert to integer

    if (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {
      // bare name or "pure" bottom-level array "[0]" suffix
      addUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));
      break;
    } else {
      // step into inner node / create it in case it doesn't exist
      var map = container.map,
          next = map[id];

      if (next === undefined) {
        next = new StructuredUniform(id);
        addUniform(container, next);
      }

      container = next;
    }
  }
} // Root Container


function WebGLUniforms(gl, program, renderer) {
  UniformContainer.call(this);
  this.renderer = renderer;
  var n = gl.getProgramParameter(program, 35718);

  for (var i = 0; i < n; ++i) {
    var info = gl.getActiveUniform(program, i),
        addr = gl.getUniformLocation(program, info.name);
    parseUniform(info, addr, this);
  }
}

WebGLUniforms.prototype.setValue = function (gl, name, value) {
  var u = this.map[name];
  if (u !== undefined) u.setValue(gl, value, this.renderer);
};

WebGLUniforms.prototype.setOptional = function (gl, object, name) {
  var v = object[name];
  if (v !== undefined) this.setValue(gl, name, v);
}; // Static interface


WebGLUniforms.upload = function (gl, seq, values, renderer) {
  for (var i = 0, n = seq.length; i !== n; ++i) {
    var u = seq[i],
        v = values[u.id];

    if (v.needsUpdate !== false) {
      // note: always updating when .needsUpdate is undefined
      u.setValue(gl, v.value, renderer);
    }
  }
};

WebGLUniforms.seqWithValue = function (seq, values) {
  var r = [];

  for (var i = 0, n = seq.length; i !== n; ++i) {
    var u = seq[i];
    if (u.id in values) r.push(u);
  }

  return r;
};
/**
 * @author mrdoob / http://mrdoob.com/
 */


function addLineNumbers(string) {
  var lines = string.split('\n');

  for (var i = 0; i < lines.length; i++) {
    lines[i] = i + 1 + ': ' + lines[i];
  }

  return lines.join('\n');
}

function WebGLShader(gl, type, string) {
  var shader = gl.createShader(type);
  gl.shaderSource(shader, string);
  gl.compileShader(shader);

  if (gl.getShaderParameter(shader, 35713) === false) {
    console.error('THREE.WebGLShader: Shader couldn\'t compile.');
  }

  if (gl.getShaderInfoLog(shader) !== '') {
    console.warn('THREE.WebGLShader: gl.getShaderInfoLog()', type === 35633 ? 'vertex' : 'fragment', gl.getShaderInfoLog(shader), addLineNumbers(string));
  } // --enable-privileged-webgl-extension
  // console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );


  return shader;
}
/**
 * @author mrdoob / http://mrdoob.com/
 */


var programIdCount = 0;

function getEncodingComponents(encoding) {
  switch (encoding) {
    case LinearEncoding:
      return ['Linear', '( value )'];

    case sRGBEncoding:
      return ['sRGB', '( value )'];

    case RGBEEncoding:
      return ['RGBE', '( value )'];

    case RGBM7Encoding:
      return ['RGBM', '( value, 7.0 )'];

    case RGBM16Encoding:
      return ['RGBM', '( value, 16.0 )'];

    case RGBDEncoding:
      return ['RGBD', '( value, 256.0 )'];

    case GammaEncoding:
      return ['Gamma', '( value, float( GAMMA_FACTOR ) )'];

    default:
      throw new Error('unsupported encoding: ' + encoding);
  }
}

function getTexelDecodingFunction(functionName, encoding) {
  var components = getEncodingComponents(encoding);
  return 'vec4 ' + functionName + '( vec4 value ) { return ' + components[0] + 'ToLinear' + components[1] + '; }';
}

function getTexelEncodingFunction(functionName, encoding) {
  var components = getEncodingComponents(encoding);
  return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[0] + components[1] + '; }';
}

function getToneMappingFunction(functionName, toneMapping) {
  var toneMappingName;

  switch (toneMapping) {
    case LinearToneMapping:
      toneMappingName = 'Linear';
      break;

    case ReinhardToneMapping:
      toneMappingName = 'Reinhard';
      break;

    case Uncharted2ToneMapping:
      toneMappingName = 'Uncharted2';
      break;

    case CineonToneMapping:
      toneMappingName = 'OptimizedCineon';
      break;

    case ACESFilmicToneMapping:
      toneMappingName = 'ACESFilmic';
      break;

    default:
      throw new Error('unsupported toneMapping: ' + toneMapping);
  }

  return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';
}

function generateExtensions(extensions, parameters, rendererExtensions) {
  extensions = extensions || {};
  var chunks = [extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap && !parameters.objectSpaceNormalMap || parameters.flatShading ? '#extension GL_OES_standard_derivatives : enable' : '', (extensions.fragDepth || parameters.logarithmicDepthBuffer) && rendererExtensions.get('EXT_frag_depth') ? '#extension GL_EXT_frag_depth : enable' : '', extensions.drawBuffers && rendererExtensions.get('WEBGL_draw_buffers') ? '#extension GL_EXT_draw_buffers : require' : '', (extensions.shaderTextureLOD || parameters.envMap) && rendererExtensions.get('EXT_shader_texture_lod') ? '#extension GL_EXT_shader_texture_lod : enable' : ''];
  return chunks.filter(filterEmptyLine).join('\n');
}

function generateDefines(defines) {
  var chunks = [];

  for (var name in defines) {
    var value = defines[name];
    if (value === false) continue;
    chunks.push('#define ' + name + ' ' + value);
  }

  return chunks.join('\n');
}

function fetchAttributeLocations(gl, program) {
  var attributes = {};
  var n = gl.getProgramParameter(program, 35721);

  for (var i = 0; i < n; i++) {
    var info = gl.getActiveAttrib(program, i);
    var name = info.name; // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );

    attributes[name] = gl.getAttribLocation(program, name);
  }

  return attributes;
}

function filterEmptyLine(string) {
  return string !== '';
}

function replaceLightNums(string, parameters) {
  return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights);
}

function replaceClippingPlaneNums(string, parameters) {
  return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);
}

function parseIncludes(string) {
  var pattern = /^[ \t]*#include +<([\w\d./]+)>/gm;

  function replace(match, include) {
    var replace = ShaderChunk[include];

    if (replace === undefined) {
      throw new Error('Can not resolve #include <' + include + '>');
    }

    return parseIncludes(replace);
  }

  return string.replace(pattern, replace);
}

function unrollLoops(string) {
  var pattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;

  function replace(match, start, end, snippet) {
    var unroll = '';

    for (var i = parseInt(start); i < parseInt(end); i++) {
      unroll += snippet.replace(/\[ i \]/g, '[ ' + i + ' ]');
    }

    return unroll;
  }

  return string.replace(pattern, replace);
}

function WebGLProgram(renderer, extensions, code, material, shader, parameters, capabilities) {
  var gl = renderer.context;
  var defines = material.defines;
  var vertexShader = shader.vertexShader;
  var fragmentShader = shader.fragmentShader;
  var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

  if (parameters.shadowMapType === PCFShadowMap) {
    shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';
  } else if (parameters.shadowMapType === PCFSoftShadowMap) {
    shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';
  }

  var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
  var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
  var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';

  if (parameters.envMap) {
    switch (material.envMap.mapping) {
      case CubeReflectionMapping:
      case CubeRefractionMapping:
        envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
        break;

      case CubeUVReflectionMapping:
      case CubeUVRefractionMapping:
        envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
        break;

      case EquirectangularReflectionMapping:
      case EquirectangularRefractionMapping:
        envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
        break;

      case SphericalReflectionMapping:
        envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
        break;
    }

    switch (material.envMap.mapping) {
      case CubeRefractionMapping:
      case EquirectangularRefractionMapping:
        envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
        break;
    }

    switch (material.combine) {
      case MultiplyOperation:
        envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
        break;

      case MixOperation:
        envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
        break;

      case AddOperation:
        envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
        break;
    }
  }

  var gammaFactorDefine = renderer.gammaFactor > 0 ? renderer.gammaFactor : 1.0; // console.log( 'building new program ' );
  //

  var customExtensions = capabilities.isWebGL2 ? '' : generateExtensions(material.extensions, parameters, extensions);
  var customDefines = generateDefines(defines); //

  var program = gl.createProgram();
  var prefixVertex, prefixFragment;

  if (material.isRawShaderMaterial) {
    prefixVertex = [customDefines].filter(filterEmptyLine).join('\n');

    if (prefixVertex.length > 0) {
      prefixVertex += '\n';
    }

    prefixFragment = [customExtensions, customDefines].filter(filterEmptyLine).join('\n');

    if (prefixFragment.length > 0) {
      prefixFragment += '\n';
    }
  } else {
    prefixVertex = ['precision ' + parameters.precision + ' float;', 'precision ' + parameters.precision + ' int;', '#define SHADER_NAME ' + shader.name, customDefines, parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '', '#define GAMMA_FACTOR ' + gammaFactorDefine, '#define MAX_BONES ' + parameters.maxBones, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.skinning ? '#define USE_SKINNING' : '', parameters.useVertexTexture ? '#define BONE_TEXTURE' : '', parameters.morphTargets ? '#define USE_MORPHTARGETS' : '', parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && (capabilities.isWebGL2 || extensions.get('EXT_frag_depth')) ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', '#ifdef USE_TANGENT', '	attribute vec4 tangent;', '#endif', '#ifdef USE_COLOR', '	attribute vec3 color;', '#endif', '#ifdef USE_MORPHTARGETS', '	attribute vec3 morphTarget0;', '	attribute vec3 morphTarget1;', '	attribute vec3 morphTarget2;', '	attribute vec3 morphTarget3;', '	#ifdef USE_MORPHNORMALS', '		attribute vec3 morphNormal0;', '		attribute vec3 morphNormal1;', '		attribute vec3 morphNormal2;', '		attribute vec3 morphNormal3;', '	#else', '		attribute vec3 morphTarget4;', '		attribute vec3 morphTarget5;', '		attribute vec3 morphTarget6;', '		attribute vec3 morphTarget7;', '	#endif', '#endif', '#ifdef USE_SKINNING', '	attribute vec4 skinIndex;', '	attribute vec4 skinWeight;', '#endif', '\n'].filter(filterEmptyLine).join('\n');
    prefixFragment = [customExtensions, 'precision ' + parameters.precision + ' float;', 'precision ' + parameters.precision + ' int;', '#define SHADER_NAME ' + shader.name, customDefines, parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + (parameters.alphaTest % 1 ? '' : '.0') : '', // add '.0' if integer
    '#define GAMMA_FACTOR ' + gammaFactorDefine, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.matcap ? '#define USE_MATCAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapTypeDefine : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.envMap ? '#define ' + envMapBlendingDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.gradientMap ? '#define USE_GRADIENTMAP' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '', parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && (capabilities.isWebGL2 || extensions.get('EXT_frag_depth')) ? '#define USE_LOGDEPTHBUF_EXT' : '', parameters.envMap && (capabilities.isWebGL2 || extensions.get('EXT_shader_texture_lod')) ? '#define TEXTURE_LOD_EXT' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', parameters.toneMapping !== NoToneMapping ? '#define TONE_MAPPING' : '', parameters.toneMapping !== NoToneMapping ? ShaderChunk['tonemapping_pars_fragment'] : '', // this code is required here because it is used by the toneMapping() function defined below
    parameters.toneMapping !== NoToneMapping ? getToneMappingFunction('toneMapping', parameters.toneMapping) : '', parameters.dithering ? '#define DITHERING' : '', parameters.outputEncoding || parameters.mapEncoding || parameters.matcapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ? ShaderChunk['encodings_pars_fragment'] : '', // this code is required here because it is used by the various encoding/decoding function defined below
    parameters.mapEncoding ? getTexelDecodingFunction('mapTexelToLinear', parameters.mapEncoding) : '', parameters.matcapEncoding ? getTexelDecodingFunction('matcapTexelToLinear', parameters.matcapEncoding) : '', parameters.envMapEncoding ? getTexelDecodingFunction('envMapTexelToLinear', parameters.envMapEncoding) : '', parameters.emissiveMapEncoding ? getTexelDecodingFunction('emissiveMapTexelToLinear', parameters.emissiveMapEncoding) : '', parameters.outputEncoding ? getTexelEncodingFunction('linearToOutputTexel', parameters.outputEncoding) : '', parameters.depthPacking ? '#define DEPTH_PACKING ' + material.depthPacking : '', '\n'].filter(filterEmptyLine).join('\n');
  }

  vertexShader = parseIncludes(vertexShader);
  vertexShader = replaceLightNums(vertexShader, parameters);
  vertexShader = replaceClippingPlaneNums(vertexShader, parameters);
  fragmentShader = parseIncludes(fragmentShader);
  fragmentShader = replaceLightNums(fragmentShader, parameters);
  fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);
  vertexShader = unrollLoops(vertexShader);
  fragmentShader = unrollLoops(fragmentShader);

  if (capabilities.isWebGL2 && !material.isRawShaderMaterial) {
    var isGLSL3ShaderMaterial = false;
    var versionRegex = /^\s*#version\s+300\s+es\s*\n/;

    if (material.isShaderMaterial && vertexShader.match(versionRegex) !== null && fragmentShader.match(versionRegex) !== null) {
      isGLSL3ShaderMaterial = true;
      vertexShader = vertexShader.replace(versionRegex, '');
      fragmentShader = fragmentShader.replace(versionRegex, '');
    } // GLSL 3.0 conversion


    prefixVertex = ['#version 300 es\n', '#define attribute in', '#define varying out', '#define texture2D texture'].join('\n') + '\n' + prefixVertex;
    prefixFragment = ['#version 300 es\n', '#define varying in', isGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;', isGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor', '#define gl_FragDepthEXT gl_FragDepth', '#define texture2D texture', '#define textureCube texture', '#define texture2DProj textureProj', '#define texture2DLodEXT textureLod', '#define texture2DProjLodEXT textureProjLod', '#define textureCubeLodEXT textureLod', '#define texture2DGradEXT textureGrad', '#define texture2DProjGradEXT textureProjGrad', '#define textureCubeGradEXT textureGrad'].join('\n') + '\n' + prefixFragment;
  }

  var vertexGlsl = prefixVertex + vertexShader;
  var fragmentGlsl = prefixFragment + fragmentShader; // console.log( '*VERTEX*', vertexGlsl );
  // console.log( '*FRAGMENT*', fragmentGlsl );

  var glVertexShader = WebGLShader(gl, 35633, vertexGlsl);
  var glFragmentShader = WebGLShader(gl, 35632, fragmentGlsl);
  gl.attachShader(program, glVertexShader);
  gl.attachShader(program, glFragmentShader); // Force a particular attribute to index 0.

  if (material.index0AttributeName !== undefined) {
    gl.bindAttribLocation(program, 0, material.index0AttributeName);
  } else if (parameters.morphTargets === true) {
    // programs with morphTargets displace position out of attribute 0
    gl.bindAttribLocation(program, 0, 'position');
  }

  gl.linkProgram(program);
  var programLog = gl.getProgramInfoLog(program).trim();
  var vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
  var fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
  var runnable = true;
  var haveDiagnostics = true; // console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );
  // console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );

  if (gl.getProgramParameter(program, 35714) === false) {
    runnable = false;
    console.error('THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter(program, 35715), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog);
  } else if (programLog !== '') {
    console.warn('THREE.WebGLProgram: gl.getProgramInfoLog()', programLog);
  } else if (vertexLog === '' || fragmentLog === '') {
    haveDiagnostics = false;
  }

  if (haveDiagnostics) {
    this.diagnostics = {
      runnable: runnable,
      material: material,
      programLog: programLog,
      vertexShader: {
        log: vertexLog,
        prefix: prefixVertex
      },
      fragmentShader: {
        log: fragmentLog,
        prefix: prefixFragment
      }
    };
  } // clean up


  gl.deleteShader(glVertexShader);
  gl.deleteShader(glFragmentShader); // set up caching for uniform locations

  var cachedUniforms;

  this.getUniforms = function () {
    if (cachedUniforms === undefined) {
      cachedUniforms = new WebGLUniforms(gl, program, renderer);
    }

    return cachedUniforms;
  }; // set up caching for attribute locations


  var cachedAttributes;

  this.getAttributes = function () {
    if (cachedAttributes === undefined) {
      cachedAttributes = fetchAttributeLocations(gl, program);
    }

    return cachedAttributes;
  }; // free resource


  this.destroy = function () {
    gl.deleteProgram(program);
    this.program = undefined;
  }; // DEPRECATED


  Object.defineProperties(this, {
    uniforms: {
      get: function () {
        console.warn('THREE.WebGLProgram: .uniforms is now .getUniforms().');
        return this.getUniforms();
      }
    },
    attributes: {
      get: function () {
        console.warn('THREE.WebGLProgram: .attributes is now .getAttributes().');
        return this.getAttributes();
      }
    }
  }); //

  this.name = shader.name;
  this.id = programIdCount++;
  this.code = code;
  this.usedTimes = 1;
  this.program = program;
  this.vertexShader = glVertexShader;
  this.fragmentShader = glFragmentShader;
  return this;
}
/**
 * @author mrdoob / http://mrdoob.com/
 */


function WebGLPrograms(renderer, extensions, capabilities) {
  var programs = [];
  var shaderIDs = {
    MeshDepthMaterial: 'depth',
    MeshDistanceMaterial: 'distanceRGBA',
    MeshNormalMaterial: 'normal',
    MeshBasicMaterial: 'basic',
    MeshLambertMaterial: 'lambert',
    MeshPhongMaterial: 'phong',
    MeshToonMaterial: 'phong',
    MeshStandardMaterial: 'physical',
    MeshPhysicalMaterial: 'physical',
    MeshMatcapMaterial: 'matcap',
    LineBasicMaterial: 'basic',
    LineDashedMaterial: 'dashed',
    PointsMaterial: 'points',
    ShadowMaterial: 'shadow',
    SpriteMaterial: 'sprite'
  };
  var parameterNames = ["precision", "supportsVertexTextures", "map", "mapEncoding", "matcap", "matcapEncoding", "envMap", "envMapMode", "envMapEncoding", "lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "objectSpaceNormalMap", "displacementMap", "specularMap", "roughnessMap", "metalnessMap", "gradientMap", "alphaMap", "combine", "vertexColors", "vertexTangents", "fog", "useFog", "fogExp", "flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning", "maxBones", "useVertexTexture", "morphTargets", "morphNormals", "maxMorphTargets", "maxMorphNormals", "premultipliedAlpha", "numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights", "shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights', "alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering"];

  function allocateBones(object) {
    var skeleton = object.skeleton;
    var bones = skeleton.bones;

    if (capabilities.floatVertexTextures) {
      return 1024;
    } else {
      // default for when object is not specified
      // ( for example when prebuilding shader to be used with multiple objects )
      //
      //  - leave some extra space for other uniforms
      //  - limit here is ANGLE's 254 max uniform vectors
      //    (up to 54 should be safe)
      var nVertexUniforms = capabilities.maxVertexUniforms;
      var nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);
      var maxBones = Math.min(nVertexMatrices, bones.length);

      if (maxBones < bones.length) {
        console.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.');
        return 0;
      }

      return maxBones;
    }
  }

  function getTextureEncodingFromMap(map, gammaOverrideLinear) {
    var encoding;

    if (!map) {
      encoding = LinearEncoding;
    } else if (map.isTexture) {
      encoding = map.encoding;
    } else if (map.isWebGLRenderTarget) {
      console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.");
      encoding = map.texture.encoding;
    } // add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.


    if (encoding === LinearEncoding && gammaOverrideLinear) {
      encoding = GammaEncoding;
    }

    return encoding;
  }

  this.getParameters = function (material, lights, shadows, fog, nClipPlanes, nClipIntersection, object) {
    var shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene
    // (not to blow over maxLights budget)

    var maxBones = object.isSkinnedMesh ? allocateBones(object) : 0;
    var precision = capabilities.precision;

    if (material.precision !== null) {
      precision = capabilities.getMaxPrecision(material.precision);

      if (precision !== material.precision) {
        console.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');
      }
    }

    var currentRenderTarget = renderer.getRenderTarget();
    var parameters = {
      shaderID: shaderID,
      precision: precision,
      supportsVertexTextures: capabilities.vertexTextures,
      outputEncoding: getTextureEncodingFromMap(!currentRenderTarget ? null : currentRenderTarget.texture, renderer.gammaOutput),
      map: !!material.map,
      mapEncoding: getTextureEncodingFromMap(material.map, renderer.gammaInput),
      matcap: !!material.matcap,
      matcapEncoding: getTextureEncodingFromMap(material.matcap, renderer.gammaInput),
      envMap: !!material.envMap,
      envMapMode: material.envMap && material.envMap.mapping,
      envMapEncoding: getTextureEncodingFromMap(material.envMap, renderer.gammaInput),
      envMapCubeUV: !!material.envMap && (material.envMap.mapping === CubeUVReflectionMapping || material.envMap.mapping === CubeUVRefractionMapping),
      lightMap: !!material.lightMap,
      aoMap: !!material.aoMap,
      emissiveMap: !!material.emissiveMap,
      emissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap, renderer.gammaInput),
      bumpMap: !!material.bumpMap,
      normalMap: !!material.normalMap,
      objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
      displacementMap: !!material.displacementMap,
      roughnessMap: !!material.roughnessMap,
      metalnessMap: !!material.metalnessMap,
      specularMap: !!material.specularMap,
      alphaMap: !!material.alphaMap,
      gradientMap: !!material.gradientMap,
      combine: material.combine,
      vertexTangents: material.normalMap && material.vertexTangents,
      vertexColors: material.vertexColors,
      fog: !!fog,
      useFog: material.fog,
      fogExp: fog && fog.isFogExp2,
      flatShading: material.flatShading,
      sizeAttenuation: material.sizeAttenuation,
      logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,
      skinning: material.skinning && maxBones > 0,
      maxBones: maxBones,
      useVertexTexture: capabilities.floatVertexTextures,
      morphTargets: material.morphTargets,
      morphNormals: material.morphNormals,
      maxMorphTargets: renderer.maxMorphTargets,
      maxMorphNormals: renderer.maxMorphNormals,
      numDirLights: lights.directional.length,
      numPointLights: lights.point.length,
      numSpotLights: lights.spot.length,
      numRectAreaLights: lights.rectArea.length,
      numHemiLights: lights.hemi.length,
      numClippingPlanes: nClipPlanes,
      numClipIntersection: nClipIntersection,
      dithering: material.dithering,
      shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && shadows.length > 0,
      shadowMapType: renderer.shadowMap.type,
      toneMapping: renderer.toneMapping,
      physicallyCorrectLights: renderer.physicallyCorrectLights,
      premultipliedAlpha: material.premultipliedAlpha,
      alphaTest: material.alphaTest,
      doubleSided: material.side === DoubleSide,
      flipSided: material.side === BackSide,
      depthPacking: material.depthPacking !== undefined ? material.depthPacking : false
    };
    return parameters;
  };

  this.getProgramCode = function (material, parameters) {
    var array = [];

    if (parameters.shaderID) {
      array.push(parameters.shaderID);
    } else {
      array.push(material.fragmentShader);
      array.push(material.vertexShader);
    }

    if (material.defines !== undefined) {
      for (var name in material.defines) {
        array.push(name);
        array.push(material.defines[name]);
      }
    }

    for (var i = 0; i < parameterNames.length; i++) {
      array.push(parameters[parameterNames[i]]);
    }

    array.push(material.onBeforeCompile.toString());
    array.push(renderer.gammaOutput);
    array.push(renderer.gammaFactor);
    return array.join();
  };

  this.acquireProgram = function (material, shader, parameters, code) {
    var program; // Check if code has been already compiled

    for (var p = 0, pl = programs.length; p < pl; p++) {
      var programInfo = programs[p];

      if (programInfo.code === code) {
        program = programInfo;
        ++program.usedTimes;
        break;
      }
    }

    if (program === undefined) {
      program = new WebGLProgram(renderer, extensions, code, material, shader, parameters, capabilities);
      programs.push(program);
    }

    return program;
  };

  this.releaseProgram = function (program) {
    if (--program.usedTimes === 0) {
      // Remove from unordered set
      var i = programs.indexOf(program);
      programs[i] = programs[programs.length - 1];
      programs.pop(); // Free WebGL resources

      program.destroy();
    }
  }; // Exposed for resource monitoring & error feedback via renderer.info:


  this.programs = programs;
}
/**
 * @author fordacious / fordacious.github.io
 */


function WebGLProperties() {
  var properties = new WeakMap();

  function get(object) {
    var map = properties.get(object);

    if (map === undefined) {
      map = {};
      properties.set(object, map);
    }

    return map;
  }

  function remove(object) {
    properties.delete(object);
  }

  function update(object, key, value) {
    properties.get(object)[key] = value;
  }

  function dispose() {
    properties = new WeakMap();
  }

  return {
    get: get,
    remove: remove,
    update: update,
    dispose: dispose
  };
}
/**
 * @author mrdoob / http://mrdoob.com/
 */


function painterSortStable(a, b) {
  if (a.groupOrder !== b.groupOrder) {
    return a.groupOrder - b.groupOrder;
  } else if (a.renderOrder !== b.renderOrder) {
    return a.renderOrder - b.renderOrder;
  } else if (a.program && b.program && a.program !== b.program) {
    return a.program.id - b.program.id;
  } else if (a.material.id !== b.material.id) {
    return a.material.id - b.material.id;
  } else if (a.z !== b.z) {
    return a.z - b.z;
  } else {
    return a.id - b.id;
  }
}

function reversePainterSortStable(a, b) {
  if (a.groupOrder !== b.groupOrder) {
    return a.groupOrder - b.groupOrder;
  } else if (a.renderOrder !== b.renderOrder) {
    return a.renderOrder - b.renderOrder;
  } else if (a.z !== b.z) {
    return b.z - a.z;
  } else {
    return a.id - b.id;
  }
}

function WebGLRenderList() {
  var renderItems = [];
  var renderItemsIndex = 0;
  var opaque = [];
  var transparent = [];

  function init() {
    renderItemsIndex = 0;
    opaque.length = 0;
    transparent.length = 0;
  }

  function getNextRenderItem(object, geometry, material, groupOrder, z, group) {
    var renderItem = renderItems[renderItemsIndex];

    if (renderItem === undefined) {
      renderItem = {
        id: object.id,
        object: object,
        geometry: geometry,
        material: material,
        program: material.program,
        groupOrder: groupOrder,
        renderOrder: object.renderOrder,
        z: z,
        group: group
      };
      renderItems[renderItemsIndex] = renderItem;
    } else {
      renderItem.id = object.id;
      renderItem.object = object;
      renderItem.geometry = geometry;
      renderItem.material = material;
      renderItem.program = material.program;
      renderItem.groupOrder = groupOrder;
      renderItem.renderOrder = object.renderOrder;
      renderItem.z = z;
      renderItem.group = group;
    }

    renderItemsIndex++;
    return renderItem;
  }

  function push(object, geometry, material, groupOrder, z, group) {
    var renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
    (material.transparent === true ? transparent : opaque).push(renderItem);
  }

  function unshift(object, geometry, material, groupOrder, z, group) {
    var renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
    (material.transparent === true ? transparent : opaque).unshift(renderItem);
  }

  function sort() {
    if (opaque.length > 1) opaque.sort(painterSortStable);
    if (transparent.length > 1) transparent.sort(reversePainterSortStable);
  }

  return {
    opaque: opaque,
    transparent: transparent,
    init: init,
    push: push,
    unshift: unshift,
    sort: sort
  };
}

function WebGLRenderLists() {
  var lists = {};

  function onSceneDispose(event) {
    var scene = event.target;
    scene.removeEventListener('dispose', onSceneDispose);
    delete lists[scene.id];
  }

  function get(scene, camera) {
    var cameras = lists[scene.id];
    var list;

    if (cameras === undefined) {
      list = new WebGLRenderList();
      lists[scene.id] = {};
      lists[scene.id][camera.id] = list;
      scene.addEventListener('dispose', onSceneDispose);
    } else {
      list = cameras[camera.id];

      if (list === undefined) {
        list = new WebGLRenderList();
        cameras[camera.id] = list;
      }
    }

    return list;
  }

  function dispose() {
    lists = {};
  }

  return {
    get: get,
    dispose: dispose
  };
}
/**
 * @author mrdoob / http://mrdoob.com/
 */


function UniformsCache() {
  var lights = {};
  return {
    get: function (light) {
      if (lights[light.id] !== undefined) {
        return lights[light.id];
      }

      var uniforms;

      switch (light.type) {
        case 'DirectionalLight':
          uniforms = {
            direction: new Vector3(),
            color: new Color(),
            shadow: false,
            shadowBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Vector2()
          };
          break;

        case 'SpotLight':
          uniforms = {
            position: new Vector3(),
            direction: new Vector3(),
            color: new Color(),
            distance: 0,
            coneCos: 0,
            penumbraCos: 0,
            decay: 0,
            shadow: false,
            shadowBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Vector2()
          };
          break;

        case 'PointLight':
          uniforms = {
            position: new Vector3(),
            color: new Color(),
            distance: 0,
            decay: 0,
            shadow: false,
            shadowBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Vector2(),
            shadowCameraNear: 1,
            shadowCameraFar: 1000
          };
          break;

        case 'HemisphereLight':
          uniforms = {
            direction: new Vector3(),
            skyColor: new Color(),
            groundColor: new Color()
          };
          break;

        case 'RectAreaLight':
          uniforms = {
            color: new Color(),
            position: new Vector3(),
            halfWidth: new Vector3(),
            halfHeight: new Vector3() // TODO (abelnation): set RectAreaLight shadow uniforms

          };
          break;
      }

      lights[light.id] = uniforms;
      return uniforms;
    }
  };
}

var count = 0;

function WebGLLights() {
  var cache = new UniformsCache();
  var state = {
    id: count++,
    hash: {
      stateID: -1,
      directionalLength: -1,
      pointLength: -1,
      spotLength: -1,
      rectAreaLength: -1,
      hemiLength: -1,
      shadowsLength: -1
    },
    ambient: [0, 0, 0],
    directional: [],
    directionalShadowMap: [],
    directionalShadowMatrix: [],
    spot: [],
    spotShadowMap: [],
    spotShadowMatrix: [],
    rectArea: [],
    point: [],
    pointShadowMap: [],
    pointShadowMatrix: [],
    hemi: []
  };
  var vector3 = new Vector3();
  var matrix4 = new Matrix4();
  var matrix42 = new Matrix4();

  function setup(lights, shadows, camera) {
    var r = 0,
        g = 0,
        b = 0;
    var directionalLength = 0;
    var pointLength = 0;
    var spotLength = 0;
    var rectAreaLength = 0;
    var hemiLength = 0;
    var viewMatrix = camera.matrixWorldInverse;

    for (var i = 0, l = lights.length; i < l; i++) {
      var light = lights[i];
      var color = light.color;
      var intensity = light.intensity;
      var distance = light.distance;
      var shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;

      if (light.isAmbientLight) {
        r += color.r * intensity;
        g += color.g * intensity;
        b += color.b * intensity;
      } else if (light.isDirectionalLight) {
        var uniforms = cache.get(light);
        uniforms.color.copy(light.color).multiplyScalar(light.intensity);
        uniforms.direction.setFromMatrixPosition(light.matrixWorld);
        vector3.setFromMatrixPosition(light.target.matrixWorld);
        uniforms.direction.sub(vector3);
        uniforms.direction.transformDirection(viewMatrix);
        uniforms.shadow = light.castShadow;

        if (light.castShadow) {
          var shadow = light.shadow;
          uniforms.shadowBias = shadow.bias;
          uniforms.shadowRadius = shadow.radius;
          uniforms.shadowMapSize = shadow.mapSize;
        }

        state.directionalShadowMap[directionalLength] = shadowMap;
        state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;
        state.directional[directionalLength] = uniforms;
        directionalLength++;
      } else if (light.isSpotLight) {
        var uniforms = cache.get(light);
        uniforms.position.setFromMatrixPosition(light.matrixWorld);
        uniforms.position.applyMatrix4(viewMatrix);
        uniforms.color.copy(color).multiplyScalar(intensity);
        uniforms.distance = distance;
        uniforms.direction.setFromMatrixPosition(light.matrixWorld);
        vector3.setFromMatrixPosition(light.target.matrixWorld);
        uniforms.direction.sub(vector3);
        uniforms.direction.transformDirection(viewMatrix);
        uniforms.coneCos = Math.cos(light.angle);
        uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));
        uniforms.decay = light.decay;
        uniforms.shadow = light.castShadow;

        if (light.castShadow) {
          var shadow = light.shadow;
          uniforms.shadowBias = shadow.bias;
          uniforms.shadowRadius = shadow.radius;
          uniforms.shadowMapSize = shadow.mapSize;
        }

        state.spotShadowMap[spotLength] = shadowMap;
        state.spotShadowMatrix[spotLength] = light.shadow.matrix;
        state.spot[spotLength] = uniforms;
        spotLength++;
      } else if (light.isRectAreaLight) {
        var uniforms = cache.get(light); // (a) intensity is the total visible light emitted
        //uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );
        // (b) intensity is the brightness of the light

        uniforms.color.copy(color).multiplyScalar(intensity);
        uniforms.position.setFromMatrixPosition(light.matrixWorld);
        uniforms.position.applyMatrix4(viewMatrix); // extract local rotation of light to derive width/height half vectors

        matrix42.identity();
        matrix4.copy(light.matrixWorld);
        matrix4.premultiply(viewMatrix);
        matrix42.extractRotation(matrix4);
        uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);
        uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);
        uniforms.halfWidth.applyMatrix4(matrix42);
        uniforms.halfHeight.applyMatrix4(matrix42); // TODO (abelnation): RectAreaLight distance?
        // uniforms.distance = distance;

        state.rectArea[rectAreaLength] = uniforms;
        rectAreaLength++;
      } else if (light.isPointLight) {
        var uniforms = cache.get(light);
        uniforms.position.setFromMatrixPosition(light.matrixWorld);
        uniforms.position.applyMatrix4(viewMatrix);
        uniforms.color.copy(light.color).multiplyScalar(light.intensity);
        uniforms.distance = light.distance;
        uniforms.decay = light.decay;
        uniforms.shadow = light.castShadow;

        if (light.castShadow) {
          var shadow = light.shadow;
          uniforms.shadowBias = shadow.bias;
          uniforms.shadowRadius = shadow.radius;
          uniforms.shadowMapSize = shadow.mapSize;
          uniforms.shadowCameraNear = shadow.camera.near;
          uniforms.shadowCameraFar = shadow.camera.far;
        }

        state.pointShadowMap[pointLength] = shadowMap;
        state.pointShadowMatrix[pointLength] = light.shadow.matrix;
        state.point[pointLength] = uniforms;
        pointLength++;
      } else if (light.isHemisphereLight) {
        var uniforms = cache.get(light);
        uniforms.direction.setFromMatrixPosition(light.matrixWorld);
        uniforms.direction.transformDirection(viewMatrix);
        uniforms.direction.normalize();
        uniforms.skyColor.copy(light.color).multiplyScalar(intensity);
        uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);
        state.hemi[hemiLength] = uniforms;
        hemiLength++;
      }
    }

    state.ambient[0] = r;
    state.ambient[1] = g;
    state.ambient[2] = b;
    state.directional.length = directionalLength;
    state.spot.length = spotLength;
    state.rectArea.length = rectAreaLength;
    state.point.length = pointLength;
    state.hemi.length = hemiLength;
    state.hash.stateID = state.id;
    state.hash.directionalLength = directionalLength;
    state.hash.pointLength = pointLength;
    state.hash.spotLength = spotLength;
    state.hash.rectAreaLength = rectAreaLength;
    state.hash.hemiLength = hemiLength;
    state.hash.shadowsLength = shadows.length;
  }

  return {
    setup: setup,
    state: state
  };
}
/**
 * @author Mugen87 / https://github.com/Mugen87
 */


function WebGLRenderState() {
  var lights = new WebGLLights();
  var lightsArray = [];
  var shadowsArray = [];

  function init() {
    lightsArray.length = 0;
    shadowsArray.length = 0;
  }

  function pushLight(light) {
    lightsArray.push(light);
  }

  function pushShadow(shadowLight) {
    shadowsArray.push(shadowLight);
  }

  function setupLights(camera) {
    lights.setup(lightsArray, shadowsArray, camera);
  }

  var state = {
    lightsArray: lightsArray,
    shadowsArray: shadowsArray,
    lights: lights
  };
  return {
    init: init,
    state: state,
    setupLights: setupLights,
    pushLight: pushLight,
    pushShadow: pushShadow
  };
}

function WebGLRenderStates() {
  var renderStates = {};

  function onSceneDispose(event) {
    var scene = event.target;
    scene.removeEventListener('dispose', onSceneDispose);
    delete renderStates[scene.id];
  }

  function get(scene, camera) {
    var renderState;

    if (renderStates[scene.id] === undefined) {
      renderState = new WebGLRenderState();
      renderStates[scene.id] = {};
      renderStates[scene.id][camera.id] = renderState;
      scene.addEventListener('dispose', onSceneDispose);
    } else {
      if (renderStates[scene.id][camera.id] === undefined) {
        renderState = new WebGLRenderState();
        renderStates[scene.id][camera.id] = renderState;
      } else {
        renderState = renderStates[scene.id][camera.id];
      }
    }

    return renderState;
  }

  function dispose() {
    renderStates = {};
  }

  return {
    get: get,
    dispose: dispose
  };
}
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author bhouston / https://clara.io
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 * }
 */


function MeshDepthMaterial(parameters) {
  Material.call(this);
  this.type = 'MeshDepthMaterial';
  this.depthPacking = BasicDepthPacking;
  this.skinning = false;
  this.morphTargets = false;
  this.map = null;
  this.alphaMap = null;
  this.displacementMap = null;
  this.displacementScale = 1;
  this.displacementBias = 0;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.fog = false;
  this.lights = false;
  this.setValues(parameters);
}

MeshDepthMaterial.prototype = Object.create(Material.prototype);
MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;
MeshDepthMaterial.prototype.isMeshDepthMaterial = true;

MeshDepthMaterial.prototype.copy = function (source) {
  Material.prototype.copy.call(this, source);
  this.depthPacking = source.depthPacking;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.map = source.map;
  this.alphaMap = source.alphaMap;
  this.displacementMap = source.displacementMap;
  this.displacementScale = source.displacementScale;
  this.displacementBias = source.displacementBias;
  this.wireframe = source.wireframe;
  this.wireframeLinewidth = source.wireframeLinewidth;
  return this;
};
/**
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *
 *  referencePosition: <float>,
 *  nearDistance: <float>,
 *  farDistance: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>
 *
 * }
 */


function MeshDistanceMaterial(parameters) {
  Material.call(this);
  this.type = 'MeshDistanceMaterial';
  this.referencePosition = new Vector3();
  this.nearDistance = 1;
  this.farDistance = 1000;
  this.skinning = false;
  this.morphTargets = false;
  this.map = null;
  this.alphaMap = null;
  this.displacementMap = null;
  this.displacementScale = 1;
  this.displacementBias = 0;
  this.fog = false;
  this.lights = false;
  this.setValues(parameters);
}

MeshDistanceMaterial.prototype = Object.create(Material.prototype);
MeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;
MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;

MeshDistanceMaterial.prototype.copy = function (source) {
  Material.prototype.copy.call(this, source);
  this.referencePosition.copy(source.referencePosition);
  this.nearDistance = source.nearDistance;
  this.farDistance = source.farDistance;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.map = source.map;
  this.alphaMap = source.alphaMap;
  this.displacementMap = source.displacementMap;
  this.displacementScale = source.displacementScale;
  this.displacementBias = source.displacementBias;
  return this;
};
/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */


function WebGLShadowMap(_renderer, _objects, maxTextureSize) {
  var _frustum = new Frustum(),
      _projScreenMatrix = new Matrix4(),
      _shadowMapSize = new Vector2(),
      _maxShadowMapSize = new Vector2(maxTextureSize, maxTextureSize),
      _lookTarget = new Vector3(),
      _lightPositionWorld = new Vector3(),
      _MorphingFlag = 1,
      _SkinningFlag = 2,
      _NumberOfMaterialVariants = (_MorphingFlag | _SkinningFlag) + 1,
      _depthMaterials = new Array(_NumberOfMaterialVariants),
      _distanceMaterials = new Array(_NumberOfMaterialVariants),
      _materialCache = {};

  var shadowSide = {
    0: BackSide,
    1: FrontSide,
    2: DoubleSide
  };
  var cubeDirections = [new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)];
  var cubeUps = [new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)];
  var cube2DViewPorts = [new Vector4(), new Vector4(), new Vector4(), new Vector4(), new Vector4(), new Vector4()]; // init

  for (var i = 0; i !== _NumberOfMaterialVariants; ++i) {
    var useMorphing = (i & _MorphingFlag) !== 0;
    var useSkinning = (i & _SkinningFlag) !== 0;
    var depthMaterial = new MeshDepthMaterial({
      depthPacking: RGBADepthPacking,
      morphTargets: useMorphing,
      skinning: useSkinning
    });
    _depthMaterials[i] = depthMaterial; //

    var distanceMaterial = new MeshDistanceMaterial({
      morphTargets: useMorphing,
      skinning: useSkinning
    });
    _distanceMaterials[i] = distanceMaterial;
  } //


  var scope = this;
  this.enabled = false;
  this.autoUpdate = true;
  this.needsUpdate = false;
  this.type = PCFShadowMap;

  this.render = function (lights, scene, camera) {
    if (scope.enabled === false) return;
    if (scope.autoUpdate === false && scope.needsUpdate === false) return;
    if (lights.length === 0) return;

    var currentRenderTarget = _renderer.getRenderTarget();

    var _state = _renderer.state; // Set GL state for depth map.

    _state.setBlending(NoBlending);

    _state.buffers.color.setClear(1, 1, 1, 1);

    _state.buffers.depth.setTest(true);

    _state.setScissorTest(false); // render depth map


    var faceCount;

    for (var i = 0, il = lights.length; i < il; i++) {
      var light = lights[i];
      var shadow = light.shadow;
      var isPointLight = light && light.isPointLight;

      if (shadow === undefined) {
        console.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');
        continue;
      }

      var shadowCamera = shadow.camera;

      _shadowMapSize.copy(shadow.mapSize);

      _shadowMapSize.min(_maxShadowMapSize);

      if (isPointLight) {
        var vpWidth = _shadowMapSize.x;
        var vpHeight = _shadowMapSize.y; // These viewports map a cube-map onto a 2D texture with the
        // following orientation:
        //
        //  xzXZ
        //   y Y
        //
        // X - Positive x direction
        // x - Negative x direction
        // Y - Positive y direction
        // y - Negative y direction
        // Z - Positive z direction
        // z - Negative z direction
        // positive X

        cube2DViewPorts[0].set(vpWidth * 2, vpHeight, vpWidth, vpHeight); // negative X

        cube2DViewPorts[1].set(0, vpHeight, vpWidth, vpHeight); // positive Z

        cube2DViewPorts[2].set(vpWidth * 3, vpHeight, vpWidth, vpHeight); // negative Z

        cube2DViewPorts[3].set(vpWidth, vpHeight, vpWidth, vpHeight); // positive Y

        cube2DViewPorts[4].set(vpWidth * 3, 0, vpWidth, vpHeight); // negative Y

        cube2DViewPorts[5].set(vpWidth, 0, vpWidth, vpHeight);
        _shadowMapSize.x *= 4.0;
        _shadowMapSize.y *= 2.0;
      }

      if (shadow.map === null) {
        var pars = {
          minFilter: NearestFilter,
          magFilter: NearestFilter,
          format: RGBAFormat
        };
        shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
        shadow.map.texture.name = light.name + ".shadowMap";
        shadowCamera.updateProjectionMatrix();
      }

      if (shadow.isSpotLightShadow) {
        shadow.update(light);
      }

      var shadowMap = shadow.map;
      var shadowMatrix = shadow.matrix;

      _lightPositionWorld.setFromMatrixPosition(light.matrixWorld);

      shadowCamera.position.copy(_lightPositionWorld);

      if (isPointLight) {
        faceCount = 6; // for point lights we set the shadow matrix to be a translation-only matrix
        // equal to inverse of the light's position

        shadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);
      } else {
        faceCount = 1;

        _lookTarget.setFromMatrixPosition(light.target.matrixWorld);

        shadowCamera.lookAt(_lookTarget);
        shadowCamera.updateMatrixWorld(); // compute shadow matrix

        shadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);
        shadowMatrix.multiply(shadowCamera.projectionMatrix);
        shadowMatrix.multiply(shadowCamera.matrixWorldInverse);
      }

      _renderer.setRenderTarget(shadowMap);

      _renderer.clear(); // render shadow map for each cube face (if omni-directional) or
      // run a single pass if not


      for (var face = 0; face < faceCount; face++) {
        if (isPointLight) {
          _lookTarget.copy(shadowCamera.position);

          _lookTarget.add(cubeDirections[face]);

          shadowCamera.up.copy(cubeUps[face]);
          shadowCamera.lookAt(_lookTarget);
          shadowCamera.updateMatrixWorld();
          var vpDimensions = cube2DViewPorts[face];

          _state.viewport(vpDimensions);
        } // update camera matrices and frustum


        _projScreenMatrix.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);

        _frustum.setFromMatrix(_projScreenMatrix); // set object matrices & frustum culling


        renderObject(scene, camera, shadowCamera, isPointLight);
      }
    }

    scope.needsUpdate = false;

    _renderer.setRenderTarget(currentRenderTarget);
  };

  function getDepthMaterial(object, material, isPointLight, lightPositionWorld, shadowCameraNear, shadowCameraFar) {
    var geometry = object.geometry;
    var result = null;
    var materialVariants = _depthMaterials;
    var customMaterial = object.customDepthMaterial;

    if (isPointLight) {
      materialVariants = _distanceMaterials;
      customMaterial = object.customDistanceMaterial;
    }

    if (!customMaterial) {
      var useMorphing = false;

      if (material.morphTargets) {
        if (geometry && geometry.isBufferGeometry) {
          useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;
        } else if (geometry && geometry.isGeometry) {
          useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;
        }
      }

      if (object.isSkinnedMesh && material.skinning === false) {
        console.warn('THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object);
      }

      var useSkinning = object.isSkinnedMesh && material.skinning;
      var variantIndex = 0;
      if (useMorphing) variantIndex |= _MorphingFlag;
      if (useSkinning) variantIndex |= _SkinningFlag;
      result = materialVariants[variantIndex];
    } else {
      result = customMaterial;
    }

    if (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0) {
      // in this case we need a unique material instance reflecting the
      // appropriate state
      var keyA = result.uuid,
          keyB = material.uuid;
      var materialsForVariant = _materialCache[keyA];

      if (materialsForVariant === undefined) {
        materialsForVariant = {};
        _materialCache[keyA] = materialsForVariant;
      }

      var cachedMaterial = materialsForVariant[keyB];

      if (cachedMaterial === undefined) {
        cachedMaterial = result.clone();
        materialsForVariant[keyB] = cachedMaterial;
      }

      result = cachedMaterial;
    }

    result.visible = material.visible;
    result.wireframe = material.wireframe;
    result.side = material.shadowSide != null ? material.shadowSide : shadowSide[material.side];
    result.clipShadows = material.clipShadows;
    result.clippingPlanes = material.clippingPlanes;
    result.clipIntersection = material.clipIntersection;
    result.wireframeLinewidth = material.wireframeLinewidth;
    result.linewidth = material.linewidth;

    if (isPointLight && result.isMeshDistanceMaterial) {
      result.referencePosition.copy(lightPositionWorld);
      result.nearDistance = shadowCameraNear;
      result.farDistance = shadowCameraFar;
    }

    return result;
  }

  function renderObject(object, camera, shadowCamera, isPointLight) {
    if (object.visible === false) return;
    var visible = object.layers.test(camera.layers);

    if (visible && (object.isMesh || object.isLine || object.isPoints)) {
      if (object.castShadow && (!object.frustumCulled || _frustum.intersectsObject(object))) {
        object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);

        var geometry = _objects.update(object);

        var material = object.material;

        if (Array.isArray(material)) {
          var groups = geometry.groups;

          for (var k = 0, kl = groups.length; k < kl; k++) {
            var group = groups[k];
            var groupMaterial = material[group.materialIndex];

            if (groupMaterial && groupMaterial.visible) {
              var depthMaterial = getDepthMaterial(object, groupMaterial, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far);

              _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);
            }
          }
        } else if (material.visible) {
          var depthMaterial = getDepthMaterial(object, material, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far);

          _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);
        }
      }
    }

    var children = object.children;

    for (var i = 0, l = children.length; i < l; i++) {
      renderObject(children[i], camera, shadowCamera, isPointLight);
    }
  }
}
/**
 * @author mrdoob / http://mrdoob.com/
 */


function WebGLState(gl, extensions, utils, capabilities) {
  function ColorBuffer() {
    var locked = false;
    var color = new Vector4();
    var currentColorMask = null;
    var currentColorClear = new Vector4(0, 0, 0, 0);
    return {
      setMask: function (colorMask) {
        if (currentColorMask !== colorMask && !locked) {
          gl.colorMask(colorMask, colorMask, colorMask, colorMask);
          currentColorMask = colorMask;
        }
      },
      setLocked: function (lock) {
        locked = lock;
      },
      setClear: function (r, g, b, a, premultipliedAlpha) {
        if (premultipliedAlpha === true) {
          r *= a;
          g *= a;
          b *= a;
        }

        color.set(r, g, b, a);

        if (currentColorClear.equals(color) === false) {
          gl.clearColor(r, g, b, a);
          currentColorClear.copy(color);
        }
      },
      reset: function () {
        locked = false;
        currentColorMask = null;
        currentColorClear.set(-1, 0, 0, 0); // set to invalid state
      }
    };
  }

  function DepthBuffer() {
    var locked = false;
    var currentDepthMask = null;
    var currentDepthFunc = null;
    var currentDepthClear = null;
    return {
      setTest: function (depthTest) {
        if (depthTest) {
          enable(2929);
        } else {
          disable(2929);
        }
      },
      setMask: function (depthMask) {
        if (currentDepthMask !== depthMask && !locked) {
          gl.depthMask(depthMask);
          currentDepthMask = depthMask;
        }
      },
      setFunc: function (depthFunc) {
        if (currentDepthFunc !== depthFunc) {
          if (depthFunc) {
            switch (depthFunc) {
              case NeverDepth:
                gl.depthFunc(512);
                break;

              case AlwaysDepth:
                gl.depthFunc(519);
                break;

              case LessDepth:
                gl.depthFunc(513);
                break;

              case LessEqualDepth:
                gl.depthFunc(515);
                break;

              case EqualDepth:
                gl.depthFunc(514);
                break;

              case GreaterEqualDepth:
                gl.depthFunc(518);
                break;

              case GreaterDepth:
                gl.depthFunc(516);
                break;

              case NotEqualDepth:
                gl.depthFunc(517);
                break;

              default:
                gl.depthFunc(515);
            }
          } else {
            gl.depthFunc(515);
          }

          currentDepthFunc = depthFunc;
        }
      },
      setLocked: function (lock) {
        locked = lock;
      },
      setClear: function (depth) {
        if (currentDepthClear !== depth) {
          gl.clearDepth(depth);
          currentDepthClear = depth;
        }
      },
      reset: function () {
        locked = false;
        currentDepthMask = null;
        currentDepthFunc = null;
        currentDepthClear = null;
      }
    };
  }

  function StencilBuffer() {
    var locked = false;
    var currentStencilMask = null;
    var currentStencilFunc = null;
    var currentStencilRef = null;
    var currentStencilFuncMask = null;
    var currentStencilFail = null;
    var currentStencilZFail = null;
    var currentStencilZPass = null;
    var currentStencilClear = null;
    return {
      setTest: function (stencilTest) {
        if (stencilTest) {
          enable(2960);
        } else {
          disable(2960);
        }
      },
      setMask: function (stencilMask) {
        if (currentStencilMask !== stencilMask && !locked) {
          gl.stencilMask(stencilMask);
          currentStencilMask = stencilMask;
        }
      },
      setFunc: function (stencilFunc, stencilRef, stencilMask) {
        if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {
          gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
          currentStencilFunc = stencilFunc;
          currentStencilRef = stencilRef;
          currentStencilFuncMask = stencilMask;
        }
      },
      setOp: function (stencilFail, stencilZFail, stencilZPass) {
        if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {
          gl.stencilOp(stencilFail, stencilZFail, stencilZPass);
          currentStencilFail = stencilFail;
          currentStencilZFail = stencilZFail;
          currentStencilZPass = stencilZPass;
        }
      },
      setLocked: function (lock) {
        locked = lock;
      },
      setClear: function (stencil) {
        if (currentStencilClear !== stencil) {
          gl.clearStencil(stencil);
          currentStencilClear = stencil;
        }
      },
      reset: function () {
        locked = false;
        currentStencilMask = null;
        currentStencilFunc = null;
        currentStencilRef = null;
        currentStencilFuncMask = null;
        currentStencilFail = null;
        currentStencilZFail = null;
        currentStencilZPass = null;
        currentStencilClear = null;
      }
    };
  } //


  var colorBuffer = new ColorBuffer();
  var depthBuffer = new DepthBuffer();
  var stencilBuffer = new StencilBuffer();
  var maxVertexAttributes = gl.getParameter(34921);
  var newAttributes = new Uint8Array(maxVertexAttributes);
  var enabledAttributes = new Uint8Array(maxVertexAttributes);
  var attributeDivisors = new Uint8Array(maxVertexAttributes);
  var enabledCapabilities = {};
  var compressedTextureFormats = null;
  var currentProgram = null;
  var currentBlendingEnabled = null;
  var currentBlending = null;
  var currentBlendEquation = null;
  var currentBlendSrc = null;
  var currentBlendDst = null;
  var currentBlendEquationAlpha = null;
  var currentBlendSrcAlpha = null;
  var currentBlendDstAlpha = null;
  var currentPremultipledAlpha = false;
  var currentFlipSided = null;
  var currentCullFace = null;
  var currentLineWidth = null;
  var currentPolygonOffsetFactor = null;
  var currentPolygonOffsetUnits = null;
  var maxTextures = gl.getParameter(35661);
  var lineWidthAvailable = false;
  var version = 0;
  var glVersion = gl.getParameter(7938);

  if (glVersion.indexOf('WebGL') !== -1) {
    version = parseFloat(/^WebGL\ ([0-9])/.exec(glVersion)[1]);
    lineWidthAvailable = version >= 1.0;
  } else if (glVersion.indexOf('OpenGL ES') !== -1) {
    version = parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(glVersion)[1]);
    lineWidthAvailable = version >= 2.0;
  }

  var currentTextureSlot = null;
  var currentBoundTextures = {};
  var currentScissor = new Vector4();
  var currentViewport = new Vector4();

  function createTexture(type, target, count) {
    var data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.

    var texture = gl.createTexture();
    gl.bindTexture(type, texture);
    gl.texParameteri(type, 10241, 9728);
    gl.texParameteri(type, 10240, 9728);

    for (var i = 0; i < count; i++) {
      gl.texImage2D(target + i, 0, 6408, 1, 1, 0, 6408, 5121, data);
    }

    return texture;
  }

  var emptyTextures = {};
  emptyTextures[3553] = createTexture(3553, 3553, 1);
  emptyTextures[34067] = createTexture(34067, 34069, 6); // init

  colorBuffer.setClear(0, 0, 0, 1);
  depthBuffer.setClear(1);
  stencilBuffer.setClear(0);
  enable(2929);
  depthBuffer.setFunc(LessEqualDepth);
  setFlipSided(false);
  setCullFace(CullFaceBack);
  enable(2884);
  setBlending(NoBlending); //

  function initAttributes() {
    for (var i = 0, l = newAttributes.length; i < l; i++) {
      newAttributes[i] = 0;
    }
  }

  function enableAttribute(attribute) {
    enableAttributeAndDivisor(attribute, 0);
  }

  function enableAttributeAndDivisor(attribute, meshPerAttribute) {
    newAttributes[attribute] = 1;

    if (enabledAttributes[attribute] === 0) {
      gl.enableVertexAttribArray(attribute);
      enabledAttributes[attribute] = 1;
    }

    if (attributeDivisors[attribute] !== meshPerAttribute) {
      var extension = capabilities.isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays');
      extension[capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](attribute, meshPerAttribute);
      attributeDivisors[attribute] = meshPerAttribute;
    }
  }

  function disableUnusedAttributes() {
    for (var i = 0, l = enabledAttributes.length; i !== l; ++i) {
      if (enabledAttributes[i] !== newAttributes[i]) {
        gl.disableVertexAttribArray(i);
        enabledAttributes[i] = 0;
      }
    }
  }

  function enable(id) {
    if (enabledCapabilities[id] !== true) {
      gl.enable(id);
      enabledCapabilities[id] = true;
    }
  }

  function disable(id) {
    if (enabledCapabilities[id] !== false) {
      gl.disable(id);
      enabledCapabilities[id] = false;
    }
  }

  function getCompressedTextureFormats() {
    if (compressedTextureFormats === null) {
      compressedTextureFormats = [];

      if (extensions.get('WEBGL_compressed_texture_pvrtc') || extensions.get('WEBGL_compressed_texture_s3tc') || extensions.get('WEBGL_compressed_texture_etc1') || extensions.get('WEBGL_compressed_texture_astc')) {
        var formats = gl.getParameter(34467);

        for (var i = 0; i < formats.length; i++) {
          compressedTextureFormats.push(formats[i]);
        }
      }
    }

    return compressedTextureFormats;
  }

  function useProgram(program) {
    if (currentProgram !== program) {
      gl.useProgram(program);
      currentProgram = program;
      return true;
    }

    return false;
  }

  function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {
    if (blending === NoBlending) {
      if (currentBlendingEnabled) {
        disable(3042);
        currentBlendingEnabled = false;
      }

      return;
    }

    if (!currentBlendingEnabled) {
      enable(3042);
      currentBlendingEnabled = true;
    }

    if (blending !== CustomBlending) {
      if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
        if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {
          gl.blendEquation(32774);
          currentBlendEquation = AddEquation;
          currentBlendEquationAlpha = AddEquation;
        }

        if (premultipliedAlpha) {
          switch (blending) {
            case NormalBlending:
              gl.blendFuncSeparate(1, 771, 1, 771);
              break;

            case AdditiveBlending:
              gl.blendFunc(1, 1);
              break;

            case SubtractiveBlending:
              gl.blendFuncSeparate(0, 0, 769, 771);
              break;

            case MultiplyBlending:
              gl.blendFuncSeparate(0, 768, 0, 770);
              break;

            default:
              console.error('THREE.WebGLState: Invalid blending: ', blending);
              break;
          }
        } else {
          switch (blending) {
            case NormalBlending:
              gl.blendFuncSeparate(770, 771, 1, 771);
              break;

            case AdditiveBlending:
              gl.blendFunc(770, 1);
              break;

            case SubtractiveBlending:
              gl.blendFunc(0, 769);
              break;

            case MultiplyBlending:
              gl.blendFunc(0, 768);
              break;

            default:
              console.error('THREE.WebGLState: Invalid blending: ', blending);
              break;
          }
        }

        currentBlendSrc = null;
        currentBlendDst = null;
        currentBlendSrcAlpha = null;
        currentBlendDstAlpha = null;
        currentBlending = blending;
        currentPremultipledAlpha = premultipliedAlpha;
      }

      return;
    } // custom blending


    blendEquationAlpha = blendEquationAlpha || blendEquation;
    blendSrcAlpha = blendSrcAlpha || blendSrc;
    blendDstAlpha = blendDstAlpha || blendDst;

    if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {
      gl.blendEquationSeparate(utils.convert(blendEquation), utils.convert(blendEquationAlpha));
      currentBlendEquation = blendEquation;
      currentBlendEquationAlpha = blendEquationAlpha;
    }

    if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {
      gl.blendFuncSeparate(utils.convert(blendSrc), utils.convert(blendDst), utils.convert(blendSrcAlpha), utils.convert(blendDstAlpha));
      currentBlendSrc = blendSrc;
      currentBlendDst = blendDst;
      currentBlendSrcAlpha = blendSrcAlpha;
      currentBlendDstAlpha = blendDstAlpha;
    }

    currentBlending = blending;
    currentPremultipledAlpha = null;
  }

  function setMaterial(material, frontFaceCW) {
    material.side === DoubleSide ? disable(2884) : enable(2884);
    var flipSided = material.side === BackSide;
    if (frontFaceCW) flipSided = !flipSided;
    setFlipSided(flipSided);
    material.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);
    depthBuffer.setFunc(material.depthFunc);
    depthBuffer.setTest(material.depthTest);
    depthBuffer.setMask(material.depthWrite);
    colorBuffer.setMask(material.colorWrite);
    setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
  } //


  function setFlipSided(flipSided) {
    if (currentFlipSided !== flipSided) {
      if (flipSided) {
        gl.frontFace(2304);
      } else {
        gl.frontFace(2305);
      }

      currentFlipSided = flipSided;
    }
  }

  function setCullFace(cullFace) {
    if (cullFace !== CullFaceNone) {
      enable(2884);

      if (cullFace !== currentCullFace) {
        if (cullFace === CullFaceBack) {
          gl.cullFace(1029);
        } else if (cullFace === CullFaceFront) {
          gl.cullFace(1028);
        } else {
          gl.cullFace(1032);
        }
      }
    } else {
      disable(2884);
    }

    currentCullFace = cullFace;
  }

  function setLineWidth(width) {
    if (width !== currentLineWidth) {
      if (lineWidthAvailable) gl.lineWidth(width);
      currentLineWidth = width;
    }
  }

  function setPolygonOffset(polygonOffset, factor, units) {
    if (polygonOffset) {
      enable(32823);

      if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {
        gl.polygonOffset(factor, units);
        currentPolygonOffsetFactor = factor;
        currentPolygonOffsetUnits = units;
      }
    } else {
      disable(32823);
    }
  }

  function setScissorTest(scissorTest) {
    if (scissorTest) {
      enable(3089);
    } else {
      disable(3089);
    }
  } // texture


  function activeTexture(webglSlot) {
    if (webglSlot === undefined) webglSlot = 33984 + maxTextures - 1;

    if (currentTextureSlot !== webglSlot) {
      gl.activeTexture(webglSlot);
      currentTextureSlot = webglSlot;
    }
  }

  function bindTexture(webglType, webglTexture) {
    if (currentTextureSlot === null) {
      activeTexture();
    }

    var boundTexture = currentBoundTextures[currentTextureSlot];

    if (boundTexture === undefined) {
      boundTexture = {
        type: undefined,
        texture: undefined
      };
      currentBoundTextures[currentTextureSlot] = boundTexture;
    }

    if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
      gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);
      boundTexture.type = webglType;
      boundTexture.texture = webglTexture;
    }
  }

  function compressedTexImage2D() {
    try {
      gl.compressedTexImage2D.apply(gl, arguments);
    } catch (error) {
      console.error('THREE.WebGLState:', error);
    }
  }

  function texImage2D() {
    try {
      gl.texImage2D.apply(gl, arguments);
    } catch (error) {
      console.error('THREE.WebGLState:', error);
    }
  }

  function texImage3D() {
    try {
      gl.texImage3D.apply(gl, arguments);
    } catch (error) {
      console.error('THREE.WebGLState:', error);
    }
  } //


  function scissor(scissor) {
    if (currentScissor.equals(scissor) === false) {
      gl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);
      currentScissor.copy(scissor);
    }
  }

  function viewport(viewport) {
    if (currentViewport.equals(viewport) === false) {
      gl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);
      currentViewport.copy(viewport);
    }
  } //


  function reset() {
    for (var i = 0; i < enabledAttributes.length; i++) {
      if (enabledAttributes[i] === 1) {
        gl.disableVertexAttribArray(i);
        enabledAttributes[i] = 0;
      }
    }

    enabledCapabilities = {};
    compressedTextureFormats = null;
    currentTextureSlot = null;
    currentBoundTextures = {};
    currentProgram = null;
    currentBlending = null;
    currentFlipSided = null;
    currentCullFace = null;
    colorBuffer.reset();
    depthBuffer.reset();
    stencilBuffer.reset();
  }

  return {
    buffers: {
      color: colorBuffer,
      depth: depthBuffer,
      stencil: stencilBuffer
    },
    initAttributes: initAttributes,
    enableAttribute: enableAttribute,
    enableAttributeAndDivisor: enableAttributeAndDivisor,
    disableUnusedAttributes: disableUnusedAttributes,
    enable: enable,
    disable: disable,
    getCompressedTextureFormats: getCompressedTextureFormats,
    useProgram: useProgram,
    setBlending: setBlending,
    setMaterial: setMaterial,
    setFlipSided: setFlipSided,
    setCullFace: setCullFace,
    setLineWidth: setLineWidth,
    setPolygonOffset: setPolygonOffset,
    setScissorTest: setScissorTest,
    activeTexture: activeTexture,
    bindTexture: bindTexture,
    compressedTexImage2D: compressedTexImage2D,
    texImage2D: texImage2D,
    texImage3D: texImage3D,
    scissor: scissor,
    viewport: viewport,
    reset: reset
  };
}
/**
 * @author mrdoob / http://mrdoob.com/
 */


function WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {
  var _videoTextures = {};

  var _canvas; //


  var useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined';

  function createCanvas(width, height) {
    // Use OffscreenCanvas when available. Specially needed in web workers
    return useOffscreenCanvas ? new OffscreenCanvas(width, height) : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');
  }

  function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {
    var scale = 1; // handle case if texture exceeds max size

    if (image.width > maxSize || image.height > maxSize) {
      scale = maxSize / Math.max(image.width, image.height);
    } // only perform resize if necessary


    if (scale < 1 || needsPowerOfTwo === true) {
      // only perform resize for certain image types
      if (image instanceof ImageBitmap || image instanceof HTMLImageElement || image instanceof HTMLCanvasElement) {
        var floor = needsPowerOfTwo ? _Math.floorPowerOfTwo : Math.floor;
        var width = floor(scale * image.width);
        var height = floor(scale * image.height);
        if (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas

        var canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;
        canvas.width = width;
        canvas.height = height;
        var context = canvas.getContext('2d');
        context.drawImage(image, 0, 0, width, height);
        console.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');
        return useOffscreenCanvas ? canvas.transferToImageBitmap() : canvas;
      } else {
        if ('data' in image) {
          console.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');
        }

        return image;
      }
    }

    return image;
  }

  function isPowerOfTwo(image) {
    return _Math.isPowerOfTwo(image.width) && _Math.isPowerOfTwo(image.height);
  }

  function textureNeedsPowerOfTwo(texture) {
    if (capabilities.isWebGL2) return false;
    return texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
  }

  function textureNeedsGenerateMipmaps(texture, supportsMips) {
    return texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
  }

  function generateMipmap(target, texture, width, height) {
    _gl.generateMipmap(target);

    var textureProperties = properties.get(texture); // Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11

    textureProperties.__maxMipLevel = Math.log(Math.max(width, height)) * Math.LOG2E;
  }

  function getInternalFormat(glFormat, glType) {
    if (!capabilities.isWebGL2) return glFormat;
    var internalFormat = glFormat;

    if (glFormat === 6403) {
      if (glType === 5126) internalFormat = 33326;
      if (glType === 5131) internalFormat = 33325;
      if (glType === 5121) internalFormat = 33321;
    }

    if (glFormat === 6407) {
      if (glType === 5126) internalFormat = 34837;
      if (glType === 5131) internalFormat = 34843;
      if (glType === 5121) internalFormat = 32849;
    }

    if (glFormat === 6408) {
      if (glType === 5126) internalFormat = 34836;
      if (glType === 5131) internalFormat = 34842;
      if (glType === 5121) internalFormat = 32856;
    }

    if (internalFormat === 33325 || internalFormat === 33326 || internalFormat === 34842 || internalFormat === 34836) {
      extensions.get('EXT_color_buffer_float');
    } else if (internalFormat === 34843 || internalFormat === 34837) {
      console.warn('THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.');
    }

    return internalFormat;
  } // Fallback filters for non-power-of-2 textures


  function filterFallback(f) {
    if (f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter) {
      return 9728;
    }

    return 9729;
  } //


  function onTextureDispose(event) {
    var texture = event.target;
    texture.removeEventListener('dispose', onTextureDispose);
    deallocateTexture(texture);

    if (texture.isVideoTexture) {
      delete _videoTextures[texture.id];
    }

    info.memory.textures--;
  }

  function onRenderTargetDispose(event) {
    var renderTarget = event.target;
    renderTarget.removeEventListener('dispose', onRenderTargetDispose);
    deallocateRenderTarget(renderTarget);
    info.memory.textures--;
  } //


  function deallocateTexture(texture) {
    var textureProperties = properties.get(texture);
    if (textureProperties.__webglInit === undefined) return;

    _gl.deleteTexture(textureProperties.__webglTexture);

    properties.remove(texture);
  }

  function deallocateRenderTarget(renderTarget) {
    var renderTargetProperties = properties.get(renderTarget);
    var textureProperties = properties.get(renderTarget.texture);
    if (!renderTarget) return;

    if (textureProperties.__webglTexture !== undefined) {
      _gl.deleteTexture(textureProperties.__webglTexture);
    }

    if (renderTarget.depthTexture) {
      renderTarget.depthTexture.dispose();
    }

    if (renderTarget.isWebGLRenderTargetCube) {
      for (var i = 0; i < 6; i++) {
        _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);

        if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);
      }
    } else {
      _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);

      if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);
    }

    properties.remove(renderTarget.texture);
    properties.remove(renderTarget);
  } //


  function setTexture2D(texture, slot) {
    var textureProperties = properties.get(texture);
    if (texture.isVideoTexture) updateVideoTexture(texture);

    if (texture.version > 0 && textureProperties.__version !== texture.version) {
      var image = texture.image;

      if (image === undefined) {
        console.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');
      } else if (image.complete === false) {
        console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');
      } else {
        uploadTexture(textureProperties, texture, slot);
        return;
      }
    }

    state.activeTexture(33984 + slot);
    state.bindTexture(3553, textureProperties.__webglTexture);
  }

  function setTexture3D(texture, slot) {
    var textureProperties = properties.get(texture);

    if (texture.version > 0 && textureProperties.__version !== texture.version) {
      uploadTexture(textureProperties, texture, slot);
      return;
    }

    state.activeTexture(33984 + slot);
    state.bindTexture(32879, textureProperties.__webglTexture);
  }

  function setTextureCube(texture, slot) {
    var textureProperties = properties.get(texture);

    if (texture.image.length === 6) {
      if (texture.version > 0 && textureProperties.__version !== texture.version) {
        initTexture(textureProperties, texture);
        state.activeTexture(33984 + slot);
        state.bindTexture(34067, textureProperties.__webglTexture);

        _gl.pixelStorei(37440, texture.flipY);

        var isCompressed = texture && texture.isCompressedTexture;
        var isDataTexture = texture.image[0] && texture.image[0].isDataTexture;
        var cubeImage = [];

        for (var i = 0; i < 6; i++) {
          if (!isCompressed && !isDataTexture) {
            cubeImage[i] = resizeImage(texture.image[i], false, true, capabilities.maxCubemapSize);
          } else {
            cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];
          }
        }

        var image = cubeImage[0],
            supportsMips = isPowerOfTwo(image) || capabilities.isWebGL2,
            glFormat = utils.convert(texture.format),
            glType = utils.convert(texture.type),
            glInternalFormat = getInternalFormat(glFormat, glType);
        setTextureParameters(34067, texture, supportsMips);

        for (var i = 0; i < 6; i++) {
          if (!isCompressed) {
            if (isDataTexture) {
              state.texImage2D(34069 + i, 0, glInternalFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);
            } else {
              state.texImage2D(34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[i]);
            }
          } else {
            var mipmap,
                mipmaps = cubeImage[i].mipmaps;

            for (var j = 0, jl = mipmaps.length; j < jl; j++) {
              mipmap = mipmaps[j];

              if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {
                if (state.getCompressedTextureFormats().indexOf(glFormat) > -1) {
                  state.compressedTexImage2D(34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                } else {
                  console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');
                }
              } else {
                state.texImage2D(34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
              }
            }
          }
        }

        if (!isCompressed) {
          textureProperties.__maxMipLevel = 0;
        } else {
          textureProperties.__maxMipLevel = mipmaps.length - 1;
        }

        if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
          // We assume images for cube map have the same size.
          generateMipmap(34067, texture, image.width, image.height);
        }

        textureProperties.__version = texture.version;
        if (texture.onUpdate) texture.onUpdate(texture);
      } else {
        state.activeTexture(33984 + slot);
        state.bindTexture(34067, textureProperties.__webglTexture);
      }
    }
  }

  function setTextureCubeDynamic(texture, slot) {
    state.activeTexture(33984 + slot);
    state.bindTexture(34067, properties.get(texture).__webglTexture);
  }

  function setTextureParameters(textureType, texture, supportsMips) {
    var extension;

    if (supportsMips) {
      _gl.texParameteri(textureType, 10242, utils.convert(texture.wrapS));

      _gl.texParameteri(textureType, 10243, utils.convert(texture.wrapT));

      if (textureType === 32879) {
        _gl.texParameteri(textureType, 32882, utils.convert(texture.wrapR));
      }

      _gl.texParameteri(textureType, 10240, utils.convert(texture.magFilter));

      _gl.texParameteri(textureType, 10241, utils.convert(texture.minFilter));
    } else {
      _gl.texParameteri(textureType, 10242, 33071);

      _gl.texParameteri(textureType, 10243, 33071);

      if (textureType === 32879) {
        _gl.texParameteri(textureType, 32882, 33071);
      }

      if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {
        console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');
      }

      _gl.texParameteri(textureType, 10240, filterFallback(texture.magFilter));

      _gl.texParameteri(textureType, 10241, filterFallback(texture.minFilter));

      if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
        console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');
      }
    }

    extension = extensions.get('EXT_texture_filter_anisotropic');

    if (extension) {
      if (texture.type === FloatType && extensions.get('OES_texture_float_linear') === null) return;
      if (texture.type === HalfFloatType && (capabilities.isWebGL2 || extensions.get('OES_texture_half_float_linear')) === null) return;

      if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {
        _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));

        properties.get(texture).__currentAnisotropy = texture.anisotropy;
      }
    }
  }

  function initTexture(textureProperties, texture) {
    if (textureProperties.__webglInit === undefined) {
      textureProperties.__webglInit = true;
      texture.addEventListener('dispose', onTextureDispose);
      textureProperties.__webglTexture = _gl.createTexture();
      info.memory.textures++;
    }
  }

  function uploadTexture(textureProperties, texture, slot) {
    var textureType = texture.isDataTexture3D ? 32879 : 3553;
    initTexture(textureProperties, texture);
    state.activeTexture(33984 + slot);
    state.bindTexture(textureType, textureProperties.__webglTexture);

    _gl.pixelStorei(37440, texture.flipY);

    _gl.pixelStorei(37441, texture.premultiplyAlpha);

    _gl.pixelStorei(3317, texture.unpackAlignment);

    var needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo(texture.image) === false;
    var image = resizeImage(texture.image, needsPowerOfTwo, false, capabilities.maxTextureSize);
    var supportsMips = isPowerOfTwo(image) || capabilities.isWebGL2,
        glFormat = utils.convert(texture.format),
        glType = utils.convert(texture.type),
        glInternalFormat = getInternalFormat(glFormat, glType);
    setTextureParameters(textureType, texture, supportsMips);
    var mipmap,
        mipmaps = texture.mipmaps;

    if (texture.isDepthTexture) {
      // populate depth texture with dummy data
      glInternalFormat = 6402;

      if (texture.type === FloatType) {
        if (!capabilities.isWebGL2) throw new Error('Float Depth Texture only supported in WebGL2.0');
        glInternalFormat = 36012;
      } else if (capabilities.isWebGL2) {
        // WebGL 2.0 requires signed internalformat for glTexImage2D
        glInternalFormat = 33189;
      }

      if (texture.format === DepthFormat && glInternalFormat === 6402) {
        // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
        // DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
        // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
        if (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {
          console.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');
          texture.type = UnsignedShortType;
          glType = utils.convert(texture.type);
        }
      } // Depth stencil textures need the DEPTH_STENCIL internal format
      // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)


      if (texture.format === DepthStencilFormat) {
        glInternalFormat = 34041; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
        // DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
        // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)

        if (texture.type !== UnsignedInt248Type) {
          console.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');
          texture.type = UnsignedInt248Type;
          glType = utils.convert(texture.type);
        }
      }

      state.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
    } else if (texture.isDataTexture) {
      // use manually created mipmaps if available
      // if there are no manual mipmaps
      // set 0 level mipmap and then use GL to generate other mipmap levels
      if (mipmaps.length > 0 && supportsMips) {
        for (var i = 0, il = mipmaps.length; i < il; i++) {
          mipmap = mipmaps[i];
          state.texImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
        }

        texture.generateMipmaps = false;
        textureProperties.__maxMipLevel = mipmaps.length - 1;
      } else {
        state.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);
        textureProperties.__maxMipLevel = 0;
      }
    } else if (texture.isCompressedTexture) {
      for (var i = 0, il = mipmaps.length; i < il; i++) {
        mipmap = mipmaps[i];

        if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {
          if (state.getCompressedTextureFormats().indexOf(glFormat) > -1) {
            state.compressedTexImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
          } else {
            console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');
          }
        } else {
          state.texImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
        }
      }

      textureProperties.__maxMipLevel = mipmaps.length - 1;
    } else if (texture.isDataTexture3D) {
      state.texImage3D(32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
      textureProperties.__maxMipLevel = 0;
    } else {
      // regular Texture (image, video, canvas)
      // use manually created mipmaps if available
      // if there are no manual mipmaps
      // set 0 level mipmap and then use GL to generate other mipmap levels
      if (mipmaps.length > 0 && supportsMips) {
        for (var i = 0, il = mipmaps.length; i < il; i++) {
          mipmap = mipmaps[i];
          state.texImage2D(3553, i, glInternalFormat, glFormat, glType, mipmap);
        }

        texture.generateMipmaps = false;
        textureProperties.__maxMipLevel = mipmaps.length - 1;
      } else {
        state.texImage2D(3553, 0, glInternalFormat, glFormat, glType, image);
        textureProperties.__maxMipLevel = 0;
      }
    }

    if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
      generateMipmap(3553, texture, image.width, image.height);
    }

    textureProperties.__version = texture.version;
    if (texture.onUpdate) texture.onUpdate(texture);
  } // Render targets
  // Setup storage for target texture and bind it to correct framebuffer


  function setupFrameBufferTexture(framebuffer, renderTarget, attachment, textureTarget) {
    var glFormat = utils.convert(renderTarget.texture.format);
    var glType = utils.convert(renderTarget.texture.type);
    var glInternalFormat = getInternalFormat(glFormat, glType);
    state.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);

    _gl.bindFramebuffer(36160, framebuffer);

    _gl.framebufferTexture2D(36160, attachment, textureTarget, properties.get(renderTarget.texture).__webglTexture, 0);

    _gl.bindFramebuffer(36160, null);
  } // Setup storage for internal depth/stencil buffers and bind to correct framebuffer


  function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {
    _gl.bindRenderbuffer(36161, renderbuffer);

    if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {
      if (isMultisample) {
        var samples = getRenderTargetSamples(renderTarget);

        _gl.renderbufferStorageMultisample(36161, samples, 33189, renderTarget.width, renderTarget.height);
      } else {
        _gl.renderbufferStorage(36161, 33189, renderTarget.width, renderTarget.height);
      }

      _gl.framebufferRenderbuffer(36160, 36096, 36161, renderbuffer);
    } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {
      if (isMultisample) {
        var samples = getRenderTargetSamples(renderTarget);

        _gl.renderbufferStorageMultisample(36161, samples, 34041, renderTarget.width, renderTarget.height);
      } else {
        _gl.renderbufferStorage(36161, 34041, renderTarget.width, renderTarget.height);
      }

      _gl.framebufferRenderbuffer(36160, 33306, 36161, renderbuffer);
    } else {
      var glFormat = utils.convert(renderTarget.texture.format);
      var glType = utils.convert(renderTarget.texture.type);
      var glInternalFormat = getInternalFormat(glFormat, glType);

      if (isMultisample) {
        var samples = getRenderTargetSamples(renderTarget);

        _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
      } else {
        _gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);
      }
    }

    _gl.bindRenderbuffer(36161, null);
  } // Setup resources for a Depth Texture for a FBO (needs an extension)


  function setupDepthTexture(framebuffer, renderTarget) {
    var isCube = renderTarget && renderTarget.isWebGLRenderTargetCube;
    if (isCube) throw new Error('Depth Texture with cube render targets is not supported');

    _gl.bindFramebuffer(36160, framebuffer);

    if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {
      throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');
    } // upload an empty depth texture with framebuffer size


    if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {
      renderTarget.depthTexture.image.width = renderTarget.width;
      renderTarget.depthTexture.image.height = renderTarget.height;
      renderTarget.depthTexture.needsUpdate = true;
    }

    setTexture2D(renderTarget.depthTexture, 0);

    var webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;

    if (renderTarget.depthTexture.format === DepthFormat) {
      _gl.framebufferTexture2D(36160, 36096, 3553, webglDepthTexture, 0);
    } else if (renderTarget.depthTexture.format === DepthStencilFormat) {
      _gl.framebufferTexture2D(36160, 33306, 3553, webglDepthTexture, 0);
    } else {
      throw new Error('Unknown depthTexture format');
    }
  } // Setup GL resources for a non-texture depth buffer


  function setupDepthRenderbuffer(renderTarget) {
    var renderTargetProperties = properties.get(renderTarget);
    var isCube = renderTarget.isWebGLRenderTargetCube === true;

    if (renderTarget.depthTexture) {
      if (isCube) throw new Error('target.depthTexture not supported in Cube render targets');
      setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);
    } else {
      if (isCube) {
        renderTargetProperties.__webglDepthbuffer = [];

        for (var i = 0; i < 6; i++) {
          _gl.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer[i]);

          renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();
          setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget);
        }
      } else {
        _gl.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer);

        renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
        setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget);
      }
    }

    _gl.bindFramebuffer(36160, null);
  } // Set up GL resources for the render target


  function setupRenderTarget(renderTarget) {
    var renderTargetProperties = properties.get(renderTarget);
    var textureProperties = properties.get(renderTarget.texture);
    renderTarget.addEventListener('dispose', onRenderTargetDispose);
    textureProperties.__webglTexture = _gl.createTexture();
    info.memory.textures++;
    var isCube = renderTarget.isWebGLRenderTargetCube === true;
    var isMultisample = renderTarget.isWebGLMultisampleRenderTarget === true;
    var supportsMips = isPowerOfTwo(renderTarget) || capabilities.isWebGL2; // Setup framebuffer

    if (isCube) {
      renderTargetProperties.__webglFramebuffer = [];

      for (var i = 0; i < 6; i++) {
        renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();
      }
    } else {
      renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

      if (isMultisample) {
        if (capabilities.isWebGL2) {
          renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
          renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();

          _gl.bindRenderbuffer(36161, renderTargetProperties.__webglColorRenderbuffer);

          var glFormat = utils.convert(renderTarget.texture.format);
          var glType = utils.convert(renderTarget.texture.type);
          var glInternalFormat = getInternalFormat(glFormat, glType);
          var samples = getRenderTargetSamples(renderTarget);

          _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);

          _gl.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer);

          _gl.framebufferRenderbuffer(36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer);

          _gl.bindRenderbuffer(36161, null);

          if (renderTarget.depthBuffer) {
            renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
            setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);
          }

          _gl.bindFramebuffer(36160, null);
        } else {
          console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');
        }
      }
    } // Setup color buffer


    if (isCube) {
      state.bindTexture(34067, textureProperties.__webglTexture);
      setTextureParameters(34067, renderTarget.texture, supportsMips);

      for (var i = 0; i < 6; i++) {
        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, 36064, 34069 + i);
      }

      if (textureNeedsGenerateMipmaps(renderTarget.texture, supportsMips)) {
        generateMipmap(34067, renderTarget.texture, renderTarget.width, renderTarget.height);
      }

      state.bindTexture(34067, null);
    } else {
      state.bindTexture(3553, textureProperties.__webglTexture);
      setTextureParameters(3553, renderTarget.texture, supportsMips);
      setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553);

      if (textureNeedsGenerateMipmaps(renderTarget.texture, supportsMips)) {
        generateMipmap(3553, renderTarget.texture, renderTarget.width, renderTarget.height);
      }

      state.bindTexture(3553, null);
    } // Setup depth and stencil buffers


    if (renderTarget.depthBuffer) {
      setupDepthRenderbuffer(renderTarget);
    }
  }

  function updateRenderTargetMipmap(renderTarget) {
    var texture = renderTarget.texture;
    var supportsMips = isPowerOfTwo(renderTarget) || capabilities.isWebGL2;

    if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
      var target = renderTarget.isWebGLRenderTargetCube ? 34067 : 3553;

      var webglTexture = properties.get(texture).__webglTexture;

      state.bindTexture(target, webglTexture);
      generateMipmap(target, texture, renderTarget.width, renderTarget.height);
      state.bindTexture(target, null);
    }
  }

  function updateMultisampleRenderTarget(renderTarget) {
    if (renderTarget.isWebGLMultisampleRenderTarget) {
      if (capabilities.isWebGL2) {
        var renderTargetProperties = properties.get(renderTarget);

        _gl.bindFramebuffer(36008, renderTargetProperties.__webglMultisampledFramebuffer);

        _gl.bindFramebuffer(36009, renderTargetProperties.__webglFramebuffer);

        var width = renderTarget.width;
        var height = renderTarget.height;
        var mask = 16384;
        if (renderTarget.depthBuffer) mask |= 256;
        if (renderTarget.stencilBuffer) mask |= 1024;

        _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, 9728);
      } else {
        console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');
      }
    }
  }

  function getRenderTargetSamples(renderTarget) {
    return capabilities.isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ? Math.min(capabilities.maxSamples, renderTarget.samples) : 0;
  }

  function updateVideoTexture(texture) {
    var id = texture.id;
    var frame = info.render.frame; // Check the last frame we updated the VideoTexture

    if (_videoTextures[id] !== frame) {
      _videoTextures[id] = frame;
      texture.update();
    }
  }

  this.setTexture2D = setTexture2D;
  this.setTexture3D = setTexture3D;
  this.setTextureCube = setTextureCube;
  this.setTextureCubeDynamic = setTextureCubeDynamic;
  this.setupRenderTarget = setupRenderTarget;
  this.updateRenderTargetMipmap = updateRenderTargetMipmap;
  this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
}
/**
 * @author thespite / http://www.twitter.com/thespite
 */


function WebGLUtils(gl, extensions, capabilities) {
  function convert(p) {
    var extension;
    if (p === RepeatWrapping) return 10497;
    if (p === ClampToEdgeWrapping) return 33071;
    if (p === MirroredRepeatWrapping) return 33648;
    if (p === NearestFilter) return 9728;
    if (p === NearestMipMapNearestFilter) return 9984;
    if (p === NearestMipMapLinearFilter) return 9986;
    if (p === LinearFilter) return 9729;
    if (p === LinearMipMapNearestFilter) return 9985;
    if (p === LinearMipMapLinearFilter) return 9987;
    if (p === UnsignedByteType) return 5121;
    if (p === UnsignedShort4444Type) return 32819;
    if (p === UnsignedShort5551Type) return 32820;
    if (p === UnsignedShort565Type) return 33635;
    if (p === ByteType) return 5120;
    if (p === ShortType) return 5122;
    if (p === UnsignedShortType) return 5123;
    if (p === IntType) return 5124;
    if (p === UnsignedIntType) return 5125;
    if (p === FloatType) return 5126;

    if (p === HalfFloatType) {
      if (capabilities.isWebGL2) return 5131;
      extension = extensions.get('OES_texture_half_float');
      if (extension !== null) return extension.HALF_FLOAT_OES;
    }

    if (p === AlphaFormat) return 6406;
    if (p === RGBFormat) return 6407;
    if (p === RGBAFormat) return 6408;
    if (p === LuminanceFormat) return 6409;
    if (p === LuminanceAlphaFormat) return 6410;
    if (p === DepthFormat) return 6402;
    if (p === DepthStencilFormat) return 34041;
    if (p === RedFormat) return 6403;
    if (p === AddEquation) return 32774;
    if (p === SubtractEquation) return 32778;
    if (p === ReverseSubtractEquation) return 32779;
    if (p === ZeroFactor) return 0;
    if (p === OneFactor) return 1;
    if (p === SrcColorFactor) return 768;
    if (p === OneMinusSrcColorFactor) return 769;
    if (p === SrcAlphaFactor) return 770;
    if (p === OneMinusSrcAlphaFactor) return 771;
    if (p === DstAlphaFactor) return 772;
    if (p === OneMinusDstAlphaFactor) return 773;
    if (p === DstColorFactor) return 774;
    if (p === OneMinusDstColorFactor) return 775;
    if (p === SrcAlphaSaturateFactor) return 776;

    if (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {
      extension = extensions.get('WEBGL_compressed_texture_s3tc');

      if (extension !== null) {
        if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
        if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
        if (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
        if (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
      }
    }

    if (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {
      extension = extensions.get('WEBGL_compressed_texture_pvrtc');

      if (extension !== null) {
        if (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        if (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        if (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        if (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
      }
    }

    if (p === RGB_ETC1_Format) {
      extension = extensions.get('WEBGL_compressed_texture_etc1');
      if (extension !== null) return extension.COMPRESSED_RGB_ETC1_WEBGL;
    }

    if (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format) {
      extension = extensions.get('WEBGL_compressed_texture_astc');

      if (extension !== null) {
        return p;
      }
    }

    if (p === MinEquation || p === MaxEquation) {
      if (capabilities.isWebGL2) {
        if (p === MinEquation) return 32775;
        if (p === MaxEquation) return 32776;
      }

      extension = extensions.get('EXT_blend_minmax');

      if (extension !== null) {
        if (p === MinEquation) return extension.MIN_EXT;
        if (p === MaxEquation) return extension.MAX_EXT;
      }
    }

    if (p === UnsignedInt248Type) {
      if (capabilities.isWebGL2) return 34042;
      extension = extensions.get('WEBGL_depth_texture');
      if (extension !== null) return extension.UNSIGNED_INT_24_8_WEBGL;
    }

    return 0;
  }

  return {
    convert: convert
  };
}
/**
 * @author mrdoob / http://mrdoob.com/
 */


function Group() {
  Object3D.call(this);
  this.type = 'Group';
}

Group.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Group,
  isGroup: true
});
/**
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 * @author WestLangley / http://github.com/WestLangley
*/

function Camera() {
  Object3D.call(this);
  this.type = 'Camera';
  this.matrixWorldInverse = new Matrix4();
  this.projectionMatrix = new Matrix4();
  this.projectionMatrixInverse = new Matrix4();
}

Camera.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Camera,
  isCamera: true,
  copy: function (source, recursive) {
    Object3D.prototype.copy.call(this, source, recursive);
    this.matrixWorldInverse.copy(source.matrixWorldInverse);
    this.projectionMatrix.copy(source.projectionMatrix);
    this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
    return this;
  },
  getWorldDirection: function (target) {
    if (target === undefined) {
      console.warn('THREE.Camera: .getWorldDirection() target is now required');
      target = new Vector3();
    }

    this.updateMatrixWorld(true);
    var e = this.matrixWorld.elements;
    return target.set(-e[8], -e[9], -e[10]).normalize();
  },
  updateMatrixWorld: function (force) {
    Object3D.prototype.updateMatrixWorld.call(this, force);
    this.matrixWorldInverse.getInverse(this.matrixWorld);
  },
  clone: function () {
    return new this.constructor().copy(this);
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 * @author greggman / http://games.greggman.com/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author tschw
 */

function PerspectiveCamera(fov, aspect, near, far) {
  Camera.call(this);
  this.type = 'PerspectiveCamera';
  this.fov = fov !== undefined ? fov : 50;
  this.zoom = 1;
  this.near = near !== undefined ? near : 0.1;
  this.far = far !== undefined ? far : 2000;
  this.focus = 10;
  this.aspect = aspect !== undefined ? aspect : 1;
  this.view = null;
  this.filmGauge = 35; // width of the film (default in millimeters)

  this.filmOffset = 0; // horizontal film offset (same unit as gauge)

  this.updateProjectionMatrix();
}

PerspectiveCamera.prototype = Object.assign(Object.create(Camera.prototype), {
  constructor: PerspectiveCamera,
  isPerspectiveCamera: true,
  copy: function (source, recursive) {
    Camera.prototype.copy.call(this, source, recursive);
    this.fov = source.fov;
    this.zoom = source.zoom;
    this.near = source.near;
    this.far = source.far;
    this.focus = source.focus;
    this.aspect = source.aspect;
    this.view = source.view === null ? null : Object.assign({}, source.view);
    this.filmGauge = source.filmGauge;
    this.filmOffset = source.filmOffset;
    return this;
  },

  /**
   * Sets the FOV by focal length in respect to the current .filmGauge.
   *
   * The default film gauge is 35, so that the focal length can be specified for
   * a 35mm (full frame) camera.
   *
   * Values for focal length and film gauge must have the same unit.
   */
  setFocalLength: function (focalLength) {
    // see http://www.bobatkins.com/photography/technical/field_of_view.html
    var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
    this.fov = _Math.RAD2DEG * 2 * Math.atan(vExtentSlope);
    this.updateProjectionMatrix();
  },

  /**
   * Calculates the focal length from the current .fov and .filmGauge.
   */
  getFocalLength: function () {
    var vExtentSlope = Math.tan(_Math.DEG2RAD * 0.5 * this.fov);
    return 0.5 * this.getFilmHeight() / vExtentSlope;
  },
  getEffectiveFOV: function () {
    return _Math.RAD2DEG * 2 * Math.atan(Math.tan(_Math.DEG2RAD * 0.5 * this.fov) / this.zoom);
  },
  getFilmWidth: function () {
    // film not completely covered in portrait format (aspect < 1)
    return this.filmGauge * Math.min(this.aspect, 1);
  },
  getFilmHeight: function () {
    // film not completely covered in landscape format (aspect > 1)
    return this.filmGauge / Math.max(this.aspect, 1);
  },

  /**
   * Sets an offset in a larger frustum. This is useful for multi-window or
   * multi-monitor/multi-machine setups.
   *
   * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
   * the monitors are in grid like this
   *
   *   +---+---+---+
   *   | A | B | C |
   *   +---+---+---+
   *   | D | E | F |
   *   +---+---+---+
   *
   * then for each monitor you would call it like this
   *
   *   var w = 1920;
   *   var h = 1080;
   *   var fullWidth = w * 3;
   *   var fullHeight = h * 2;
   *
   *   --A--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
   *   --B--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
   *   --C--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
   *   --D--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
   *   --E--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
   *   --F--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
   *
   *   Note there is no reason monitors have to be the same size or in a grid.
   */
  setViewOffset: function (fullWidth, fullHeight, x, y, width, height) {
    this.aspect = fullWidth / fullHeight;

    if (this.view === null) {
      this.view = {
        enabled: true,
        fullWidth: 1,
        fullHeight: 1,
        offsetX: 0,
        offsetY: 0,
        width: 1,
        height: 1
      };
    }

    this.view.enabled = true;
    this.view.fullWidth = fullWidth;
    this.view.fullHeight = fullHeight;
    this.view.offsetX = x;
    this.view.offsetY = y;
    this.view.width = width;
    this.view.height = height;
    this.updateProjectionMatrix();
  },
  clearViewOffset: function () {
    if (this.view !== null) {
      this.view.enabled = false;
    }

    this.updateProjectionMatrix();
  },
  updateProjectionMatrix: function () {
    var near = this.near,
        top = near * Math.tan(_Math.DEG2RAD * 0.5 * this.fov) / this.zoom,
        height = 2 * top,
        width = this.aspect * height,
        left = -0.5 * width,
        view = this.view;

    if (this.view !== null && this.view.enabled) {
      var fullWidth = view.fullWidth,
          fullHeight = view.fullHeight;
      left += view.offsetX * width / fullWidth;
      top -= view.offsetY * height / fullHeight;
      width *= view.width / fullWidth;
      height *= view.height / fullHeight;
    }

    var skew = this.filmOffset;
    if (skew !== 0) left += near * skew / this.getFilmWidth();
    this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);
    this.projectionMatrixInverse.getInverse(this.projectionMatrix);
  },
  toJSON: function (meta) {
    var data = Object3D.prototype.toJSON.call(this, meta);
    data.object.fov = this.fov;
    data.object.zoom = this.zoom;
    data.object.near = this.near;
    data.object.far = this.far;
    data.object.focus = this.focus;
    data.object.aspect = this.aspect;
    if (this.view !== null) data.object.view = Object.assign({}, this.view);
    data.object.filmGauge = this.filmGauge;
    data.object.filmOffset = this.filmOffset;
    return data;
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 */

function ArrayCamera(array) {
  PerspectiveCamera.call(this);
  this.cameras = array || [];
}

ArrayCamera.prototype = Object.assign(Object.create(PerspectiveCamera.prototype), {
  constructor: ArrayCamera,
  isArrayCamera: true
});
/**
 * @author jsantell / https://www.jsantell.com/
 * @author mrdoob / http://mrdoob.com/
 */

var cameraLPos = new Vector3();
var cameraRPos = new Vector3();
/**
 * Assumes 2 cameras that are parallel and share an X-axis, and that
 * the cameras' projection and world matrices have already been set.
 * And that near and far planes are identical for both cameras.
 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
 */

function setProjectionFromUnion(camera, cameraL, cameraR) {
  cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);
  cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);
  var ipd = cameraLPos.distanceTo(cameraRPos);
  var projL = cameraL.projectionMatrix.elements;
  var projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and
  // most likely identical top and bottom frustum extents.
  // Use the left camera for these values.

  var near = projL[14] / (projL[10] - 1);
  var far = projL[14] / (projL[10] + 1);
  var topFov = (projL[9] + 1) / projL[5];
  var bottomFov = (projL[9] - 1) / projL[5];
  var leftFov = (projL[8] - 1) / projL[0];
  var rightFov = (projR[8] + 1) / projR[0];
  var left = near * leftFov;
  var right = near * rightFov; // Calculate the new camera's position offset from the
  // left camera. xOffset should be roughly half `ipd`.

  var zOffset = ipd / (-leftFov + rightFov);
  var xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?

  cameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);
  camera.translateX(xOffset);
  camera.translateZ(zOffset);
  camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);
  camera.matrixWorldInverse.getInverse(camera.matrixWorld); // Find the union of the frustum values of the cameras and scale
  // the values so that the near plane's position does not change in world space,
  // although must now be relative to the new union camera.

  var near2 = near + zOffset;
  var far2 = far + zOffset;
  var left2 = left - xOffset;
  var right2 = right + (ipd - xOffset);
  var top2 = topFov * far / far2 * near2;
  var bottom2 = bottomFov * far / far2 * near2;
  camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
}
/**
 * @author mrdoob / http://mrdoob.com/
 */


function WebVRManager(renderer) {
  var scope = this;
  var device = null;
  var frameData = null;
  var poseTarget = null;
  var controllers = [];
  var standingMatrix = new Matrix4();
  var standingMatrixInverse = new Matrix4();
  var framebufferScaleFactor = 1.0;
  var frameOfReferenceType = 'stage';

  if (typeof window !== 'undefined' && 'VRFrameData' in window) {
    frameData = new window.VRFrameData();
    window.addEventListener('vrdisplaypresentchange', onVRDisplayPresentChange, false);
  }

  var matrixWorldInverse = new Matrix4();
  var tempQuaternion = new Quaternion();
  var tempPosition = new Vector3();
  var cameraL = new PerspectiveCamera();
  cameraL.bounds = new Vector4(0.0, 0.0, 0.5, 1.0);
  cameraL.layers.enable(1);
  var cameraR = new PerspectiveCamera();
  cameraR.bounds = new Vector4(0.5, 0.0, 0.5, 1.0);
  cameraR.layers.enable(2);
  var cameraVR = new ArrayCamera([cameraL, cameraR]);
  cameraVR.layers.enable(1);
  cameraVR.layers.enable(2); //

  function isPresenting() {
    return device !== null && device.isPresenting === true;
  }

  var currentSize = new Vector2(),
      currentPixelRatio;

  function onVRDisplayPresentChange() {
    if (isPresenting()) {
      var eyeParameters = device.getEyeParameters('left');
      var renderWidth = eyeParameters.renderWidth * framebufferScaleFactor;
      var renderHeight = eyeParameters.renderHeight * framebufferScaleFactor;
      currentPixelRatio = renderer.getPixelRatio();
      renderer.getSize(currentSize);
      renderer.setDrawingBufferSize(renderWidth * 2, renderHeight, 1);
      animation.start();
    } else {
      if (scope.enabled) {
        renderer.setDrawingBufferSize(currentSize.width, currentSize.height, currentPixelRatio);
      }

      animation.stop();
    }
  } //


  var triggers = [];

  function findGamepad(id) {
    var gamepads = navigator.getGamepads && navigator.getGamepads();

    for (var i = 0, j = 0, l = gamepads.length; i < l; i++) {
      var gamepad = gamepads[i];

      if (gamepad && (gamepad.id === 'Daydream Controller' || gamepad.id === 'Gear VR Controller' || gamepad.id === 'Oculus Go Controller' || gamepad.id === 'OpenVR Gamepad' || gamepad.id.startsWith('Oculus Touch') || gamepad.id.startsWith('Spatial Controller'))) {
        if (j === id) return gamepad;
        j++;
      }
    }
  }

  function updateControllers() {
    for (var i = 0; i < controllers.length; i++) {
      var controller = controllers[i];
      var gamepad = findGamepad(i);

      if (gamepad !== undefined && gamepad.pose !== undefined) {
        if (gamepad.pose === null) return; //  Pose

        var pose = gamepad.pose;
        if (pose.hasPosition === false) controller.position.set(0.2, -0.6, -0.05);
        if (pose.position !== null) controller.position.fromArray(pose.position);
        if (pose.orientation !== null) controller.quaternion.fromArray(pose.orientation);
        controller.matrix.compose(controller.position, controller.quaternion, controller.scale);
        controller.matrix.premultiply(standingMatrix);
        controller.matrix.decompose(controller.position, controller.quaternion, controller.scale);
        controller.matrixWorldNeedsUpdate = true;
        controller.visible = true; //  Trigger

        var buttonId = gamepad.id === 'Daydream Controller' ? 0 : 1;

        if (triggers[i] !== gamepad.buttons[buttonId].pressed) {
          triggers[i] = gamepad.buttons[buttonId].pressed;

          if (triggers[i] === true) {
            controller.dispatchEvent({
              type: 'selectstart'
            });
          } else {
            controller.dispatchEvent({
              type: 'selectend'
            });
            controller.dispatchEvent({
              type: 'select'
            });
          }
        }
      } else {
        controller.visible = false;
      }
    }
  } //


  this.enabled = false;

  this.getController = function (id) {
    var controller = controllers[id];

    if (controller === undefined) {
      controller = new Group();
      controller.matrixAutoUpdate = false;
      controller.visible = false;
      controllers[id] = controller;
    }

    return controller;
  };

  this.getDevice = function () {
    return device;
  };

  this.setDevice = function (value) {
    if (value !== undefined) device = value;
    animation.setContext(value);
  };

  this.setFramebufferScaleFactor = function (value) {
    framebufferScaleFactor = value;
  };

  this.setFrameOfReferenceType = function (value) {
    frameOfReferenceType = value;
  };

  this.setPoseTarget = function (object) {
    if (object !== undefined) poseTarget = object;
  };

  this.getCamera = function (camera) {
    var userHeight = frameOfReferenceType === 'stage' ? 1.6 : 0;

    if (isPresenting() === false) {
      camera.position.set(0, userHeight, 0);
      camera.rotation.set(0, 0, 0);
      return camera;
    }

    device.depthNear = camera.near;
    device.depthFar = camera.far;
    device.getFrameData(frameData); //

    if (frameOfReferenceType === 'stage') {
      var stageParameters = device.stageParameters;

      if (stageParameters) {
        standingMatrix.fromArray(stageParameters.sittingToStandingTransform);
      } else {
        standingMatrix.makeTranslation(0, userHeight, 0);
      }
    }

    var pose = frameData.pose;
    var poseObject = poseTarget !== null ? poseTarget : camera; // We want to manipulate poseObject by its position and quaternion components since users may rely on them.

    poseObject.matrix.copy(standingMatrix);
    poseObject.matrix.decompose(poseObject.position, poseObject.quaternion, poseObject.scale);

    if (pose.orientation !== null) {
      tempQuaternion.fromArray(pose.orientation);
      poseObject.quaternion.multiply(tempQuaternion);
    }

    if (pose.position !== null) {
      tempQuaternion.setFromRotationMatrix(standingMatrix);
      tempPosition.fromArray(pose.position);
      tempPosition.applyQuaternion(tempQuaternion);
      poseObject.position.add(tempPosition);
    }

    poseObject.updateMatrixWorld(); //

    cameraL.near = camera.near;
    cameraR.near = camera.near;
    cameraL.far = camera.far;
    cameraR.far = camera.far;
    cameraL.matrixWorldInverse.fromArray(frameData.leftViewMatrix);
    cameraR.matrixWorldInverse.fromArray(frameData.rightViewMatrix); // TODO (mrdoob) Double check this code

    standingMatrixInverse.getInverse(standingMatrix);

    if (frameOfReferenceType === 'stage') {
      cameraL.matrixWorldInverse.multiply(standingMatrixInverse);
      cameraR.matrixWorldInverse.multiply(standingMatrixInverse);
    }

    var parent = poseObject.parent;

    if (parent !== null) {
      matrixWorldInverse.getInverse(parent.matrixWorld);
      cameraL.matrixWorldInverse.multiply(matrixWorldInverse);
      cameraR.matrixWorldInverse.multiply(matrixWorldInverse);
    } // envMap and Mirror needs camera.matrixWorld


    cameraL.matrixWorld.getInverse(cameraL.matrixWorldInverse);
    cameraR.matrixWorld.getInverse(cameraR.matrixWorldInverse);
    cameraL.projectionMatrix.fromArray(frameData.leftProjectionMatrix);
    cameraR.projectionMatrix.fromArray(frameData.rightProjectionMatrix);
    setProjectionFromUnion(cameraVR, cameraL, cameraR); //

    var layers = device.getLayers();

    if (layers.length) {
      var layer = layers[0];

      if (layer.leftBounds !== null && layer.leftBounds.length === 4) {
        cameraL.bounds.fromArray(layer.leftBounds);
      }

      if (layer.rightBounds !== null && layer.rightBounds.length === 4) {
        cameraR.bounds.fromArray(layer.rightBounds);
      }
    }

    updateControllers();
    return cameraVR;
  };

  this.getStandingMatrix = function () {
    return standingMatrix;
  };

  this.isPresenting = isPresenting; // Animation Loop

  var animation = new WebGLAnimation();

  this.setAnimationLoop = function (callback) {
    animation.setAnimationLoop(callback);
  };

  this.submitFrame = function () {
    if (isPresenting()) device.submitFrame();
  };

  this.dispose = function () {
    if (typeof window !== 'undefined') {
      window.removeEventListener('vrdisplaypresentchange', onVRDisplayPresentChange);
    }
  };
}
/**
 * @author mrdoob / http://mrdoob.com/
 */


function WebXRManager(renderer) {
  var gl = renderer.context;
  var device = null;
  var session = null;
  var framebufferScaleFactor = 1.0;
  var frameOfReference = null;
  var frameOfReferenceType = 'stage';
  var pose = null;
  var controllers = [];
  var inputSources = [];

  function isPresenting() {
    return session !== null && frameOfReference !== null;
  } //


  var cameraL = new PerspectiveCamera();
  cameraL.layers.enable(1);
  cameraL.viewport = new Vector4();
  var cameraR = new PerspectiveCamera();
  cameraR.layers.enable(2);
  cameraR.viewport = new Vector4();
  var cameraVR = new ArrayCamera([cameraL, cameraR]);
  cameraVR.layers.enable(1);
  cameraVR.layers.enable(2); //

  this.enabled = false;

  this.getController = function (id) {
    var controller = controllers[id];

    if (controller === undefined) {
      controller = new Group();
      controller.matrixAutoUpdate = false;
      controller.visible = false;
      controllers[id] = controller;
    }

    return controller;
  };

  this.getDevice = function () {
    return device;
  };

  this.setDevice = function (value) {
    if (value !== undefined) device = value;
    if (value instanceof XRDevice) gl.setCompatibleXRDevice(value);
  }; //


  function onSessionEvent(event) {
    var controller = controllers[inputSources.indexOf(event.inputSource)];
    if (controller) controller.dispatchEvent({
      type: event.type
    });
  }

  function onSessionEnd() {
    renderer.setFramebuffer(null);
    renderer.setRenderTarget(renderer.getRenderTarget()); // Hack #15830

    animation.stop();
  }

  this.setFramebufferScaleFactor = function (value) {
    framebufferScaleFactor = value;
  };

  this.setFrameOfReferenceType = function (value) {
    frameOfReferenceType = value;
  };

  this.setSession = function (value) {
    session = value;

    if (session !== null) {
      session.addEventListener('select', onSessionEvent);
      session.addEventListener('selectstart', onSessionEvent);
      session.addEventListener('selectend', onSessionEvent);
      session.addEventListener('end', onSessionEnd);
      session.baseLayer = new XRWebGLLayer(session, gl, {
        framebufferScaleFactor: framebufferScaleFactor
      });
      session.requestFrameOfReference(frameOfReferenceType).then(function (value) {
        frameOfReference = value;
        renderer.setFramebuffer(session.baseLayer.framebuffer);
        animation.setContext(session);
        animation.start();
      }); //

      inputSources = session.getInputSources();
      session.addEventListener('inputsourceschange', function () {
        inputSources = session.getInputSources();
        console.log(inputSources);

        for (var i = 0; i < controllers.length; i++) {
          var controller = controllers[i];
          controller.userData.inputSource = inputSources[i];
        }
      });
    }
  };

  function updateCamera(camera, parent) {
    if (parent === null) {
      camera.matrixWorld.copy(camera.matrix);
    } else {
      camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);
    }

    camera.matrixWorldInverse.getInverse(camera.matrixWorld);
  }

  this.getCamera = function (camera) {
    if (isPresenting()) {
      var parent = camera.parent;
      var cameras = cameraVR.cameras;
      updateCamera(cameraVR, parent);

      for (var i = 0; i < cameras.length; i++) {
        updateCamera(cameras[i], parent);
      } // update camera and its children


      camera.matrixWorld.copy(cameraVR.matrixWorld);
      var children = camera.children;

      for (var i = 0, l = children.length; i < l; i++) {
        children[i].updateMatrixWorld(true);
      }

      setProjectionFromUnion(cameraVR, cameraL, cameraR);
      return cameraVR;
    }

    return camera;
  };

  this.isPresenting = isPresenting; // Animation Loop

  var onAnimationFrameCallback = null;

  function onAnimationFrame(time, frame) {
    pose = frame.getDevicePose(frameOfReference);

    if (pose !== null) {
      var layer = session.baseLayer;
      var views = frame.views;

      for (var i = 0; i < views.length; i++) {
        var view = views[i];
        var viewport = layer.getViewport(view);
        var viewMatrix = pose.getViewMatrix(view);
        var camera = cameraVR.cameras[i];
        camera.matrix.fromArray(viewMatrix).getInverse(camera.matrix);
        camera.projectionMatrix.fromArray(view.projectionMatrix);
        camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);

        if (i === 0) {
          cameraVR.matrix.copy(camera.matrix);
        }
      }
    } //


    for (var i = 0; i < controllers.length; i++) {
      var controller = controllers[i];
      var inputSource = inputSources[i];

      if (inputSource) {
        var inputPose = frame.getInputPose(inputSource, frameOfReference);

        if (inputPose !== null) {
          if ('targetRay' in inputPose) {
            controller.matrix.elements = inputPose.targetRay.transformMatrix;
          } else if ('pointerMatrix' in inputPose) {
            // DEPRECATED
            controller.matrix.elements = inputPose.pointerMatrix;
          }

          controller.matrix.decompose(controller.position, controller.rotation, controller.scale);
          controller.visible = true;
          continue;
        }
      }

      controller.visible = false;
    }

    if (onAnimationFrameCallback) onAnimationFrameCallback(time);
  }

  var animation = new WebGLAnimation();
  animation.setAnimationLoop(onAnimationFrame);

  this.setAnimationLoop = function (callback) {
    onAnimationFrameCallback = callback;
  };

  this.dispose = function () {}; // DEPRECATED


  this.getStandingMatrix = function () {
    console.warn('THREE.WebXRManager: getStandingMatrix() is no longer needed.');
    return new Matrix4();
  };

  this.submitFrame = function () {};
}
/**
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author szimek / https://github.com/szimek/
 * @author tschw
 */


function WebGLRenderer(parameters) {
  console.log('THREE.WebGLRenderer', REVISION);
  parameters = parameters || {};

  var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas'),
      _context = parameters.context !== undefined ? parameters.context : null,
      _alpha = parameters.alpha !== undefined ? parameters.alpha : false,
      _depth = parameters.depth !== undefined ? parameters.depth : true,
      _stencil = parameters.stencil !== undefined ? parameters.stencil : true,
      _antialias = parameters.antialias !== undefined ? parameters.antialias : false,
      _premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
      _preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
      _powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default';

  var currentRenderList = null;
  var currentRenderState = null; // public properties

  this.domElement = _canvas;
  this.context = null; // clearing

  this.autoClear = true;
  this.autoClearColor = true;
  this.autoClearDepth = true;
  this.autoClearStencil = true; // scene graph

  this.sortObjects = true; // user-defined clipping

  this.clippingPlanes = [];
  this.localClippingEnabled = false; // physically based shading

  this.gammaFactor = 2.0; // for backwards compatibility

  this.gammaInput = false;
  this.gammaOutput = false; // physical lights

  this.physicallyCorrectLights = false; // tone mapping

  this.toneMapping = LinearToneMapping;
  this.toneMappingExposure = 1.0;
  this.toneMappingWhitePoint = 1.0; // morphs

  this.maxMorphTargets = 8;
  this.maxMorphNormals = 4; // internal properties

  var _this = this,
      _isContextLost = false,
      // internal state cache
  _framebuffer = null,
      _currentRenderTarget = null,
      _currentFramebuffer = null,
      _currentMaterialId = -1,
      // geometry and program caching
  _currentGeometryProgram = {
    geometry: null,
    program: null,
    wireframe: false
  },
      _currentCamera = null,
      _currentArrayCamera = null,
      _currentViewport = new Vector4(),
      _currentScissor = new Vector4(),
      _currentScissorTest = null,
      //
  _usedTextureUnits = 0,
      //
  _width = _canvas.width,
      _height = _canvas.height,
      _pixelRatio = 1,
      _viewport = new Vector4(0, 0, _width, _height),
      _scissor = new Vector4(0, 0, _width, _height),
      _scissorTest = false,
      // frustum
  _frustum = new Frustum(),
      // clipping
  _clipping = new WebGLClipping(),
      _clippingEnabled = false,
      _localClippingEnabled = false,
      // camera matrices cache
  _projScreenMatrix = new Matrix4(),
      _vector3 = new Vector3();

  function getTargetPixelRatio() {
    return _currentRenderTarget === null ? _pixelRatio : 1;
  } // initialize


  var _gl;

  try {
    var contextAttributes = {
      alpha: _alpha,
      depth: _depth,
      stencil: _stencil,
      antialias: _antialias,
      premultipliedAlpha: _premultipliedAlpha,
      preserveDrawingBuffer: _preserveDrawingBuffer,
      powerPreference: _powerPreference
    }; // event listeners must be registered before WebGL context is created, see #12753

    _canvas.addEventListener('webglcontextlost', onContextLost, false);

    _canvas.addEventListener('webglcontextrestored', onContextRestore, false);

    _gl = _context || _canvas.getContext('webgl', contextAttributes) || _canvas.getContext('experimental-webgl', contextAttributes);

    if (_gl === null) {
      if (_canvas.getContext('webgl') !== null) {
        throw new Error('Error creating WebGL context with your selected attributes.');
      } else {
        throw new Error('Error creating WebGL context.');
      }
    } // Some experimental-webgl implementations do not have getShaderPrecisionFormat


    if (_gl.getShaderPrecisionFormat === undefined) {
      _gl.getShaderPrecisionFormat = function () {
        return {
          'rangeMin': 1,
          'rangeMax': 1,
          'precision': 1
        };
      };
    }
  } catch (error) {
    console.error('THREE.WebGLRenderer: ' + error.message);
    throw error;
  }

  var extensions, capabilities, state, info;
  var properties, textures, attributes, geometries, objects;
  var programCache, renderLists, renderStates;
  var background, morphtargets, bufferRenderer, indexedBufferRenderer;
  var utils;

  function initGLContext() {
    extensions = new WebGLExtensions(_gl);
    capabilities = new WebGLCapabilities(_gl, extensions, parameters);

    if (!capabilities.isWebGL2) {
      extensions.get('WEBGL_depth_texture');
      extensions.get('OES_texture_float');
      extensions.get('OES_texture_half_float');
      extensions.get('OES_texture_half_float_linear');
      extensions.get('OES_standard_derivatives');
      extensions.get('OES_element_index_uint');
      extensions.get('ANGLE_instanced_arrays');
    }

    extensions.get('OES_texture_float_linear');
    utils = new WebGLUtils(_gl, extensions, capabilities);
    state = new WebGLState(_gl, extensions, utils, capabilities);
    state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio));
    state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio));
    info = new WebGLInfo(_gl);
    properties = new WebGLProperties();
    textures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);
    attributes = new WebGLAttributes(_gl);
    geometries = new WebGLGeometries(_gl, attributes, info);
    objects = new WebGLObjects(geometries, info);
    morphtargets = new WebGLMorphtargets(_gl);
    programCache = new WebGLPrograms(_this, extensions, capabilities);
    renderLists = new WebGLRenderLists();
    renderStates = new WebGLRenderStates();
    background = new WebGLBackground(_this, state, objects, _premultipliedAlpha);
    bufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);
    indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);
    info.programs = programCache.programs;
    _this.context = _gl;
    _this.capabilities = capabilities;
    _this.extensions = extensions;
    _this.properties = properties;
    _this.renderLists = renderLists;
    _this.state = state;
    _this.info = info;
  }

  initGLContext(); // vr

  var vr = null;

  if (typeof navigator !== 'undefined') {
    vr = 'xr' in navigator ? new WebXRManager(_this) : new WebVRManager(_this);
  }

  this.vr = vr; // shadow map

  var shadowMap = new WebGLShadowMap(_this, objects, capabilities.maxTextureSize);
  this.shadowMap = shadowMap; // API

  this.getContext = function () {
    return _gl;
  };

  this.getContextAttributes = function () {
    return _gl.getContextAttributes();
  };

  this.forceContextLoss = function () {
    var extension = extensions.get('WEBGL_lose_context');
    if (extension) extension.loseContext();
  };

  this.forceContextRestore = function () {
    var extension = extensions.get('WEBGL_lose_context');
    if (extension) extension.restoreContext();
  };

  this.getPixelRatio = function () {
    return _pixelRatio;
  };

  this.setPixelRatio = function (value) {
    if (value === undefined) return;
    _pixelRatio = value;
    this.setSize(_width, _height, false);
  };

  this.getSize = function (target) {
    if (target === undefined) {
      console.warn('WebGLRenderer: .getsize() now requires a Vector2 as an argument');
      target = new Vector2();
    }

    return target.set(_width, _height);
  };

  this.setSize = function (width, height, updateStyle) {
    if (vr.isPresenting()) {
      console.warn('THREE.WebGLRenderer: Can\'t change size while VR device is presenting.');
      return;
    }

    _width = width;
    _height = height;
    _canvas.width = width * _pixelRatio;
    _canvas.height = height * _pixelRatio;

    if (updateStyle !== false) {
      _canvas.style.width = width + 'px';
      _canvas.style.height = height + 'px';
    }

    this.setViewport(0, 0, width, height);
  };

  this.getDrawingBufferSize = function (target) {
    if (target === undefined) {
      console.warn('WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument');
      target = new Vector2();
    }

    return target.set(_width * _pixelRatio, _height * _pixelRatio);
  };

  this.setDrawingBufferSize = function (width, height, pixelRatio) {
    _width = width;
    _height = height;
    _pixelRatio = pixelRatio;
    _canvas.width = width * pixelRatio;
    _canvas.height = height * pixelRatio;
    this.setViewport(0, 0, width, height);
  };

  this.getCurrentViewport = function (target) {
    if (target === undefined) {
      console.warn('WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument');
      target = new Vector4();
    }

    return target.copy(_currentViewport);
  };

  this.getViewport = function (target) {
    return target.copy(_viewport);
  };

  this.setViewport = function (x, y, width, height) {
    if (x.isVector4) {
      _viewport.set(x.x, x.y, x.z, x.w);
    } else {
      _viewport.set(x, y, width, height);
    }

    state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio));
  };

  this.getScissor = function (target) {
    return target.copy(_scissor);
  };

  this.setScissor = function (x, y, width, height) {
    if (x.isVector4) {
      _scissor.set(x.x, x.y, x.z, x.w);
    } else {
      _scissor.set(x, y, width, height);
    }

    state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio));
  };

  this.getScissorTest = function () {
    return _scissorTest;
  };

  this.setScissorTest = function (boolean) {
    state.setScissorTest(_scissorTest = boolean);
  }; // Clearing


  this.getClearColor = function () {
    return background.getClearColor();
  };

  this.setClearColor = function () {
    background.setClearColor.apply(background, arguments);
  };

  this.getClearAlpha = function () {
    return background.getClearAlpha();
  };

  this.setClearAlpha = function () {
    background.setClearAlpha.apply(background, arguments);
  };

  this.clear = function (color, depth, stencil) {
    var bits = 0;
    if (color === undefined || color) bits |= 16384;
    if (depth === undefined || depth) bits |= 256;
    if (stencil === undefined || stencil) bits |= 1024;

    _gl.clear(bits);
  };

  this.clearColor = function () {
    this.clear(true, false, false);
  };

  this.clearDepth = function () {
    this.clear(false, true, false);
  };

  this.clearStencil = function () {
    this.clear(false, false, true);
  }; //


  this.dispose = function () {
    _canvas.removeEventListener('webglcontextlost', onContextLost, false);

    _canvas.removeEventListener('webglcontextrestored', onContextRestore, false);

    renderLists.dispose();
    renderStates.dispose();
    properties.dispose();
    objects.dispose();
    vr.dispose();
    animation.stop();
  }; // Events


  function onContextLost(event) {
    event.preventDefault();
    console.log('THREE.WebGLRenderer: Context Lost.');
    _isContextLost = true;
  }

  function onContextRestore()
  /* event */
  {
    console.log('THREE.WebGLRenderer: Context Restored.');
    _isContextLost = false;
    initGLContext();
  }

  function onMaterialDispose(event) {
    var material = event.target;
    material.removeEventListener('dispose', onMaterialDispose);
    deallocateMaterial(material);
  } // Buffer deallocation


  function deallocateMaterial(material) {
    releaseMaterialProgramReference(material);
    properties.remove(material);
  }

  function releaseMaterialProgramReference(material) {
    var programInfo = properties.get(material).program;
    material.program = undefined;

    if (programInfo !== undefined) {
      programCache.releaseProgram(programInfo);
    }
  } // Buffer rendering


  function renderObjectImmediate(object, program) {
    object.render(function (object) {
      _this.renderBufferImmediate(object, program);
    });
  }

  this.renderBufferImmediate = function (object, program) {
    state.initAttributes();
    var buffers = properties.get(object);
    if (object.hasPositions && !buffers.position) buffers.position = _gl.createBuffer();
    if (object.hasNormals && !buffers.normal) buffers.normal = _gl.createBuffer();
    if (object.hasUvs && !buffers.uv) buffers.uv = _gl.createBuffer();
    if (object.hasColors && !buffers.color) buffers.color = _gl.createBuffer();
    var programAttributes = program.getAttributes();

    if (object.hasPositions) {
      _gl.bindBuffer(34962, buffers.position);

      _gl.bufferData(34962, object.positionArray, 35048);

      state.enableAttribute(programAttributes.position);

      _gl.vertexAttribPointer(programAttributes.position, 3, 5126, false, 0, 0);
    }

    if (object.hasNormals) {
      _gl.bindBuffer(34962, buffers.normal);

      _gl.bufferData(34962, object.normalArray, 35048);

      state.enableAttribute(programAttributes.normal);

      _gl.vertexAttribPointer(programAttributes.normal, 3, 5126, false, 0, 0);
    }

    if (object.hasUvs) {
      _gl.bindBuffer(34962, buffers.uv);

      _gl.bufferData(34962, object.uvArray, 35048);

      state.enableAttribute(programAttributes.uv);

      _gl.vertexAttribPointer(programAttributes.uv, 2, 5126, false, 0, 0);
    }

    if (object.hasColors) {
      _gl.bindBuffer(34962, buffers.color);

      _gl.bufferData(34962, object.colorArray, 35048);

      state.enableAttribute(programAttributes.color);

      _gl.vertexAttribPointer(programAttributes.color, 3, 5126, false, 0, 0);
    }

    state.disableUnusedAttributes();

    _gl.drawArrays(4, 0, object.count);

    object.count = 0;
  };

  this.renderBufferDirect = function (camera, fog, geometry, material, object, group) {
    var frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
    state.setMaterial(material, frontFaceCW);
    var program = setProgram(camera, fog, material, object);
    var updateBuffers = false;

    if (_currentGeometryProgram.geometry !== geometry.id || _currentGeometryProgram.program !== program.id || _currentGeometryProgram.wireframe !== (material.wireframe === true)) {
      _currentGeometryProgram.geometry = geometry.id;
      _currentGeometryProgram.program = program.id;
      _currentGeometryProgram.wireframe = material.wireframe === true;
      updateBuffers = true;
    }

    if (object.morphTargetInfluences) {
      morphtargets.update(object, geometry, material, program);
      updateBuffers = true;
    } //


    var index = geometry.index;
    var position = geometry.attributes.position;
    var rangeFactor = 1;

    if (material.wireframe === true) {
      index = geometries.getWireframeAttribute(geometry);
      rangeFactor = 2;
    }

    var attribute;
    var renderer = bufferRenderer;

    if (index !== null) {
      attribute = attributes.get(index);
      renderer = indexedBufferRenderer;
      renderer.setIndex(attribute);
    }

    if (updateBuffers) {
      setupVertexAttributes(material, program, geometry);

      if (index !== null) {
        _gl.bindBuffer(34963, attribute.buffer);
      }
    } //


    var dataCount = Infinity;

    if (index !== null) {
      dataCount = index.count;
    } else if (position !== undefined) {
      dataCount = position.count;
    }

    var rangeStart = geometry.drawRange.start * rangeFactor;
    var rangeCount = geometry.drawRange.count * rangeFactor;
    var groupStart = group !== null ? group.start * rangeFactor : 0;
    var groupCount = group !== null ? group.count * rangeFactor : Infinity;
    var drawStart = Math.max(rangeStart, groupStart);
    var drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;
    var drawCount = Math.max(0, drawEnd - drawStart + 1);
    if (drawCount === 0) return; //

    if (object.isMesh) {
      if (material.wireframe === true) {
        state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());
        renderer.setMode(1);
      } else {
        switch (object.drawMode) {
          case TrianglesDrawMode:
            renderer.setMode(4);
            break;

          case TriangleStripDrawMode:
            renderer.setMode(5);
            break;

          case TriangleFanDrawMode:
            renderer.setMode(6);
            break;
        }
      }
    } else if (object.isLine) {
      var lineWidth = material.linewidth;
      if (lineWidth === undefined) lineWidth = 1; // Not using Line*Material

      state.setLineWidth(lineWidth * getTargetPixelRatio());

      if (object.isLineSegments) {
        renderer.setMode(1);
      } else if (object.isLineLoop) {
        renderer.setMode(2);
      } else {
        renderer.setMode(3);
      }
    } else if (object.isPoints) {
      renderer.setMode(0);
    } else if (object.isSprite) {
      renderer.setMode(4);
    }

    if (geometry && geometry.isInstancedBufferGeometry) {
      if (geometry.maxInstancedCount > 0) {
        renderer.renderInstances(geometry, drawStart, drawCount);
      }
    } else {
      renderer.render(drawStart, drawCount);
    }
  };

  function setupVertexAttributes(material, program, geometry) {
    if (geometry && geometry.isInstancedBufferGeometry && !capabilities.isWebGL2) {
      if (extensions.get('ANGLE_instanced_arrays') === null) {
        console.error('THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');
        return;
      }
    }

    state.initAttributes();
    var geometryAttributes = geometry.attributes;
    var programAttributes = program.getAttributes();
    var materialDefaultAttributeValues = material.defaultAttributeValues;

    for (var name in programAttributes) {
      var programAttribute = programAttributes[name];

      if (programAttribute >= 0) {
        var geometryAttribute = geometryAttributes[name];

        if (geometryAttribute !== undefined) {
          var normalized = geometryAttribute.normalized;
          var size = geometryAttribute.itemSize;
          var attribute = attributes.get(geometryAttribute); // TODO Attribute may not be available on context restore

          if (attribute === undefined) continue;
          var buffer = attribute.buffer;
          var type = attribute.type;
          var bytesPerElement = attribute.bytesPerElement;

          if (geometryAttribute.isInterleavedBufferAttribute) {
            var data = geometryAttribute.data;
            var stride = data.stride;
            var offset = geometryAttribute.offset;

            if (data && data.isInstancedInterleavedBuffer) {
              state.enableAttributeAndDivisor(programAttribute, data.meshPerAttribute);

              if (geometry.maxInstancedCount === undefined) {
                geometry.maxInstancedCount = data.meshPerAttribute * data.count;
              }
            } else {
              state.enableAttribute(programAttribute);
            }

            _gl.bindBuffer(34962, buffer);

            _gl.vertexAttribPointer(programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement);
          } else {
            if (geometryAttribute.isInstancedBufferAttribute) {
              state.enableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute);

              if (geometry.maxInstancedCount === undefined) {
                geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
              }
            } else {
              state.enableAttribute(programAttribute);
            }

            _gl.bindBuffer(34962, buffer);

            _gl.vertexAttribPointer(programAttribute, size, type, normalized, 0, 0);
          }
        } else if (materialDefaultAttributeValues !== undefined) {
          var value = materialDefaultAttributeValues[name];

          if (value !== undefined) {
            switch (value.length) {
              case 2:
                _gl.vertexAttrib2fv(programAttribute, value);

                break;

              case 3:
                _gl.vertexAttrib3fv(programAttribute, value);

                break;

              case 4:
                _gl.vertexAttrib4fv(programAttribute, value);

                break;

              default:
                _gl.vertexAttrib1fv(programAttribute, value);

            }
          }
        }
      }
    }

    state.disableUnusedAttributes();
  } // Compile


  this.compile = function (scene, camera) {
    currentRenderState = renderStates.get(scene, camera);
    currentRenderState.init();
    scene.traverse(function (object) {
      if (object.isLight) {
        currentRenderState.pushLight(object);

        if (object.castShadow) {
          currentRenderState.pushShadow(object);
        }
      }
    });
    currentRenderState.setupLights(camera);
    scene.traverse(function (object) {
      if (object.material) {
        if (Array.isArray(object.material)) {
          for (var i = 0; i < object.material.length; i++) {
            initMaterial(object.material[i], scene.fog, object);
          }
        } else {
          initMaterial(object.material, scene.fog, object);
        }
      }
    });
  }; // Animation Loop


  var onAnimationFrameCallback = null;

  function onAnimationFrame(time) {
    if (vr.isPresenting()) return;
    if (onAnimationFrameCallback) onAnimationFrameCallback(time);
  }

  var animation = new WebGLAnimation();
  animation.setAnimationLoop(onAnimationFrame);
  if (typeof window !== 'undefined') animation.setContext(window);

  this.setAnimationLoop = function (callback) {
    onAnimationFrameCallback = callback;
    vr.setAnimationLoop(callback);
    animation.start();
  }; // Rendering


  this.render = function (scene, camera) {
    var renderTarget, forceClear;

    if (arguments[2] !== undefined) {
      console.warn('THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.');
      renderTarget = arguments[2];
    }

    if (arguments[3] !== undefined) {
      console.warn('THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.');
      forceClear = arguments[3];
    }

    if (!(camera && camera.isCamera)) {
      console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');
      return;
    }

    if (_isContextLost) return; // reset caching for this frame

    _currentGeometryProgram.geometry = null;
    _currentGeometryProgram.program = null;
    _currentGeometryProgram.wireframe = false;
    _currentMaterialId = -1;
    _currentCamera = null; // update scene graph

    if (scene.autoUpdate === true) scene.updateMatrixWorld(); // update camera matrices and frustum

    if (camera.parent === null) camera.updateMatrixWorld();

    if (vr.enabled) {
      camera = vr.getCamera(camera);
    } //


    currentRenderState = renderStates.get(scene, camera);
    currentRenderState.init();
    scene.onBeforeRender(_this, scene, camera, renderTarget || _currentRenderTarget);

    _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);

    _frustum.setFromMatrix(_projScreenMatrix);

    _localClippingEnabled = this.localClippingEnabled;
    _clippingEnabled = _clipping.init(this.clippingPlanes, _localClippingEnabled, camera);
    currentRenderList = renderLists.get(scene, camera);
    currentRenderList.init();
    projectObject(scene, camera, 0, _this.sortObjects);

    if (_this.sortObjects === true) {
      currentRenderList.sort();
    } //


    if (_clippingEnabled) _clipping.beginShadows();
    var shadowsArray = currentRenderState.state.shadowsArray;
    shadowMap.render(shadowsArray, scene, camera);
    currentRenderState.setupLights(camera);
    if (_clippingEnabled) _clipping.endShadows(); //

    if (this.info.autoReset) this.info.reset();

    if (renderTarget !== undefined) {
      this.setRenderTarget(renderTarget);
    } //


    background.render(currentRenderList, scene, camera, forceClear); // render scene

    var opaqueObjects = currentRenderList.opaque;
    var transparentObjects = currentRenderList.transparent;

    if (scene.overrideMaterial) {
      var overrideMaterial = scene.overrideMaterial;
      if (opaqueObjects.length) renderObjects(opaqueObjects, scene, camera, overrideMaterial);
      if (transparentObjects.length) renderObjects(transparentObjects, scene, camera, overrideMaterial);
    } else {
      // opaque pass (front-to-back order)
      if (opaqueObjects.length) renderObjects(opaqueObjects, scene, camera); // transparent pass (back-to-front order)

      if (transparentObjects.length) renderObjects(transparentObjects, scene, camera);
    } //


    if (_currentRenderTarget !== null) {
      // Generate mipmap if we're using any kind of mipmap filtering
      textures.updateRenderTargetMipmap(_currentRenderTarget); // resolve multisample renderbuffers to a single-sample texture if necessary

      textures.updateMultisampleRenderTarget(_currentRenderTarget);
    } // Ensure depth buffer writing is enabled so it can be cleared on next render


    state.buffers.depth.setTest(true);
    state.buffers.depth.setMask(true);
    state.buffers.color.setMask(true);
    state.setPolygonOffset(false);
    scene.onAfterRender(_this, scene, camera);

    if (vr.enabled) {
      vr.submitFrame();
    } // _gl.finish();


    currentRenderList = null;
    currentRenderState = null;
  };

  function projectObject(object, camera, groupOrder, sortObjects) {
    if (object.visible === false) return;
    var visible = object.layers.test(camera.layers);

    if (visible) {
      if (object.isGroup) {
        groupOrder = object.renderOrder;
      } else if (object.isLight) {
        currentRenderState.pushLight(object);

        if (object.castShadow) {
          currentRenderState.pushShadow(object);
        }
      } else if (object.isSprite) {
        if (!object.frustumCulled || _frustum.intersectsSprite(object)) {
          if (sortObjects) {
            _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
          }

          var geometry = objects.update(object);
          var material = object.material;
          currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
        }
      } else if (object.isImmediateRenderObject) {
        if (sortObjects) {
          _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
        }

        currentRenderList.push(object, null, object.material, groupOrder, _vector3.z, null);
      } else if (object.isMesh || object.isLine || object.isPoints) {
        if (object.isSkinnedMesh) {
          object.skeleton.update();
        }

        if (!object.frustumCulled || _frustum.intersectsObject(object)) {
          if (sortObjects) {
            _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
          }

          var geometry = objects.update(object);
          var material = object.material;

          if (Array.isArray(material)) {
            var groups = geometry.groups;

            for (var i = 0, l = groups.length; i < l; i++) {
              var group = groups[i];
              var groupMaterial = material[group.materialIndex];

              if (groupMaterial && groupMaterial.visible) {
                currentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group);
              }
            }
          } else if (material.visible) {
            currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
          }
        }
      }
    }

    var children = object.children;

    for (var i = 0, l = children.length; i < l; i++) {
      projectObject(children[i], camera, groupOrder, sortObjects);
    }
  }

  function renderObjects(renderList, scene, camera, overrideMaterial) {
    for (var i = 0, l = renderList.length; i < l; i++) {
      var renderItem = renderList[i];
      var object = renderItem.object;
      var geometry = renderItem.geometry;
      var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
      var group = renderItem.group;

      if (camera.isArrayCamera) {
        _currentArrayCamera = camera;
        var cameras = camera.cameras;

        for (var j = 0, jl = cameras.length; j < jl; j++) {
          var camera2 = cameras[j];

          if (object.layers.test(camera2.layers)) {
            if ('viewport' in camera2) {
              // XR
              state.viewport(_currentViewport.copy(camera2.viewport));
            } else {
              var bounds = camera2.bounds;
              var x = bounds.x * _width;
              var y = bounds.y * _height;
              var width = bounds.z * _width;
              var height = bounds.w * _height;
              state.viewport(_currentViewport.set(x, y, width, height).multiplyScalar(_pixelRatio));
            }

            currentRenderState.setupLights(camera2);
            renderObject(object, scene, camera2, geometry, material, group);
          }
        }
      } else {
        _currentArrayCamera = null;
        renderObject(object, scene, camera, geometry, material, group);
      }
    }
  }

  function renderObject(object, scene, camera, geometry, material, group) {
    object.onBeforeRender(_this, scene, camera, geometry, material, group);
    currentRenderState = renderStates.get(scene, _currentArrayCamera || camera);
    object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
    object.normalMatrix.getNormalMatrix(object.modelViewMatrix);

    if (object.isImmediateRenderObject) {
      state.setMaterial(material);
      var program = setProgram(camera, scene.fog, material, object);
      _currentGeometryProgram.geometry = null;
      _currentGeometryProgram.program = null;
      _currentGeometryProgram.wireframe = false;
      renderObjectImmediate(object, program);
    } else {
      _this.renderBufferDirect(camera, scene.fog, geometry, material, object, group);
    }

    object.onAfterRender(_this, scene, camera, geometry, material, group);
    currentRenderState = renderStates.get(scene, _currentArrayCamera || camera);
  }

  function initMaterial(material, fog, object) {
    var materialProperties = properties.get(material);
    var lights = currentRenderState.state.lights;
    var shadowsArray = currentRenderState.state.shadowsArray;
    var lightsHash = materialProperties.lightsHash;
    var lightsStateHash = lights.state.hash;
    var parameters = programCache.getParameters(material, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object);
    var code = programCache.getProgramCode(material, parameters);
    var program = materialProperties.program;
    var programChange = true;

    if (program === undefined) {
      // new material
      material.addEventListener('dispose', onMaterialDispose);
    } else if (program.code !== code) {
      // changed glsl or parameters
      releaseMaterialProgramReference(material);
    } else if (lightsHash.stateID !== lightsStateHash.stateID || lightsHash.directionalLength !== lightsStateHash.directionalLength || lightsHash.pointLength !== lightsStateHash.pointLength || lightsHash.spotLength !== lightsStateHash.spotLength || lightsHash.rectAreaLength !== lightsStateHash.rectAreaLength || lightsHash.hemiLength !== lightsStateHash.hemiLength || lightsHash.shadowsLength !== lightsStateHash.shadowsLength) {
      lightsHash.stateID = lightsStateHash.stateID;
      lightsHash.directionalLength = lightsStateHash.directionalLength;
      lightsHash.pointLength = lightsStateHash.pointLength;
      lightsHash.spotLength = lightsStateHash.spotLength;
      lightsHash.rectAreaLength = lightsStateHash.rectAreaLength;
      lightsHash.hemiLength = lightsStateHash.hemiLength;
      lightsHash.shadowsLength = lightsStateHash.shadowsLength;
      programChange = false;
    } else if (parameters.shaderID !== undefined) {
      // same glsl and uniform list
      return;
    } else {
      // only rebuild uniform list
      programChange = false;
    }

    if (programChange) {
      if (parameters.shaderID) {
        var shader = ShaderLib[parameters.shaderID];
        materialProperties.shader = {
          name: material.type,
          uniforms: cloneUniforms(shader.uniforms),
          vertexShader: shader.vertexShader,
          fragmentShader: shader.fragmentShader
        };
      } else {
        materialProperties.shader = {
          name: material.type,
          uniforms: material.uniforms,
          vertexShader: material.vertexShader,
          fragmentShader: material.fragmentShader
        };
      }

      material.onBeforeCompile(materialProperties.shader, _this); // Computing code again as onBeforeCompile may have changed the shaders

      code = programCache.getProgramCode(material, parameters);
      program = programCache.acquireProgram(material, materialProperties.shader, parameters, code);
      materialProperties.program = program;
      material.program = program;
    }

    var programAttributes = program.getAttributes();

    if (material.morphTargets) {
      material.numSupportedMorphTargets = 0;

      for (var i = 0; i < _this.maxMorphTargets; i++) {
        if (programAttributes['morphTarget' + i] >= 0) {
          material.numSupportedMorphTargets++;
        }
      }
    }

    if (material.morphNormals) {
      material.numSupportedMorphNormals = 0;

      for (var i = 0; i < _this.maxMorphNormals; i++) {
        if (programAttributes['morphNormal' + i] >= 0) {
          material.numSupportedMorphNormals++;
        }
      }
    }

    var uniforms = materialProperties.shader.uniforms;

    if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {
      materialProperties.numClippingPlanes = _clipping.numPlanes;
      materialProperties.numIntersection = _clipping.numIntersection;
      uniforms.clippingPlanes = _clipping.uniform;
    }

    materialProperties.fog = fog; // store the light setup it was created for

    if (lightsHash === undefined) {
      materialProperties.lightsHash = lightsHash = {};
    }

    lightsHash.stateID = lightsStateHash.stateID;
    lightsHash.directionalLength = lightsStateHash.directionalLength;
    lightsHash.pointLength = lightsStateHash.pointLength;
    lightsHash.spotLength = lightsStateHash.spotLength;
    lightsHash.rectAreaLength = lightsStateHash.rectAreaLength;
    lightsHash.hemiLength = lightsStateHash.hemiLength;
    lightsHash.shadowsLength = lightsStateHash.shadowsLength;

    if (material.lights) {
      // wire up the material to this renderer's lighting state
      uniforms.ambientLightColor.value = lights.state.ambient;
      uniforms.directionalLights.value = lights.state.directional;
      uniforms.spotLights.value = lights.state.spot;
      uniforms.rectAreaLights.value = lights.state.rectArea;
      uniforms.pointLights.value = lights.state.point;
      uniforms.hemisphereLights.value = lights.state.hemi;
      uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
      uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
      uniforms.spotShadowMap.value = lights.state.spotShadowMap;
      uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
      uniforms.pointShadowMap.value = lights.state.pointShadowMap;
      uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix; // TODO (abelnation): add area lights shadow info to uniforms
    }

    var progUniforms = materialProperties.program.getUniforms(),
        uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);
    materialProperties.uniformsList = uniformsList;
  }

  function setProgram(camera, fog, material, object) {
    _usedTextureUnits = 0;
    var materialProperties = properties.get(material);
    var lights = currentRenderState.state.lights;
    var lightsHash = materialProperties.lightsHash;
    var lightsStateHash = lights.state.hash;

    if (_clippingEnabled) {
      if (_localClippingEnabled || camera !== _currentCamera) {
        var useCache = camera === _currentCamera && material.id === _currentMaterialId; // we might want to call this function with some ClippingGroup
        // object instead of the material, once it becomes feasible
        // (#8465, #8379)

        _clipping.setState(material.clippingPlanes, material.clipIntersection, material.clipShadows, camera, materialProperties, useCache);
      }
    }

    if (material.needsUpdate === false) {
      if (materialProperties.program === undefined) {
        material.needsUpdate = true;
      } else if (material.fog && materialProperties.fog !== fog) {
        material.needsUpdate = true;
      } else if (material.lights && (lightsHash.stateID !== lightsStateHash.stateID || lightsHash.directionalLength !== lightsStateHash.directionalLength || lightsHash.pointLength !== lightsStateHash.pointLength || lightsHash.spotLength !== lightsStateHash.spotLength || lightsHash.rectAreaLength !== lightsStateHash.rectAreaLength || lightsHash.hemiLength !== lightsStateHash.hemiLength || lightsHash.shadowsLength !== lightsStateHash.shadowsLength)) {
        material.needsUpdate = true;
      } else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== _clipping.numPlanes || materialProperties.numIntersection !== _clipping.numIntersection)) {
        material.needsUpdate = true;
      }
    }

    if (material.needsUpdate) {
      initMaterial(material, fog, object);
      material.needsUpdate = false;
    }

    var refreshProgram = false;
    var refreshMaterial = false;
    var refreshLights = false;
    var program = materialProperties.program,
        p_uniforms = program.getUniforms(),
        m_uniforms = materialProperties.shader.uniforms;

    if (state.useProgram(program.program)) {
      refreshProgram = true;
      refreshMaterial = true;
      refreshLights = true;
    }

    if (material.id !== _currentMaterialId) {
      _currentMaterialId = material.id;
      refreshMaterial = true;
    }

    if (refreshProgram || _currentCamera !== camera) {
      p_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);

      if (capabilities.logarithmicDepthBuffer) {
        p_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));
      }

      if (_currentCamera !== camera) {
        _currentCamera = camera; // lighting uniforms depend on the camera so enforce an update
        // now, in case this material supports lights - or later, when
        // the next material that does gets activated:

        refreshMaterial = true; // set to true on material change

        refreshLights = true; // remains set until update done
      } // load material specific uniforms
      // (shader material also gets them for the sake of genericity)


      if (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.envMap) {
        var uCamPos = p_uniforms.map.cameraPosition;

        if (uCamPos !== undefined) {
          uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));
        }
      }

      if (material.isMeshPhongMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.skinning) {
        p_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);
      }
    } // skinning uniforms must be set even if material didn't change
    // auto-setting of texture unit for bone texture must go before other textures
    // not sure why, but otherwise weird things happen


    if (material.skinning) {
      p_uniforms.setOptional(_gl, object, 'bindMatrix');
      p_uniforms.setOptional(_gl, object, 'bindMatrixInverse');
      var skeleton = object.skeleton;

      if (skeleton) {
        var bones = skeleton.bones;

        if (capabilities.floatVertexTextures) {
          if (skeleton.boneTexture === undefined) {
            // layout (1 matrix = 4 pixels)
            //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
            //  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
            //       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
            //       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
            //       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)
            var size = Math.sqrt(bones.length * 4); // 4 pixels needed for 1 matrix

            size = _Math.ceilPowerOfTwo(size);
            size = Math.max(size, 4);
            var boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel

            boneMatrices.set(skeleton.boneMatrices); // copy current values

            var boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);
            boneTexture.needsUpdate = true;
            skeleton.boneMatrices = boneMatrices;
            skeleton.boneTexture = boneTexture;
            skeleton.boneTextureSize = size;
          }

          p_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture);
          p_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);
        } else {
          p_uniforms.setOptional(_gl, skeleton, 'boneMatrices');
        }
      }
    }

    if (refreshMaterial) {
      p_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);
      p_uniforms.setValue(_gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint);

      if (material.lights) {
        // the current material requires lighting info
        // note: all lighting uniforms are always set correctly
        // they simply reference the renderer's state for their
        // values
        //
        // use the current material's .needsUpdate flags to set
        // the GL state when required
        markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);
      } // refresh uniforms common to several materials


      if (fog && material.fog) {
        refreshUniformsFog(m_uniforms, fog);
      }

      if (material.isMeshBasicMaterial) {
        refreshUniformsCommon(m_uniforms, material);
      } else if (material.isMeshLambertMaterial) {
        refreshUniformsCommon(m_uniforms, material);
        refreshUniformsLambert(m_uniforms, material);
      } else if (material.isMeshPhongMaterial) {
        refreshUniformsCommon(m_uniforms, material);

        if (material.isMeshToonMaterial) {
          refreshUniformsToon(m_uniforms, material);
        } else {
          refreshUniformsPhong(m_uniforms, material);
        }
      } else if (material.isMeshStandardMaterial) {
        refreshUniformsCommon(m_uniforms, material);

        if (material.isMeshPhysicalMaterial) {
          refreshUniformsPhysical(m_uniforms, material);
        } else {
          refreshUniformsStandard(m_uniforms, material);
        }
      } else if (material.isMeshMatcapMaterial) {
        refreshUniformsCommon(m_uniforms, material);
        refreshUniformsMatcap(m_uniforms, material);
      } else if (material.isMeshDepthMaterial) {
        refreshUniformsCommon(m_uniforms, material);
        refreshUniformsDepth(m_uniforms, material);
      } else if (material.isMeshDistanceMaterial) {
        refreshUniformsCommon(m_uniforms, material);
        refreshUniformsDistance(m_uniforms, material);
      } else if (material.isMeshNormalMaterial) {
        refreshUniformsCommon(m_uniforms, material);
        refreshUniformsNormal(m_uniforms, material);
      } else if (material.isLineBasicMaterial) {
        refreshUniformsLine(m_uniforms, material);

        if (material.isLineDashedMaterial) {
          refreshUniformsDash(m_uniforms, material);
        }
      } else if (material.isPointsMaterial) {
        refreshUniformsPoints(m_uniforms, material);
      } else if (material.isSpriteMaterial) {
        refreshUniformsSprites(m_uniforms, material);
      } else if (material.isShadowMaterial) {
        m_uniforms.color.value = material.color;
        m_uniforms.opacity.value = material.opacity;
      } // RectAreaLight Texture
      // TODO (mrdoob): Find a nicer implementation


      if (m_uniforms.ltc_1 !== undefined) m_uniforms.ltc_1.value = UniformsLib.LTC_1;
      if (m_uniforms.ltc_2 !== undefined) m_uniforms.ltc_2.value = UniformsLib.LTC_2;
      WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, _this);
    }

    if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {
      WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, _this);
      material.uniformsNeedUpdate = false;
    }

    if (material.isSpriteMaterial) {
      p_uniforms.setValue(_gl, 'center', object.center);
    } // common matrices


    p_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);
    p_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);
    p_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);
    return program;
  } // Uniforms (refresh uniforms objects)


  function refreshUniformsCommon(uniforms, material) {
    uniforms.opacity.value = material.opacity;

    if (material.color) {
      uniforms.diffuse.value = material.color;
    }

    if (material.emissive) {
      uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);
    }

    if (material.map) {
      uniforms.map.value = material.map;
    }

    if (material.alphaMap) {
      uniforms.alphaMap.value = material.alphaMap;
    }

    if (material.specularMap) {
      uniforms.specularMap.value = material.specularMap;
    }

    if (material.envMap) {
      uniforms.envMap.value = material.envMap; // don't flip CubeTexture envMaps, flip everything else:
      //  WebGLRenderTargetCube will be flipped for backwards compatibility
      //  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture
      // this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future

      uniforms.flipEnvMap.value = material.envMap.isCubeTexture ? -1 : 1;
      uniforms.reflectivity.value = material.reflectivity;
      uniforms.refractionRatio.value = material.refractionRatio;
      uniforms.maxMipLevel.value = properties.get(material.envMap).__maxMipLevel;
    }

    if (material.lightMap) {
      uniforms.lightMap.value = material.lightMap;
      uniforms.lightMapIntensity.value = material.lightMapIntensity;
    }

    if (material.aoMap) {
      uniforms.aoMap.value = material.aoMap;
      uniforms.aoMapIntensity.value = material.aoMapIntensity;
    } // uv repeat and offset setting priorities
    // 1. color map
    // 2. specular map
    // 3. normal map
    // 4. bump map
    // 5. alpha map
    // 6. emissive map


    var uvScaleMap;

    if (material.map) {
      uvScaleMap = material.map;
    } else if (material.specularMap) {
      uvScaleMap = material.specularMap;
    } else if (material.displacementMap) {
      uvScaleMap = material.displacementMap;
    } else if (material.normalMap) {
      uvScaleMap = material.normalMap;
    } else if (material.bumpMap) {
      uvScaleMap = material.bumpMap;
    } else if (material.roughnessMap) {
      uvScaleMap = material.roughnessMap;
    } else if (material.metalnessMap) {
      uvScaleMap = material.metalnessMap;
    } else if (material.alphaMap) {
      uvScaleMap = material.alphaMap;
    } else if (material.emissiveMap) {
      uvScaleMap = material.emissiveMap;
    }

    if (uvScaleMap !== undefined) {
      // backwards compatibility
      if (uvScaleMap.isWebGLRenderTarget) {
        uvScaleMap = uvScaleMap.texture;
      }

      if (uvScaleMap.matrixAutoUpdate === true) {
        uvScaleMap.updateMatrix();
      }

      uniforms.uvTransform.value.copy(uvScaleMap.matrix);
    }
  }

  function refreshUniformsLine(uniforms, material) {
    uniforms.diffuse.value = material.color;
    uniforms.opacity.value = material.opacity;
  }

  function refreshUniformsDash(uniforms, material) {
    uniforms.dashSize.value = material.dashSize;
    uniforms.totalSize.value = material.dashSize + material.gapSize;
    uniforms.scale.value = material.scale;
  }

  function refreshUniformsPoints(uniforms, material) {
    uniforms.diffuse.value = material.color;
    uniforms.opacity.value = material.opacity;
    uniforms.size.value = material.size * _pixelRatio;
    uniforms.scale.value = _height * 0.5;
    uniforms.map.value = material.map;

    if (material.map !== null) {
      if (material.map.matrixAutoUpdate === true) {
        material.map.updateMatrix();
      }

      uniforms.uvTransform.value.copy(material.map.matrix);
    }
  }

  function refreshUniformsSprites(uniforms, material) {
    uniforms.diffuse.value = material.color;
    uniforms.opacity.value = material.opacity;
    uniforms.rotation.value = material.rotation;
    uniforms.map.value = material.map;

    if (material.map !== null) {
      if (material.map.matrixAutoUpdate === true) {
        material.map.updateMatrix();
      }

      uniforms.uvTransform.value.copy(material.map.matrix);
    }
  }

  function refreshUniformsFog(uniforms, fog) {
    uniforms.fogColor.value = fog.color;

    if (fog.isFog) {
      uniforms.fogNear.value = fog.near;
      uniforms.fogFar.value = fog.far;
    } else if (fog.isFogExp2) {
      uniforms.fogDensity.value = fog.density;
    }
  }

  function refreshUniformsLambert(uniforms, material) {
    if (material.emissiveMap) {
      uniforms.emissiveMap.value = material.emissiveMap;
    }
  }

  function refreshUniformsPhong(uniforms, material) {
    uniforms.specular.value = material.specular;
    uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )

    if (material.emissiveMap) {
      uniforms.emissiveMap.value = material.emissiveMap;
    }

    if (material.bumpMap) {
      uniforms.bumpMap.value = material.bumpMap;
      uniforms.bumpScale.value = material.bumpScale;
      if (material.side === BackSide) uniforms.bumpScale.value *= -1;
    }

    if (material.normalMap) {
      uniforms.normalMap.value = material.normalMap;
      uniforms.normalScale.value.copy(material.normalScale);
      if (material.side === BackSide) uniforms.normalScale.value.negate();
    }

    if (material.displacementMap) {
      uniforms.displacementMap.value = material.displacementMap;
      uniforms.displacementScale.value = material.displacementScale;
      uniforms.displacementBias.value = material.displacementBias;
    }
  }

  function refreshUniformsToon(uniforms, material) {
    refreshUniformsPhong(uniforms, material);

    if (material.gradientMap) {
      uniforms.gradientMap.value = material.gradientMap;
    }
  }

  function refreshUniformsStandard(uniforms, material) {
    uniforms.roughness.value = material.roughness;
    uniforms.metalness.value = material.metalness;

    if (material.roughnessMap) {
      uniforms.roughnessMap.value = material.roughnessMap;
    }

    if (material.metalnessMap) {
      uniforms.metalnessMap.value = material.metalnessMap;
    }

    if (material.emissiveMap) {
      uniforms.emissiveMap.value = material.emissiveMap;
    }

    if (material.bumpMap) {
      uniforms.bumpMap.value = material.bumpMap;
      uniforms.bumpScale.value = material.bumpScale;
      if (material.side === BackSide) uniforms.bumpScale.value *= -1;
    }

    if (material.normalMap) {
      uniforms.normalMap.value = material.normalMap;
      uniforms.normalScale.value.copy(material.normalScale);
      if (material.side === BackSide) uniforms.normalScale.value.negate();
    }

    if (material.displacementMap) {
      uniforms.displacementMap.value = material.displacementMap;
      uniforms.displacementScale.value = material.displacementScale;
      uniforms.displacementBias.value = material.displacementBias;
    }

    if (material.envMap) {
      //uniforms.envMap.value = material.envMap; // part of uniforms common
      uniforms.envMapIntensity.value = material.envMapIntensity;
    }
  }

  function refreshUniformsPhysical(uniforms, material) {
    refreshUniformsStandard(uniforms, material);
    uniforms.reflectivity.value = material.reflectivity; // also part of uniforms common

    uniforms.clearCoat.value = material.clearCoat;
    uniforms.clearCoatRoughness.value = material.clearCoatRoughness;
  }

  function refreshUniformsMatcap(uniforms, material) {
    if (material.matcap) {
      uniforms.matcap.value = material.matcap;
    }

    if (material.bumpMap) {
      uniforms.bumpMap.value = material.bumpMap;
      uniforms.bumpScale.value = material.bumpScale;
      if (material.side === BackSide) uniforms.bumpScale.value *= -1;
    }

    if (material.normalMap) {
      uniforms.normalMap.value = material.normalMap;
      uniforms.normalScale.value.copy(material.normalScale);
      if (material.side === BackSide) uniforms.normalScale.value.negate();
    }

    if (material.displacementMap) {
      uniforms.displacementMap.value = material.displacementMap;
      uniforms.displacementScale.value = material.displacementScale;
      uniforms.displacementBias.value = material.displacementBias;
    }
  }

  function refreshUniformsDepth(uniforms, material) {
    if (material.displacementMap) {
      uniforms.displacementMap.value = material.displacementMap;
      uniforms.displacementScale.value = material.displacementScale;
      uniforms.displacementBias.value = material.displacementBias;
    }
  }

  function refreshUniformsDistance(uniforms, material) {
    if (material.displacementMap) {
      uniforms.displacementMap.value = material.displacementMap;
      uniforms.displacementScale.value = material.displacementScale;
      uniforms.displacementBias.value = material.displacementBias;
    }

    uniforms.referencePosition.value.copy(material.referencePosition);
    uniforms.nearDistance.value = material.nearDistance;
    uniforms.farDistance.value = material.farDistance;
  }

  function refreshUniformsNormal(uniforms, material) {
    if (material.bumpMap) {
      uniforms.bumpMap.value = material.bumpMap;
      uniforms.bumpScale.value = material.bumpScale;
      if (material.side === BackSide) uniforms.bumpScale.value *= -1;
    }

    if (material.normalMap) {
      uniforms.normalMap.value = material.normalMap;
      uniforms.normalScale.value.copy(material.normalScale);
      if (material.side === BackSide) uniforms.normalScale.value.negate();
    }

    if (material.displacementMap) {
      uniforms.displacementMap.value = material.displacementMap;
      uniforms.displacementScale.value = material.displacementScale;
      uniforms.displacementBias.value = material.displacementBias;
    }
  } // If uniforms are marked as clean, they don't need to be loaded to the GPU.


  function markUniformsLightsNeedsUpdate(uniforms, value) {
    uniforms.ambientLightColor.needsUpdate = value;
    uniforms.directionalLights.needsUpdate = value;
    uniforms.pointLights.needsUpdate = value;
    uniforms.spotLights.needsUpdate = value;
    uniforms.rectAreaLights.needsUpdate = value;
    uniforms.hemisphereLights.needsUpdate = value;
  } // Textures


  function allocTextureUnit() {
    var textureUnit = _usedTextureUnits;

    if (textureUnit >= capabilities.maxTextures) {
      console.warn('THREE.WebGLRenderer: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures);
    }

    _usedTextureUnits += 1;
    return textureUnit;
  }

  this.allocTextureUnit = allocTextureUnit; // this.setTexture2D = setTexture2D;

  this.setTexture2D = function () {
    var warned = false; // backwards compatibility: peel texture.texture

    return function setTexture2D(texture, slot) {
      if (texture && texture.isWebGLRenderTarget) {
        if (!warned) {
          console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.");
          warned = true;
        }

        texture = texture.texture;
      }

      textures.setTexture2D(texture, slot);
    };
  }();

  this.setTexture3D = function () {
    // backwards compatibility: peel texture.texture
    return function setTexture3D(texture, slot) {
      textures.setTexture3D(texture, slot);
    };
  }();

  this.setTexture = function () {
    var warned = false;
    return function setTexture(texture, slot) {
      if (!warned) {
        console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.");
        warned = true;
      }

      textures.setTexture2D(texture, slot);
    };
  }();

  this.setTextureCube = function () {
    var warned = false;
    return function setTextureCube(texture, slot) {
      // backwards compatibility: peel texture.texture
      if (texture && texture.isWebGLRenderTargetCube) {
        if (!warned) {
          console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.");
          warned = true;
        }

        texture = texture.texture;
      } // currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture
      // TODO: unify these code paths


      if (texture && texture.isCubeTexture || Array.isArray(texture.image) && texture.image.length === 6) {
        // CompressedTexture can have Array in image :/
        // this function alone should take care of cube textures
        textures.setTextureCube(texture, slot);
      } else {
        // assumed: texture property of THREE.WebGLRenderTargetCube
        textures.setTextureCubeDynamic(texture, slot);
      }
    };
  }(); //


  this.setFramebuffer = function (value) {
    _framebuffer = value;
  };

  this.getRenderTarget = function () {
    return _currentRenderTarget;
  };

  this.setRenderTarget = function (renderTarget, activeCubeFace, activeMipMapLevel) {
    _currentRenderTarget = renderTarget;

    if (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {
      textures.setupRenderTarget(renderTarget);
    }

    var framebuffer = _framebuffer;
    var isCube = false;

    if (renderTarget) {
      var __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;

      if (renderTarget.isWebGLRenderTargetCube) {
        framebuffer = __webglFramebuffer[activeCubeFace || 0];
        isCube = true;
      } else if (renderTarget.isWebGLMultisampleRenderTarget) {
        framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;
      } else {
        framebuffer = __webglFramebuffer;
      }

      _currentViewport.copy(renderTarget.viewport);

      _currentScissor.copy(renderTarget.scissor);

      _currentScissorTest = renderTarget.scissorTest;
    } else {
      _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio);

      _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio);

      _currentScissorTest = _scissorTest;
    }

    if (_currentFramebuffer !== framebuffer) {
      _gl.bindFramebuffer(36160, framebuffer);

      _currentFramebuffer = framebuffer;
    }

    state.viewport(_currentViewport);
    state.scissor(_currentScissor);
    state.setScissorTest(_currentScissorTest);

    if (isCube) {
      var textureProperties = properties.get(renderTarget.texture);

      _gl.framebufferTexture2D(36160, 36064, 34069 + activeCubeFace || 0, textureProperties.__webglTexture, activeMipMapLevel || 0);
    }
  };

  this.readRenderTargetPixels = function (renderTarget, x, y, width, height, buffer) {
    if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
      console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');
      return;
    }

    var framebuffer = properties.get(renderTarget).__webglFramebuffer;

    if (framebuffer) {
      var restore = false;

      if (framebuffer !== _currentFramebuffer) {
        _gl.bindFramebuffer(36160, framebuffer);

        restore = true;
      }

      try {
        var texture = renderTarget.texture;
        var textureFormat = texture.format;
        var textureType = texture.type;

        if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(35739)) {
          console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');
          return;
        }

        if (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(35738) && // IE11, Edge and Chrome Mac < 52 (#9513)
        !(textureType === FloatType && (capabilities.isWebGL2 || extensions.get('OES_texture_float') || extensions.get('WEBGL_color_buffer_float'))) && // Chrome Mac >= 52 and Firefox
        !(textureType === HalfFloatType && (capabilities.isWebGL2 ? extensions.get('EXT_color_buffer_float') : extensions.get('EXT_color_buffer_half_float')))) {
          console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');
          return;
        }

        if (_gl.checkFramebufferStatus(36160) === 36053) {
          // the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
          if (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {
            _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);
          }
        } else {
          console.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');
        }
      } finally {
        if (restore) {
          _gl.bindFramebuffer(36160, _currentFramebuffer);
        }
      }
    }
  };

  this.copyFramebufferToTexture = function (position, texture, level) {
    var width = texture.image.width;
    var height = texture.image.height;
    var glFormat = utils.convert(texture.format);
    this.setTexture2D(texture, 0);

    _gl.copyTexImage2D(3553, level || 0, glFormat, position.x, position.y, width, height, 0);
  };

  this.copyTextureToTexture = function (position, srcTexture, dstTexture, level) {
    var width = srcTexture.image.width;
    var height = srcTexture.image.height;
    var glFormat = utils.convert(dstTexture.format);
    var glType = utils.convert(dstTexture.type);
    this.setTexture2D(dstTexture, 0);

    if (srcTexture.isDataTexture) {
      _gl.texSubImage2D(3553, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);
    } else {
      _gl.texSubImage2D(3553, level || 0, position.x, position.y, glFormat, glType, srcTexture.image);
    }
  };
}
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */


function FogExp2(color, density) {
  this.name = '';
  this.color = new Color(color);
  this.density = density !== undefined ? density : 0.00025;
}

Object.assign(FogExp2.prototype, {
  isFogExp2: true,
  clone: function () {
    return new FogExp2(this.color, this.density);
  },
  toJSON: function ()
  /* meta */
  {
    return {
      type: 'FogExp2',
      color: this.color.getHex(),
      density: this.density
    };
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function Fog(color, near, far) {
  this.name = '';
  this.color = new Color(color);
  this.near = near !== undefined ? near : 1;
  this.far = far !== undefined ? far : 1000;
}

Object.assign(Fog.prototype, {
  isFog: true,
  clone: function () {
    return new Fog(this.color, this.near, this.far);
  },
  toJSON: function ()
  /* meta */
  {
    return {
      type: 'Fog',
      color: this.color.getHex(),
      near: this.near,
      far: this.far
    };
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 */

function Scene() {
  Object3D.call(this);
  this.type = 'Scene';
  this.background = null;
  this.fog = null;
  this.overrideMaterial = null;
  this.autoUpdate = true; // checked by the renderer
}

Scene.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Scene,
  isScene: true,
  copy: function (source, recursive) {
    Object3D.prototype.copy.call(this, source, recursive);
    if (source.background !== null) this.background = source.background.clone();
    if (source.fog !== null) this.fog = source.fog.clone();
    if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();
    this.autoUpdate = source.autoUpdate;
    this.matrixAutoUpdate = source.matrixAutoUpdate;
    return this;
  },
  toJSON: function (meta) {
    var data = Object3D.prototype.toJSON.call(this, meta);
    if (this.background !== null) data.object.background = this.background.toJSON(meta);
    if (this.fog !== null) data.object.fog = this.fog.toJSON();
    return data;
  },
  dispose: function () {
    this.dispatchEvent({
      type: 'dispose'
    });
  }
});
/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */

function InterleavedBuffer(array, stride) {
  this.array = array;
  this.stride = stride;
  this.count = array !== undefined ? array.length / stride : 0;
  this.dynamic = false;
  this.updateRange = {
    offset: 0,
    count: -1
  };
  this.version = 0;
}

Object.defineProperty(InterleavedBuffer.prototype, 'needsUpdate', {
  set: function (value) {
    if (value === true) this.version++;
  }
});
Object.assign(InterleavedBuffer.prototype, {
  isInterleavedBuffer: true,
  onUploadCallback: function () {},
  setArray: function (array) {
    if (Array.isArray(array)) {
      throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');
    }

    this.count = array !== undefined ? array.length / this.stride : 0;
    this.array = array;
    return this;
  },
  setDynamic: function (value) {
    this.dynamic = value;
    return this;
  },
  copy: function (source) {
    this.array = new source.array.constructor(source.array);
    this.count = source.count;
    this.stride = source.stride;
    this.dynamic = source.dynamic;
    return this;
  },
  copyAt: function (index1, attribute, index2) {
    index1 *= this.stride;
    index2 *= attribute.stride;

    for (var i = 0, l = this.stride; i < l; i++) {
      this.array[index1 + i] = attribute.array[index2 + i];
    }

    return this;
  },
  set: function (value, offset) {
    if (offset === undefined) offset = 0;
    this.array.set(value, offset);
    return this;
  },
  clone: function () {
    return new this.constructor().copy(this);
  },
  onUpload: function (callback) {
    this.onUploadCallback = callback;
    return this;
  }
});
/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */

function InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, normalized) {
  this.data = interleavedBuffer;
  this.itemSize = itemSize;
  this.offset = offset;
  this.normalized = normalized === true;
}

Object.defineProperties(InterleavedBufferAttribute.prototype, {
  count: {
    get: function () {
      return this.data.count;
    }
  },
  array: {
    get: function () {
      return this.data.array;
    }
  }
});
Object.assign(InterleavedBufferAttribute.prototype, {
  isInterleavedBufferAttribute: true,
  setX: function (index, x) {
    this.data.array[index * this.data.stride + this.offset] = x;
    return this;
  },
  setY: function (index, y) {
    this.data.array[index * this.data.stride + this.offset + 1] = y;
    return this;
  },
  setZ: function (index, z) {
    this.data.array[index * this.data.stride + this.offset + 2] = z;
    return this;
  },
  setW: function (index, w) {
    this.data.array[index * this.data.stride + this.offset + 3] = w;
    return this;
  },
  getX: function (index) {
    return this.data.array[index * this.data.stride + this.offset];
  },
  getY: function (index) {
    return this.data.array[index * this.data.stride + this.offset + 1];
  },
  getZ: function (index) {
    return this.data.array[index * this.data.stride + this.offset + 2];
  },
  getW: function (index) {
    return this.data.array[index * this.data.stride + this.offset + 3];
  },
  setXY: function (index, x, y) {
    index = index * this.data.stride + this.offset;
    this.data.array[index + 0] = x;
    this.data.array[index + 1] = y;
    return this;
  },
  setXYZ: function (index, x, y, z) {
    index = index * this.data.stride + this.offset;
    this.data.array[index + 0] = x;
    this.data.array[index + 1] = y;
    this.data.array[index + 2] = z;
    return this;
  },
  setXYZW: function (index, x, y, z, w) {
    index = index * this.data.stride + this.offset;
    this.data.array[index + 0] = x;
    this.data.array[index + 1] = y;
    this.data.array[index + 2] = z;
    this.data.array[index + 3] = w;
    return this;
  }
});
/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  map: new THREE.Texture( <Image> ),
 *  rotation: <float>,
 *  sizeAttenuation: <bool>
 * }
 */

function SpriteMaterial(parameters) {
  Material.call(this);
  this.type = 'SpriteMaterial';
  this.color = new Color(0xffffff);
  this.map = null;
  this.rotation = 0;
  this.sizeAttenuation = true;
  this.lights = false;
  this.transparent = true;
  this.setValues(parameters);
}

SpriteMaterial.prototype = Object.create(Material.prototype);
SpriteMaterial.prototype.constructor = SpriteMaterial;
SpriteMaterial.prototype.isSpriteMaterial = true;

SpriteMaterial.prototype.copy = function (source) {
  Material.prototype.copy.call(this, source);
  this.color.copy(source.color);
  this.map = source.map;
  this.rotation = source.rotation;
  this.sizeAttenuation = source.sizeAttenuation;
  return this;
};
/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */


var geometry;

function Sprite(material) {
  Object3D.call(this);
  this.type = 'Sprite';

  if (geometry === undefined) {
    geometry = new BufferGeometry();
    var float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);
    var interleavedBuffer = new InterleavedBuffer(float32Array, 5);
    geometry.setIndex([0, 1, 2, 0, 2, 3]);
    geometry.addAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));
    geometry.addAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));
  }

  this.geometry = geometry;
  this.material = material !== undefined ? material : new SpriteMaterial();
  this.center = new Vector2(0.5, 0.5);
}

Sprite.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Sprite,
  isSprite: true,
  raycast: function () {
    var intersectPoint = new Vector3();
    var worldScale = new Vector3();
    var mvPosition = new Vector3();
    var alignedPosition = new Vector2();
    var rotatedPosition = new Vector2();
    var viewWorldMatrix = new Matrix4();
    var vA = new Vector3();
    var vB = new Vector3();
    var vC = new Vector3();
    var uvA = new Vector2();
    var uvB = new Vector2();
    var uvC = new Vector2();

    function transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {
      // compute position in camera space
      alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale); // to check if rotation is not zero

      if (sin !== undefined) {
        rotatedPosition.x = cos * alignedPosition.x - sin * alignedPosition.y;
        rotatedPosition.y = sin * alignedPosition.x + cos * alignedPosition.y;
      } else {
        rotatedPosition.copy(alignedPosition);
      }

      vertexPosition.copy(mvPosition);
      vertexPosition.x += rotatedPosition.x;
      vertexPosition.y += rotatedPosition.y; // transform to world space

      vertexPosition.applyMatrix4(viewWorldMatrix);
    }

    return function raycast(raycaster, intersects) {
      worldScale.setFromMatrixScale(this.matrixWorld);
      viewWorldMatrix.getInverse(this.modelViewMatrix).premultiply(this.matrixWorld);
      mvPosition.setFromMatrixPosition(this.modelViewMatrix);
      var rotation = this.material.rotation;
      var sin, cos;

      if (rotation !== 0) {
        cos = Math.cos(rotation);
        sin = Math.sin(rotation);
      }

      var center = this.center;
      transformVertex(vA.set(-0.5, -0.5, 0), mvPosition, center, worldScale, sin, cos);
      transformVertex(vB.set(0.5, -0.5, 0), mvPosition, center, worldScale, sin, cos);
      transformVertex(vC.set(0.5, 0.5, 0), mvPosition, center, worldScale, sin, cos);
      uvA.set(0, 0);
      uvB.set(1, 0);
      uvC.set(1, 1); // check first triangle

      var intersect = raycaster.ray.intersectTriangle(vA, vB, vC, false, intersectPoint);

      if (intersect === null) {
        // check second triangle
        transformVertex(vB.set(-0.5, 0.5, 0), mvPosition, center, worldScale, sin, cos);
        uvB.set(0, 1);
        intersect = raycaster.ray.intersectTriangle(vA, vC, vB, false, intersectPoint);

        if (intersect === null) {
          return;
        }
      }

      var distance = raycaster.ray.origin.distanceTo(intersectPoint);
      if (distance < raycaster.near || distance > raycaster.far) return;
      intersects.push({
        distance: distance,
        point: intersectPoint.clone(),
        uv: Triangle.getUV(intersectPoint, vA, vB, vC, uvA, uvB, uvC, new Vector2()),
        face: null,
        object: this
      });
    };
  }(),
  clone: function () {
    return new this.constructor(this.material).copy(this);
  },
  copy: function (source) {
    Object3D.prototype.copy.call(this, source);
    if (source.center !== undefined) this.center.copy(source.center);
    return this;
  }
});
/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

function LOD() {
  Object3D.call(this);
  this.type = 'LOD';
  Object.defineProperties(this, {
    levels: {
      enumerable: true,
      value: []
    }
  });
}

LOD.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: LOD,
  copy: function (source) {
    Object3D.prototype.copy.call(this, source, false);
    var levels = source.levels;

    for (var i = 0, l = levels.length; i < l; i++) {
      var level = levels[i];
      this.addLevel(level.object.clone(), level.distance);
    }

    return this;
  },
  addLevel: function (object, distance) {
    if (distance === undefined) distance = 0;
    distance = Math.abs(distance);
    var levels = this.levels;

    for (var l = 0; l < levels.length; l++) {
      if (distance < levels[l].distance) {
        break;
      }
    }

    levels.splice(l, 0, {
      distance: distance,
      object: object
    });
    this.add(object);
  },
  getObjectForDistance: function (distance) {
    var levels = this.levels;

    for (var i = 1, l = levels.length; i < l; i++) {
      if (distance < levels[i].distance) {
        break;
      }
    }

    return levels[i - 1].object;
  },
  raycast: function () {
    var matrixPosition = new Vector3();
    return function raycast(raycaster, intersects) {
      matrixPosition.setFromMatrixPosition(this.matrixWorld);
      var distance = raycaster.ray.origin.distanceTo(matrixPosition);
      this.getObjectForDistance(distance).raycast(raycaster, intersects);
    };
  }(),
  update: function () {
    var v1 = new Vector3();
    var v2 = new Vector3();
    return function update(camera) {
      var levels = this.levels;

      if (levels.length > 1) {
        v1.setFromMatrixPosition(camera.matrixWorld);
        v2.setFromMatrixPosition(this.matrixWorld);
        var distance = v1.distanceTo(v2);
        levels[0].object.visible = true;

        for (var i = 1, l = levels.length; i < l; i++) {
          if (distance >= levels[i].distance) {
            levels[i - 1].object.visible = false;
            levels[i].object.visible = true;
          } else {
            break;
          }
        }

        for (; i < l; i++) {
          levels[i].object.visible = false;
        }
      }
    };
  }(),
  toJSON: function (meta) {
    var data = Object3D.prototype.toJSON.call(this, meta);
    data.object.levels = [];
    var levels = this.levels;

    for (var i = 0, l = levels.length; i < l; i++) {
      var level = levels[i];
      data.object.levels.push({
        object: level.object.uuid,
        distance: level.distance
      });
    }

    return data;
  }
});
/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author ikerr / http://verold.com
 */

function SkinnedMesh(geometry, material) {
  if (geometry && geometry.isGeometry) {
    console.error('THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
  }

  Mesh.call(this, geometry, material);
  this.type = 'SkinnedMesh';
  this.bindMode = 'attached';
  this.bindMatrix = new Matrix4();
  this.bindMatrixInverse = new Matrix4();
}

SkinnedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {
  constructor: SkinnedMesh,
  isSkinnedMesh: true,
  bind: function (skeleton, bindMatrix) {
    this.skeleton = skeleton;

    if (bindMatrix === undefined) {
      this.updateMatrixWorld(true);
      this.skeleton.calculateInverses();
      bindMatrix = this.matrixWorld;
    }

    this.bindMatrix.copy(bindMatrix);
    this.bindMatrixInverse.getInverse(bindMatrix);
  },
  pose: function () {
    this.skeleton.pose();
  },
  normalizeSkinWeights: function () {
    var vector = new Vector4();
    var skinWeight = this.geometry.attributes.skinWeight;

    for (var i = 0, l = skinWeight.count; i < l; i++) {
      vector.x = skinWeight.getX(i);
      vector.y = skinWeight.getY(i);
      vector.z = skinWeight.getZ(i);
      vector.w = skinWeight.getW(i);
      var scale = 1.0 / vector.manhattanLength();

      if (scale !== Infinity) {
        vector.multiplyScalar(scale);
      } else {
        vector.set(1, 0, 0, 0); // do something reasonable
      }

      skinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);
    }
  },
  updateMatrixWorld: function (force) {
    Mesh.prototype.updateMatrixWorld.call(this, force);

    if (this.bindMode === 'attached') {
      this.bindMatrixInverse.getInverse(this.matrixWorld);
    } else if (this.bindMode === 'detached') {
      this.bindMatrixInverse.getInverse(this.bindMatrix);
    } else {
      console.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);
    }
  },
  clone: function () {
    return new this.constructor(this.geometry, this.material).copy(this);
  }
});
/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author michael guerrero / http://realitymeltdown.com
 * @author ikerr / http://verold.com
 */

function Skeleton(bones, boneInverses) {
  // copy the bone array
  bones = bones || [];
  this.bones = bones.slice(0);
  this.boneMatrices = new Float32Array(this.bones.length * 16); // use the supplied bone inverses or calculate the inverses

  if (boneInverses === undefined) {
    this.calculateInverses();
  } else {
    if (this.bones.length === boneInverses.length) {
      this.boneInverses = boneInverses.slice(0);
    } else {
      console.warn('THREE.Skeleton boneInverses is the wrong length.');
      this.boneInverses = [];

      for (var i = 0, il = this.bones.length; i < il; i++) {
        this.boneInverses.push(new Matrix4());
      }
    }
  }
}

Object.assign(Skeleton.prototype, {
  calculateInverses: function () {
    this.boneInverses = [];

    for (var i = 0, il = this.bones.length; i < il; i++) {
      var inverse = new Matrix4();

      if (this.bones[i]) {
        inverse.getInverse(this.bones[i].matrixWorld);
      }

      this.boneInverses.push(inverse);
    }
  },
  pose: function () {
    var bone, i, il; // recover the bind-time world matrices

    for (i = 0, il = this.bones.length; i < il; i++) {
      bone = this.bones[i];

      if (bone) {
        bone.matrixWorld.getInverse(this.boneInverses[i]);
      }
    } // compute the local matrices, positions, rotations and scales


    for (i = 0, il = this.bones.length; i < il; i++) {
      bone = this.bones[i];

      if (bone) {
        if (bone.parent && bone.parent.isBone) {
          bone.matrix.getInverse(bone.parent.matrixWorld);
          bone.matrix.multiply(bone.matrixWorld);
        } else {
          bone.matrix.copy(bone.matrixWorld);
        }

        bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);
      }
    }
  },
  update: function () {
    var offsetMatrix = new Matrix4();
    var identityMatrix = new Matrix4();
    return function update() {
      var bones = this.bones;
      var boneInverses = this.boneInverses;
      var boneMatrices = this.boneMatrices;
      var boneTexture = this.boneTexture; // flatten bone matrices to array

      for (var i = 0, il = bones.length; i < il; i++) {
        // compute the offset between the current and the original transform
        var matrix = bones[i] ? bones[i].matrixWorld : identityMatrix;
        offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);
        offsetMatrix.toArray(boneMatrices, i * 16);
      }

      if (boneTexture !== undefined) {
        boneTexture.needsUpdate = true;
      }
    };
  }(),
  clone: function () {
    return new Skeleton(this.bones, this.boneInverses);
  },
  getBoneByName: function (name) {
    for (var i = 0, il = this.bones.length; i < il; i++) {
      var bone = this.bones[i];

      if (bone.name === name) {
        return bone;
      }
    }

    return undefined;
  }
});
/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author ikerr / http://verold.com
 */

function Bone() {
  Object3D.call(this);
  this.type = 'Bone';
}

Bone.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Bone,
  isBone: true
});
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  linewidth: <float>,
 *  linecap: "round",
 *  linejoin: "round"
 * }
 */

function LineBasicMaterial(parameters) {
  Material.call(this);
  this.type = 'LineBasicMaterial';
  this.color = new Color(0xffffff);
  this.linewidth = 1;
  this.linecap = 'round';
  this.linejoin = 'round';
  this.lights = false;
  this.setValues(parameters);
}

LineBasicMaterial.prototype = Object.create(Material.prototype);
LineBasicMaterial.prototype.constructor = LineBasicMaterial;
LineBasicMaterial.prototype.isLineBasicMaterial = true;

LineBasicMaterial.prototype.copy = function (source) {
  Material.prototype.copy.call(this, source);
  this.color.copy(source.color);
  this.linewidth = source.linewidth;
  this.linecap = source.linecap;
  this.linejoin = source.linejoin;
  return this;
};
/**
 * @author mrdoob / http://mrdoob.com/
 */


function Line(geometry, material, mode) {
  if (mode === 1) {
    console.error('THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.');
  }

  Object3D.call(this);
  this.type = 'Line';
  this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
  this.material = material !== undefined ? material : new LineBasicMaterial({
    color: Math.random() * 0xffffff
  });
}

Line.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Line,
  isLine: true,
  computeLineDistances: function () {
    var start = new Vector3();
    var end = new Vector3();
    return function computeLineDistances() {
      var geometry = this.geometry;

      if (geometry.isBufferGeometry) {
        // we assume non-indexed geometry
        if (geometry.index === null) {
          var positionAttribute = geometry.attributes.position;
          var lineDistances = [0];

          for (var i = 1, l = positionAttribute.count; i < l; i++) {
            start.fromBufferAttribute(positionAttribute, i - 1);
            end.fromBufferAttribute(positionAttribute, i);
            lineDistances[i] = lineDistances[i - 1];
            lineDistances[i] += start.distanceTo(end);
          }

          geometry.addAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));
        } else {
          console.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');
        }
      } else if (geometry.isGeometry) {
        var vertices = geometry.vertices;
        var lineDistances = geometry.lineDistances;
        lineDistances[0] = 0;

        for (var i = 1, l = vertices.length; i < l; i++) {
          lineDistances[i] = lineDistances[i - 1];
          lineDistances[i] += vertices[i - 1].distanceTo(vertices[i]);
        }
      }

      return this;
    };
  }(),
  raycast: function () {
    var inverseMatrix = new Matrix4();
    var ray = new Ray();
    var sphere = new Sphere();
    return function raycast(raycaster, intersects) {
      var precision = raycaster.linePrecision;
      var geometry = this.geometry;
      var matrixWorld = this.matrixWorld; // Checking boundingSphere distance to ray

      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
      sphere.copy(geometry.boundingSphere);
      sphere.applyMatrix4(matrixWorld);
      sphere.radius += precision;
      if (raycaster.ray.intersectsSphere(sphere) === false) return; //

      inverseMatrix.getInverse(matrixWorld);
      ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);
      var localPrecision = precision / ((this.scale.x + this.scale.y + this.scale.z) / 3);
      var localPrecisionSq = localPrecision * localPrecision;
      var vStart = new Vector3();
      var vEnd = new Vector3();
      var interSegment = new Vector3();
      var interRay = new Vector3();
      var step = this && this.isLineSegments ? 2 : 1;

      if (geometry.isBufferGeometry) {
        var index = geometry.index;
        var attributes = geometry.attributes;
        var positions = attributes.position.array;

        if (index !== null) {
          var indices = index.array;

          for (var i = 0, l = indices.length - 1; i < l; i += step) {
            var a = indices[i];
            var b = indices[i + 1];
            vStart.fromArray(positions, a * 3);
            vEnd.fromArray(positions, b * 3);
            var distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
            if (distSq > localPrecisionSq) continue;
            interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation

            var distance = raycaster.ray.origin.distanceTo(interRay);
            if (distance < raycaster.near || distance > raycaster.far) continue;
            intersects.push({
              distance: distance,
              // What do we want? intersection point on the ray or on the segment??
              // point: raycaster.ray.at( distance ),
              point: interSegment.clone().applyMatrix4(this.matrixWorld),
              index: i,
              face: null,
              faceIndex: null,
              object: this
            });
          }
        } else {
          for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {
            vStart.fromArray(positions, 3 * i);
            vEnd.fromArray(positions, 3 * i + 3);
            var distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
            if (distSq > localPrecisionSq) continue;
            interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation

            var distance = raycaster.ray.origin.distanceTo(interRay);
            if (distance < raycaster.near || distance > raycaster.far) continue;
            intersects.push({
              distance: distance,
              // What do we want? intersection point on the ray or on the segment??
              // point: raycaster.ray.at( distance ),
              point: interSegment.clone().applyMatrix4(this.matrixWorld),
              index: i,
              face: null,
              faceIndex: null,
              object: this
            });
          }
        }
      } else if (geometry.isGeometry) {
        var vertices = geometry.vertices;
        var nbVertices = vertices.length;

        for (var i = 0; i < nbVertices - 1; i += step) {
          var distSq = ray.distanceSqToSegment(vertices[i], vertices[i + 1], interRay, interSegment);
          if (distSq > localPrecisionSq) continue;
          interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation

          var distance = raycaster.ray.origin.distanceTo(interRay);
          if (distance < raycaster.near || distance > raycaster.far) continue;
          intersects.push({
            distance: distance,
            // What do we want? intersection point on the ray or on the segment??
            // point: raycaster.ray.at( distance ),
            point: interSegment.clone().applyMatrix4(this.matrixWorld),
            index: i,
            face: null,
            faceIndex: null,
            object: this
          });
        }
      }
    };
  }(),
  copy: function (source) {
    Object3D.prototype.copy.call(this, source);
    this.geometry.copy(source.geometry);
    this.material.copy(source.material);
    return this;
  },
  clone: function () {
    return new this.constructor().copy(this);
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 */

function LineSegments(geometry, material) {
  Line.call(this, geometry, material);
  this.type = 'LineSegments';
}

LineSegments.prototype = Object.assign(Object.create(Line.prototype), {
  constructor: LineSegments,
  isLineSegments: true,
  computeLineDistances: function () {
    var start = new Vector3();
    var end = new Vector3();
    return function computeLineDistances() {
      var geometry = this.geometry;

      if (geometry.isBufferGeometry) {
        // we assume non-indexed geometry
        if (geometry.index === null) {
          var positionAttribute = geometry.attributes.position;
          var lineDistances = [];

          for (var i = 0, l = positionAttribute.count; i < l; i += 2) {
            start.fromBufferAttribute(positionAttribute, i);
            end.fromBufferAttribute(positionAttribute, i + 1);
            lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];
            lineDistances[i + 1] = lineDistances[i] + start.distanceTo(end);
          }

          geometry.addAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));
        } else {
          console.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');
        }
      } else if (geometry.isGeometry) {
        var vertices = geometry.vertices;
        var lineDistances = geometry.lineDistances;

        for (var i = 0, l = vertices.length; i < l; i += 2) {
          start.copy(vertices[i]);
          end.copy(vertices[i + 1]);
          lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];
          lineDistances[i + 1] = lineDistances[i] + start.distanceTo(end);
        }
      }

      return this;
    };
  }()
});
/**
 * @author mgreter / http://github.com/mgreter
 */

function LineLoop(geometry, material) {
  Line.call(this, geometry, material);
  this.type = 'LineLoop';
}

LineLoop.prototype = Object.assign(Object.create(Line.prototype), {
  constructor: LineLoop,
  isLineLoop: true
});
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  size: <float>,
 *  sizeAttenuation: <bool>
 *
 *  morphTargets: <bool>
 * }
 */

function PointsMaterial(parameters) {
  Material.call(this);
  this.type = 'PointsMaterial';
  this.color = new Color(0xffffff);
  this.map = null;
  this.size = 1;
  this.sizeAttenuation = true;
  this.morphTargets = false;
  this.lights = false;
  this.setValues(parameters);
}

PointsMaterial.prototype = Object.create(Material.prototype);
PointsMaterial.prototype.constructor = PointsMaterial;
PointsMaterial.prototype.isPointsMaterial = true;

PointsMaterial.prototype.copy = function (source) {
  Material.prototype.copy.call(this, source);
  this.color.copy(source.color);
  this.map = source.map;
  this.size = source.size;
  this.sizeAttenuation = source.sizeAttenuation;
  this.morphTargets = source.morphTargets;
  return this;
};
/**
 * @author alteredq / http://alteredqualia.com/
 */


function Points(geometry, material) {
  Object3D.call(this);
  this.type = 'Points';
  this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
  this.material = material !== undefined ? material : new PointsMaterial({
    color: Math.random() * 0xffffff
  });
}

Points.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Points,
  isPoints: true,
  raycast: function () {
    var inverseMatrix = new Matrix4();
    var ray = new Ray();
    var sphere = new Sphere();
    return function raycast(raycaster, intersects) {
      var object = this;
      var geometry = this.geometry;
      var matrixWorld = this.matrixWorld;
      var threshold = raycaster.params.Points.threshold; // Checking boundingSphere distance to ray

      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
      sphere.copy(geometry.boundingSphere);
      sphere.applyMatrix4(matrixWorld);
      sphere.radius += threshold;
      if (raycaster.ray.intersectsSphere(sphere) === false) return; //

      inverseMatrix.getInverse(matrixWorld);
      ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);
      var localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
      var localThresholdSq = localThreshold * localThreshold;
      var position = new Vector3();
      var intersectPoint = new Vector3();

      function testPoint(point, index) {
        var rayPointDistanceSq = ray.distanceSqToPoint(point);

        if (rayPointDistanceSq < localThresholdSq) {
          ray.closestPointToPoint(point, intersectPoint);
          intersectPoint.applyMatrix4(matrixWorld);
          var distance = raycaster.ray.origin.distanceTo(intersectPoint);
          if (distance < raycaster.near || distance > raycaster.far) return;
          intersects.push({
            distance: distance,
            distanceToRay: Math.sqrt(rayPointDistanceSq),
            point: intersectPoint.clone(),
            index: index,
            face: null,
            object: object
          });
        }
      }

      if (geometry.isBufferGeometry) {
        var index = geometry.index;
        var attributes = geometry.attributes;
        var positions = attributes.position.array;

        if (index !== null) {
          var indices = index.array;

          for (var i = 0, il = indices.length; i < il; i++) {
            var a = indices[i];
            position.fromArray(positions, a * 3);
            testPoint(position, a);
          }
        } else {
          for (var i = 0, l = positions.length / 3; i < l; i++) {
            position.fromArray(positions, i * 3);
            testPoint(position, i);
          }
        }
      } else {
        var vertices = geometry.vertices;

        for (var i = 0, l = vertices.length; i < l; i++) {
          testPoint(vertices[i], i);
        }
      }
    };
  }(),
  clone: function () {
    return new this.constructor(this.geometry, this.material).copy(this);
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 */

function VideoTexture(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
  Texture.call(this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
  this.format = format !== undefined ? format : RGBFormat;
  this.minFilter = minFilter !== undefined ? minFilter : LinearFilter;
  this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
  this.generateMipmaps = false;
}

VideoTexture.prototype = Object.assign(Object.create(Texture.prototype), {
  constructor: VideoTexture,
  isVideoTexture: true,
  update: function () {
    var video = this.image;

    if (video.readyState >= video.HAVE_CURRENT_DATA) {
      this.needsUpdate = true;
    }
  }
});
/**
 * @author alteredq / http://alteredqualia.com/
 */

function CompressedTexture(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {
  Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
  this.image = {
    width: width,
    height: height
  };
  this.mipmaps = mipmaps; // no flipping for cube textures
  // (also flipping doesn't work for compressed textures )

  this.flipY = false; // can't generate mipmaps for compressed textures
  // mips must be embedded in DDS files

  this.generateMipmaps = false;
}

CompressedTexture.prototype = Object.create(Texture.prototype);
CompressedTexture.prototype.constructor = CompressedTexture;
CompressedTexture.prototype.isCompressedTexture = true;
/**
 * @author mrdoob / http://mrdoob.com/
 */

function CanvasTexture(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
  Texture.call(this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
  this.needsUpdate = true;
}

CanvasTexture.prototype = Object.create(Texture.prototype);
CanvasTexture.prototype.constructor = CanvasTexture;
CanvasTexture.prototype.isCanvasTexture = true;
/**
 * @author Matt DesLauriers / @mattdesl
 * @author atix / arthursilber.de
 */

function DepthTexture(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {
  format = format !== undefined ? format : DepthFormat;

  if (format !== DepthFormat && format !== DepthStencilFormat) {
    throw new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');
  }

  if (type === undefined && format === DepthFormat) type = UnsignedShortType;
  if (type === undefined && format === DepthStencilFormat) type = UnsignedInt248Type;
  Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
  this.image = {
    width: width,
    height: height
  };
  this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
  this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;
  this.flipY = false;
  this.generateMipmaps = false;
}

DepthTexture.prototype = Object.create(Texture.prototype);
DepthTexture.prototype.constructor = DepthTexture;
DepthTexture.prototype.isDepthTexture = true;
/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */

function WireframeGeometry(geometry) {
  BufferGeometry.call(this);
  this.type = 'WireframeGeometry'; // buffer

  var vertices = []; // helper variables

  var i, j, l, o, ol;
  var edge = [0, 0],
      edges = {},
      e,
      edge1,
      edge2;
  var key,
      keys = ['a', 'b', 'c'];
  var vertex; // different logic for Geometry and BufferGeometry

  if (geometry && geometry.isGeometry) {
    // create a data structure that contains all edges without duplicates
    var faces = geometry.faces;

    for (i = 0, l = faces.length; i < l; i++) {
      var face = faces[i];

      for (j = 0; j < 3; j++) {
        edge1 = face[keys[j]];
        edge2 = face[keys[(j + 1) % 3]];
        edge[0] = Math.min(edge1, edge2); // sorting prevents duplicates

        edge[1] = Math.max(edge1, edge2);
        key = edge[0] + ',' + edge[1];

        if (edges[key] === undefined) {
          edges[key] = {
            index1: edge[0],
            index2: edge[1]
          };
        }
      }
    } // generate vertices


    for (key in edges) {
      e = edges[key];
      vertex = geometry.vertices[e.index1];
      vertices.push(vertex.x, vertex.y, vertex.z);
      vertex = geometry.vertices[e.index2];
      vertices.push(vertex.x, vertex.y, vertex.z);
    }
  } else if (geometry && geometry.isBufferGeometry) {
    var position, indices, groups;
    var group, start, count;
    var index1, index2;
    vertex = new Vector3();

    if (geometry.index !== null) {
      // indexed BufferGeometry
      position = geometry.attributes.position;
      indices = geometry.index;
      groups = geometry.groups;

      if (groups.length === 0) {
        groups = [{
          start: 0,
          count: indices.count,
          materialIndex: 0
        }];
      } // create a data structure that contains all eges without duplicates


      for (o = 0, ol = groups.length; o < ol; ++o) {
        group = groups[o];
        start = group.start;
        count = group.count;

        for (i = start, l = start + count; i < l; i += 3) {
          for (j = 0; j < 3; j++) {
            edge1 = indices.getX(i + j);
            edge2 = indices.getX(i + (j + 1) % 3);
            edge[0] = Math.min(edge1, edge2); // sorting prevents duplicates

            edge[1] = Math.max(edge1, edge2);
            key = edge[0] + ',' + edge[1];

            if (edges[key] === undefined) {
              edges[key] = {
                index1: edge[0],
                index2: edge[1]
              };
            }
          }
        }
      } // generate vertices


      for (key in edges) {
        e = edges[key];
        vertex.fromBufferAttribute(position, e.index1);
        vertices.push(vertex.x, vertex.y, vertex.z);
        vertex.fromBufferAttribute(position, e.index2);
        vertices.push(vertex.x, vertex.y, vertex.z);
      }
    } else {
      // non-indexed BufferGeometry
      position = geometry.attributes.position;

      for (i = 0, l = position.count / 3; i < l; i++) {
        for (j = 0; j < 3; j++) {
          // three edges per triangle, an edge is represented as (index1, index2)
          // e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)
          index1 = 3 * i + j;
          vertex.fromBufferAttribute(position, index1);
          vertices.push(vertex.x, vertex.y, vertex.z);
          index2 = 3 * i + (j + 1) % 3;
          vertex.fromBufferAttribute(position, index2);
          vertices.push(vertex.x, vertex.y, vertex.z);
        }
      }
    }
  } // build geometry


  this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
}

WireframeGeometry.prototype = Object.create(BufferGeometry.prototype);
WireframeGeometry.prototype.constructor = WireframeGeometry;
/**
 * @author zz85 / https://github.com/zz85
 * @author Mugen87 / https://github.com/Mugen87
 *
 * Parametric Surfaces Geometry
 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
 */
// ParametricGeometry

function ParametricGeometry(func, slices, stacks) {
  Geometry.call(this);
  this.type = 'ParametricGeometry';
  this.parameters = {
    func: func,
    slices: slices,
    stacks: stacks
  };
  this.fromBufferGeometry(new ParametricBufferGeometry(func, slices, stacks));
  this.mergeVertices();
}

ParametricGeometry.prototype = Object.create(Geometry.prototype);
ParametricGeometry.prototype.constructor = ParametricGeometry; // ParametricBufferGeometry

function ParametricBufferGeometry(func, slices, stacks) {
  BufferGeometry.call(this);
  this.type = 'ParametricBufferGeometry';
  this.parameters = {
    func: func,
    slices: slices,
    stacks: stacks
  }; // buffers

  var indices = [];
  var vertices = [];
  var normals = [];
  var uvs = [];
  var EPS = 0.00001;
  var normal = new Vector3();
  var p0 = new Vector3(),
      p1 = new Vector3();
  var pu = new Vector3(),
      pv = new Vector3();
  var i, j;

  if (func.length < 3) {
    console.error('THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.');
  } // generate vertices, normals and uvs


  var sliceCount = slices + 1;

  for (i = 0; i <= stacks; i++) {
    var v = i / stacks;

    for (j = 0; j <= slices; j++) {
      var u = j / slices; // vertex

      func(u, v, p0);
      vertices.push(p0.x, p0.y, p0.z); // normal
      // approximate tangent vectors via finite differences

      if (u - EPS >= 0) {
        func(u - EPS, v, p1);
        pu.subVectors(p0, p1);
      } else {
        func(u + EPS, v, p1);
        pu.subVectors(p1, p0);
      }

      if (v - EPS >= 0) {
        func(u, v - EPS, p1);
        pv.subVectors(p0, p1);
      } else {
        func(u, v + EPS, p1);
        pv.subVectors(p1, p0);
      } // cross product of tangent vectors returns surface normal


      normal.crossVectors(pu, pv).normalize();
      normals.push(normal.x, normal.y, normal.z); // uv

      uvs.push(u, v);
    }
  } // generate indices


  for (i = 0; i < stacks; i++) {
    for (j = 0; j < slices; j++) {
      var a = i * sliceCount + j;
      var b = i * sliceCount + j + 1;
      var c = (i + 1) * sliceCount + j + 1;
      var d = (i + 1) * sliceCount + j; // faces one and two

      indices.push(a, b, d);
      indices.push(b, c, d);
    }
  } // build geometry


  this.setIndex(indices);
  this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
  this.addAttribute('normal', new Float32BufferAttribute(normals, 3));
  this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));
}

ParametricBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;
/**
 * @author clockworkgeek / https://github.com/clockworkgeek
 * @author timothypratley / https://github.com/timothypratley
 * @author WestLangley / http://github.com/WestLangley
 * @author Mugen87 / https://github.com/Mugen87
 */
// PolyhedronGeometry

function PolyhedronGeometry(vertices, indices, radius, detail) {
  Geometry.call(this);
  this.type = 'PolyhedronGeometry';
  this.parameters = {
    vertices: vertices,
    indices: indices,
    radius: radius,
    detail: detail
  };
  this.fromBufferGeometry(new PolyhedronBufferGeometry(vertices, indices, radius, detail));
  this.mergeVertices();
}

PolyhedronGeometry.prototype = Object.create(Geometry.prototype);
PolyhedronGeometry.prototype.constructor = PolyhedronGeometry; // PolyhedronBufferGeometry

function PolyhedronBufferGeometry(vertices, indices, radius, detail) {
  BufferGeometry.call(this);
  this.type = 'PolyhedronBufferGeometry';
  this.parameters = {
    vertices: vertices,
    indices: indices,
    radius: radius,
    detail: detail
  };
  radius = radius || 1;
  detail = detail || 0; // default buffer data

  var vertexBuffer = [];
  var uvBuffer = []; // the subdivision creates the vertex buffer data

  subdivide(detail); // all vertices should lie on a conceptual sphere with a given radius

  appplyRadius(radius); // finally, create the uv data

  generateUVs(); // build non-indexed geometry

  this.addAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));
  this.addAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));
  this.addAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));

  if (detail === 0) {
    this.computeVertexNormals(); // flat normals
  } else {
    this.normalizeNormals(); // smooth normals
  } // helper functions


  function subdivide(detail) {
    var a = new Vector3();
    var b = new Vector3();
    var c = new Vector3(); // iterate over all faces and apply a subdivison with the given detail value

    for (var i = 0; i < indices.length; i += 3) {
      // get the vertices of the face
      getVertexByIndex(indices[i + 0], a);
      getVertexByIndex(indices[i + 1], b);
      getVertexByIndex(indices[i + 2], c); // perform subdivision

      subdivideFace(a, b, c, detail);
    }
  }

  function subdivideFace(a, b, c, detail) {
    var cols = Math.pow(2, detail); // we use this multidimensional array as a data structure for creating the subdivision

    var v = [];
    var i, j; // construct all of the vertices for this subdivision

    for (i = 0; i <= cols; i++) {
      v[i] = [];
      var aj = a.clone().lerp(c, i / cols);
      var bj = b.clone().lerp(c, i / cols);
      var rows = cols - i;

      for (j = 0; j <= rows; j++) {
        if (j === 0 && i === cols) {
          v[i][j] = aj;
        } else {
          v[i][j] = aj.clone().lerp(bj, j / rows);
        }
      }
    } // construct all of the faces


    for (i = 0; i < cols; i++) {
      for (j = 0; j < 2 * (cols - i) - 1; j++) {
        var k = Math.floor(j / 2);

        if (j % 2 === 0) {
          pushVertex(v[i][k + 1]);
          pushVertex(v[i + 1][k]);
          pushVertex(v[i][k]);
        } else {
          pushVertex(v[i][k + 1]);
          pushVertex(v[i + 1][k + 1]);
          pushVertex(v[i + 1][k]);
        }
      }
    }
  }

  function appplyRadius(radius) {
    var vertex = new Vector3(); // iterate over the entire buffer and apply the radius to each vertex

    for (var i = 0; i < vertexBuffer.length; i += 3) {
      vertex.x = vertexBuffer[i + 0];
      vertex.y = vertexBuffer[i + 1];
      vertex.z = vertexBuffer[i + 2];
      vertex.normalize().multiplyScalar(radius);
      vertexBuffer[i + 0] = vertex.x;
      vertexBuffer[i + 1] = vertex.y;
      vertexBuffer[i + 2] = vertex.z;
    }
  }

  function generateUVs() {
    var vertex = new Vector3();

    for (var i = 0; i < vertexBuffer.length; i += 3) {
      vertex.x = vertexBuffer[i + 0];
      vertex.y = vertexBuffer[i + 1];
      vertex.z = vertexBuffer[i + 2];
      var u = azimuth(vertex) / 2 / Math.PI + 0.5;
      var v = inclination(vertex) / Math.PI + 0.5;
      uvBuffer.push(u, 1 - v);
    }

    correctUVs();
    correctSeam();
  }

  function correctSeam() {
    // handle case when face straddles the seam, see #3269
    for (var i = 0; i < uvBuffer.length; i += 6) {
      // uv data of a single face
      var x0 = uvBuffer[i + 0];
      var x1 = uvBuffer[i + 2];
      var x2 = uvBuffer[i + 4];
      var max = Math.max(x0, x1, x2);
      var min = Math.min(x0, x1, x2); // 0.9 is somewhat arbitrary

      if (max > 0.9 && min < 0.1) {
        if (x0 < 0.2) uvBuffer[i + 0] += 1;
        if (x1 < 0.2) uvBuffer[i + 2] += 1;
        if (x2 < 0.2) uvBuffer[i + 4] += 1;
      }
    }
  }

  function pushVertex(vertex) {
    vertexBuffer.push(vertex.x, vertex.y, vertex.z);
  }

  function getVertexByIndex(index, vertex) {
    var stride = index * 3;
    vertex.x = vertices[stride + 0];
    vertex.y = vertices[stride + 1];
    vertex.z = vertices[stride + 2];
  }

  function correctUVs() {
    var a = new Vector3();
    var b = new Vector3();
    var c = new Vector3();
    var centroid = new Vector3();
    var uvA = new Vector2();
    var uvB = new Vector2();
    var uvC = new Vector2();

    for (var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {
      a.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);
      b.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);
      c.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);
      uvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);
      uvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);
      uvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);
      centroid.copy(a).add(b).add(c).divideScalar(3);
      var azi = azimuth(centroid);
      correctUV(uvA, j + 0, a, azi);
      correctUV(uvB, j + 2, b, azi);
      correctUV(uvC, j + 4, c, azi);
    }
  }

  function correctUV(uv, stride, vector, azimuth) {
    if (azimuth < 0 && uv.x === 1) {
      uvBuffer[stride] = uv.x - 1;
    }

    if (vector.x === 0 && vector.z === 0) {
      uvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;
    }
  } // Angle around the Y axis, counter-clockwise when looking from above.


  function azimuth(vector) {
    return Math.atan2(vector.z, -vector.x);
  } // Angle above the XZ plane.


  function inclination(vector) {
    return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));
  }
}

PolyhedronBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;
/**
 * @author timothypratley / https://github.com/timothypratley
 * @author Mugen87 / https://github.com/Mugen87
 */
// TetrahedronGeometry

function TetrahedronGeometry(radius, detail) {
  Geometry.call(this);
  this.type = 'TetrahedronGeometry';
  this.parameters = {
    radius: radius,
    detail: detail
  };
  this.fromBufferGeometry(new TetrahedronBufferGeometry(radius, detail));
  this.mergeVertices();
}

TetrahedronGeometry.prototype = Object.create(Geometry.prototype);
TetrahedronGeometry.prototype.constructor = TetrahedronGeometry; // TetrahedronBufferGeometry

function TetrahedronBufferGeometry(radius, detail) {
  var vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];
  var indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];
  PolyhedronBufferGeometry.call(this, vertices, indices, radius, detail);
  this.type = 'TetrahedronBufferGeometry';
  this.parameters = {
    radius: radius,
    detail: detail
  };
}

TetrahedronBufferGeometry.prototype = Object.create(PolyhedronBufferGeometry.prototype);
TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;
/**
 * @author timothypratley / https://github.com/timothypratley
 * @author Mugen87 / https://github.com/Mugen87
 */
// OctahedronGeometry

function OctahedronGeometry(radius, detail) {
  Geometry.call(this);
  this.type = 'OctahedronGeometry';
  this.parameters = {
    radius: radius,
    detail: detail
  };
  this.fromBufferGeometry(new OctahedronBufferGeometry(radius, detail));
  this.mergeVertices();
}

OctahedronGeometry.prototype = Object.create(Geometry.prototype);
OctahedronGeometry.prototype.constructor = OctahedronGeometry; // OctahedronBufferGeometry

function OctahedronBufferGeometry(radius, detail) {
  var vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];
  var indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];
  PolyhedronBufferGeometry.call(this, vertices, indices, radius, detail);
  this.type = 'OctahedronBufferGeometry';
  this.parameters = {
    radius: radius,
    detail: detail
  };
}

OctahedronBufferGeometry.prototype = Object.create(PolyhedronBufferGeometry.prototype);
OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;
/**
 * @author timothypratley / https://github.com/timothypratley
 * @author Mugen87 / https://github.com/Mugen87
 */
// IcosahedronGeometry

function IcosahedronGeometry(radius, detail) {
  Geometry.call(this);
  this.type = 'IcosahedronGeometry';
  this.parameters = {
    radius: radius,
    detail: detail
  };
  this.fromBufferGeometry(new IcosahedronBufferGeometry(radius, detail));
  this.mergeVertices();
}

IcosahedronGeometry.prototype = Object.create(Geometry.prototype);
IcosahedronGeometry.prototype.constructor = IcosahedronGeometry; // IcosahedronBufferGeometry

function IcosahedronBufferGeometry(radius, detail) {
  var t = (1 + Math.sqrt(5)) / 2;
  var vertices = [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1];
  var indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];
  PolyhedronBufferGeometry.call(this, vertices, indices, radius, detail);
  this.type = 'IcosahedronBufferGeometry';
  this.parameters = {
    radius: radius,
    detail: detail
  };
}

IcosahedronBufferGeometry.prototype = Object.create(PolyhedronBufferGeometry.prototype);
IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;
/**
 * @author Abe Pazos / https://hamoid.com
 * @author Mugen87 / https://github.com/Mugen87
 */
// DodecahedronGeometry

function DodecahedronGeometry(radius, detail) {
  Geometry.call(this);
  this.type = 'DodecahedronGeometry';
  this.parameters = {
    radius: radius,
    detail: detail
  };
  this.fromBufferGeometry(new DodecahedronBufferGeometry(radius, detail));
  this.mergeVertices();
}

DodecahedronGeometry.prototype = Object.create(Geometry.prototype);
DodecahedronGeometry.prototype.constructor = DodecahedronGeometry; // DodecahedronBufferGeometry

function DodecahedronBufferGeometry(radius, detail) {
  var t = (1 + Math.sqrt(5)) / 2;
  var r = 1 / t;
  var vertices = [// (Â±1, Â±1, Â±1)
  -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, // (0, Â±1/Ï, Â±Ï)
  0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t, // (Â±1/Ï, Â±Ï, 0)
  -r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0, // (Â±Ï, 0, Â±1/Ï)
  -t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];
  var indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];
  PolyhedronBufferGeometry.call(this, vertices, indices, radius, detail);
  this.type = 'DodecahedronBufferGeometry';
  this.parameters = {
    radius: radius,
    detail: detail
  };
}

DodecahedronBufferGeometry.prototype = Object.create(PolyhedronBufferGeometry.prototype);
DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;
/**
 * @author oosmoxiecode / https://github.com/oosmoxiecode
 * @author WestLangley / https://github.com/WestLangley
 * @author zz85 / https://github.com/zz85
 * @author miningold / https://github.com/miningold
 * @author jonobr1 / https://github.com/jonobr1
 * @author Mugen87 / https://github.com/Mugen87
 *
 */
// TubeGeometry

function TubeGeometry(path, tubularSegments, radius, radialSegments, closed, taper) {
  Geometry.call(this);
  this.type = 'TubeGeometry';
  this.parameters = {
    path: path,
    tubularSegments: tubularSegments,
    radius: radius,
    radialSegments: radialSegments,
    closed: closed
  };
  if (taper !== undefined) console.warn('THREE.TubeGeometry: taper has been removed.');
  var bufferGeometry = new TubeBufferGeometry(path, tubularSegments, radius, radialSegments, closed); // expose internals

  this.tangents = bufferGeometry.tangents;
  this.normals = bufferGeometry.normals;
  this.binormals = bufferGeometry.binormals; // create geometry

  this.fromBufferGeometry(bufferGeometry);
  this.mergeVertices();
}

TubeGeometry.prototype = Object.create(Geometry.prototype);
TubeGeometry.prototype.constructor = TubeGeometry; // TubeBufferGeometry

function TubeBufferGeometry(path, tubularSegments, radius, radialSegments, closed) {
  BufferGeometry.call(this);
  this.type = 'TubeBufferGeometry';
  this.parameters = {
    path: path,
    tubularSegments: tubularSegments,
    radius: radius,
    radialSegments: radialSegments,
    closed: closed
  };
  tubularSegments = tubularSegments || 64;
  radius = radius || 1;
  radialSegments = radialSegments || 8;
  closed = closed || false;
  var frames = path.computeFrenetFrames(tubularSegments, closed); // expose internals

  this.tangents = frames.tangents;
  this.normals = frames.normals;
  this.binormals = frames.binormals; // helper variables

  var vertex = new Vector3();
  var normal = new Vector3();
  var uv = new Vector2();
  var P = new Vector3();
  var i, j; // buffer

  var vertices = [];
  var normals = [];
  var uvs = [];
  var indices = []; // create buffer data

  generateBufferData(); // build geometry

  this.setIndex(indices);
  this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
  this.addAttribute('normal', new Float32BufferAttribute(normals, 3));
  this.addAttribute('uv', new Float32BufferAttribute(uvs, 2)); // functions

  function generateBufferData() {
    for (i = 0; i < tubularSegments; i++) {
      generateSegment(i);
    } // if the geometry is not closed, generate the last row of vertices and normals
    // at the regular position on the given path
    //
    // if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)


    generateSegment(closed === false ? tubularSegments : 0); // uvs are generated in a separate function.
    // this makes it easy compute correct values for closed geometries

    generateUVs(); // finally create faces

    generateIndices();
  }

  function generateSegment(i) {
    // we use getPointAt to sample evenly distributed points from the given path
    P = path.getPointAt(i / tubularSegments, P); // retrieve corresponding normal and binormal

    var N = frames.normals[i];
    var B = frames.binormals[i]; // generate normals and vertices for the current segment

    for (j = 0; j <= radialSegments; j++) {
      var v = j / radialSegments * Math.PI * 2;
      var sin = Math.sin(v);
      var cos = -Math.cos(v); // normal

      normal.x = cos * N.x + sin * B.x;
      normal.y = cos * N.y + sin * B.y;
      normal.z = cos * N.z + sin * B.z;
      normal.normalize();
      normals.push(normal.x, normal.y, normal.z); // vertex

      vertex.x = P.x + radius * normal.x;
      vertex.y = P.y + radius * normal.y;
      vertex.z = P.z + radius * normal.z;
      vertices.push(vertex.x, vertex.y, vertex.z);
    }
  }

  function generateIndices() {
    for (j = 1; j <= tubularSegments; j++) {
      for (i = 1; i <= radialSegments; i++) {
        var a = (radialSegments + 1) * (j - 1) + (i - 1);
        var b = (radialSegments + 1) * j + (i - 1);
        var c = (radialSegments + 1) * j + i;
        var d = (radialSegments + 1) * (j - 1) + i; // faces

        indices.push(a, b, d);
        indices.push(b, c, d);
      }
    }
  }

  function generateUVs() {
    for (i = 0; i <= tubularSegments; i++) {
      for (j = 0; j <= radialSegments; j++) {
        uv.x = i / tubularSegments;
        uv.y = j / radialSegments;
        uvs.push(uv.x, uv.y);
      }
    }
  }
}

TubeBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;

TubeBufferGeometry.prototype.toJSON = function () {
  var data = BufferGeometry.prototype.toJSON.call(this);
  data.path = this.parameters.path.toJSON();
  return data;
};
/**
 * @author oosmoxiecode
 * @author Mugen87 / https://github.com/Mugen87
 *
 * based on http://www.blackpawn.com/texts/pqtorus/
 */
// TorusKnotGeometry


function TorusKnotGeometry(radius, tube, tubularSegments, radialSegments, p, q, heightScale) {
  Geometry.call(this);
  this.type = 'TorusKnotGeometry';
  this.parameters = {
    radius: radius,
    tube: tube,
    tubularSegments: tubularSegments,
    radialSegments: radialSegments,
    p: p,
    q: q
  };
  if (heightScale !== undefined) console.warn('THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.');
  this.fromBufferGeometry(new TorusKnotBufferGeometry(radius, tube, tubularSegments, radialSegments, p, q));
  this.mergeVertices();
}

TorusKnotGeometry.prototype = Object.create(Geometry.prototype);
TorusKnotGeometry.prototype.constructor = TorusKnotGeometry; // TorusKnotBufferGeometry

function TorusKnotBufferGeometry(radius, tube, tubularSegments, radialSegments, p, q) {
  BufferGeometry.call(this);
  this.type = 'TorusKnotBufferGeometry';
  this.parameters = {
    radius: radius,
    tube: tube,
    tubularSegments: tubularSegments,
    radialSegments: radialSegments,
    p: p,
    q: q
  };
  radius = radius || 1;
  tube = tube || 0.4;
  tubularSegments = Math.floor(tubularSegments) || 64;
  radialSegments = Math.floor(radialSegments) || 8;
  p = p || 2;
  q = q || 3; // buffers

  var indices = [];
  var vertices = [];
  var normals = [];
  var uvs = []; // helper variables

  var i, j;
  var vertex = new Vector3();
  var normal = new Vector3();
  var P1 = new Vector3();
  var P2 = new Vector3();
  var B = new Vector3();
  var T = new Vector3();
  var N = new Vector3(); // generate vertices, normals and uvs

  for (i = 0; i <= tubularSegments; ++i) {
    // the radian "u" is used to calculate the position on the torus curve of the current tubular segement
    var u = i / tubularSegments * p * Math.PI * 2; // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
    // these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions

    calculatePositionOnCurve(u, p, q, radius, P1);
    calculatePositionOnCurve(u + 0.01, p, q, radius, P2); // calculate orthonormal basis

    T.subVectors(P2, P1);
    N.addVectors(P2, P1);
    B.crossVectors(T, N);
    N.crossVectors(B, T); // normalize B, N. T can be ignored, we don't use it

    B.normalize();
    N.normalize();

    for (j = 0; j <= radialSegments; ++j) {
      // now calculate the vertices. they are nothing more than an extrusion of the torus curve.
      // because we extrude a shape in the xy-plane, there is no need to calculate a z-value.
      var v = j / radialSegments * Math.PI * 2;
      var cx = -tube * Math.cos(v);
      var cy = tube * Math.sin(v); // now calculate the final vertex position.
      // first we orient the extrusion with our basis vectos, then we add it to the current position on the curve

      vertex.x = P1.x + (cx * N.x + cy * B.x);
      vertex.y = P1.y + (cx * N.y + cy * B.y);
      vertex.z = P1.z + (cx * N.z + cy * B.z);
      vertices.push(vertex.x, vertex.y, vertex.z); // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)

      normal.subVectors(vertex, P1).normalize();
      normals.push(normal.x, normal.y, normal.z); // uv

      uvs.push(i / tubularSegments);
      uvs.push(j / radialSegments);
    }
  } // generate indices


  for (j = 1; j <= tubularSegments; j++) {
    for (i = 1; i <= radialSegments; i++) {
      // indices
      var a = (radialSegments + 1) * (j - 1) + (i - 1);
      var b = (radialSegments + 1) * j + (i - 1);
      var c = (radialSegments + 1) * j + i;
      var d = (radialSegments + 1) * (j - 1) + i; // faces

      indices.push(a, b, d);
      indices.push(b, c, d);
    }
  } // build geometry


  this.setIndex(indices);
  this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
  this.addAttribute('normal', new Float32BufferAttribute(normals, 3));
  this.addAttribute('uv', new Float32BufferAttribute(uvs, 2)); // this function calculates the current position on the torus curve

  function calculatePositionOnCurve(u, p, q, radius, position) {
    var cu = Math.cos(u);
    var su = Math.sin(u);
    var quOverP = q / p * u;
    var cs = Math.cos(quOverP);
    position.x = radius * (2 + cs) * 0.5 * cu;
    position.y = radius * (2 + cs) * su * 0.5;
    position.z = radius * Math.sin(quOverP) * 0.5;
  }
}

TorusKnotBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;
/**
 * @author oosmoxiecode
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */
// TorusGeometry

function TorusGeometry(radius, tube, radialSegments, tubularSegments, arc) {
  Geometry.call(this);
  this.type = 'TorusGeometry';
  this.parameters = {
    radius: radius,
    tube: tube,
    radialSegments: radialSegments,
    tubularSegments: tubularSegments,
    arc: arc
  };
  this.fromBufferGeometry(new TorusBufferGeometry(radius, tube, radialSegments, tubularSegments, arc));
  this.mergeVertices();
}

TorusGeometry.prototype = Object.create(Geometry.prototype);
TorusGeometry.prototype.constructor = TorusGeometry; // TorusBufferGeometry

function TorusBufferGeometry(radius, tube, radialSegments, tubularSegments, arc) {
  BufferGeometry.call(this);
  this.type = 'TorusBufferGeometry';
  this.parameters = {
    radius: radius,
    tube: tube,
    radialSegments: radialSegments,
    tubularSegments: tubularSegments,
    arc: arc
  };
  radius = radius || 1;
  tube = tube || 0.4;
  radialSegments = Math.floor(radialSegments) || 8;
  tubularSegments = Math.floor(tubularSegments) || 6;
  arc = arc || Math.PI * 2; // buffers

  var indices = [];
  var vertices = [];
  var normals = [];
  var uvs = []; // helper variables

  var center = new Vector3();
  var vertex = new Vector3();
  var normal = new Vector3();
  var j, i; // generate vertices, normals and uvs

  for (j = 0; j <= radialSegments; j++) {
    for (i = 0; i <= tubularSegments; i++) {
      var u = i / tubularSegments * arc;
      var v = j / radialSegments * Math.PI * 2; // vertex

      vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);
      vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);
      vertex.z = tube * Math.sin(v);
      vertices.push(vertex.x, vertex.y, vertex.z); // normal

      center.x = radius * Math.cos(u);
      center.y = radius * Math.sin(u);
      normal.subVectors(vertex, center).normalize();
      normals.push(normal.x, normal.y, normal.z); // uv

      uvs.push(i / tubularSegments);
      uvs.push(j / radialSegments);
    }
  } // generate indices


  for (j = 1; j <= radialSegments; j++) {
    for (i = 1; i <= tubularSegments; i++) {
      // indices
      var a = (tubularSegments + 1) * j + i - 1;
      var b = (tubularSegments + 1) * (j - 1) + i - 1;
      var c = (tubularSegments + 1) * (j - 1) + i;
      var d = (tubularSegments + 1) * j + i; // faces

      indices.push(a, b, d);
      indices.push(b, c, d);
    }
  } // build geometry


  this.setIndex(indices);
  this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
  this.addAttribute('normal', new Float32BufferAttribute(normals, 3));
  this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));
}

TorusBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;
/**
 * @author Mugen87 / https://github.com/Mugen87
 * Port from https://github.com/mapbox/earcut (v2.1.2)
 */

var Earcut = {
  triangulate: function (data, holeIndices, dim) {
    dim = dim || 2;
    var hasHoles = holeIndices && holeIndices.length,
        outerLen = hasHoles ? holeIndices[0] * dim : data.length,
        outerNode = linkedList(data, 0, outerLen, dim, true),
        triangles = [];
    if (!outerNode) return triangles;
    var minX, minY, maxX, maxY, x, y, invSize;
    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox

    if (data.length > 80 * dim) {
      minX = maxX = data[0];
      minY = maxY = data[1];

      for (var i = dim; i < outerLen; i += dim) {
        x = data[i];
        y = data[i + 1];
        if (x < minX) minX = x;
        if (y < minY) minY = y;
        if (x > maxX) maxX = x;
        if (y > maxY) maxY = y;
      } // minX, minY and invSize are later used to transform coords into integers for z-order calculation


      invSize = Math.max(maxX - minX, maxY - minY);
      invSize = invSize !== 0 ? 1 / invSize : 0;
    }

    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);
    return triangles;
  }
}; // create a circular doubly linked list from polygon points in the specified winding order

function linkedList(data, start, end, dim, clockwise) {
  var i, last;

  if (clockwise === signedArea(data, start, end, dim) > 0) {
    for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
  } else {
    for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
  }

  if (last && equals(last, last.next)) {
    removeNode(last);
    last = last.next;
  }

  return last;
} // eliminate colinear or duplicate points


function filterPoints(start, end) {
  if (!start) return start;
  if (!end) end = start;
  var p = start,
      again;

  do {
    again = false;

    if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
      removeNode(p);
      p = end = p.prev;
      if (p === p.next) break;
      again = true;
    } else {
      p = p.next;
    }
  } while (again || p !== end);

  return end;
} // main ear slicing loop which triangulates a polygon (given as a linked list)


function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
  if (!ear) return; // interlink polygon nodes in z-order

  if (!pass && invSize) indexCurve(ear, minX, minY, invSize);
  var stop = ear,
      prev,
      next; // iterate through ears, slicing them one by one

  while (ear.prev !== ear.next) {
    prev = ear.prev;
    next = ear.next;

    if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
      // cut off the triangle
      triangles.push(prev.i / dim);
      triangles.push(ear.i / dim);
      triangles.push(next.i / dim);
      removeNode(ear); // skipping the next vertice leads to less sliver triangles

      ear = next.next;
      stop = next.next;
      continue;
    }

    ear = next; // if we looped through the whole remaining polygon and can't find any more ears

    if (ear === stop) {
      // try filtering points and slicing again
      if (!pass) {
        earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally
      } else if (pass === 1) {
        ear = cureLocalIntersections(ear, triangles, dim);
        earcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two
      } else if (pass === 2) {
        splitEarcut(ear, triangles, dim, minX, minY, invSize);
      }

      break;
    }
  }
} // check whether a polygon node forms a valid ear with adjacent nodes


function isEar(ear) {
  var a = ear.prev,
      b = ear,
      c = ear.next;
  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
  // now make sure we don't have other points inside the potential ear

  var p = ear.next.next;

  while (p !== ear.prev) {
    if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) {
      return false;
    }

    p = p.next;
  }

  return true;
}

function isEarHashed(ear, minX, minY, invSize) {
  var a = ear.prev,
      b = ear,
      c = ear.next;
  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
  // triangle bbox; min & max are calculated like this for speed

  var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,
      minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,
      maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,
      maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;

  var minZ = zOrder(minTX, minTY, minX, minY, invSize),
      maxZ = zOrder(maxTX, maxTY, minX, minY, invSize); // first look for points inside the triangle in increasing z-order

  var p = ear.nextZ;

  while (p && p.z <= maxZ) {
    if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
    p = p.nextZ;
  } // then look for points in decreasing z-order


  p = ear.prevZ;

  while (p && p.z >= minZ) {
    if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
    p = p.prevZ;
  }

  return true;
} // go through all polygon nodes and cure small local self-intersections


function cureLocalIntersections(start, triangles, dim) {
  var p = start;

  do {
    var a = p.prev,
        b = p.next.next;

    if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
      triangles.push(a.i / dim);
      triangles.push(p.i / dim);
      triangles.push(b.i / dim); // remove two nodes involved

      removeNode(p);
      removeNode(p.next);
      p = start = b;
    }

    p = p.next;
  } while (p !== start);

  return p;
} // try splitting polygon into two and triangulate them independently


function splitEarcut(start, triangles, dim, minX, minY, invSize) {
  // look for a valid diagonal that divides the polygon into two
  var a = start;

  do {
    var b = a.next.next;

    while (b !== a.prev) {
      if (a.i !== b.i && isValidDiagonal(a, b)) {
        // split the polygon in two by the diagonal
        var c = splitPolygon(a, b); // filter colinear points around the cuts

        a = filterPoints(a, a.next);
        c = filterPoints(c, c.next); // run earcut on each half

        earcutLinked(a, triangles, dim, minX, minY, invSize);
        earcutLinked(c, triangles, dim, minX, minY, invSize);
        return;
      }

      b = b.next;
    }

    a = a.next;
  } while (a !== start);
} // link every hole into the outer loop, producing a single-ring polygon without holes


function eliminateHoles(data, holeIndices, outerNode, dim) {
  var queue = [],
      i,
      len,
      start,
      end,
      list;

  for (i = 0, len = holeIndices.length; i < len; i++) {
    start = holeIndices[i] * dim;
    end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
    list = linkedList(data, start, end, dim, false);
    if (list === list.next) list.steiner = true;
    queue.push(getLeftmost(list));
  }

  queue.sort(compareX); // process holes from left to right

  for (i = 0; i < queue.length; i++) {
    eliminateHole(queue[i], outerNode);
    outerNode = filterPoints(outerNode, outerNode.next);
  }

  return outerNode;
}

function compareX(a, b) {
  return a.x - b.x;
} // find a bridge between vertices that connects hole with an outer ring and and link it


function eliminateHole(hole, outerNode) {
  outerNode = findHoleBridge(hole, outerNode);

  if (outerNode) {
    var b = splitPolygon(outerNode, hole);
    filterPoints(b, b.next);
  }
} // David Eberly's algorithm for finding a bridge between hole and outer polygon


function findHoleBridge(hole, outerNode) {
  var p = outerNode,
      hx = hole.x,
      hy = hole.y,
      qx = -Infinity,
      m; // find a segment intersected by a ray from the hole's leftmost point to the left;
  // segment's endpoint with lesser x will be potential connection point

  do {
    if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
      var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);

      if (x <= hx && x > qx) {
        qx = x;

        if (x === hx) {
          if (hy === p.y) return p;
          if (hy === p.next.y) return p.next;
        }

        m = p.x < p.next.x ? p : p.next;
      }
    }

    p = p.next;
  } while (p !== outerNode);

  if (!m) return null;
  if (hx === qx) return m.prev; // hole touches outer segment; pick lower endpoint
  // look for points inside the triangle of hole point, segment intersection and endpoint;
  // if there are no points found, we have a valid connection;
  // otherwise choose the point of the minimum angle with the ray as connection point

  var stop = m,
      mx = m.x,
      my = m.y,
      tanMin = Infinity,
      tan;
  p = m.next;

  while (p !== stop) {
    if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
      tan = Math.abs(hy - p.y) / (hx - p.x); // tangential

      if ((tan < tanMin || tan === tanMin && p.x > m.x) && locallyInside(p, hole)) {
        m = p;
        tanMin = tan;
      }
    }

    p = p.next;
  }

  return m;
} // interlink polygon nodes in z-order


function indexCurve(start, minX, minY, invSize) {
  var p = start;

  do {
    if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);
    p.prevZ = p.prev;
    p.nextZ = p.next;
    p = p.next;
  } while (p !== start);

  p.prevZ.nextZ = null;
  p.prevZ = null;
  sortLinked(p);
} // Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html


function sortLinked(list) {
  var i,
      p,
      q,
      e,
      tail,
      numMerges,
      pSize,
      qSize,
      inSize = 1;

  do {
    p = list;
    list = null;
    tail = null;
    numMerges = 0;

    while (p) {
      numMerges++;
      q = p;
      pSize = 0;

      for (i = 0; i < inSize; i++) {
        pSize++;
        q = q.nextZ;
        if (!q) break;
      }

      qSize = inSize;

      while (pSize > 0 || qSize > 0 && q) {
        if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
          e = p;
          p = p.nextZ;
          pSize--;
        } else {
          e = q;
          q = q.nextZ;
          qSize--;
        }

        if (tail) tail.nextZ = e;else list = e;
        e.prevZ = tail;
        tail = e;
      }

      p = q;
    }

    tail.nextZ = null;
    inSize *= 2;
  } while (numMerges > 1);

  return list;
} // z-order of a point given coords and inverse of the longer side of data bbox


function zOrder(x, y, minX, minY, invSize) {
  // coords are transformed into non-negative 15-bit integer range
  x = 32767 * (x - minX) * invSize;
  y = 32767 * (y - minY) * invSize;
  x = (x | x << 8) & 0x00FF00FF;
  x = (x | x << 4) & 0x0F0F0F0F;
  x = (x | x << 2) & 0x33333333;
  x = (x | x << 1) & 0x55555555;
  y = (y | y << 8) & 0x00FF00FF;
  y = (y | y << 4) & 0x0F0F0F0F;
  y = (y | y << 2) & 0x33333333;
  y = (y | y << 1) & 0x55555555;
  return x | y << 1;
} // find the leftmost node of a polygon ring


function getLeftmost(start) {
  var p = start,
      leftmost = start;

  do {
    if (p.x < leftmost.x) leftmost = p;
    p = p.next;
  } while (p !== start);

  return leftmost;
} // check if a point lies within a convex triangle


function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
  return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)


function isValidDiagonal(a, b) {
  return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);
} // signed area of a triangle


function area(p, q, r) {
  return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
} // check if two points are equal


function equals(p1, p2) {
  return p1.x === p2.x && p1.y === p2.y;
} // check if two segments intersect


function intersects(p1, q1, p2, q2) {
  if (equals(p1, q1) && equals(p2, q2) || equals(p1, q2) && equals(p2, q1)) return true;
  return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 && area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;
} // check if a polygon diagonal intersects any polygon segments


function intersectsPolygon(a, b) {
  var p = a;

  do {
    if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) {
      return true;
    }

    p = p.next;
  } while (p !== a);

  return false;
} // check if a polygon diagonal is locally inside the polygon


function locallyInside(a, b) {
  return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
} // check if the middle point of a polygon diagonal is inside the polygon


function middleInside(a, b) {
  var p = a,
      inside = false,
      px = (a.x + b.x) / 2,
      py = (a.y + b.y) / 2;

  do {
    if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) {
      inside = !inside;
    }

    p = p.next;
  } while (p !== a);

  return inside;
} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring


function splitPolygon(a, b) {
  var a2 = new Node(a.i, a.x, a.y),
      b2 = new Node(b.i, b.x, b.y),
      an = a.next,
      bp = b.prev;
  a.next = b;
  b.prev = a;
  a2.next = an;
  an.prev = a2;
  b2.next = a2;
  a2.prev = b2;
  bp.next = b2;
  b2.prev = bp;
  return b2;
} // create a node and optionally link it with previous one (in a circular doubly linked list)


function insertNode(i, x, y, last) {
  var p = new Node(i, x, y);

  if (!last) {
    p.prev = p;
    p.next = p;
  } else {
    p.next = last.next;
    p.prev = last;
    last.next.prev = p;
    last.next = p;
  }

  return p;
}

function removeNode(p) {
  p.next.prev = p.prev;
  p.prev.next = p.next;
  if (p.prevZ) p.prevZ.nextZ = p.nextZ;
  if (p.nextZ) p.nextZ.prevZ = p.prevZ;
}

function Node(i, x, y) {
  // vertice index in coordinates array
  this.i = i; // vertex coordinates

  this.x = x;
  this.y = y; // previous and next vertice nodes in a polygon ring

  this.prev = null;
  this.next = null; // z-order curve value

  this.z = null; // previous and next nodes in z-order

  this.prevZ = null;
  this.nextZ = null; // indicates whether this is a steiner point

  this.steiner = false;
}

function signedArea(data, start, end, dim) {
  var sum = 0;

  for (var i = start, j = end - dim; i < end; i += dim) {
    sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
    j = i;
  }

  return sum;
}
/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 */


var ShapeUtils = {
  // calculate area of the contour polygon
  area: function (contour) {
    var n = contour.length;
    var a = 0.0;

    for (var p = n - 1, q = 0; q < n; p = q++) {
      a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;
    }

    return a * 0.5;
  },
  isClockWise: function (pts) {
    return ShapeUtils.area(pts) < 0;
  },
  triangulateShape: function (contour, holes) {
    var vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]

    var holeIndices = []; // array of hole indices

    var faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]

    removeDupEndPts(contour);
    addContour(vertices, contour); //

    var holeIndex = contour.length;
    holes.forEach(removeDupEndPts);

    for (var i = 0; i < holes.length; i++) {
      holeIndices.push(holeIndex);
      holeIndex += holes[i].length;
      addContour(vertices, holes[i]);
    } //


    var triangles = Earcut.triangulate(vertices, holeIndices); //

    for (var i = 0; i < triangles.length; i += 3) {
      faces.push(triangles.slice(i, i + 3));
    }

    return faces;
  }
};
exports.ShapeUtils = ShapeUtils;

function removeDupEndPts(points) {
  var l = points.length;

  if (l > 2 && points[l - 1].equals(points[0])) {
    points.pop();
  }
}

function addContour(vertices, contour) {
  for (var i = 0; i < contour.length; i++) {
    vertices.push(contour[i].x);
    vertices.push(contour[i].y);
  }
}
/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 * Creates extruded geometry from a path shape.
 *
 * parameters = {
 *
 *  curveSegments: <int>, // number of points on the curves
 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
 *  depth: <float>, // Depth to extrude the shape
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into the original shape bevel goes
 *  bevelSize: <float>, // how far from shape outline is bevel
 *  bevelSegments: <int>, // number of bevel layers
 *
 *  extrudePath: <THREE.Curve> // curve to extrude shape along
 *
 *  UVGenerator: <Object> // object that provides UV generator functions
 *
 * }
 */
// ExtrudeGeometry


function ExtrudeGeometry(shapes, options) {
  Geometry.call(this);
  this.type = 'ExtrudeGeometry';
  this.parameters = {
    shapes: shapes,
    options: options
  };
  this.fromBufferGeometry(new ExtrudeBufferGeometry(shapes, options));
  this.mergeVertices();
}

ExtrudeGeometry.prototype = Object.create(Geometry.prototype);
ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;

ExtrudeGeometry.prototype.toJSON = function () {
  var data = Geometry.prototype.toJSON.call(this);
  var shapes = this.parameters.shapes;
  var options = this.parameters.options;
  return toJSON(shapes, options, data);
}; // ExtrudeBufferGeometry


function ExtrudeBufferGeometry(shapes, options) {
  BufferGeometry.call(this);
  this.type = 'ExtrudeBufferGeometry';
  this.parameters = {
    shapes: shapes,
    options: options
  };
  shapes = Array.isArray(shapes) ? shapes : [shapes];
  var scope = this;
  var verticesArray = [];
  var uvArray = [];

  for (var i = 0, l = shapes.length; i < l; i++) {
    var shape = shapes[i];
    addShape(shape);
  } // build geometry


  this.addAttribute('position', new Float32BufferAttribute(verticesArray, 3));
  this.addAttribute('uv', new Float32BufferAttribute(uvArray, 2));
  this.computeVertexNormals(); // functions

  function addShape(shape) {
    var placeholder = []; // options

    var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
    var steps = options.steps !== undefined ? options.steps : 1;
    var depth = options.depth !== undefined ? options.depth : 100;
    var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;
    var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;
    var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;
    var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;
    var extrudePath = options.extrudePath;
    var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator; // deprecated options

    if (options.amount !== undefined) {
      console.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');
      depth = options.amount;
    } //


    var extrudePts,
        extrudeByPath = false;
    var splineTube, binormal, normal, position2;

    if (extrudePath) {
      extrudePts = extrudePath.getSpacedPoints(steps);
      extrudeByPath = true;
      bevelEnabled = false; // bevels not supported for path extrusion
      // SETUP TNB variables
      // TODO1 - have a .isClosed in spline?

      splineTube = extrudePath.computeFrenetFrames(steps, false); // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

      binormal = new Vector3();
      normal = new Vector3();
      position2 = new Vector3();
    } // Safeguards if bevels are not enabled


    if (!bevelEnabled) {
      bevelSegments = 0;
      bevelThickness = 0;
      bevelSize = 0;
    } // Variables initialization


    var ahole, h, hl; // looping of holes

    var shapePoints = shape.extractPoints(curveSegments);
    var vertices = shapePoints.shape;
    var holes = shapePoints.holes;
    var reverse = !ShapeUtils.isClockWise(vertices);

    if (reverse) {
      vertices = vertices.reverse(); // Maybe we should also check if holes are in the opposite direction, just to be safe ...

      for (h = 0, hl = holes.length; h < hl; h++) {
        ahole = holes[h];

        if (ShapeUtils.isClockWise(ahole)) {
          holes[h] = ahole.reverse();
        }
      }
    }

    var faces = ShapeUtils.triangulateShape(vertices, holes);
    /* Vertices */

    var contour = vertices; // vertices has all points but contour has only points of circumference

    for (h = 0, hl = holes.length; h < hl; h++) {
      ahole = holes[h];
      vertices = vertices.concat(ahole);
    }

    function scalePt2(pt, vec, size) {
      if (!vec) console.error("THREE.ExtrudeGeometry: vec does not exist");
      return vec.clone().multiplyScalar(size).add(pt);
    }

    var b,
        bs,
        t,
        z,
        vert,
        vlen = vertices.length,
        face,
        flen = faces.length; // Find directions for point movement

    function getBevelVec(inPt, inPrev, inNext) {
      // computes for inPt the corresponding point inPt' on a new contour
      //   shifted by 1 unit (length of normalized vector) to the left
      // if we walk along contour clockwise, this new contour is outside the old one
      //
      // inPt' is the intersection of the two lines parallel to the two
      //  adjacent edges of inPt at a distance of 1 unit on the left side.
      var v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt
      // good reading for geometry algorithms (here: line-line intersection)
      // http://geomalgorithms.com/a05-_intersect-1.html

      var v_prev_x = inPt.x - inPrev.x,
          v_prev_y = inPt.y - inPrev.y;
      var v_next_x = inNext.x - inPt.x,
          v_next_y = inNext.y - inPt.y;
      var v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y; // check for collinear edges

      var collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;

      if (Math.abs(collinear0) > Number.EPSILON) {
        // not collinear
        // length of vectors for normalizing
        var v_prev_len = Math.sqrt(v_prev_lensq);
        var v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y); // shift adjacent points by unit vectors to the left

        var ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;
        var ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;
        var ptNextShift_x = inNext.x - v_next_y / v_next_len;
        var ptNextShift_y = inNext.y + v_next_x / v_next_len; // scaling factor for v_prev to intersection point

        var sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x); // vector from inPt to intersection point

        v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;
        v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y; // Don't normalize!, otherwise sharp corners become ugly
        //  but prevent crazy spikes

        var v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;

        if (v_trans_lensq <= 2) {
          return new Vector2(v_trans_x, v_trans_y);
        } else {
          shrink_by = Math.sqrt(v_trans_lensq / 2);
        }
      } else {
        // handle special case of collinear edges
        var direction_eq = false; // assumes: opposite

        if (v_prev_x > Number.EPSILON) {
          if (v_next_x > Number.EPSILON) {
            direction_eq = true;
          }
        } else {
          if (v_prev_x < -Number.EPSILON) {
            if (v_next_x < -Number.EPSILON) {
              direction_eq = true;
            }
          } else {
            if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {
              direction_eq = true;
            }
          }
        }

        if (direction_eq) {
          // console.log("Warning: lines are a straight sequence");
          v_trans_x = -v_prev_y;
          v_trans_y = v_prev_x;
          shrink_by = Math.sqrt(v_prev_lensq);
        } else {
          // console.log("Warning: lines are a straight spike");
          v_trans_x = v_prev_x;
          v_trans_y = v_prev_y;
          shrink_by = Math.sqrt(v_prev_lensq / 2);
        }
      }

      return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);
    }

    var contourMovements = [];

    for (var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {
      if (j === il) j = 0;
      if (k === il) k = 0; //  (j)---(i)---(k)
      // console.log('i,j,k', i, j , k)

      contourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);
    }

    var holesMovements = [],
        oneHoleMovements,
        verticesMovements = contourMovements.concat();

    for (h = 0, hl = holes.length; h < hl; h++) {
      ahole = holes[h];
      oneHoleMovements = [];

      for (i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {
        if (j === il) j = 0;
        if (k === il) k = 0; //  (j)---(i)---(k)

        oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);
      }

      holesMovements.push(oneHoleMovements);
      verticesMovements = verticesMovements.concat(oneHoleMovements);
    } // Loop bevelSegments, 1 for the front, 1 for the back


    for (b = 0; b < bevelSegments; b++) {
      //for ( b = bevelSegments; b > 0; b -- ) {
      t = b / bevelSegments;
      z = bevelThickness * Math.cos(t * Math.PI / 2);
      bs = bevelSize * Math.sin(t * Math.PI / 2); // contract shape

      for (i = 0, il = contour.length; i < il; i++) {
        vert = scalePt2(contour[i], contourMovements[i], bs);
        v(vert.x, vert.y, -z);
      } // expand holes


      for (h = 0, hl = holes.length; h < hl; h++) {
        ahole = holes[h];
        oneHoleMovements = holesMovements[h];

        for (i = 0, il = ahole.length; i < il; i++) {
          vert = scalePt2(ahole[i], oneHoleMovements[i], bs);
          v(vert.x, vert.y, -z);
        }
      }
    }

    bs = bevelSize; // Back facing vertices

    for (i = 0; i < vlen; i++) {
      vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];

      if (!extrudeByPath) {
        v(vert.x, vert.y, 0);
      } else {
        // v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
        normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);
        binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);
        position2.copy(extrudePts[0]).add(normal).add(binormal);
        v(position2.x, position2.y, position2.z);
      }
    } // Add stepped vertices...
    // Including front facing vertices


    var s;

    for (s = 1; s <= steps; s++) {
      for (i = 0; i < vlen; i++) {
        vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];

        if (!extrudeByPath) {
          v(vert.x, vert.y, depth / steps * s);
        } else {
          // v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
          normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);
          binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);
          position2.copy(extrudePts[s]).add(normal).add(binormal);
          v(position2.x, position2.y, position2.z);
        }
      }
    } // Add bevel segments planes
    //for ( b = 1; b <= bevelSegments; b ++ ) {


    for (b = bevelSegments - 1; b >= 0; b--) {
      t = b / bevelSegments;
      z = bevelThickness * Math.cos(t * Math.PI / 2);
      bs = bevelSize * Math.sin(t * Math.PI / 2); // contract shape

      for (i = 0, il = contour.length; i < il; i++) {
        vert = scalePt2(contour[i], contourMovements[i], bs);
        v(vert.x, vert.y, depth + z);
      } // expand holes


      for (h = 0, hl = holes.length; h < hl; h++) {
        ahole = holes[h];
        oneHoleMovements = holesMovements[h];

        for (i = 0, il = ahole.length; i < il; i++) {
          vert = scalePt2(ahole[i], oneHoleMovements[i], bs);

          if (!extrudeByPath) {
            v(vert.x, vert.y, depth + z);
          } else {
            v(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);
          }
        }
      }
    }
    /* Faces */
    // Top and bottom faces


    buildLidFaces(); // Sides faces

    buildSideFaces(); /////  Internal functions

    function buildLidFaces() {
      var start = verticesArray.length / 3;

      if (bevelEnabled) {
        var layer = 0; // steps + 1

        var offset = vlen * layer; // Bottom faces

        for (i = 0; i < flen; i++) {
          face = faces[i];
          f3(face[2] + offset, face[1] + offset, face[0] + offset);
        }

        layer = steps + bevelSegments * 2;
        offset = vlen * layer; // Top faces

        for (i = 0; i < flen; i++) {
          face = faces[i];
          f3(face[0] + offset, face[1] + offset, face[2] + offset);
        }
      } else {
        // Bottom faces
        for (i = 0; i < flen; i++) {
          face = faces[i];
          f3(face[2], face[1], face[0]);
        } // Top faces


        for (i = 0; i < flen; i++) {
          face = faces[i];
          f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);
        }
      }

      scope.addGroup(start, verticesArray.length / 3 - start, 0);
    } // Create faces for the z-sides of the shape


    function buildSideFaces() {
      var start = verticesArray.length / 3;
      var layeroffset = 0;
      sidewalls(contour, layeroffset);
      layeroffset += contour.length;

      for (h = 0, hl = holes.length; h < hl; h++) {
        ahole = holes[h];
        sidewalls(ahole, layeroffset); //, true

        layeroffset += ahole.length;
      }

      scope.addGroup(start, verticesArray.length / 3 - start, 1);
    }

    function sidewalls(contour, layeroffset) {
      var j, k;
      i = contour.length;

      while (--i >= 0) {
        j = i;
        k = i - 1;
        if (k < 0) k = contour.length - 1; //console.log('b', i,j, i-1, k,vertices.length);

        var s = 0,
            sl = steps + bevelSegments * 2;

        for (s = 0; s < sl; s++) {
          var slen1 = vlen * s;
          var slen2 = vlen * (s + 1);
          var a = layeroffset + j + slen1,
              b = layeroffset + k + slen1,
              c = layeroffset + k + slen2,
              d = layeroffset + j + slen2;
          f4(a, b, c, d);
        }
      }
    }

    function v(x, y, z) {
      placeholder.push(x);
      placeholder.push(y);
      placeholder.push(z);
    }

    function f3(a, b, c) {
      addVertex(a);
      addVertex(b);
      addVertex(c);
      var nextIndex = verticesArray.length / 3;
      var uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);
      addUV(uvs[0]);
      addUV(uvs[1]);
      addUV(uvs[2]);
    }

    function f4(a, b, c, d) {
      addVertex(a);
      addVertex(b);
      addVertex(d);
      addVertex(b);
      addVertex(c);
      addVertex(d);
      var nextIndex = verticesArray.length / 3;
      var uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);
      addUV(uvs[0]);
      addUV(uvs[1]);
      addUV(uvs[3]);
      addUV(uvs[1]);
      addUV(uvs[2]);
      addUV(uvs[3]);
    }

    function addVertex(index) {
      verticesArray.push(placeholder[index * 3 + 0]);
      verticesArray.push(placeholder[index * 3 + 1]);
      verticesArray.push(placeholder[index * 3 + 2]);
    }

    function addUV(vector2) {
      uvArray.push(vector2.x);
      uvArray.push(vector2.y);
    }
  }
}

ExtrudeBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
ExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;

ExtrudeBufferGeometry.prototype.toJSON = function () {
  var data = BufferGeometry.prototype.toJSON.call(this);
  var shapes = this.parameters.shapes;
  var options = this.parameters.options;
  return toJSON(shapes, options, data);
}; //


var WorldUVGenerator = {
  generateTopUV: function (geometry, vertices, indexA, indexB, indexC) {
    var a_x = vertices[indexA * 3];
    var a_y = vertices[indexA * 3 + 1];
    var b_x = vertices[indexB * 3];
    var b_y = vertices[indexB * 3 + 1];
    var c_x = vertices[indexC * 3];
    var c_y = vertices[indexC * 3 + 1];
    return [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)];
  },
  generateSideWallUV: function (geometry, vertices, indexA, indexB, indexC, indexD) {
    var a_x = vertices[indexA * 3];
    var a_y = vertices[indexA * 3 + 1];
    var a_z = vertices[indexA * 3 + 2];
    var b_x = vertices[indexB * 3];
    var b_y = vertices[indexB * 3 + 1];
    var b_z = vertices[indexB * 3 + 2];
    var c_x = vertices[indexC * 3];
    var c_y = vertices[indexC * 3 + 1];
    var c_z = vertices[indexC * 3 + 2];
    var d_x = vertices[indexD * 3];
    var d_y = vertices[indexD * 3 + 1];
    var d_z = vertices[indexD * 3 + 2];

    if (Math.abs(a_y - b_y) < 0.01) {
      return [new Vector2(a_x, 1 - a_z), new Vector2(b_x, 1 - b_z), new Vector2(c_x, 1 - c_z), new Vector2(d_x, 1 - d_z)];
    } else {
      return [new Vector2(a_y, 1 - a_z), new Vector2(b_y, 1 - b_z), new Vector2(c_y, 1 - c_z), new Vector2(d_y, 1 - d_z)];
    }
  }
};

function toJSON(shapes, options, data) {
  //
  data.shapes = [];

  if (Array.isArray(shapes)) {
    for (var i = 0, l = shapes.length; i < l; i++) {
      var shape = shapes[i];
      data.shapes.push(shape.uuid);
    }
  } else {
    data.shapes.push(shapes.uuid);
  } //


  if (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();
  return data;
}
/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author alteredq / http://alteredqualia.com/
 *
 * Text = 3D Text
 *
 * parameters = {
 *  font: <THREE.Font>, // font
 *
 *  size: <float>, // size of the text
 *  height: <float>, // thickness to extrude text
 *  curveSegments: <int>, // number of points on the curves
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into text bevel goes
 *  bevelSize: <float> // how far from text outline is bevel
 * }
 */
// TextGeometry


function TextGeometry(text, parameters) {
  Geometry.call(this);
  this.type = 'TextGeometry';
  this.parameters = {
    text: text,
    parameters: parameters
  };
  this.fromBufferGeometry(new TextBufferGeometry(text, parameters));
  this.mergeVertices();
}

TextGeometry.prototype = Object.create(Geometry.prototype);
TextGeometry.prototype.constructor = TextGeometry; // TextBufferGeometry

function TextBufferGeometry(text, parameters) {
  parameters = parameters || {};
  var font = parameters.font;

  if (!(font && font.isFont)) {
    console.error('THREE.TextGeometry: font parameter is not an instance of THREE.Font.');
    return new Geometry();
  }

  var shapes = font.generateShapes(text, parameters.size); // translate parameters to ExtrudeGeometry API

  parameters.depth = parameters.height !== undefined ? parameters.height : 50; // defaults

  if (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;
  if (parameters.bevelSize === undefined) parameters.bevelSize = 8;
  if (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;
  ExtrudeBufferGeometry.call(this, shapes, parameters);
  this.type = 'TextBufferGeometry';
}

TextBufferGeometry.prototype = Object.create(ExtrudeBufferGeometry.prototype);
TextBufferGeometry.prototype.constructor = TextBufferGeometry;
/**
 * @author mrdoob / http://mrdoob.com/
 * @author benaadams / https://twitter.com/ben_a_adams
 * @author Mugen87 / https://github.com/Mugen87
 */
// SphereGeometry

function SphereGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {
  Geometry.call(this);
  this.type = 'SphereGeometry';
  this.parameters = {
    radius: radius,
    widthSegments: widthSegments,
    heightSegments: heightSegments,
    phiStart: phiStart,
    phiLength: phiLength,
    thetaStart: thetaStart,
    thetaLength: thetaLength
  };
  this.fromBufferGeometry(new SphereBufferGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength));
  this.mergeVertices();
}

SphereGeometry.prototype = Object.create(Geometry.prototype);
SphereGeometry.prototype.constructor = SphereGeometry; // SphereBufferGeometry

function SphereBufferGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {
  BufferGeometry.call(this);
  this.type = 'SphereBufferGeometry';
  this.parameters = {
    radius: radius,
    widthSegments: widthSegments,
    heightSegments: heightSegments,
    phiStart: phiStart,
    phiLength: phiLength,
    thetaStart: thetaStart,
    thetaLength: thetaLength
  };
  radius = radius || 1;
  widthSegments = Math.max(3, Math.floor(widthSegments) || 8);
  heightSegments = Math.max(2, Math.floor(heightSegments) || 6);
  phiStart = phiStart !== undefined ? phiStart : 0;
  phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;
  thetaStart = thetaStart !== undefined ? thetaStart : 0;
  thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;
  var thetaEnd = thetaStart + thetaLength;
  var ix, iy;
  var index = 0;
  var grid = [];
  var vertex = new Vector3();
  var normal = new Vector3(); // buffers

  var indices = [];
  var vertices = [];
  var normals = [];
  var uvs = []; // generate vertices, normals and uvs

  for (iy = 0; iy <= heightSegments; iy++) {
    var verticesRow = [];
    var v = iy / heightSegments;

    for (ix = 0; ix <= widthSegments; ix++) {
      var u = ix / widthSegments; // vertex

      vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
      vertex.y = radius * Math.cos(thetaStart + v * thetaLength);
      vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
      vertices.push(vertex.x, vertex.y, vertex.z); // normal

      normal.set(vertex.x, vertex.y, vertex.z).normalize();
      normals.push(normal.x, normal.y, normal.z); // uv

      uvs.push(u, 1 - v);
      verticesRow.push(index++);
    }

    grid.push(verticesRow);
  } // indices


  for (iy = 0; iy < heightSegments; iy++) {
    for (ix = 0; ix < widthSegments; ix++) {
      var a = grid[iy][ix + 1];
      var b = grid[iy][ix];
      var c = grid[iy + 1][ix];
      var d = grid[iy + 1][ix + 1];
      if (iy !== 0 || thetaStart > 0) indices.push(a, b, d);
      if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);
    }
  } // build geometry


  this.setIndex(indices);
  this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
  this.addAttribute('normal', new Float32BufferAttribute(normals, 3));
  this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));
}

SphereBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;
/**
 * @author Kaleb Murphy
 * @author Mugen87 / https://github.com/Mugen87
 */
// RingGeometry

function RingGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {
  Geometry.call(this);
  this.type = 'RingGeometry';
  this.parameters = {
    innerRadius: innerRadius,
    outerRadius: outerRadius,
    thetaSegments: thetaSegments,
    phiSegments: phiSegments,
    thetaStart: thetaStart,
    thetaLength: thetaLength
  };
  this.fromBufferGeometry(new RingBufferGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength));
  this.mergeVertices();
}

RingGeometry.prototype = Object.create(Geometry.prototype);
RingGeometry.prototype.constructor = RingGeometry; // RingBufferGeometry

function RingBufferGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {
  BufferGeometry.call(this);
  this.type = 'RingBufferGeometry';
  this.parameters = {
    innerRadius: innerRadius,
    outerRadius: outerRadius,
    thetaSegments: thetaSegments,
    phiSegments: phiSegments,
    thetaStart: thetaStart,
    thetaLength: thetaLength
  };
  innerRadius = innerRadius || 0.5;
  outerRadius = outerRadius || 1;
  thetaStart = thetaStart !== undefined ? thetaStart : 0;
  thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
  thetaSegments = thetaSegments !== undefined ? Math.max(3, thetaSegments) : 8;
  phiSegments = phiSegments !== undefined ? Math.max(1, phiSegments) : 1; // buffers

  var indices = [];
  var vertices = [];
  var normals = [];
  var uvs = []; // some helper variables

  var segment;
  var radius = innerRadius;
  var radiusStep = (outerRadius - innerRadius) / phiSegments;
  var vertex = new Vector3();
  var uv = new Vector2();
  var j, i; // generate vertices, normals and uvs

  for (j = 0; j <= phiSegments; j++) {
    for (i = 0; i <= thetaSegments; i++) {
      // values are generate from the inside of the ring to the outside
      segment = thetaStart + i / thetaSegments * thetaLength; // vertex

      vertex.x = radius * Math.cos(segment);
      vertex.y = radius * Math.sin(segment);
      vertices.push(vertex.x, vertex.y, vertex.z); // normal

      normals.push(0, 0, 1); // uv

      uv.x = (vertex.x / outerRadius + 1) / 2;
      uv.y = (vertex.y / outerRadius + 1) / 2;
      uvs.push(uv.x, uv.y);
    } // increase the radius for next row of vertices


    radius += radiusStep;
  } // indices


  for (j = 0; j < phiSegments; j++) {
    var thetaSegmentLevel = j * (thetaSegments + 1);

    for (i = 0; i < thetaSegments; i++) {
      segment = i + thetaSegmentLevel;
      var a = segment;
      var b = segment + thetaSegments + 1;
      var c = segment + thetaSegments + 2;
      var d = segment + 1; // faces

      indices.push(a, b, d);
      indices.push(b, c, d);
    }
  } // build geometry


  this.setIndex(indices);
  this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
  this.addAttribute('normal', new Float32BufferAttribute(normals, 3));
  this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));
}

RingBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
RingBufferGeometry.prototype.constructor = RingBufferGeometry;
/**
 * @author zz85 / https://github.com/zz85
 * @author bhouston / http://clara.io
 * @author Mugen87 / https://github.com/Mugen87
 */
// LatheGeometry

function LatheGeometry(points, segments, phiStart, phiLength) {
  Geometry.call(this);
  this.type = 'LatheGeometry';
  this.parameters = {
    points: points,
    segments: segments,
    phiStart: phiStart,
    phiLength: phiLength
  };
  this.fromBufferGeometry(new LatheBufferGeometry(points, segments, phiStart, phiLength));
  this.mergeVertices();
}

LatheGeometry.prototype = Object.create(Geometry.prototype);
LatheGeometry.prototype.constructor = LatheGeometry; // LatheBufferGeometry

function LatheBufferGeometry(points, segments, phiStart, phiLength) {
  BufferGeometry.call(this);
  this.type = 'LatheBufferGeometry';
  this.parameters = {
    points: points,
    segments: segments,
    phiStart: phiStart,
    phiLength: phiLength
  };
  segments = Math.floor(segments) || 12;
  phiStart = phiStart || 0;
  phiLength = phiLength || Math.PI * 2; // clamp phiLength so it's in range of [ 0, 2PI ]

  phiLength = _Math.clamp(phiLength, 0, Math.PI * 2); // buffers

  var indices = [];
  var vertices = [];
  var uvs = []; // helper variables

  var base;
  var inverseSegments = 1.0 / segments;
  var vertex = new Vector3();
  var uv = new Vector2();
  var i, j; // generate vertices and uvs

  for (i = 0; i <= segments; i++) {
    var phi = phiStart + i * inverseSegments * phiLength;
    var sin = Math.sin(phi);
    var cos = Math.cos(phi);

    for (j = 0; j <= points.length - 1; j++) {
      // vertex
      vertex.x = points[j].x * sin;
      vertex.y = points[j].y;
      vertex.z = points[j].x * cos;
      vertices.push(vertex.x, vertex.y, vertex.z); // uv

      uv.x = i / segments;
      uv.y = j / (points.length - 1);
      uvs.push(uv.x, uv.y);
    }
  } // indices


  for (i = 0; i < segments; i++) {
    for (j = 0; j < points.length - 1; j++) {
      base = j + i * points.length;
      var a = base;
      var b = base + points.length;
      var c = base + points.length + 1;
      var d = base + 1; // faces

      indices.push(a, b, d);
      indices.push(b, c, d);
    }
  } // build geometry


  this.setIndex(indices);
  this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
  this.addAttribute('uv', new Float32BufferAttribute(uvs, 2)); // generate normals

  this.computeVertexNormals(); // if the geometry is closed, we need to average the normals along the seam.
  // because the corresponding vertices are identical (but still have different UVs).

  if (phiLength === Math.PI * 2) {
    var normals = this.attributes.normal.array;
    var n1 = new Vector3();
    var n2 = new Vector3();
    var n = new Vector3(); // this is the buffer offset for the last line of vertices

    base = segments * points.length * 3;

    for (i = 0, j = 0; i < points.length; i++, j += 3) {
      // select the normal of the vertex in the first line
      n1.x = normals[j + 0];
      n1.y = normals[j + 1];
      n1.z = normals[j + 2]; // select the normal of the vertex in the last line

      n2.x = normals[base + j + 0];
      n2.y = normals[base + j + 1];
      n2.z = normals[base + j + 2]; // average normals

      n.addVectors(n1, n2).normalize(); // assign the new values to both normals

      normals[j + 0] = normals[base + j + 0] = n.x;
      normals[j + 1] = normals[base + j + 1] = n.y;
      normals[j + 2] = normals[base + j + 2] = n.z;
    }
  }
}

LatheBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;
/**
 * @author jonobr1 / http://jonobr1.com
 * @author Mugen87 / https://github.com/Mugen87
 */
// ShapeGeometry

function ShapeGeometry(shapes, curveSegments) {
  Geometry.call(this);
  this.type = 'ShapeGeometry';

  if (typeof curveSegments === 'object') {
    console.warn('THREE.ShapeGeometry: Options parameter has been removed.');
    curveSegments = curveSegments.curveSegments;
  }

  this.parameters = {
    shapes: shapes,
    curveSegments: curveSegments
  };
  this.fromBufferGeometry(new ShapeBufferGeometry(shapes, curveSegments));
  this.mergeVertices();
}

ShapeGeometry.prototype = Object.create(Geometry.prototype);
ShapeGeometry.prototype.constructor = ShapeGeometry;

ShapeGeometry.prototype.toJSON = function () {
  var data = Geometry.prototype.toJSON.call(this);
  var shapes = this.parameters.shapes;
  return toJSON$1(shapes, data);
}; // ShapeBufferGeometry


function ShapeBufferGeometry(shapes, curveSegments) {
  BufferGeometry.call(this);
  this.type = 'ShapeBufferGeometry';
  this.parameters = {
    shapes: shapes,
    curveSegments: curveSegments
  };
  curveSegments = curveSegments || 12; // buffers

  var indices = [];
  var vertices = [];
  var normals = [];
  var uvs = []; // helper variables

  var groupStart = 0;
  var groupCount = 0; // allow single and array values for "shapes" parameter

  if (Array.isArray(shapes) === false) {
    addShape(shapes);
  } else {
    for (var i = 0; i < shapes.length; i++) {
      addShape(shapes[i]);
      this.addGroup(groupStart, groupCount, i); // enables MultiMaterial support

      groupStart += groupCount;
      groupCount = 0;
    }
  } // build geometry


  this.setIndex(indices);
  this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
  this.addAttribute('normal', new Float32BufferAttribute(normals, 3));
  this.addAttribute('uv', new Float32BufferAttribute(uvs, 2)); // helper functions

  function addShape(shape) {
    var i, l, shapeHole;
    var indexOffset = vertices.length / 3;
    var points = shape.extractPoints(curveSegments);
    var shapeVertices = points.shape;
    var shapeHoles = points.holes; // check direction of vertices

    if (ShapeUtils.isClockWise(shapeVertices) === false) {
      shapeVertices = shapeVertices.reverse();
    }

    for (i = 0, l = shapeHoles.length; i < l; i++) {
      shapeHole = shapeHoles[i];

      if (ShapeUtils.isClockWise(shapeHole) === true) {
        shapeHoles[i] = shapeHole.reverse();
      }
    }

    var faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles); // join vertices of inner and outer paths to a single array

    for (i = 0, l = shapeHoles.length; i < l; i++) {
      shapeHole = shapeHoles[i];
      shapeVertices = shapeVertices.concat(shapeHole);
    } // vertices, normals, uvs


    for (i = 0, l = shapeVertices.length; i < l; i++) {
      var vertex = shapeVertices[i];
      vertices.push(vertex.x, vertex.y, 0);
      normals.push(0, 0, 1);
      uvs.push(vertex.x, vertex.y); // world uvs
    } // incides


    for (i = 0, l = faces.length; i < l; i++) {
      var face = faces[i];
      var a = face[0] + indexOffset;
      var b = face[1] + indexOffset;
      var c = face[2] + indexOffset;
      indices.push(a, b, c);
      groupCount += 3;
    }
  }
}

ShapeBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
ShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;

ShapeBufferGeometry.prototype.toJSON = function () {
  var data = BufferGeometry.prototype.toJSON.call(this);
  var shapes = this.parameters.shapes;
  return toJSON$1(shapes, data);
}; //


function toJSON$1(shapes, data) {
  data.shapes = [];

  if (Array.isArray(shapes)) {
    for (var i = 0, l = shapes.length; i < l; i++) {
      var shape = shapes[i];
      data.shapes.push(shape.uuid);
    }
  } else {
    data.shapes.push(shapes.uuid);
  }

  return data;
}
/**
 * @author WestLangley / http://github.com/WestLangley
 * @author Mugen87 / https://github.com/Mugen87
 */


function EdgesGeometry(geometry, thresholdAngle) {
  BufferGeometry.call(this);
  this.type = 'EdgesGeometry';
  this.parameters = {
    thresholdAngle: thresholdAngle
  };
  thresholdAngle = thresholdAngle !== undefined ? thresholdAngle : 1; // buffer

  var vertices = []; // helper variables

  var thresholdDot = Math.cos(_Math.DEG2RAD * thresholdAngle);
  var edge = [0, 0],
      edges = {},
      edge1,
      edge2;
  var key,
      keys = ['a', 'b', 'c']; // prepare source geometry

  var geometry2;

  if (geometry.isBufferGeometry) {
    geometry2 = new Geometry();
    geometry2.fromBufferGeometry(geometry);
  } else {
    geometry2 = geometry.clone();
  }

  geometry2.mergeVertices();
  geometry2.computeFaceNormals();
  var sourceVertices = geometry2.vertices;
  var faces = geometry2.faces; // now create a data structure where each entry represents an edge with its adjoining faces

  for (var i = 0, l = faces.length; i < l; i++) {
    var face = faces[i];

    for (var j = 0; j < 3; j++) {
      edge1 = face[keys[j]];
      edge2 = face[keys[(j + 1) % 3]];
      edge[0] = Math.min(edge1, edge2);
      edge[1] = Math.max(edge1, edge2);
      key = edge[0] + ',' + edge[1];

      if (edges[key] === undefined) {
        edges[key] = {
          index1: edge[0],
          index2: edge[1],
          face1: i,
          face2: undefined
        };
      } else {
        edges[key].face2 = i;
      }
    }
  } // generate vertices


  for (key in edges) {
    var e = edges[key]; // an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.

    if (e.face2 === undefined || faces[e.face1].normal.dot(faces[e.face2].normal) <= thresholdDot) {
      var vertex = sourceVertices[e.index1];
      vertices.push(vertex.x, vertex.y, vertex.z);
      vertex = sourceVertices[e.index2];
      vertices.push(vertex.x, vertex.y, vertex.z);
    }
  } // build geometry


  this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
}

EdgesGeometry.prototype = Object.create(BufferGeometry.prototype);
EdgesGeometry.prototype.constructor = EdgesGeometry;
/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */
// CylinderGeometry

function CylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
  Geometry.call(this);
  this.type = 'CylinderGeometry';
  this.parameters = {
    radiusTop: radiusTop,
    radiusBottom: radiusBottom,
    height: height,
    radialSegments: radialSegments,
    heightSegments: heightSegments,
    openEnded: openEnded,
    thetaStart: thetaStart,
    thetaLength: thetaLength
  };
  this.fromBufferGeometry(new CylinderBufferGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength));
  this.mergeVertices();
}

CylinderGeometry.prototype = Object.create(Geometry.prototype);
CylinderGeometry.prototype.constructor = CylinderGeometry; // CylinderBufferGeometry

function CylinderBufferGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
  BufferGeometry.call(this);
  this.type = 'CylinderBufferGeometry';
  this.parameters = {
    radiusTop: radiusTop,
    radiusBottom: radiusBottom,
    height: height,
    radialSegments: radialSegments,
    heightSegments: heightSegments,
    openEnded: openEnded,
    thetaStart: thetaStart,
    thetaLength: thetaLength
  };
  var scope = this;
  radiusTop = radiusTop !== undefined ? radiusTop : 1;
  radiusBottom = radiusBottom !== undefined ? radiusBottom : 1;
  height = height || 1;
  radialSegments = Math.floor(radialSegments) || 8;
  heightSegments = Math.floor(heightSegments) || 1;
  openEnded = openEnded !== undefined ? openEnded : false;
  thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
  thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2; // buffers

  var indices = [];
  var vertices = [];
  var normals = [];
  var uvs = []; // helper variables

  var index = 0;
  var indexArray = [];
  var halfHeight = height / 2;
  var groupStart = 0; // generate geometry

  generateTorso();

  if (openEnded === false) {
    if (radiusTop > 0) generateCap(true);
    if (radiusBottom > 0) generateCap(false);
  } // build geometry


  this.setIndex(indices);
  this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
  this.addAttribute('normal', new Float32BufferAttribute(normals, 3));
  this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));

  function generateTorso() {
    var x, y;
    var normal = new Vector3();
    var vertex = new Vector3();
    var groupCount = 0; // this will be used to calculate the normal

    var slope = (radiusBottom - radiusTop) / height; // generate vertices, normals and uvs

    for (y = 0; y <= heightSegments; y++) {
      var indexRow = [];
      var v = y / heightSegments; // calculate the radius of the current row

      var radius = v * (radiusBottom - radiusTop) + radiusTop;

      for (x = 0; x <= radialSegments; x++) {
        var u = x / radialSegments;
        var theta = u * thetaLength + thetaStart;
        var sinTheta = Math.sin(theta);
        var cosTheta = Math.cos(theta); // vertex

        vertex.x = radius * sinTheta;
        vertex.y = -v * height + halfHeight;
        vertex.z = radius * cosTheta;
        vertices.push(vertex.x, vertex.y, vertex.z); // normal

        normal.set(sinTheta, slope, cosTheta).normalize();
        normals.push(normal.x, normal.y, normal.z); // uv

        uvs.push(u, 1 - v); // save index of vertex in respective row

        indexRow.push(index++);
      } // now save vertices of the row in our index array


      indexArray.push(indexRow);
    } // generate indices


    for (x = 0; x < radialSegments; x++) {
      for (y = 0; y < heightSegments; y++) {
        // we use the index array to access the correct indices
        var a = indexArray[y][x];
        var b = indexArray[y + 1][x];
        var c = indexArray[y + 1][x + 1];
        var d = indexArray[y][x + 1]; // faces

        indices.push(a, b, d);
        indices.push(b, c, d); // update group counter

        groupCount += 6;
      }
    } // add a group to the geometry. this will ensure multi material support


    scope.addGroup(groupStart, groupCount, 0); // calculate new start value for groups

    groupStart += groupCount;
  }

  function generateCap(top) {
    var x, centerIndexStart, centerIndexEnd;
    var uv = new Vector2();
    var vertex = new Vector3();
    var groupCount = 0;
    var radius = top === true ? radiusTop : radiusBottom;
    var sign = top === true ? 1 : -1; // save the index of the first center vertex

    centerIndexStart = index; // first we generate the center vertex data of the cap.
    // because the geometry needs one set of uvs per face,
    // we must generate a center vertex per face/segment

    for (x = 1; x <= radialSegments; x++) {
      // vertex
      vertices.push(0, halfHeight * sign, 0); // normal

      normals.push(0, sign, 0); // uv

      uvs.push(0.5, 0.5); // increase index

      index++;
    } // save the index of the last center vertex


    centerIndexEnd = index; // now we generate the surrounding vertices, normals and uvs

    for (x = 0; x <= radialSegments; x++) {
      var u = x / radialSegments;
      var theta = u * thetaLength + thetaStart;
      var cosTheta = Math.cos(theta);
      var sinTheta = Math.sin(theta); // vertex

      vertex.x = radius * sinTheta;
      vertex.y = halfHeight * sign;
      vertex.z = radius * cosTheta;
      vertices.push(vertex.x, vertex.y, vertex.z); // normal

      normals.push(0, sign, 0); // uv

      uv.x = cosTheta * 0.5 + 0.5;
      uv.y = sinTheta * 0.5 * sign + 0.5;
      uvs.push(uv.x, uv.y); // increase index

      index++;
    } // generate indices


    for (x = 0; x < radialSegments; x++) {
      var c = centerIndexStart + x;
      var i = centerIndexEnd + x;

      if (top === true) {
        // face top
        indices.push(i, i + 1, c);
      } else {
        // face bottom
        indices.push(i + 1, i, c);
      }

      groupCount += 3;
    } // add a group to the geometry. this will ensure multi material support


    scope.addGroup(groupStart, groupCount, top === true ? 1 : 2); // calculate new start value for groups

    groupStart += groupCount;
  }
}

CylinderBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;
/**
 * @author abelnation / http://github.com/abelnation
 */
// ConeGeometry

function ConeGeometry(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
  CylinderGeometry.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
  this.type = 'ConeGeometry';
  this.parameters = {
    radius: radius,
    height: height,
    radialSegments: radialSegments,
    heightSegments: heightSegments,
    openEnded: openEnded,
    thetaStart: thetaStart,
    thetaLength: thetaLength
  };
}

ConeGeometry.prototype = Object.create(CylinderGeometry.prototype);
ConeGeometry.prototype.constructor = ConeGeometry; // ConeBufferGeometry

function ConeBufferGeometry(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
  CylinderBufferGeometry.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
  this.type = 'ConeBufferGeometry';
  this.parameters = {
    radius: radius,
    height: height,
    radialSegments: radialSegments,
    heightSegments: heightSegments,
    openEnded: openEnded,
    thetaStart: thetaStart,
    thetaLength: thetaLength
  };
}

ConeBufferGeometry.prototype = Object.create(CylinderBufferGeometry.prototype);
ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;
/**
 * @author benaadams / https://twitter.com/ben_a_adams
 * @author Mugen87 / https://github.com/Mugen87
 * @author hughes
 */
// CircleGeometry

function CircleGeometry(radius, segments, thetaStart, thetaLength) {
  Geometry.call(this);
  this.type = 'CircleGeometry';
  this.parameters = {
    radius: radius,
    segments: segments,
    thetaStart: thetaStart,
    thetaLength: thetaLength
  };
  this.fromBufferGeometry(new CircleBufferGeometry(radius, segments, thetaStart, thetaLength));
  this.mergeVertices();
}

CircleGeometry.prototype = Object.create(Geometry.prototype);
CircleGeometry.prototype.constructor = CircleGeometry; // CircleBufferGeometry

function CircleBufferGeometry(radius, segments, thetaStart, thetaLength) {
  BufferGeometry.call(this);
  this.type = 'CircleBufferGeometry';
  this.parameters = {
    radius: radius,
    segments: segments,
    thetaStart: thetaStart,
    thetaLength: thetaLength
  };
  radius = radius || 1;
  segments = segments !== undefined ? Math.max(3, segments) : 8;
  thetaStart = thetaStart !== undefined ? thetaStart : 0;
  thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2; // buffers

  var indices = [];
  var vertices = [];
  var normals = [];
  var uvs = []; // helper variables

  var i, s;
  var vertex = new Vector3();
  var uv = new Vector2(); // center point

  vertices.push(0, 0, 0);
  normals.push(0, 0, 1);
  uvs.push(0.5, 0.5);

  for (s = 0, i = 3; s <= segments; s++, i += 3) {
    var segment = thetaStart + s / segments * thetaLength; // vertex

    vertex.x = radius * Math.cos(segment);
    vertex.y = radius * Math.sin(segment);
    vertices.push(vertex.x, vertex.y, vertex.z); // normal

    normals.push(0, 0, 1); // uvs

    uv.x = (vertices[i] / radius + 1) / 2;
    uv.y = (vertices[i + 1] / radius + 1) / 2;
    uvs.push(uv.x, uv.y);
  } // indices


  for (i = 1; i <= segments; i++) {
    indices.push(i, i + 1, 0);
  } // build geometry


  this.setIndex(indices);
  this.addAttribute('position', new Float32BufferAttribute(vertices, 3));
  this.addAttribute('normal', new Float32BufferAttribute(normals, 3));
  this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));
}

CircleBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;
var Geometries =
/*#__PURE__*/
Object.freeze({
  WireframeGeometry: WireframeGeometry,
  ParametricGeometry: ParametricGeometry,
  ParametricBufferGeometry: ParametricBufferGeometry,
  TetrahedronGeometry: TetrahedronGeometry,
  TetrahedronBufferGeometry: TetrahedronBufferGeometry,
  OctahedronGeometry: OctahedronGeometry,
  OctahedronBufferGeometry: OctahedronBufferGeometry,
  IcosahedronGeometry: IcosahedronGeometry,
  IcosahedronBufferGeometry: IcosahedronBufferGeometry,
  DodecahedronGeometry: DodecahedronGeometry,
  DodecahedronBufferGeometry: DodecahedronBufferGeometry,
  PolyhedronGeometry: PolyhedronGeometry,
  PolyhedronBufferGeometry: PolyhedronBufferGeometry,
  TubeGeometry: TubeGeometry,
  TubeBufferGeometry: TubeBufferGeometry,
  TorusKnotGeometry: TorusKnotGeometry,
  TorusKnotBufferGeometry: TorusKnotBufferGeometry,
  TorusGeometry: TorusGeometry,
  TorusBufferGeometry: TorusBufferGeometry,
  TextGeometry: TextGeometry,
  TextBufferGeometry: TextBufferGeometry,
  SphereGeometry: SphereGeometry,
  SphereBufferGeometry: SphereBufferGeometry,
  RingGeometry: RingGeometry,
  RingBufferGeometry: RingBufferGeometry,
  PlaneGeometry: PlaneGeometry,
  PlaneBufferGeometry: PlaneBufferGeometry,
  LatheGeometry: LatheGeometry,
  LatheBufferGeometry: LatheBufferGeometry,
  ShapeGeometry: ShapeGeometry,
  ShapeBufferGeometry: ShapeBufferGeometry,
  ExtrudeGeometry: ExtrudeGeometry,
  ExtrudeBufferGeometry: ExtrudeBufferGeometry,
  EdgesGeometry: EdgesGeometry,
  ConeGeometry: ConeGeometry,
  ConeBufferGeometry: ConeBufferGeometry,
  CylinderGeometry: CylinderGeometry,
  CylinderBufferGeometry: CylinderBufferGeometry,
  CircleGeometry: CircleGeometry,
  CircleBufferGeometry: CircleBufferGeometry,
  BoxGeometry: BoxGeometry,
  BoxBufferGeometry: BoxBufferGeometry
});
/**
 * @author mrdoob / http://mrdoob.com/
 *
 * parameters = {
 *  color: <THREE.Color>
 * }
 */

function ShadowMaterial(parameters) {
  Material.call(this);
  this.type = 'ShadowMaterial';
  this.color = new Color(0x000000);
  this.transparent = true;
  this.setValues(parameters);
}

ShadowMaterial.prototype = Object.create(Material.prototype);
ShadowMaterial.prototype.constructor = ShadowMaterial;
ShadowMaterial.prototype.isShadowMaterial = true;

ShadowMaterial.prototype.copy = function (source) {
  Material.prototype.copy.call(this, source);
  this.color.copy(source.color);
  return this;
};
/**
 * @author mrdoob / http://mrdoob.com/
 */


function RawShaderMaterial(parameters) {
  ShaderMaterial.call(this, parameters);
  this.type = 'RawShaderMaterial';
}

RawShaderMaterial.prototype = Object.create(ShaderMaterial.prototype);
RawShaderMaterial.prototype.constructor = RawShaderMaterial;
RawShaderMaterial.prototype.isRawShaderMaterial = true;
/**
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *  color: <hex>,
 *  roughness: <float>,
 *  metalness: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  roughnessMap: new THREE.Texture( <Image> ),
 *
 *  metalnessMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  envMapIntensity: <float>
 *
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */

function MeshStandardMaterial(parameters) {
  Material.call(this);
  this.defines = {
    'STANDARD': ''
  };
  this.type = 'MeshStandardMaterial';
  this.color = new Color(0xffffff); // diffuse

  this.roughness = 0.5;
  this.metalness = 0.5;
  this.map = null;
  this.lightMap = null;
  this.lightMapIntensity = 1.0;
  this.aoMap = null;
  this.aoMapIntensity = 1.0;
  this.emissive = new Color(0x000000);
  this.emissiveIntensity = 1.0;
  this.emissiveMap = null;
  this.bumpMap = null;
  this.bumpScale = 1;
  this.normalMap = null;
  this.normalMapType = TangentSpaceNormalMap;
  this.normalScale = new Vector2(1, 1);
  this.displacementMap = null;
  this.displacementScale = 1;
  this.displacementBias = 0;
  this.roughnessMap = null;
  this.metalnessMap = null;
  this.alphaMap = null;
  this.envMap = null;
  this.envMapIntensity = 1.0;
  this.refractionRatio = 0.98;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.wireframeLinecap = 'round';
  this.wireframeLinejoin = 'round';
  this.skinning = false;
  this.morphTargets = false;
  this.morphNormals = false;
  this.setValues(parameters);
}

MeshStandardMaterial.prototype = Object.create(Material.prototype);
MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;
MeshStandardMaterial.prototype.isMeshStandardMaterial = true;

MeshStandardMaterial.prototype.copy = function (source) {
  Material.prototype.copy.call(this, source);
  this.defines = {
    'STANDARD': ''
  };
  this.color.copy(source.color);
  this.roughness = source.roughness;
  this.metalness = source.metalness;
  this.map = source.map;
  this.lightMap = source.lightMap;
  this.lightMapIntensity = source.lightMapIntensity;
  this.aoMap = source.aoMap;
  this.aoMapIntensity = source.aoMapIntensity;
  this.emissive.copy(source.emissive);
  this.emissiveMap = source.emissiveMap;
  this.emissiveIntensity = source.emissiveIntensity;
  this.bumpMap = source.bumpMap;
  this.bumpScale = source.bumpScale;
  this.normalMap = source.normalMap;
  this.normalMapType = source.normalMapType;
  this.normalScale.copy(source.normalScale);
  this.displacementMap = source.displacementMap;
  this.displacementScale = source.displacementScale;
  this.displacementBias = source.displacementBias;
  this.roughnessMap = source.roughnessMap;
  this.metalnessMap = source.metalnessMap;
  this.alphaMap = source.alphaMap;
  this.envMap = source.envMap;
  this.envMapIntensity = source.envMapIntensity;
  this.refractionRatio = source.refractionRatio;
  this.wireframe = source.wireframe;
  this.wireframeLinewidth = source.wireframeLinewidth;
  this.wireframeLinecap = source.wireframeLinecap;
  this.wireframeLinejoin = source.wireframeLinejoin;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.morphNormals = source.morphNormals;
  return this;
};
/**
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *  reflectivity: <float>
 *  clearCoat: <float>
 *  clearCoatRoughness: <float>
 * }
 */


function MeshPhysicalMaterial(parameters) {
  MeshStandardMaterial.call(this);
  this.defines = {
    'PHYSICAL': ''
  };
  this.type = 'MeshPhysicalMaterial';
  this.reflectivity = 0.5; // maps to F0 = 0.04

  this.clearCoat = 0.0;
  this.clearCoatRoughness = 0.0;
  this.setValues(parameters);
}

MeshPhysicalMaterial.prototype = Object.create(MeshStandardMaterial.prototype);
MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;
MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;

MeshPhysicalMaterial.prototype.copy = function (source) {
  MeshStandardMaterial.prototype.copy.call(this, source);
  this.defines = {
    'PHYSICAL': ''
  };
  this.reflectivity = source.reflectivity;
  this.clearCoat = source.clearCoat;
  this.clearCoatRoughness = source.clearCoatRoughness;
  return this;
};
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  specular: <hex>,
 *  shininess: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */


function MeshPhongMaterial(parameters) {
  Material.call(this);
  this.type = 'MeshPhongMaterial';
  this.color = new Color(0xffffff); // diffuse

  this.specular = new Color(0x111111);
  this.shininess = 30;
  this.map = null;
  this.lightMap = null;
  this.lightMapIntensity = 1.0;
  this.aoMap = null;
  this.aoMapIntensity = 1.0;
  this.emissive = new Color(0x000000);
  this.emissiveIntensity = 1.0;
  this.emissiveMap = null;
  this.bumpMap = null;
  this.bumpScale = 1;
  this.normalMap = null;
  this.normalMapType = TangentSpaceNormalMap;
  this.normalScale = new Vector2(1, 1);
  this.displacementMap = null;
  this.displacementScale = 1;
  this.displacementBias = 0;
  this.specularMap = null;
  this.alphaMap = null;
  this.envMap = null;
  this.combine = MultiplyOperation;
  this.reflectivity = 1;
  this.refractionRatio = 0.98;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.wireframeLinecap = 'round';
  this.wireframeLinejoin = 'round';
  this.skinning = false;
  this.morphTargets = false;
  this.morphNormals = false;
  this.setValues(parameters);
}

MeshPhongMaterial.prototype = Object.create(Material.prototype);
MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;
MeshPhongMaterial.prototype.isMeshPhongMaterial = true;

MeshPhongMaterial.prototype.copy = function (source) {
  Material.prototype.copy.call(this, source);
  this.color.copy(source.color);
  this.specular.copy(source.specular);
  this.shininess = source.shininess;
  this.map = source.map;
  this.lightMap = source.lightMap;
  this.lightMapIntensity = source.lightMapIntensity;
  this.aoMap = source.aoMap;
  this.aoMapIntensity = source.aoMapIntensity;
  this.emissive.copy(source.emissive);
  this.emissiveMap = source.emissiveMap;
  this.emissiveIntensity = source.emissiveIntensity;
  this.bumpMap = source.bumpMap;
  this.bumpScale = source.bumpScale;
  this.normalMap = source.normalMap;
  this.normalMapType = source.normalMapType;
  this.normalScale.copy(source.normalScale);
  this.displacementMap = source.displacementMap;
  this.displacementScale = source.displacementScale;
  this.displacementBias = source.displacementBias;
  this.specularMap = source.specularMap;
  this.alphaMap = source.alphaMap;
  this.envMap = source.envMap;
  this.combine = source.combine;
  this.reflectivity = source.reflectivity;
  this.refractionRatio = source.refractionRatio;
  this.wireframe = source.wireframe;
  this.wireframeLinewidth = source.wireframeLinewidth;
  this.wireframeLinecap = source.wireframeLinecap;
  this.wireframeLinejoin = source.wireframeLinejoin;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.morphNormals = source.morphNormals;
  return this;
};
/**
 * @author takahirox / http://github.com/takahirox
 *
 * parameters = {
 *  gradientMap: new THREE.Texture( <Image> )
 * }
 */


function MeshToonMaterial(parameters) {
  MeshPhongMaterial.call(this);
  this.defines = {
    'TOON': ''
  };
  this.type = 'MeshToonMaterial';
  this.gradientMap = null;
  this.setValues(parameters);
}

MeshToonMaterial.prototype = Object.create(MeshPhongMaterial.prototype);
MeshToonMaterial.prototype.constructor = MeshToonMaterial;
MeshToonMaterial.prototype.isMeshToonMaterial = true;

MeshToonMaterial.prototype.copy = function (source) {
  MeshPhongMaterial.prototype.copy.call(this, source);
  this.gradientMap = source.gradientMap;
  return this;
};
/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *  opacity: <float>,
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */


function MeshNormalMaterial(parameters) {
  Material.call(this);
  this.type = 'MeshNormalMaterial';
  this.bumpMap = null;
  this.bumpScale = 1;
  this.normalMap = null;
  this.normalMapType = TangentSpaceNormalMap;
  this.normalScale = new Vector2(1, 1);
  this.displacementMap = null;
  this.displacementScale = 1;
  this.displacementBias = 0;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.fog = false;
  this.lights = false;
  this.skinning = false;
  this.morphTargets = false;
  this.morphNormals = false;
  this.setValues(parameters);
}

MeshNormalMaterial.prototype = Object.create(Material.prototype);
MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;
MeshNormalMaterial.prototype.isMeshNormalMaterial = true;

MeshNormalMaterial.prototype.copy = function (source) {
  Material.prototype.copy.call(this, source);
  this.bumpMap = source.bumpMap;
  this.bumpScale = source.bumpScale;
  this.normalMap = source.normalMap;
  this.normalMapType = source.normalMapType;
  this.normalScale.copy(source.normalScale);
  this.displacementMap = source.displacementMap;
  this.displacementScale = source.displacementScale;
  this.displacementBias = source.displacementBias;
  this.wireframe = source.wireframe;
  this.wireframeLinewidth = source.wireframeLinewidth;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.morphNormals = source.morphNormals;
  return this;
};
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */


function MeshLambertMaterial(parameters) {
  Material.call(this);
  this.type = 'MeshLambertMaterial';
  this.color = new Color(0xffffff); // diffuse

  this.map = null;
  this.lightMap = null;
  this.lightMapIntensity = 1.0;
  this.aoMap = null;
  this.aoMapIntensity = 1.0;
  this.emissive = new Color(0x000000);
  this.emissiveIntensity = 1.0;
  this.emissiveMap = null;
  this.specularMap = null;
  this.alphaMap = null;
  this.envMap = null;
  this.combine = MultiplyOperation;
  this.reflectivity = 1;
  this.refractionRatio = 0.98;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.wireframeLinecap = 'round';
  this.wireframeLinejoin = 'round';
  this.skinning = false;
  this.morphTargets = false;
  this.morphNormals = false;
  this.setValues(parameters);
}

MeshLambertMaterial.prototype = Object.create(Material.prototype);
MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;
MeshLambertMaterial.prototype.isMeshLambertMaterial = true;

MeshLambertMaterial.prototype.copy = function (source) {
  Material.prototype.copy.call(this, source);
  this.color.copy(source.color);
  this.map = source.map;
  this.lightMap = source.lightMap;
  this.lightMapIntensity = source.lightMapIntensity;
  this.aoMap = source.aoMap;
  this.aoMapIntensity = source.aoMapIntensity;
  this.emissive.copy(source.emissive);
  this.emissiveMap = source.emissiveMap;
  this.emissiveIntensity = source.emissiveIntensity;
  this.specularMap = source.specularMap;
  this.alphaMap = source.alphaMap;
  this.envMap = source.envMap;
  this.combine = source.combine;
  this.reflectivity = source.reflectivity;
  this.refractionRatio = source.refractionRatio;
  this.wireframe = source.wireframe;
  this.wireframeLinewidth = source.wireframeLinewidth;
  this.wireframeLinecap = source.wireframeLinecap;
  this.wireframeLinejoin = source.wireframeLinejoin;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.morphNormals = source.morphNormals;
  return this;
};
/**
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  matcap: new THREE.Texture( <Image> ),
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */


function MeshMatcapMaterial(parameters) {
  Material.call(this);
  this.defines = {
    'MATCAP': ''
  };
  this.type = 'MeshMatcapMaterial';
  this.color = new Color(0xffffff); // diffuse

  this.matcap = null;
  this.map = null;
  this.bumpMap = null;
  this.bumpScale = 1;
  this.normalMap = null;
  this.normalMapType = TangentSpaceNormalMap;
  this.normalScale = new Vector2(1, 1);
  this.displacementMap = null;
  this.displacementScale = 1;
  this.displacementBias = 0;
  this.alphaMap = null;
  this.skinning = false;
  this.morphTargets = false;
  this.morphNormals = false;
  this.lights = false;
  this.setValues(parameters);
}

MeshMatcapMaterial.prototype = Object.create(Material.prototype);
MeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;
MeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;

MeshMatcapMaterial.prototype.copy = function (source) {
  Material.prototype.copy.call(this, source);
  this.defines = {
    'MATCAP': ''
  };
  this.color.copy(source.color);
  this.matcap = source.matcap;
  this.map = source.map;
  this.bumpMap = source.bumpMap;
  this.bumpScale = source.bumpScale;
  this.normalMap = source.normalMap;
  this.normalMapType = source.normalMapType;
  this.normalScale.copy(source.normalScale);
  this.displacementMap = source.displacementMap;
  this.displacementScale = source.displacementScale;
  this.displacementBias = source.displacementBias;
  this.alphaMap = source.alphaMap;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.morphNormals = source.morphNormals;
  return this;
};
/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  linewidth: <float>,
 *
 *  scale: <float>,
 *  dashSize: <float>,
 *  gapSize: <float>
 * }
 */


function LineDashedMaterial(parameters) {
  LineBasicMaterial.call(this);
  this.type = 'LineDashedMaterial';
  this.scale = 1;
  this.dashSize = 3;
  this.gapSize = 1;
  this.setValues(parameters);
}

LineDashedMaterial.prototype = Object.create(LineBasicMaterial.prototype);
LineDashedMaterial.prototype.constructor = LineDashedMaterial;
LineDashedMaterial.prototype.isLineDashedMaterial = true;

LineDashedMaterial.prototype.copy = function (source) {
  LineBasicMaterial.prototype.copy.call(this, source);
  this.scale = source.scale;
  this.dashSize = source.dashSize;
  this.gapSize = source.gapSize;
  return this;
};

var Materials =
/*#__PURE__*/
Object.freeze({
  ShadowMaterial: ShadowMaterial,
  SpriteMaterial: SpriteMaterial,
  RawShaderMaterial: RawShaderMaterial,
  ShaderMaterial: ShaderMaterial,
  PointsMaterial: PointsMaterial,
  MeshPhysicalMaterial: MeshPhysicalMaterial,
  MeshStandardMaterial: MeshStandardMaterial,
  MeshPhongMaterial: MeshPhongMaterial,
  MeshToonMaterial: MeshToonMaterial,
  MeshNormalMaterial: MeshNormalMaterial,
  MeshLambertMaterial: MeshLambertMaterial,
  MeshDepthMaterial: MeshDepthMaterial,
  MeshDistanceMaterial: MeshDistanceMaterial,
  MeshBasicMaterial: MeshBasicMaterial,
  MeshMatcapMaterial: MeshMatcapMaterial,
  LineDashedMaterial: LineDashedMaterial,
  LineBasicMaterial: LineBasicMaterial,
  Material: Material
});
/**
 * @author tschw
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 */

var AnimationUtils = {
  // same as Array.prototype.slice, but also works on typed arrays
  arraySlice: function (array, from, to) {
    if (AnimationUtils.isTypedArray(array)) {
      // in ios9 array.subarray(from, undefined) will return empty array
      // but array.subarray(from) or array.subarray(from, len) is correct
      return new array.constructor(array.subarray(from, to !== undefined ? to : array.length));
    }

    return array.slice(from, to);
  },
  // converts an array to a specific type
  convertArray: function (array, type, forceClone) {
    if (!array || // let 'undefined' and 'null' pass
    !forceClone && array.constructor === type) return array;

    if (typeof type.BYTES_PER_ELEMENT === 'number') {
      return new type(array); // create typed array
    }

    return Array.prototype.slice.call(array); // create Array
  },
  isTypedArray: function (object) {
    return ArrayBuffer.isView(object) && !(object instanceof DataView);
  },
  // returns an array by which times and values can be sorted
  getKeyframeOrder: function (times) {
    function compareTime(i, j) {
      return times[i] - times[j];
    }

    var n = times.length;
    var result = new Array(n);

    for (var i = 0; i !== n; ++i) result[i] = i;

    result.sort(compareTime);
    return result;
  },
  // uses the array previously returned by 'getKeyframeOrder' to sort data
  sortedArray: function (values, stride, order) {
    var nValues = values.length;
    var result = new values.constructor(nValues);

    for (var i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {
      var srcOffset = order[i] * stride;

      for (var j = 0; j !== stride; ++j) {
        result[dstOffset++] = values[srcOffset + j];
      }
    }

    return result;
  },
  // function for parsing AOS keyframe formats
  flattenJSON: function (jsonKeys, times, values, valuePropertyName) {
    var i = 1,
        key = jsonKeys[0];

    while (key !== undefined && key[valuePropertyName] === undefined) {
      key = jsonKeys[i++];
    }

    if (key === undefined) return; // no data

    var value = key[valuePropertyName];
    if (value === undefined) return; // no data

    if (Array.isArray(value)) {
      do {
        value = key[valuePropertyName];

        if (value !== undefined) {
          times.push(key.time);
          values.push.apply(values, value); // push all elements
        }

        key = jsonKeys[i++];
      } while (key !== undefined);
    } else if (value.toArray !== undefined) {
      // ...assume THREE.Math-ish
      do {
        value = key[valuePropertyName];

        if (value !== undefined) {
          times.push(key.time);
          value.toArray(values, values.length);
        }

        key = jsonKeys[i++];
      } while (key !== undefined);
    } else {
      // otherwise push as-is
      do {
        value = key[valuePropertyName];

        if (value !== undefined) {
          times.push(key.time);
          values.push(value);
        }

        key = jsonKeys[i++];
      } while (key !== undefined);
    }
  }
};
/**
 * Abstract base class of interpolants over parametric samples.
 *
 * The parameter domain is one dimensional, typically the time or a path
 * along a curve defined by the data.
 *
 * The sample values can have any dimensionality and derived classes may
 * apply special interpretations to the data.
 *
 * This class provides the interval seek in a Template Method, deferring
 * the actual interpolation to derived classes.
 *
 * Time complexity is O(1) for linear access crossing at most two points
 * and O(log N) for random access, where N is the number of positions.
 *
 * References:
 *
 * 		http://www.oodesign.com/template-method-pattern.html
 *
 * @author tschw
 */

exports.AnimationUtils = AnimationUtils;

function Interpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
  this.parameterPositions = parameterPositions;
  this._cachedIndex = 0;
  this.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);
  this.sampleValues = sampleValues;
  this.valueSize = sampleSize;
}

Object.assign(Interpolant.prototype, {
  evaluate: function (t) {
    var pp = this.parameterPositions,
        i1 = this._cachedIndex,
        t1 = pp[i1],
        t0 = pp[i1 - 1];

    validate_interval: {
      seek: {
        var right;

        linear_scan: {
          //- See http://jsperf.com/comparison-to-undefined/3
          //- slower code:
          //-
          //- 				if ( t >= t1 || t1 === undefined ) {
          forward_scan: if (!(t < t1)) {
            for (var giveUpAt = i1 + 2;;) {
              if (t1 === undefined) {
                if (t < t0) break forward_scan; // after end

                i1 = pp.length;
                this._cachedIndex = i1;
                return this.afterEnd_(i1 - 1, t, t0);
              }

              if (i1 === giveUpAt) break; // this loop

              t0 = t1;
              t1 = pp[++i1];

              if (t < t1) {
                // we have arrived at the sought interval
                break seek;
              }
            } // prepare binary search on the right side of the index


            right = pp.length;
            break linear_scan;
          } //- slower code:
          //-					if ( t < t0 || t0 === undefined ) {


          if (!(t >= t0)) {
            // looping?
            var t1global = pp[1];

            if (t < t1global) {
              i1 = 2; // + 1, using the scan for the details

              t0 = t1global;
            } // linear reverse scan


            for (var giveUpAt = i1 - 2;;) {
              if (t0 === undefined) {
                // before start
                this._cachedIndex = 0;
                return this.beforeStart_(0, t, t1);
              }

              if (i1 === giveUpAt) break; // this loop

              t1 = t0;
              t0 = pp[--i1 - 1];

              if (t >= t0) {
                // we have arrived at the sought interval
                break seek;
              }
            } // prepare binary search on the left side of the index


            right = i1;
            i1 = 0;
            break linear_scan;
          } // the interval is valid


          break validate_interval;
        } // linear scan
        // binary search


        while (i1 < right) {
          var mid = i1 + right >>> 1;

          if (t < pp[mid]) {
            right = mid;
          } else {
            i1 = mid + 1;
          }
        }

        t1 = pp[i1];
        t0 = pp[i1 - 1]; // check boundary cases, again

        if (t0 === undefined) {
          this._cachedIndex = 0;
          return this.beforeStart_(0, t, t1);
        }

        if (t1 === undefined) {
          i1 = pp.length;
          this._cachedIndex = i1;
          return this.afterEnd_(i1 - 1, t0, t);
        }
      } // seek


      this._cachedIndex = i1;
      this.intervalChanged_(i1, t0, t1);
    } // validate_interval


    return this.interpolate_(i1, t0, t, t1);
  },
  settings: null,
  // optional, subclass-specific settings structure
  // Note: The indirection allows central control of many interpolants.
  // --- Protected interface
  DefaultSettings_: {},
  getSettings_: function () {
    return this.settings || this.DefaultSettings_;
  },
  copySampleValue_: function (index) {
    // copies a sample value to the result buffer
    var result = this.resultBuffer,
        values = this.sampleValues,
        stride = this.valueSize,
        offset = index * stride;

    for (var i = 0; i !== stride; ++i) {
      result[i] = values[offset + i];
    }

    return result;
  },
  // Template methods for derived classes:
  interpolate_: function ()
  /* i1, t0, t, t1 */
  {
    throw new Error('call to abstract method'); // implementations shall return this.resultBuffer
  },
  intervalChanged_: function ()
  /* i1, t0, t1 */
  {// empty
  }
}); //!\ DECLARE ALIAS AFTER assign prototype !

Object.assign(Interpolant.prototype, {
  //( 0, t, t0 ), returns this.resultBuffer
  beforeStart_: Interpolant.prototype.copySampleValue_,
  //( N-1, tN-1, t ), returns this.resultBuffer
  afterEnd_: Interpolant.prototype.copySampleValue_
});
/**
 * Fast and simple cubic spline interpolant.
 *
 * It was derived from a Hermitian construction setting the first derivative
 * at each sample position to the linear slope between neighboring positions
 * over their parameter interval.
 *
 * @author tschw
 */

function CubicInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
  Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
  this._weightPrev = -0;
  this._offsetPrev = -0;
  this._weightNext = -0;
  this._offsetNext = -0;
}

CubicInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
  constructor: CubicInterpolant,
  DefaultSettings_: {
    endingStart: ZeroCurvatureEnding,
    endingEnd: ZeroCurvatureEnding
  },
  intervalChanged_: function (i1, t0, t1) {
    var pp = this.parameterPositions,
        iPrev = i1 - 2,
        iNext = i1 + 1,
        tPrev = pp[iPrev],
        tNext = pp[iNext];

    if (tPrev === undefined) {
      switch (this.getSettings_().endingStart) {
        case ZeroSlopeEnding:
          // f'(t0) = 0
          iPrev = i1;
          tPrev = 2 * t0 - t1;
          break;

        case WrapAroundEnding:
          // use the other end of the curve
          iPrev = pp.length - 2;
          tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
          break;

        default:
          // ZeroCurvatureEnding
          // f''(t0) = 0 a.k.a. Natural Spline
          iPrev = i1;
          tPrev = t1;
      }
    }

    if (tNext === undefined) {
      switch (this.getSettings_().endingEnd) {
        case ZeroSlopeEnding:
          // f'(tN) = 0
          iNext = i1;
          tNext = 2 * t1 - t0;
          break;

        case WrapAroundEnding:
          // use the other end of the curve
          iNext = 1;
          tNext = t1 + pp[1] - pp[0];
          break;

        default:
          // ZeroCurvatureEnding
          // f''(tN) = 0, a.k.a. Natural Spline
          iNext = i1 - 1;
          tNext = t0;
      }
    }

    var halfDt = (t1 - t0) * 0.5,
        stride = this.valueSize;
    this._weightPrev = halfDt / (t0 - tPrev);
    this._weightNext = halfDt / (tNext - t1);
    this._offsetPrev = iPrev * stride;
    this._offsetNext = iNext * stride;
  },
  interpolate_: function (i1, t0, t, t1) {
    var result = this.resultBuffer,
        values = this.sampleValues,
        stride = this.valueSize,
        o1 = i1 * stride,
        o0 = o1 - stride,
        oP = this._offsetPrev,
        oN = this._offsetNext,
        wP = this._weightPrev,
        wN = this._weightNext,
        p = (t - t0) / (t1 - t0),
        pp = p * p,
        ppp = pp * p; // evaluate polynomials

    var sP = -wP * ppp + 2 * wP * pp - wP * p;
    var s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;
    var s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;
    var sN = wN * ppp - wN * pp; // combine data linearly

    for (var i = 0; i !== stride; ++i) {
      result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];
    }

    return result;
  }
});
/**
 * @author tschw
 */

function LinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
  Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
}

LinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
  constructor: LinearInterpolant,
  interpolate_: function (i1, t0, t, t1) {
    var result = this.resultBuffer,
        values = this.sampleValues,
        stride = this.valueSize,
        offset1 = i1 * stride,
        offset0 = offset1 - stride,
        weight1 = (t - t0) / (t1 - t0),
        weight0 = 1 - weight1;

    for (var i = 0; i !== stride; ++i) {
      result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;
    }

    return result;
  }
});
/**
 *
 * Interpolant that evaluates to the sample value at the position preceeding
 * the parameter.
 *
 * @author tschw
 */

function DiscreteInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
  Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
}

DiscreteInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
  constructor: DiscreteInterpolant,
  interpolate_: function (i1
  /*, t0, t, t1 */
  ) {
    return this.copySampleValue_(i1 - 1);
  }
});
/**
 *
 * A timed sequence of keyframes for a specific property.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function KeyframeTrack(name, times, values, interpolation) {
  if (name === undefined) throw new Error('THREE.KeyframeTrack: track name is undefined');
  if (times === undefined || times.length === 0) throw new Error('THREE.KeyframeTrack: no keyframes in track named ' + name);
  this.name = name;
  this.times = AnimationUtils.convertArray(times, this.TimeBufferType);
  this.values = AnimationUtils.convertArray(values, this.ValueBufferType);
  this.setInterpolation(interpolation || this.DefaultInterpolation);
} // Static methods


Object.assign(KeyframeTrack, {
  // Serialization (in static context, because of constructor invocation
  // and automatic invocation of .toJSON):
  toJSON: function (track) {
    var trackType = track.constructor;
    var json; // derived classes can define a static toJSON method

    if (trackType.toJSON !== undefined) {
      json = trackType.toJSON(track);
    } else {
      // by default, we assume the data can be serialized as-is
      json = {
        'name': track.name,
        'times': AnimationUtils.convertArray(track.times, Array),
        'values': AnimationUtils.convertArray(track.values, Array)
      };
      var interpolation = track.getInterpolation();

      if (interpolation !== track.DefaultInterpolation) {
        json.interpolation = interpolation;
      }
    }

    json.type = track.ValueTypeName; // mandatory

    return json;
  }
});
Object.assign(KeyframeTrack.prototype, {
  constructor: KeyframeTrack,
  TimeBufferType: Float32Array,
  ValueBufferType: Float32Array,
  DefaultInterpolation: InterpolateLinear,
  InterpolantFactoryMethodDiscrete: function (result) {
    return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);
  },
  InterpolantFactoryMethodLinear: function (result) {
    return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);
  },
  InterpolantFactoryMethodSmooth: function (result) {
    return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);
  },
  setInterpolation: function (interpolation) {
    var factoryMethod;

    switch (interpolation) {
      case InterpolateDiscrete:
        factoryMethod = this.InterpolantFactoryMethodDiscrete;
        break;

      case InterpolateLinear:
        factoryMethod = this.InterpolantFactoryMethodLinear;
        break;

      case InterpolateSmooth:
        factoryMethod = this.InterpolantFactoryMethodSmooth;
        break;
    }

    if (factoryMethod === undefined) {
      var message = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;

      if (this.createInterpolant === undefined) {
        // fall back to default, unless the default itself is messed up
        if (interpolation !== this.DefaultInterpolation) {
          this.setInterpolation(this.DefaultInterpolation);
        } else {
          throw new Error(message); // fatal, in this case
        }
      }

      console.warn('THREE.KeyframeTrack:', message);
      return this;
    }

    this.createInterpolant = factoryMethod;
    return this;
  },
  getInterpolation: function () {
    switch (this.createInterpolant) {
      case this.InterpolantFactoryMethodDiscrete:
        return InterpolateDiscrete;

      case this.InterpolantFactoryMethodLinear:
        return InterpolateLinear;

      case this.InterpolantFactoryMethodSmooth:
        return InterpolateSmooth;
    }
  },
  getValueSize: function () {
    return this.values.length / this.times.length;
  },
  // move all keyframes either forwards or backwards in time
  shift: function (timeOffset) {
    if (timeOffset !== 0.0) {
      var times = this.times;

      for (var i = 0, n = times.length; i !== n; ++i) {
        times[i] += timeOffset;
      }
    }

    return this;
  },
  // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
  scale: function (timeScale) {
    if (timeScale !== 1.0) {
      var times = this.times;

      for (var i = 0, n = times.length; i !== n; ++i) {
        times[i] *= timeScale;
      }
    }

    return this;
  },
  // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
  // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
  trim: function (startTime, endTime) {
    var times = this.times,
        nKeys = times.length,
        from = 0,
        to = nKeys - 1;

    while (from !== nKeys && times[from] < startTime) {
      ++from;
    }

    while (to !== -1 && times[to] > endTime) {
      --to;
    }

    ++to; // inclusive -> exclusive bound

    if (from !== 0 || to !== nKeys) {
      // empty tracks are forbidden, so keep at least one keyframe
      if (from >= to) to = Math.max(to, 1), from = to - 1;
      var stride = this.getValueSize();
      this.times = AnimationUtils.arraySlice(times, from, to);
      this.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);
    }

    return this;
  },
  // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
  validate: function () {
    var valid = true;
    var valueSize = this.getValueSize();

    if (valueSize - Math.floor(valueSize) !== 0) {
      console.error('THREE.KeyframeTrack: Invalid value size in track.', this);
      valid = false;
    }

    var times = this.times,
        values = this.values,
        nKeys = times.length;

    if (nKeys === 0) {
      console.error('THREE.KeyframeTrack: Track is empty.', this);
      valid = false;
    }

    var prevTime = null;

    for (var i = 0; i !== nKeys; i++) {
      var currTime = times[i];

      if (typeof currTime === 'number' && isNaN(currTime)) {
        console.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime);
        valid = false;
        break;
      }

      if (prevTime !== null && prevTime > currTime) {
        console.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime);
        valid = false;
        break;
      }

      prevTime = currTime;
    }

    if (values !== undefined) {
      if (AnimationUtils.isTypedArray(values)) {
        for (var i = 0, n = values.length; i !== n; ++i) {
          var value = values[i];

          if (isNaN(value)) {
            console.error('THREE.KeyframeTrack: Value is not a valid number.', this, i, value);
            valid = false;
            break;
          }
        }
      }
    }

    return valid;
  },
  // removes equivalent sequential keys as common in morph target sequences
  // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
  optimize: function () {
    var times = this.times,
        values = this.values,
        stride = this.getValueSize(),
        smoothInterpolation = this.getInterpolation() === InterpolateSmooth,
        writeIndex = 1,
        lastIndex = times.length - 1;

    for (var i = 1; i < lastIndex; ++i) {
      var keep = false;
      var time = times[i];
      var timeNext = times[i + 1]; // remove adjacent keyframes scheduled at the same time

      if (time !== timeNext && (i !== 1 || time !== time[0])) {
        if (!smoothInterpolation) {
          // remove unnecessary keyframes same as their neighbors
          var offset = i * stride,
              offsetP = offset - stride,
              offsetN = offset + stride;

          for (var j = 0; j !== stride; ++j) {
            var value = values[offset + j];

            if (value !== values[offsetP + j] || value !== values[offsetN + j]) {
              keep = true;
              break;
            }
          }
        } else {
          keep = true;
        }
      } // in-place compaction


      if (keep) {
        if (i !== writeIndex) {
          times[writeIndex] = times[i];
          var readOffset = i * stride,
              writeOffset = writeIndex * stride;

          for (var j = 0; j !== stride; ++j) {
            values[writeOffset + j] = values[readOffset + j];
          }
        }

        ++writeIndex;
      }
    } // flush last keyframe (compaction looks ahead)


    if (lastIndex > 0) {
      times[writeIndex] = times[lastIndex];

      for (var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {
        values[writeOffset + j] = values[readOffset + j];
      }

      ++writeIndex;
    }

    if (writeIndex !== times.length) {
      this.times = AnimationUtils.arraySlice(times, 0, writeIndex);
      this.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);
    }

    return this;
  },
  clone: function () {
    var times = AnimationUtils.arraySlice(this.times, 0);
    var values = AnimationUtils.arraySlice(this.values, 0);
    var TypedKeyframeTrack = this.constructor;
    var track = new TypedKeyframeTrack(this.name, times, values); // Interpolant argument to constructor is not saved, so copy the factory method directly.

    track.createInterpolant = this.createInterpolant;
    return track;
  }
});
/**
 *
 * A Track of Boolean keyframe values.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function BooleanKeyframeTrack(name, times, values) {
  KeyframeTrack.call(this, name, times, values);
}

BooleanKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
  constructor: BooleanKeyframeTrack,
  ValueTypeName: 'bool',
  ValueBufferType: Array,
  DefaultInterpolation: InterpolateDiscrete,
  InterpolantFactoryMethodLinear: undefined,
  InterpolantFactoryMethodSmooth: undefined // Note: Actually this track could have a optimized / compressed
  // representation of a single value and a custom interpolant that
  // computes "firstValue ^ isOdd( index )".

});
/**
 *
 * A Track of keyframe values that represent color.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function ColorKeyframeTrack(name, times, values, interpolation) {
  KeyframeTrack.call(this, name, times, values, interpolation);
}

ColorKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
  constructor: ColorKeyframeTrack,
  ValueTypeName: 'color' // ValueBufferType is inherited
  // DefaultInterpolation is inherited
  // Note: Very basic implementation and nothing special yet.
  // However, this is the place for color space parameterization.

});
/**
 *
 * A Track of numeric keyframe values.
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function NumberKeyframeTrack(name, times, values, interpolation) {
  KeyframeTrack.call(this, name, times, values, interpolation);
}

NumberKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
  constructor: NumberKeyframeTrack,
  ValueTypeName: 'number' // ValueBufferType is inherited
  // DefaultInterpolation is inherited

});
/**
 * Spherical linear unit quaternion interpolant.
 *
 * @author tschw
 */

function QuaternionLinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
  Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
}

QuaternionLinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
  constructor: QuaternionLinearInterpolant,
  interpolate_: function (i1, t0, t, t1) {
    var result = this.resultBuffer,
        values = this.sampleValues,
        stride = this.valueSize,
        offset = i1 * stride,
        alpha = (t - t0) / (t1 - t0);

    for (var end = offset + stride; offset !== end; offset += 4) {
      Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
    }

    return result;
  }
});
/**
 *
 * A Track of quaternion keyframe values.
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function QuaternionKeyframeTrack(name, times, values, interpolation) {
  KeyframeTrack.call(this, name, times, values, interpolation);
}

QuaternionKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
  constructor: QuaternionKeyframeTrack,
  ValueTypeName: 'quaternion',
  // ValueBufferType is inherited
  DefaultInterpolation: InterpolateLinear,
  InterpolantFactoryMethodLinear: function (result) {
    return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);
  },
  InterpolantFactoryMethodSmooth: undefined // not yet implemented

});
/**
 *
 * A Track that interpolates Strings
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function StringKeyframeTrack(name, times, values, interpolation) {
  KeyframeTrack.call(this, name, times, values, interpolation);
}

StringKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
  constructor: StringKeyframeTrack,
  ValueTypeName: 'string',
  ValueBufferType: Array,
  DefaultInterpolation: InterpolateDiscrete,
  InterpolantFactoryMethodLinear: undefined,
  InterpolantFactoryMethodSmooth: undefined
});
/**
 *
 * A Track of vectored keyframe values.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function VectorKeyframeTrack(name, times, values, interpolation) {
  KeyframeTrack.call(this, name, times, values, interpolation);
}

VectorKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
  constructor: VectorKeyframeTrack,
  ValueTypeName: 'vector' // ValueBufferType is inherited
  // DefaultInterpolation is inherited

});
/**
 *
 * Reusable set of Tracks that represent an animation.
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 */

function AnimationClip(name, duration, tracks) {
  this.name = name;
  this.tracks = tracks;
  this.duration = duration !== undefined ? duration : -1;
  this.uuid = _Math.generateUUID(); // this means it should figure out its duration by scanning the tracks

  if (this.duration < 0) {
    this.resetDuration();
  }
}

function getTrackTypeForValueTypeName(typeName) {
  switch (typeName.toLowerCase()) {
    case 'scalar':
    case 'double':
    case 'float':
    case 'number':
    case 'integer':
      return NumberKeyframeTrack;

    case 'vector':
    case 'vector2':
    case 'vector3':
    case 'vector4':
      return VectorKeyframeTrack;

    case 'color':
      return ColorKeyframeTrack;

    case 'quaternion':
      return QuaternionKeyframeTrack;

    case 'bool':
    case 'boolean':
      return BooleanKeyframeTrack;

    case 'string':
      return StringKeyframeTrack;
  }

  throw new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);
}

function parseKeyframeTrack(json) {
  if (json.type === undefined) {
    throw new Error('THREE.KeyframeTrack: track type undefined, can not parse');
  }

  var trackType = getTrackTypeForValueTypeName(json.type);

  if (json.times === undefined) {
    var times = [],
        values = [];
    AnimationUtils.flattenJSON(json.keys, times, values, 'value');
    json.times = times;
    json.values = values;
  } // derived classes can define a static parse method


  if (trackType.parse !== undefined) {
    return trackType.parse(json);
  } else {
    // by default, we assume a constructor compatible with the base
    return new trackType(json.name, json.times, json.values, json.interpolation);
  }
}

Object.assign(AnimationClip, {
  parse: function (json) {
    var tracks = [],
        jsonTracks = json.tracks,
        frameTime = 1.0 / (json.fps || 1.0);

    for (var i = 0, n = jsonTracks.length; i !== n; ++i) {
      tracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));
    }

    return new AnimationClip(json.name, json.duration, tracks);
  },
  toJSON: function (clip) {
    var tracks = [],
        clipTracks = clip.tracks;
    var json = {
      'name': clip.name,
      'duration': clip.duration,
      'tracks': tracks,
      'uuid': clip.uuid
    };

    for (var i = 0, n = clipTracks.length; i !== n; ++i) {
      tracks.push(KeyframeTrack.toJSON(clipTracks[i]));
    }

    return json;
  },
  CreateFromMorphTargetSequence: function (name, morphTargetSequence, fps, noLoop) {
    var numMorphTargets = morphTargetSequence.length;
    var tracks = [];

    for (var i = 0; i < numMorphTargets; i++) {
      var times = [];
      var values = [];
      times.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);
      values.push(0, 1, 0);
      var order = AnimationUtils.getKeyframeOrder(times);
      times = AnimationUtils.sortedArray(times, 1, order);
      values = AnimationUtils.sortedArray(values, 1, order); // if there is a key at the first frame, duplicate it as the
      // last frame as well for perfect loop.

      if (!noLoop && times[0] === 0) {
        times.push(numMorphTargets);
        values.push(values[0]);
      }

      tracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));
    }

    return new AnimationClip(name, -1, tracks);
  },
  findByName: function (objectOrClipArray, name) {
    var clipArray = objectOrClipArray;

    if (!Array.isArray(objectOrClipArray)) {
      var o = objectOrClipArray;
      clipArray = o.geometry && o.geometry.animations || o.animations;
    }

    for (var i = 0; i < clipArray.length; i++) {
      if (clipArray[i].name === name) {
        return clipArray[i];
      }
    }

    return null;
  },
  CreateClipsFromMorphTargetSequences: function (morphTargets, fps, noLoop) {
    var animationToMorphTargets = {}; // tested with https://regex101.com/ on trick sequences
    // such flamingo_flyA_003, flamingo_run1_003, crdeath0059

    var pattern = /^([\w-]*?)([\d]+)$/; // sort morph target names into animation groups based
    // patterns like Walk_001, Walk_002, Run_001, Run_002

    for (var i = 0, il = morphTargets.length; i < il; i++) {
      var morphTarget = morphTargets[i];
      var parts = morphTarget.name.match(pattern);

      if (parts && parts.length > 1) {
        var name = parts[1];
        var animationMorphTargets = animationToMorphTargets[name];

        if (!animationMorphTargets) {
          animationToMorphTargets[name] = animationMorphTargets = [];
        }

        animationMorphTargets.push(morphTarget);
      }
    }

    var clips = [];

    for (var name in animationToMorphTargets) {
      clips.push(AnimationClip.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));
    }

    return clips;
  },
  // parse the animation.hierarchy format
  parseAnimation: function (animation, bones) {
    if (!animation) {
      console.error('THREE.AnimationClip: No animation in JSONLoader data.');
      return null;
    }

    var addNonemptyTrack = function (trackType, trackName, animationKeys, propertyName, destTracks) {
      // only return track if there are actually keys.
      if (animationKeys.length !== 0) {
        var times = [];
        var values = [];
        AnimationUtils.flattenJSON(animationKeys, times, values, propertyName); // empty keys are filtered out, so check again

        if (times.length !== 0) {
          destTracks.push(new trackType(trackName, times, values));
        }
      }
    };

    var tracks = [];
    var clipName = animation.name || 'default'; // automatic length determination in AnimationClip.

    var duration = animation.length || -1;
    var fps = animation.fps || 30;
    var hierarchyTracks = animation.hierarchy || [];

    for (var h = 0; h < hierarchyTracks.length; h++) {
      var animationKeys = hierarchyTracks[h].keys; // skip empty tracks

      if (!animationKeys || animationKeys.length === 0) continue; // process morph targets

      if (animationKeys[0].morphTargets) {
        // figure out all morph targets used in this track
        var morphTargetNames = {};

        for (var k = 0; k < animationKeys.length; k++) {
          if (animationKeys[k].morphTargets) {
            for (var m = 0; m < animationKeys[k].morphTargets.length; m++) {
              morphTargetNames[animationKeys[k].morphTargets[m]] = -1;
            }
          }
        } // create a track for each morph target with all zero
        // morphTargetInfluences except for the keys in which
        // the morphTarget is named.


        for (var morphTargetName in morphTargetNames) {
          var times = [];
          var values = [];

          for (var m = 0; m !== animationKeys[k].morphTargets.length; ++m) {
            var animationKey = animationKeys[k];
            times.push(animationKey.time);
            values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);
          }

          tracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));
        }

        duration = morphTargetNames.length * (fps || 1.0);
      } else {
        // ...assume skeletal animation
        var boneName = '.bones[' + bones[h].name + ']';
        addNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);
        addNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);
        addNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);
      }
    }

    if (tracks.length === 0) {
      return null;
    }

    var clip = new AnimationClip(clipName, duration, tracks);
    return clip;
  }
});
Object.assign(AnimationClip.prototype, {
  resetDuration: function () {
    var tracks = this.tracks,
        duration = 0;

    for (var i = 0, n = tracks.length; i !== n; ++i) {
      var track = this.tracks[i];
      duration = Math.max(duration, track.times[track.times.length - 1]);
    }

    this.duration = duration;
    return this;
  },
  trim: function () {
    for (var i = 0; i < this.tracks.length; i++) {
      this.tracks[i].trim(0, this.duration);
    }

    return this;
  },
  validate: function () {
    var valid = true;

    for (var i = 0; i < this.tracks.length; i++) {
      valid = valid && this.tracks[i].validate();
    }

    return valid;
  },
  optimize: function () {
    for (var i = 0; i < this.tracks.length; i++) {
      this.tracks[i].optimize();
    }

    return this;
  },
  clone: function () {
    var tracks = [];

    for (var i = 0; i < this.tracks.length; i++) {
      tracks.push(this.tracks[i].clone());
    }

    return new AnimationClip(this.name, this.duration, tracks);
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 */

var Cache = {
  enabled: false,
  files: {},
  add: function (key, file) {
    if (this.enabled === false) return; // console.log( 'THREE.Cache', 'Adding key:', key );

    this.files[key] = file;
  },
  get: function (key) {
    if (this.enabled === false) return; // console.log( 'THREE.Cache', 'Checking key:', key );

    return this.files[key];
  },
  remove: function (key) {
    delete this.files[key];
  },
  clear: function () {
    this.files = {};
  }
};
/**
 * @author mrdoob / http://mrdoob.com/
 */

exports.Cache = Cache;

function LoadingManager(onLoad, onProgress, onError) {
  var scope = this;
  var isLoading = false;
  var itemsLoaded = 0;
  var itemsTotal = 0;
  var urlModifier = undefined; // Refer to #5689 for the reason why we don't set .onStart
  // in the constructor

  this.onStart = undefined;
  this.onLoad = onLoad;
  this.onProgress = onProgress;
  this.onError = onError;

  this.itemStart = function (url) {
    itemsTotal++;

    if (isLoading === false) {
      if (scope.onStart !== undefined) {
        scope.onStart(url, itemsLoaded, itemsTotal);
      }
    }

    isLoading = true;
  };

  this.itemEnd = function (url) {
    itemsLoaded++;

    if (scope.onProgress !== undefined) {
      scope.onProgress(url, itemsLoaded, itemsTotal);
    }

    if (itemsLoaded === itemsTotal) {
      isLoading = false;

      if (scope.onLoad !== undefined) {
        scope.onLoad();
      }
    }
  };

  this.itemError = function (url) {
    if (scope.onError !== undefined) {
      scope.onError(url);
    }
  };

  this.resolveURL = function (url) {
    if (urlModifier) {
      return urlModifier(url);
    }

    return url;
  };

  this.setURLModifier = function (transform) {
    urlModifier = transform;
    return this;
  };
}

var DefaultLoadingManager = new LoadingManager();
/**
 * @author mrdoob / http://mrdoob.com/
 */

exports.DefaultLoadingManager = DefaultLoadingManager;
var loading = {};

function FileLoader(manager) {
  this.manager = manager !== undefined ? manager : DefaultLoadingManager;
}

Object.assign(FileLoader.prototype, {
  load: function (url, onLoad, onProgress, onError) {
    if (url === undefined) url = '';
    if (this.path !== undefined) url = this.path + url;
    url = this.manager.resolveURL(url);
    var scope = this;
    var cached = Cache.get(url);

    if (cached !== undefined) {
      scope.manager.itemStart(url);
      setTimeout(function () {
        if (onLoad) onLoad(cached);
        scope.manager.itemEnd(url);
      }, 0);
      return cached;
    } // Check if request is duplicate


    if (loading[url] !== undefined) {
      loading[url].push({
        onLoad: onLoad,
        onProgress: onProgress,
        onError: onError
      });
      return;
    } // Check for data: URI


    var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
    var dataUriRegexResult = url.match(dataUriRegex); // Safari can not handle Data URIs through XMLHttpRequest so process manually

    if (dataUriRegexResult) {
      var mimeType = dataUriRegexResult[1];
      var isBase64 = !!dataUriRegexResult[2];
      var data = dataUriRegexResult[3];
      data = decodeURIComponent(data);
      if (isBase64) data = atob(data);

      try {
        var response;
        var responseType = (this.responseType || '').toLowerCase();

        switch (responseType) {
          case 'arraybuffer':
          case 'blob':
            var view = new Uint8Array(data.length);

            for (var i = 0; i < data.length; i++) {
              view[i] = data.charCodeAt(i);
            }

            if (responseType === 'blob') {
              response = new Blob([view.buffer], {
                type: mimeType
              });
            } else {
              response = view.buffer;
            }

            break;

          case 'document':
            var parser = new DOMParser();
            response = parser.parseFromString(data, mimeType);
            break;

          case 'json':
            response = JSON.parse(data);
            break;

          default:
            // 'text' or other
            response = data;
            break;
        } // Wait for next browser tick like standard XMLHttpRequest event dispatching does


        setTimeout(function () {
          if (onLoad) onLoad(response);
          scope.manager.itemEnd(url);
        }, 0);
      } catch (error) {
        // Wait for next browser tick like standard XMLHttpRequest event dispatching does
        setTimeout(function () {
          if (onError) onError(error);
          scope.manager.itemError(url);
          scope.manager.itemEnd(url);
        }, 0);
      }
    } else {
      // Initialise array for duplicate requests
      loading[url] = [];
      loading[url].push({
        onLoad: onLoad,
        onProgress: onProgress,
        onError: onError
      });
      var request = new XMLHttpRequest();
      request.open('GET', url, true);
      request.addEventListener('load', function (event) {
        var response = this.response;
        Cache.add(url, response);
        var callbacks = loading[url];
        delete loading[url];

        if (this.status === 200 || this.status === 0) {
          // Some browsers return HTTP Status 0 when using non-http protocol
          // e.g. 'file://' or 'data://'. Handle as success.
          if (this.status === 0) console.warn('THREE.FileLoader: HTTP Status 0 received.');

          for (var i = 0, il = callbacks.length; i < il; i++) {
            var callback = callbacks[i];
            if (callback.onLoad) callback.onLoad(response);
          }

          scope.manager.itemEnd(url);
        } else {
          for (var i = 0, il = callbacks.length; i < il; i++) {
            var callback = callbacks[i];
            if (callback.onError) callback.onError(event);
          }

          scope.manager.itemError(url);
          scope.manager.itemEnd(url);
        }
      }, false);
      request.addEventListener('progress', function (event) {
        var callbacks = loading[url];

        for (var i = 0, il = callbacks.length; i < il; i++) {
          var callback = callbacks[i];
          if (callback.onProgress) callback.onProgress(event);
        }
      }, false);
      request.addEventListener('error', function (event) {
        var callbacks = loading[url];
        delete loading[url];

        for (var i = 0, il = callbacks.length; i < il; i++) {
          var callback = callbacks[i];
          if (callback.onError) callback.onError(event);
        }

        scope.manager.itemError(url);
        scope.manager.itemEnd(url);
      }, false);
      request.addEventListener('abort', function (event) {
        var callbacks = loading[url];
        delete loading[url];

        for (var i = 0, il = callbacks.length; i < il; i++) {
          var callback = callbacks[i];
          if (callback.onError) callback.onError(event);
        }

        scope.manager.itemError(url);
        scope.manager.itemEnd(url);
      }, false);
      if (this.responseType !== undefined) request.responseType = this.responseType;
      if (this.withCredentials !== undefined) request.withCredentials = this.withCredentials;
      if (request.overrideMimeType) request.overrideMimeType(this.mimeType !== undefined ? this.mimeType : 'text/plain');

      for (var header in this.requestHeader) {
        request.setRequestHeader(header, this.requestHeader[header]);
      }

      request.send(null);
    }

    scope.manager.itemStart(url);
    return request;
  },
  setPath: function (value) {
    this.path = value;
    return this;
  },
  setResponseType: function (value) {
    this.responseType = value;
    return this;
  },
  setWithCredentials: function (value) {
    this.withCredentials = value;
    return this;
  },
  setMimeType: function (value) {
    this.mimeType = value;
    return this;
  },
  setRequestHeader: function (value) {
    this.requestHeader = value;
    return this;
  }
});
/**
 * @author bhouston / http://clara.io/
 */

function AnimationLoader(manager) {
  this.manager = manager !== undefined ? manager : DefaultLoadingManager;
}

Object.assign(AnimationLoader.prototype, {
  load: function (url, onLoad, onProgress, onError) {
    var scope = this;
    var loader = new FileLoader(scope.manager);
    loader.setPath(scope.path);
    loader.load(url, function (text) {
      onLoad(scope.parse(JSON.parse(text)));
    }, onProgress, onError);
  },
  parse: function (json, onLoad) {
    var animations = [];

    for (var i = 0; i < json.length; i++) {
      var clip = AnimationClip.parse(json[i]);
      animations.push(clip);
    }

    onLoad(animations);
  },
  setPath: function (value) {
    this.path = value;
    return this;
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 *
 * Abstract Base class to block based textures loader (dds, pvr, ...)
 */

function CompressedTextureLoader(manager) {
  this.manager = manager !== undefined ? manager : DefaultLoadingManager; // override in sub classes

  this._parser = null;
}

Object.assign(CompressedTextureLoader.prototype, {
  load: function (url, onLoad, onProgress, onError) {
    var scope = this;
    var images = [];
    var texture = new CompressedTexture();
    texture.image = images;
    var loader = new FileLoader(this.manager);
    loader.setPath(this.path);
    loader.setResponseType('arraybuffer');

    function loadTexture(i) {
      loader.load(url[i], function (buffer) {
        var texDatas = scope._parser(buffer, true);

        images[i] = {
          width: texDatas.width,
          height: texDatas.height,
          format: texDatas.format,
          mipmaps: texDatas.mipmaps
        };
        loaded += 1;

        if (loaded === 6) {
          if (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;
          texture.format = texDatas.format;
          texture.needsUpdate = true;
          if (onLoad) onLoad(texture);
        }
      }, onProgress, onError);
    }

    if (Array.isArray(url)) {
      var loaded = 0;

      for (var i = 0, il = url.length; i < il; ++i) {
        loadTexture(i);
      }
    } else {
      // compressed cubemap texture stored in a single DDS file
      loader.load(url, function (buffer) {
        var texDatas = scope._parser(buffer, true);

        if (texDatas.isCubemap) {
          var faces = texDatas.mipmaps.length / texDatas.mipmapCount;

          for (var f = 0; f < faces; f++) {
            images[f] = {
              mipmaps: []
            };

            for (var i = 0; i < texDatas.mipmapCount; i++) {
              images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);
              images[f].format = texDatas.format;
              images[f].width = texDatas.width;
              images[f].height = texDatas.height;
            }
          }
        } else {
          texture.image.width = texDatas.width;
          texture.image.height = texDatas.height;
          texture.mipmaps = texDatas.mipmaps;
        }

        if (texDatas.mipmapCount === 1) {
          texture.minFilter = LinearFilter;
        }

        texture.format = texDatas.format;
        texture.needsUpdate = true;
        if (onLoad) onLoad(texture);
      }, onProgress, onError);
    }

    return texture;
  },
  setPath: function (value) {
    this.path = value;
    return this;
  }
});
/**
 * @author Nikos M. / https://github.com/foo123/
 *
 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
 */

function DataTextureLoader(manager) {
  this.manager = manager !== undefined ? manager : DefaultLoadingManager; // override in sub classes

  this._parser = null;
}

Object.assign(DataTextureLoader.prototype, {
  load: function (url, onLoad, onProgress, onError) {
    var scope = this;
    var texture = new DataTexture();
    var loader = new FileLoader(this.manager);
    loader.setResponseType('arraybuffer');
    loader.setPath(this.path);
    loader.load(url, function (buffer) {
      var texData = scope._parser(buffer);

      if (!texData) return;

      if (texData.image !== undefined) {
        texture.image = texData.image;
      } else if (texData.data !== undefined) {
        texture.image.width = texData.width;
        texture.image.height = texData.height;
        texture.image.data = texData.data;
      }

      texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;
      texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;
      texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;
      texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearMipMapLinearFilter;
      texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;

      if (texData.format !== undefined) {
        texture.format = texData.format;
      }

      if (texData.type !== undefined) {
        texture.type = texData.type;
      }

      if (texData.mipmaps !== undefined) {
        texture.mipmaps = texData.mipmaps;
      }

      if (texData.mipmapCount === 1) {
        texture.minFilter = LinearFilter;
      }

      texture.needsUpdate = true;
      if (onLoad) onLoad(texture, texData);
    }, onProgress, onError);
    return texture;
  },
  setPath: function (value) {
    this.path = value;
    return this;
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 */

function ImageLoader(manager) {
  this.manager = manager !== undefined ? manager : DefaultLoadingManager;
}

Object.assign(ImageLoader.prototype, {
  crossOrigin: 'anonymous',
  load: function (url, onLoad, onProgress, onError) {
    if (url === undefined) url = '';
    if (this.path !== undefined) url = this.path + url;
    url = this.manager.resolveURL(url);
    var scope = this;
    var cached = Cache.get(url);

    if (cached !== undefined) {
      scope.manager.itemStart(url);
      setTimeout(function () {
        if (onLoad) onLoad(cached);
        scope.manager.itemEnd(url);
      }, 0);
      return cached;
    }

    var image = document.createElementNS('http://www.w3.org/1999/xhtml', 'img');

    function onImageLoad() {
      image.removeEventListener('load', onImageLoad, false);
      image.removeEventListener('error', onImageError, false);
      Cache.add(url, this);
      if (onLoad) onLoad(this);
      scope.manager.itemEnd(url);
    }

    function onImageError(event) {
      image.removeEventListener('load', onImageLoad, false);
      image.removeEventListener('error', onImageError, false);
      if (onError) onError(event);
      scope.manager.itemError(url);
      scope.manager.itemEnd(url);
    }

    image.addEventListener('load', onImageLoad, false);
    image.addEventListener('error', onImageError, false);

    if (url.substr(0, 5) !== 'data:') {
      if (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;
    }

    scope.manager.itemStart(url);
    image.src = url;
    return image;
  },
  setCrossOrigin: function (value) {
    this.crossOrigin = value;
    return this;
  },
  setPath: function (value) {
    this.path = value;
    return this;
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 */

function CubeTextureLoader(manager) {
  this.manager = manager !== undefined ? manager : DefaultLoadingManager;
}

Object.assign(CubeTextureLoader.prototype, {
  crossOrigin: 'anonymous',
  load: function (urls, onLoad, onProgress, onError) {
    var texture = new CubeTexture();
    var loader = new ImageLoader(this.manager);
    loader.setCrossOrigin(this.crossOrigin);
    loader.setPath(this.path);
    var loaded = 0;

    function loadTexture(i) {
      loader.load(urls[i], function (image) {
        texture.images[i] = image;
        loaded++;

        if (loaded === 6) {
          texture.needsUpdate = true;
          if (onLoad) onLoad(texture);
        }
      }, undefined, onError);
    }

    for (var i = 0; i < urls.length; ++i) {
      loadTexture(i);
    }

    return texture;
  },
  setCrossOrigin: function (value) {
    this.crossOrigin = value;
    return this;
  },
  setPath: function (value) {
    this.path = value;
    return this;
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 */

function TextureLoader(manager) {
  this.manager = manager !== undefined ? manager : DefaultLoadingManager;
}

Object.assign(TextureLoader.prototype, {
  crossOrigin: 'anonymous',
  load: function (url, onLoad, onProgress, onError) {
    var texture = new Texture();
    var loader = new ImageLoader(this.manager);
    loader.setCrossOrigin(this.crossOrigin);
    loader.setPath(this.path);
    loader.load(url, function (image) {
      texture.image = image; // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.

      var isJPEG = url.search(/\.jpe?g($|\?)/i) > 0 || url.search(/^data\:image\/jpeg/) === 0;
      texture.format = isJPEG ? RGBFormat : RGBAFormat;
      texture.needsUpdate = true;

      if (onLoad !== undefined) {
        onLoad(texture);
      }
    }, onProgress, onError);
    return texture;
  },
  setCrossOrigin: function (value) {
    this.crossOrigin = value;
    return this;
  },
  setPath: function (value) {
    this.path = value;
    return this;
  }
});
/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Extensible curve object
 *
 * Some common of curve methods:
 * .getPoint( t, optionalTarget ), .getTangent( t )
 * .getPointAt( u, optionalTarget ), .getTangentAt( u )
 * .getPoints(), .getSpacedPoints()
 * .getLength()
 * .updateArcLengths()
 *
 * This following curves inherit from THREE.Curve:
 *
 * -- 2D curves --
 * THREE.ArcCurve
 * THREE.CubicBezierCurve
 * THREE.EllipseCurve
 * THREE.LineCurve
 * THREE.QuadraticBezierCurve
 * THREE.SplineCurve
 *
 * -- 3D curves --
 * THREE.CatmullRomCurve3
 * THREE.CubicBezierCurve3
 * THREE.LineCurve3
 * THREE.QuadraticBezierCurve3
 *
 * A series of curves can be represented as a THREE.CurvePath.
 *
 **/

/**************************************************************
 *	Abstract Curve base class
 **************************************************************/

function Curve() {
  this.type = 'Curve';
  this.arcLengthDivisions = 200;
}

Object.assign(Curve.prototype, {
  // Virtual base class method to overwrite and implement in subclasses
  //	- t [0 .. 1]
  getPoint: function ()
  /* t, optionalTarget */
  {
    console.warn('THREE.Curve: .getPoint() not implemented.');
    return null;
  },
  // Get point at relative position in curve according to arc length
  // - u [0 .. 1]
  getPointAt: function (u, optionalTarget) {
    var t = this.getUtoTmapping(u);
    return this.getPoint(t, optionalTarget);
  },
  // Get sequence of points using getPoint( t )
  getPoints: function (divisions) {
    if (divisions === undefined) divisions = 5;
    var points = [];

    for (var d = 0; d <= divisions; d++) {
      points.push(this.getPoint(d / divisions));
    }

    return points;
  },
  // Get sequence of points using getPointAt( u )
  getSpacedPoints: function (divisions) {
    if (divisions === undefined) divisions = 5;
    var points = [];

    for (var d = 0; d <= divisions; d++) {
      points.push(this.getPointAt(d / divisions));
    }

    return points;
  },
  // Get total curve arc length
  getLength: function () {
    var lengths = this.getLengths();
    return lengths[lengths.length - 1];
  },
  // Get list of cumulative segment lengths
  getLengths: function (divisions) {
    if (divisions === undefined) divisions = this.arcLengthDivisions;

    if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {
      return this.cacheArcLengths;
    }

    this.needsUpdate = false;
    var cache = [];
    var current,
        last = this.getPoint(0);
    var p,
        sum = 0;
    cache.push(0);

    for (p = 1; p <= divisions; p++) {
      current = this.getPoint(p / divisions);
      sum += current.distanceTo(last);
      cache.push(sum);
      last = current;
    }

    this.cacheArcLengths = cache;
    return cache; // { sums: cache, sum: sum }; Sum is in the last element.
  },
  updateArcLengths: function () {
    this.needsUpdate = true;
    this.getLengths();
  },
  // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
  getUtoTmapping: function (u, distance) {
    var arcLengths = this.getLengths();
    var i = 0,
        il = arcLengths.length;
    var targetArcLength; // The targeted u distance value to get

    if (distance) {
      targetArcLength = distance;
    } else {
      targetArcLength = u * arcLengths[il - 1];
    } // binary search for the index with largest value smaller than target u distance


    var low = 0,
        high = il - 1,
        comparison;

    while (low <= high) {
      i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

      comparison = arcLengths[i] - targetArcLength;

      if (comparison < 0) {
        low = i + 1;
      } else if (comparison > 0) {
        high = i - 1;
      } else {
        high = i;
        break; // DONE
      }
    }

    i = high;

    if (arcLengths[i] === targetArcLength) {
      return i / (il - 1);
    } // we could get finer grain at lengths, or use simple interpolation between two points


    var lengthBefore = arcLengths[i];
    var lengthAfter = arcLengths[i + 1];
    var segmentLength = lengthAfter - lengthBefore; // determine where we are between the 'before' and 'after' points

    var segmentFraction = (targetArcLength - lengthBefore) / segmentLength; // add that fractional amount to t

    var t = (i + segmentFraction) / (il - 1);
    return t;
  },
  // Returns a unit vector tangent at t
  // In case any sub curve does not implement its tangent derivation,
  // 2 points a small delta apart will be used to find its gradient
  // which seems to give a reasonable approximation
  getTangent: function (t) {
    var delta = 0.0001;
    var t1 = t - delta;
    var t2 = t + delta; // Capping in case of danger

    if (t1 < 0) t1 = 0;
    if (t2 > 1) t2 = 1;
    var pt1 = this.getPoint(t1);
    var pt2 = this.getPoint(t2);
    var vec = pt2.clone().sub(pt1);
    return vec.normalize();
  },
  getTangentAt: function (u) {
    var t = this.getUtoTmapping(u);
    return this.getTangent(t);
  },
  computeFrenetFrames: function (segments, closed) {
    // see http://www.cs.indiana.edu/pub/techreports/TR425.pdf
    var normal = new Vector3();
    var tangents = [];
    var normals = [];
    var binormals = [];
    var vec = new Vector3();
    var mat = new Matrix4();
    var i, u, theta; // compute the tangent vectors for each segment on the curve

    for (i = 0; i <= segments; i++) {
      u = i / segments;
      tangents[i] = this.getTangentAt(u);
      tangents[i].normalize();
    } // select an initial normal vector perpendicular to the first tangent vector,
    // and in the direction of the minimum tangent xyz component


    normals[0] = new Vector3();
    binormals[0] = new Vector3();
    var min = Number.MAX_VALUE;
    var tx = Math.abs(tangents[0].x);
    var ty = Math.abs(tangents[0].y);
    var tz = Math.abs(tangents[0].z);

    if (tx <= min) {
      min = tx;
      normal.set(1, 0, 0);
    }

    if (ty <= min) {
      min = ty;
      normal.set(0, 1, 0);
    }

    if (tz <= min) {
      normal.set(0, 0, 1);
    }

    vec.crossVectors(tangents[0], normal).normalize();
    normals[0].crossVectors(tangents[0], vec);
    binormals[0].crossVectors(tangents[0], normals[0]); // compute the slowly-varying normal and binormal vectors for each segment on the curve

    for (i = 1; i <= segments; i++) {
      normals[i] = normals[i - 1].clone();
      binormals[i] = binormals[i - 1].clone();
      vec.crossVectors(tangents[i - 1], tangents[i]);

      if (vec.length() > Number.EPSILON) {
        vec.normalize();
        theta = Math.acos(_Math.clamp(tangents[i - 1].dot(tangents[i]), -1, 1)); // clamp for floating pt errors

        normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));
      }

      binormals[i].crossVectors(tangents[i], normals[i]);
    } // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same


    if (closed === true) {
      theta = Math.acos(_Math.clamp(normals[0].dot(normals[segments]), -1, 1));
      theta /= segments;

      if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {
        theta = -theta;
      }

      for (i = 1; i <= segments; i++) {
        // twist a little...
        normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));
        binormals[i].crossVectors(tangents[i], normals[i]);
      }
    }

    return {
      tangents: tangents,
      normals: normals,
      binormals: binormals
    };
  },
  clone: function () {
    return new this.constructor().copy(this);
  },
  copy: function (source) {
    this.arcLengthDivisions = source.arcLengthDivisions;
    return this;
  },
  toJSON: function () {
    var data = {
      metadata: {
        version: 4.5,
        type: 'Curve',
        generator: 'Curve.toJSON'
      }
    };
    data.arcLengthDivisions = this.arcLengthDivisions;
    data.type = this.type;
    return data;
  },
  fromJSON: function (json) {
    this.arcLengthDivisions = json.arcLengthDivisions;
    return this;
  }
});

function EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
  Curve.call(this);
  this.type = 'EllipseCurve';
  this.aX = aX || 0;
  this.aY = aY || 0;
  this.xRadius = xRadius || 1;
  this.yRadius = yRadius || 1;
  this.aStartAngle = aStartAngle || 0;
  this.aEndAngle = aEndAngle || 2 * Math.PI;
  this.aClockwise = aClockwise || false;
  this.aRotation = aRotation || 0;
}

EllipseCurve.prototype = Object.create(Curve.prototype);
EllipseCurve.prototype.constructor = EllipseCurve;
EllipseCurve.prototype.isEllipseCurve = true;

EllipseCurve.prototype.getPoint = function (t, optionalTarget) {
  var point = optionalTarget || new Vector2();
  var twoPi = Math.PI * 2;
  var deltaAngle = this.aEndAngle - this.aStartAngle;
  var samePoints = Math.abs(deltaAngle) < Number.EPSILON; // ensures that deltaAngle is 0 .. 2 PI

  while (deltaAngle < 0) deltaAngle += twoPi;

  while (deltaAngle > twoPi) deltaAngle -= twoPi;

  if (deltaAngle < Number.EPSILON) {
    if (samePoints) {
      deltaAngle = 0;
    } else {
      deltaAngle = twoPi;
    }
  }

  if (this.aClockwise === true && !samePoints) {
    if (deltaAngle === twoPi) {
      deltaAngle = -twoPi;
    } else {
      deltaAngle = deltaAngle - twoPi;
    }
  }

  var angle = this.aStartAngle + t * deltaAngle;
  var x = this.aX + this.xRadius * Math.cos(angle);
  var y = this.aY + this.yRadius * Math.sin(angle);

  if (this.aRotation !== 0) {
    var cos = Math.cos(this.aRotation);
    var sin = Math.sin(this.aRotation);
    var tx = x - this.aX;
    var ty = y - this.aY; // Rotate the point about the center of the ellipse.

    x = tx * cos - ty * sin + this.aX;
    y = tx * sin + ty * cos + this.aY;
  }

  return point.set(x, y);
};

EllipseCurve.prototype.copy = function (source) {
  Curve.prototype.copy.call(this, source);
  this.aX = source.aX;
  this.aY = source.aY;
  this.xRadius = source.xRadius;
  this.yRadius = source.yRadius;
  this.aStartAngle = source.aStartAngle;
  this.aEndAngle = source.aEndAngle;
  this.aClockwise = source.aClockwise;
  this.aRotation = source.aRotation;
  return this;
};

EllipseCurve.prototype.toJSON = function () {
  var data = Curve.prototype.toJSON.call(this);
  data.aX = this.aX;
  data.aY = this.aY;
  data.xRadius = this.xRadius;
  data.yRadius = this.yRadius;
  data.aStartAngle = this.aStartAngle;
  data.aEndAngle = this.aEndAngle;
  data.aClockwise = this.aClockwise;
  data.aRotation = this.aRotation;
  return data;
};

EllipseCurve.prototype.fromJSON = function (json) {
  Curve.prototype.fromJSON.call(this, json);
  this.aX = json.aX;
  this.aY = json.aY;
  this.xRadius = json.xRadius;
  this.yRadius = json.yRadius;
  this.aStartAngle = json.aStartAngle;
  this.aEndAngle = json.aEndAngle;
  this.aClockwise = json.aClockwise;
  this.aRotation = json.aRotation;
  return this;
};

function ArcCurve(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
  EllipseCurve.call(this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
  this.type = 'ArcCurve';
}

ArcCurve.prototype = Object.create(EllipseCurve.prototype);
ArcCurve.prototype.constructor = ArcCurve;
ArcCurve.prototype.isArcCurve = true;
/**
 * @author zz85 https://github.com/zz85
 *
 * Centripetal CatmullRom Curve - which is useful for avoiding
 * cusps and self-intersections in non-uniform catmull rom curves.
 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
 *
 * curve.type accepts centripetal(default), chordal and catmullrom
 * curve.tension is used for catmullrom which defaults to 0.5
 */

/*
Based on an optimized c++ solution in
 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
 - http://ideone.com/NoEbVM

This CubicPoly class could be used for reusing some variables and calculations,
but for three.js curve use, it could be possible inlined and flatten into a single function call
which can be placed in CurveUtils.
*/

function CubicPoly() {
  var c0 = 0,
      c1 = 0,
      c2 = 0,
      c3 = 0;
  /*
   * Compute coefficients for a cubic polynomial
   *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
   * such that
   *   p(0) = x0, p(1) = x1
   *  and
   *   p'(0) = t0, p'(1) = t1.
   */

  function init(x0, x1, t0, t1) {
    c0 = x0;
    c1 = t0;
    c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;
    c3 = 2 * x0 - 2 * x1 + t0 + t1;
  }

  return {
    initCatmullRom: function (x0, x1, x2, x3, tension) {
      init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));
    },
    initNonuniformCatmullRom: function (x0, x1, x2, x3, dt0, dt1, dt2) {
      // compute tangents when parameterized in [t1,t2]
      var t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;
      var t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2; // rescale tangents for parametrization in [0,1]

      t1 *= dt1;
      t2 *= dt1;
      init(x1, x2, t1, t2);
    },
    calc: function (t) {
      var t2 = t * t;
      var t3 = t2 * t;
      return c0 + c1 * t + c2 * t2 + c3 * t3;
    }
  };
} //


var tmp = new Vector3();
var px = new CubicPoly(),
    py = new CubicPoly(),
    pz = new CubicPoly();

function CatmullRomCurve3(points, closed, curveType, tension) {
  Curve.call(this);
  this.type = 'CatmullRomCurve3';
  this.points = points || [];
  this.closed = closed || false;
  this.curveType = curveType || 'centripetal';
  this.tension = tension || 0.5;
}

CatmullRomCurve3.prototype = Object.create(Curve.prototype);
CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;
CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;

CatmullRomCurve3.prototype.getPoint = function (t, optionalTarget) {
  var point = optionalTarget || new Vector3();
  var points = this.points;
  var l = points.length;
  var p = (l - (this.closed ? 0 : 1)) * t;
  var intPoint = Math.floor(p);
  var weight = p - intPoint;

  if (this.closed) {
    intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;
  } else if (weight === 0 && intPoint === l - 1) {
    intPoint = l - 2;
    weight = 1;
  }

  var p0, p1, p2, p3; // 4 points

  if (this.closed || intPoint > 0) {
    p0 = points[(intPoint - 1) % l];
  } else {
    // extrapolate first point
    tmp.subVectors(points[0], points[1]).add(points[0]);
    p0 = tmp;
  }

  p1 = points[intPoint % l];
  p2 = points[(intPoint + 1) % l];

  if (this.closed || intPoint + 2 < l) {
    p3 = points[(intPoint + 2) % l];
  } else {
    // extrapolate last point
    tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);
    p3 = tmp;
  }

  if (this.curveType === 'centripetal' || this.curveType === 'chordal') {
    // init Centripetal / Chordal Catmull-Rom
    var pow = this.curveType === 'chordal' ? 0.5 : 0.25;
    var dt0 = Math.pow(p0.distanceToSquared(p1), pow);
    var dt1 = Math.pow(p1.distanceToSquared(p2), pow);
    var dt2 = Math.pow(p2.distanceToSquared(p3), pow); // safety check for repeated points

    if (dt1 < 1e-4) dt1 = 1.0;
    if (dt0 < 1e-4) dt0 = dt1;
    if (dt2 < 1e-4) dt2 = dt1;
    px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);
    py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);
    pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);
  } else if (this.curveType === 'catmullrom') {
    px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);
    py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);
    pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);
  }

  point.set(px.calc(weight), py.calc(weight), pz.calc(weight));
  return point;
};

CatmullRomCurve3.prototype.copy = function (source) {
  Curve.prototype.copy.call(this, source);
  this.points = [];

  for (var i = 0, l = source.points.length; i < l; i++) {
    var point = source.points[i];
    this.points.push(point.clone());
  }

  this.closed = source.closed;
  this.curveType = source.curveType;
  this.tension = source.tension;
  return this;
};

CatmullRomCurve3.prototype.toJSON = function () {
  var data = Curve.prototype.toJSON.call(this);
  data.points = [];

  for (var i = 0, l = this.points.length; i < l; i++) {
    var point = this.points[i];
    data.points.push(point.toArray());
  }

  data.closed = this.closed;
  data.curveType = this.curveType;
  data.tension = this.tension;
  return data;
};

CatmullRomCurve3.prototype.fromJSON = function (json) {
  Curve.prototype.fromJSON.call(this, json);
  this.points = [];

  for (var i = 0, l = json.points.length; i < l; i++) {
    var point = json.points[i];
    this.points.push(new Vector3().fromArray(point));
  }

  this.closed = json.closed;
  this.curveType = json.curveType;
  this.tension = json.tension;
  return this;
};
/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 * Bezier Curves formulas obtained from
 * http://en.wikipedia.org/wiki/BÃ©zier_curve
 */


function CatmullRom(t, p0, p1, p2, p3) {
  var v0 = (p2 - p0) * 0.5;
  var v1 = (p3 - p1) * 0.5;
  var t2 = t * t;
  var t3 = t * t2;
  return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
} //


function QuadraticBezierP0(t, p) {
  var k = 1 - t;
  return k * k * p;
}

function QuadraticBezierP1(t, p) {
  return 2 * (1 - t) * t * p;
}

function QuadraticBezierP2(t, p) {
  return t * t * p;
}

function QuadraticBezier(t, p0, p1, p2) {
  return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);
} //


function CubicBezierP0(t, p) {
  var k = 1 - t;
  return k * k * k * p;
}

function CubicBezierP1(t, p) {
  var k = 1 - t;
  return 3 * k * k * t * p;
}

function CubicBezierP2(t, p) {
  return 3 * (1 - t) * t * t * p;
}

function CubicBezierP3(t, p) {
  return t * t * t * p;
}

function CubicBezier(t, p0, p1, p2, p3) {
  return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);
}

function CubicBezierCurve(v0, v1, v2, v3) {
  Curve.call(this);
  this.type = 'CubicBezierCurve';
  this.v0 = v0 || new Vector2();
  this.v1 = v1 || new Vector2();
  this.v2 = v2 || new Vector2();
  this.v3 = v3 || new Vector2();
}

CubicBezierCurve.prototype = Object.create(Curve.prototype);
CubicBezierCurve.prototype.constructor = CubicBezierCurve;
CubicBezierCurve.prototype.isCubicBezierCurve = true;

CubicBezierCurve.prototype.getPoint = function (t, optionalTarget) {
  var point = optionalTarget || new Vector2();
  var v0 = this.v0,
      v1 = this.v1,
      v2 = this.v2,
      v3 = this.v3;
  point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));
  return point;
};

CubicBezierCurve.prototype.copy = function (source) {
  Curve.prototype.copy.call(this, source);
  this.v0.copy(source.v0);
  this.v1.copy(source.v1);
  this.v2.copy(source.v2);
  this.v3.copy(source.v3);
  return this;
};

CubicBezierCurve.prototype.toJSON = function () {
  var data = Curve.prototype.toJSON.call(this);
  data.v0 = this.v0.toArray();
  data.v1 = this.v1.toArray();
  data.v2 = this.v2.toArray();
  data.v3 = this.v3.toArray();
  return data;
};

CubicBezierCurve.prototype.fromJSON = function (json) {
  Curve.prototype.fromJSON.call(this, json);
  this.v0.fromArray(json.v0);
  this.v1.fromArray(json.v1);
  this.v2.fromArray(json.v2);
  this.v3.fromArray(json.v3);
  return this;
};

function CubicBezierCurve3(v0, v1, v2, v3) {
  Curve.call(this);
  this.type = 'CubicBezierCurve3';
  this.v0 = v0 || new Vector3();
  this.v1 = v1 || new Vector3();
  this.v2 = v2 || new Vector3();
  this.v3 = v3 || new Vector3();
}

CubicBezierCurve3.prototype = Object.create(Curve.prototype);
CubicBezierCurve3.prototype.constructor = CubicBezierCurve3;
CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;

CubicBezierCurve3.prototype.getPoint = function (t, optionalTarget) {
  var point = optionalTarget || new Vector3();
  var v0 = this.v0,
      v1 = this.v1,
      v2 = this.v2,
      v3 = this.v3;
  point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));
  return point;
};

CubicBezierCurve3.prototype.copy = function (source) {
  Curve.prototype.copy.call(this, source);
  this.v0.copy(source.v0);
  this.v1.copy(source.v1);
  this.v2.copy(source.v2);
  this.v3.copy(source.v3);
  return this;
};

CubicBezierCurve3.prototype.toJSON = function () {
  var data = Curve.prototype.toJSON.call(this);
  data.v0 = this.v0.toArray();
  data.v1 = this.v1.toArray();
  data.v2 = this.v2.toArray();
  data.v3 = this.v3.toArray();
  return data;
};

CubicBezierCurve3.prototype.fromJSON = function (json) {
  Curve.prototype.fromJSON.call(this, json);
  this.v0.fromArray(json.v0);
  this.v1.fromArray(json.v1);
  this.v2.fromArray(json.v2);
  this.v3.fromArray(json.v3);
  return this;
};

function LineCurve(v1, v2) {
  Curve.call(this);
  this.type = 'LineCurve';
  this.v1 = v1 || new Vector2();
  this.v2 = v2 || new Vector2();
}

LineCurve.prototype = Object.create(Curve.prototype);
LineCurve.prototype.constructor = LineCurve;
LineCurve.prototype.isLineCurve = true;

LineCurve.prototype.getPoint = function (t, optionalTarget) {
  var point = optionalTarget || new Vector2();

  if (t === 1) {
    point.copy(this.v2);
  } else {
    point.copy(this.v2).sub(this.v1);
    point.multiplyScalar(t).add(this.v1);
  }

  return point;
}; // Line curve is linear, so we can overwrite default getPointAt


LineCurve.prototype.getPointAt = function (u, optionalTarget) {
  return this.getPoint(u, optionalTarget);
};

LineCurve.prototype.getTangent = function ()
/* t */
{
  var tangent = this.v2.clone().sub(this.v1);
  return tangent.normalize();
};

LineCurve.prototype.copy = function (source) {
  Curve.prototype.copy.call(this, source);
  this.v1.copy(source.v1);
  this.v2.copy(source.v2);
  return this;
};

LineCurve.prototype.toJSON = function () {
  var data = Curve.prototype.toJSON.call(this);
  data.v1 = this.v1.toArray();
  data.v2 = this.v2.toArray();
  return data;
};

LineCurve.prototype.fromJSON = function (json) {
  Curve.prototype.fromJSON.call(this, json);
  this.v1.fromArray(json.v1);
  this.v2.fromArray(json.v2);
  return this;
};

function LineCurve3(v1, v2) {
  Curve.call(this);
  this.type = 'LineCurve3';
  this.v1 = v1 || new Vector3();
  this.v2 = v2 || new Vector3();
}

LineCurve3.prototype = Object.create(Curve.prototype);
LineCurve3.prototype.constructor = LineCurve3;
LineCurve3.prototype.isLineCurve3 = true;

LineCurve3.prototype.getPoint = function (t, optionalTarget) {
  var point = optionalTarget || new Vector3();

  if (t === 1) {
    point.copy(this.v2);
  } else {
    point.copy(this.v2).sub(this.v1);
    point.multiplyScalar(t).add(this.v1);
  }

  return point;
}; // Line curve is linear, so we can overwrite default getPointAt


LineCurve3.prototype.getPointAt = function (u, optionalTarget) {
  return this.getPoint(u, optionalTarget);
};

LineCurve3.prototype.copy = function (source) {
  Curve.prototype.copy.call(this, source);
  this.v1.copy(source.v1);
  this.v2.copy(source.v2);
  return this;
};

LineCurve3.prototype.toJSON = function () {
  var data = Curve.prototype.toJSON.call(this);
  data.v1 = this.v1.toArray();
  data.v2 = this.v2.toArray();
  return data;
};

LineCurve3.prototype.fromJSON = function (json) {
  Curve.prototype.fromJSON.call(this, json);
  this.v1.fromArray(json.v1);
  this.v2.fromArray(json.v2);
  return this;
};

function QuadraticBezierCurve(v0, v1, v2) {
  Curve.call(this);
  this.type = 'QuadraticBezierCurve';
  this.v0 = v0 || new Vector2();
  this.v1 = v1 || new Vector2();
  this.v2 = v2 || new Vector2();
}

QuadraticBezierCurve.prototype = Object.create(Curve.prototype);
QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;
QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;

QuadraticBezierCurve.prototype.getPoint = function (t, optionalTarget) {
  var point = optionalTarget || new Vector2();
  var v0 = this.v0,
      v1 = this.v1,
      v2 = this.v2;
  point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));
  return point;
};

QuadraticBezierCurve.prototype.copy = function (source) {
  Curve.prototype.copy.call(this, source);
  this.v0.copy(source.v0);
  this.v1.copy(source.v1);
  this.v2.copy(source.v2);
  return this;
};

QuadraticBezierCurve.prototype.toJSON = function () {
  var data = Curve.prototype.toJSON.call(this);
  data.v0 = this.v0.toArray();
  data.v1 = this.v1.toArray();
  data.v2 = this.v2.toArray();
  return data;
};

QuadraticBezierCurve.prototype.fromJSON = function (json) {
  Curve.prototype.fromJSON.call(this, json);
  this.v0.fromArray(json.v0);
  this.v1.fromArray(json.v1);
  this.v2.fromArray(json.v2);
  return this;
};

function QuadraticBezierCurve3(v0, v1, v2) {
  Curve.call(this);
  this.type = 'QuadraticBezierCurve3';
  this.v0 = v0 || new Vector3();
  this.v1 = v1 || new Vector3();
  this.v2 = v2 || new Vector3();
}

QuadraticBezierCurve3.prototype = Object.create(Curve.prototype);
QuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;
QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;

QuadraticBezierCurve3.prototype.getPoint = function (t, optionalTarget) {
  var point = optionalTarget || new Vector3();
  var v0 = this.v0,
      v1 = this.v1,
      v2 = this.v2;
  point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));
  return point;
};

QuadraticBezierCurve3.prototype.copy = function (source) {
  Curve.prototype.copy.call(this, source);
  this.v0.copy(source.v0);
  this.v1.copy(source.v1);
  this.v2.copy(source.v2);
  return this;
};

QuadraticBezierCurve3.prototype.toJSON = function () {
  var data = Curve.prototype.toJSON.call(this);
  data.v0 = this.v0.toArray();
  data.v1 = this.v1.toArray();
  data.v2 = this.v2.toArray();
  return data;
};

QuadraticBezierCurve3.prototype.fromJSON = function (json) {
  Curve.prototype.fromJSON.call(this, json);
  this.v0.fromArray(json.v0);
  this.v1.fromArray(json.v1);
  this.v2.fromArray(json.v2);
  return this;
};

function SplineCurve(points
/* array of Vector2 */
) {
  Curve.call(this);
  this.type = 'SplineCurve';
  this.points = points || [];
}

SplineCurve.prototype = Object.create(Curve.prototype);
SplineCurve.prototype.constructor = SplineCurve;
SplineCurve.prototype.isSplineCurve = true;

SplineCurve.prototype.getPoint = function (t, optionalTarget) {
  var point = optionalTarget || new Vector2();
  var points = this.points;
  var p = (points.length - 1) * t;
  var intPoint = Math.floor(p);
  var weight = p - intPoint;
  var p0 = points[intPoint === 0 ? intPoint : intPoint - 1];
  var p1 = points[intPoint];
  var p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];
  var p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];
  point.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));
  return point;
};

SplineCurve.prototype.copy = function (source) {
  Curve.prototype.copy.call(this, source);
  this.points = [];

  for (var i = 0, l = source.points.length; i < l; i++) {
    var point = source.points[i];
    this.points.push(point.clone());
  }

  return this;
};

SplineCurve.prototype.toJSON = function () {
  var data = Curve.prototype.toJSON.call(this);
  data.points = [];

  for (var i = 0, l = this.points.length; i < l; i++) {
    var point = this.points[i];
    data.points.push(point.toArray());
  }

  return data;
};

SplineCurve.prototype.fromJSON = function (json) {
  Curve.prototype.fromJSON.call(this, json);
  this.points = [];

  for (var i = 0, l = json.points.length; i < l; i++) {
    var point = json.points[i];
    this.points.push(new Vector2().fromArray(point));
  }

  return this;
};

var Curves =
/*#__PURE__*/
Object.freeze({
  ArcCurve: ArcCurve,
  CatmullRomCurve3: CatmullRomCurve3,
  CubicBezierCurve: CubicBezierCurve,
  CubicBezierCurve3: CubicBezierCurve3,
  EllipseCurve: EllipseCurve,
  LineCurve: LineCurve,
  LineCurve3: LineCurve3,
  QuadraticBezierCurve: QuadraticBezierCurve,
  QuadraticBezierCurve3: QuadraticBezierCurve3,
  SplineCurve: SplineCurve
});
/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 **/

/**************************************************************
 *	Curved Path - a curve path is simply a array of connected
 *  curves, but retains the api of a curve
 **************************************************************/

function CurvePath() {
  Curve.call(this);
  this.type = 'CurvePath';
  this.curves = [];
  this.autoClose = false; // Automatically closes the path
}

CurvePath.prototype = Object.assign(Object.create(Curve.prototype), {
  constructor: CurvePath,
  add: function (curve) {
    this.curves.push(curve);
  },
  closePath: function () {
    // Add a line curve if start and end of lines are not connected
    var startPoint = this.curves[0].getPoint(0);
    var endPoint = this.curves[this.curves.length - 1].getPoint(1);

    if (!startPoint.equals(endPoint)) {
      this.curves.push(new LineCurve(endPoint, startPoint));
    }
  },
  // To get accurate point with reference to
  // entire path distance at time t,
  // following has to be done:
  // 1. Length of each sub path have to be known
  // 2. Locate and identify type of curve
  // 3. Get t for the curve
  // 4. Return curve.getPointAt(t')
  getPoint: function (t) {
    var d = t * this.getLength();
    var curveLengths = this.getCurveLengths();
    var i = 0; // To think about boundaries points.

    while (i < curveLengths.length) {
      if (curveLengths[i] >= d) {
        var diff = curveLengths[i] - d;
        var curve = this.curves[i];
        var segmentLength = curve.getLength();
        var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
        return curve.getPointAt(u);
      }

      i++;
    }

    return null; // loop where sum != 0, sum > d , sum+1 <d
  },
  // We cannot use the default THREE.Curve getPoint() with getLength() because in
  // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
  // getPoint() depends on getLength
  getLength: function () {
    var lens = this.getCurveLengths();
    return lens[lens.length - 1];
  },
  // cacheLengths must be recalculated.
  updateArcLengths: function () {
    this.needsUpdate = true;
    this.cacheLengths = null;
    this.getCurveLengths();
  },
  // Compute lengths and cache them
  // We cannot overwrite getLengths() because UtoT mapping uses it.
  getCurveLengths: function () {
    // We use cache values if curves and cache array are same length
    if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {
      return this.cacheLengths;
    } // Get length of sub-curve
    // Push sums into cached array


    var lengths = [],
        sums = 0;

    for (var i = 0, l = this.curves.length; i < l; i++) {
      sums += this.curves[i].getLength();
      lengths.push(sums);
    }

    this.cacheLengths = lengths;
    return lengths;
  },
  getSpacedPoints: function (divisions) {
    if (divisions === undefined) divisions = 40;
    var points = [];

    for (var i = 0; i <= divisions; i++) {
      points.push(this.getPoint(i / divisions));
    }

    if (this.autoClose) {
      points.push(points[0]);
    }

    return points;
  },
  getPoints: function (divisions) {
    divisions = divisions || 12;
    var points = [],
        last;

    for (var i = 0, curves = this.curves; i < curves.length; i++) {
      var curve = curves[i];
      var resolution = curve && curve.isEllipseCurve ? divisions * 2 : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions * curve.points.length : divisions;
      var pts = curve.getPoints(resolution);

      for (var j = 0; j < pts.length; j++) {
        var point = pts[j];
        if (last && last.equals(point)) continue; // ensures no consecutive points are duplicates

        points.push(point);
        last = point;
      }
    }

    if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {
      points.push(points[0]);
    }

    return points;
  },
  copy: function (source) {
    Curve.prototype.copy.call(this, source);
    this.curves = [];

    for (var i = 0, l = source.curves.length; i < l; i++) {
      var curve = source.curves[i];
      this.curves.push(curve.clone());
    }

    this.autoClose = source.autoClose;
    return this;
  },
  toJSON: function () {
    var data = Curve.prototype.toJSON.call(this);
    data.autoClose = this.autoClose;
    data.curves = [];

    for (var i = 0, l = this.curves.length; i < l; i++) {
      var curve = this.curves[i];
      data.curves.push(curve.toJSON());
    }

    return data;
  },
  fromJSON: function (json) {
    Curve.prototype.fromJSON.call(this, json);
    this.autoClose = json.autoClose;
    this.curves = [];

    for (var i = 0, l = json.curves.length; i < l; i++) {
      var curve = json.curves[i];
      this.curves.push(new Curves[curve.type]().fromJSON(curve));
    }

    return this;
  }
});
/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Creates free form 2d path using series of points, lines or curves.
 **/

function Path(points) {
  CurvePath.call(this);
  this.type = 'Path';
  this.currentPoint = new Vector2();

  if (points) {
    this.setFromPoints(points);
  }
}

Path.prototype = Object.assign(Object.create(CurvePath.prototype), {
  constructor: Path,
  setFromPoints: function (points) {
    this.moveTo(points[0].x, points[0].y);

    for (var i = 1, l = points.length; i < l; i++) {
      this.lineTo(points[i].x, points[i].y);
    }
  },
  moveTo: function (x, y) {
    this.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?
  },
  lineTo: function (x, y) {
    var curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));
    this.curves.push(curve);
    this.currentPoint.set(x, y);
  },
  quadraticCurveTo: function (aCPx, aCPy, aX, aY) {
    var curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));
    this.curves.push(curve);
    this.currentPoint.set(aX, aY);
  },
  bezierCurveTo: function (aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
    var curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));
    this.curves.push(curve);
    this.currentPoint.set(aX, aY);
  },
  splineThru: function (pts
  /*Array of Vector*/
  ) {
    var npts = [this.currentPoint.clone()].concat(pts);
    var curve = new SplineCurve(npts);
    this.curves.push(curve);
    this.currentPoint.copy(pts[pts.length - 1]);
  },
  arc: function (aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
    var x0 = this.currentPoint.x;
    var y0 = this.currentPoint.y;
    this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);
  },
  absarc: function (aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
    this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
  },
  ellipse: function (aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
    var x0 = this.currentPoint.x;
    var y0 = this.currentPoint.y;
    this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
  },
  absellipse: function (aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
    var curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);

    if (this.curves.length > 0) {
      // if a previous curve is present, attempt to join
      var firstPoint = curve.getPoint(0);

      if (!firstPoint.equals(this.currentPoint)) {
        this.lineTo(firstPoint.x, firstPoint.y);
      }
    }

    this.curves.push(curve);
    var lastPoint = curve.getPoint(1);
    this.currentPoint.copy(lastPoint);
  },
  copy: function (source) {
    CurvePath.prototype.copy.call(this, source);
    this.currentPoint.copy(source.currentPoint);
    return this;
  },
  toJSON: function () {
    var data = CurvePath.prototype.toJSON.call(this);
    data.currentPoint = this.currentPoint.toArray();
    return data;
  },
  fromJSON: function (json) {
    CurvePath.prototype.fromJSON.call(this, json);
    this.currentPoint.fromArray(json.currentPoint);
    return this;
  }
});
/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Defines a 2d shape plane using paths.
 **/
// STEP 1 Create a path.
// STEP 2 Turn path into shape.
// STEP 3 ExtrudeGeometry takes in Shape/Shapes
// STEP 3a - Extract points from each shape, turn to vertices
// STEP 3b - Triangulate each shape, add faces.

function Shape(points) {
  Path.call(this, points);
  this.uuid = _Math.generateUUID();
  this.type = 'Shape';
  this.holes = [];
}

Shape.prototype = Object.assign(Object.create(Path.prototype), {
  constructor: Shape,
  getPointsHoles: function (divisions) {
    var holesPts = [];

    for (var i = 0, l = this.holes.length; i < l; i++) {
      holesPts[i] = this.holes[i].getPoints(divisions);
    }

    return holesPts;
  },
  // get points of shape and holes (keypoints based on segments parameter)
  extractPoints: function (divisions) {
    return {
      shape: this.getPoints(divisions),
      holes: this.getPointsHoles(divisions)
    };
  },
  copy: function (source) {
    Path.prototype.copy.call(this, source);
    this.holes = [];

    for (var i = 0, l = source.holes.length; i < l; i++) {
      var hole = source.holes[i];
      this.holes.push(hole.clone());
    }

    return this;
  },
  toJSON: function () {
    var data = Path.prototype.toJSON.call(this);
    data.uuid = this.uuid;
    data.holes = [];

    for (var i = 0, l = this.holes.length; i < l; i++) {
      var hole = this.holes[i];
      data.holes.push(hole.toJSON());
    }

    return data;
  },
  fromJSON: function (json) {
    Path.prototype.fromJSON.call(this, json);
    this.uuid = json.uuid;
    this.holes = [];

    for (var i = 0, l = json.holes.length; i < l; i++) {
      var hole = json.holes[i];
      this.holes.push(new Path().fromJSON(hole));
    }

    return this;
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function Light(color, intensity) {
  Object3D.call(this);
  this.type = 'Light';
  this.color = new Color(color);
  this.intensity = intensity !== undefined ? intensity : 1;
  this.receiveShadow = undefined;
}

Light.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Light,
  isLight: true,
  copy: function (source) {
    Object3D.prototype.copy.call(this, source);
    this.color.copy(source.color);
    this.intensity = source.intensity;
    return this;
  },
  toJSON: function (meta) {
    var data = Object3D.prototype.toJSON.call(this, meta);
    data.object.color = this.color.getHex();
    data.object.intensity = this.intensity;
    if (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();
    if (this.distance !== undefined) data.object.distance = this.distance;
    if (this.angle !== undefined) data.object.angle = this.angle;
    if (this.decay !== undefined) data.object.decay = this.decay;
    if (this.penumbra !== undefined) data.object.penumbra = this.penumbra;
    if (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();
    return data;
  }
});
/**
 * @author alteredq / http://alteredqualia.com/
 */

function HemisphereLight(skyColor, groundColor, intensity) {
  Light.call(this, skyColor, intensity);
  this.type = 'HemisphereLight';
  this.castShadow = undefined;
  this.position.copy(Object3D.DefaultUp);
  this.updateMatrix();
  this.groundColor = new Color(groundColor);
}

HemisphereLight.prototype = Object.assign(Object.create(Light.prototype), {
  constructor: HemisphereLight,
  isHemisphereLight: true,
  copy: function (source) {
    Light.prototype.copy.call(this, source);
    this.groundColor.copy(source.groundColor);
    return this;
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 */

function LightShadow(camera) {
  this.camera = camera;
  this.bias = 0;
  this.radius = 1;
  this.mapSize = new Vector2(512, 512);
  this.map = null;
  this.matrix = new Matrix4();
}

Object.assign(LightShadow.prototype, {
  copy: function (source) {
    this.camera = source.camera.clone();
    this.bias = source.bias;
    this.radius = source.radius;
    this.mapSize.copy(source.mapSize);
    return this;
  },
  clone: function () {
    return new this.constructor().copy(this);
  },
  toJSON: function () {
    var object = {};
    if (this.bias !== 0) object.bias = this.bias;
    if (this.radius !== 1) object.radius = this.radius;
    if (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();
    object.camera = this.camera.toJSON(false).object;
    delete object.camera.matrix;
    return object;
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 */

function SpotLightShadow() {
  LightShadow.call(this, new PerspectiveCamera(50, 1, 0.5, 500));
}

SpotLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {
  constructor: SpotLightShadow,
  isSpotLightShadow: true,
  update: function (light) {
    var camera = this.camera;
    var fov = _Math.RAD2DEG * 2 * light.angle;
    var aspect = this.mapSize.width / this.mapSize.height;
    var far = light.distance || camera.far;

    if (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {
      camera.fov = fov;
      camera.aspect = aspect;
      camera.far = far;
      camera.updateProjectionMatrix();
    }
  }
});
/**
 * @author alteredq / http://alteredqualia.com/
 */

function SpotLight(color, intensity, distance, angle, penumbra, decay) {
  Light.call(this, color, intensity);
  this.type = 'SpotLight';
  this.position.copy(Object3D.DefaultUp);
  this.updateMatrix();
  this.target = new Object3D();
  Object.defineProperty(this, 'power', {
    get: function () {
      // intensity = power per solid angle.
      // ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
      return this.intensity * Math.PI;
    },
    set: function (power) {
      // intensity = power per solid angle.
      // ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
      this.intensity = power / Math.PI;
    }
  });
  this.distance = distance !== undefined ? distance : 0;
  this.angle = angle !== undefined ? angle : Math.PI / 3;
  this.penumbra = penumbra !== undefined ? penumbra : 0;
  this.decay = decay !== undefined ? decay : 1; // for physically correct lights, should be 2.

  this.shadow = new SpotLightShadow();
}

SpotLight.prototype = Object.assign(Object.create(Light.prototype), {
  constructor: SpotLight,
  isSpotLight: true,
  copy: function (source) {
    Light.prototype.copy.call(this, source);
    this.distance = source.distance;
    this.angle = source.angle;
    this.penumbra = source.penumbra;
    this.decay = source.decay;
    this.target = source.target.clone();
    this.shadow = source.shadow.clone();
    return this;
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 */

function PointLight(color, intensity, distance, decay) {
  Light.call(this, color, intensity);
  this.type = 'PointLight';
  Object.defineProperty(this, 'power', {
    get: function () {
      // intensity = power per solid angle.
      // ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
      return this.intensity * 4 * Math.PI;
    },
    set: function (power) {
      // intensity = power per solid angle.
      // ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
      this.intensity = power / (4 * Math.PI);
    }
  });
  this.distance = distance !== undefined ? distance : 0;
  this.decay = decay !== undefined ? decay : 1; // for physically correct lights, should be 2.

  this.shadow = new LightShadow(new PerspectiveCamera(90, 1, 0.5, 500));
}

PointLight.prototype = Object.assign(Object.create(Light.prototype), {
  constructor: PointLight,
  isPointLight: true,
  copy: function (source) {
    Light.prototype.copy.call(this, source);
    this.distance = source.distance;
    this.decay = source.decay;
    this.shadow = source.shadow.clone();
    return this;
  }
});
/**
 * @author alteredq / http://alteredqualia.com/
 * @author arose / http://github.com/arose
 */

function OrthographicCamera(left, right, top, bottom, near, far) {
  Camera.call(this);
  this.type = 'OrthographicCamera';
  this.zoom = 1;
  this.view = null;
  this.left = left !== undefined ? left : -1;
  this.right = right !== undefined ? right : 1;
  this.top = top !== undefined ? top : 1;
  this.bottom = bottom !== undefined ? bottom : -1;
  this.near = near !== undefined ? near : 0.1;
  this.far = far !== undefined ? far : 2000;
  this.updateProjectionMatrix();
}

OrthographicCamera.prototype = Object.assign(Object.create(Camera.prototype), {
  constructor: OrthographicCamera,
  isOrthographicCamera: true,
  copy: function (source, recursive) {
    Camera.prototype.copy.call(this, source, recursive);
    this.left = source.left;
    this.right = source.right;
    this.top = source.top;
    this.bottom = source.bottom;
    this.near = source.near;
    this.far = source.far;
    this.zoom = source.zoom;
    this.view = source.view === null ? null : Object.assign({}, source.view);
    return this;
  },
  setViewOffset: function (fullWidth, fullHeight, x, y, width, height) {
    if (this.view === null) {
      this.view = {
        enabled: true,
        fullWidth: 1,
        fullHeight: 1,
        offsetX: 0,
        offsetY: 0,
        width: 1,
        height: 1
      };
    }

    this.view.enabled = true;
    this.view.fullWidth = fullWidth;
    this.view.fullHeight = fullHeight;
    this.view.offsetX = x;
    this.view.offsetY = y;
    this.view.width = width;
    this.view.height = height;
    this.updateProjectionMatrix();
  },
  clearViewOffset: function () {
    if (this.view !== null) {
      this.view.enabled = false;
    }

    this.updateProjectionMatrix();
  },
  updateProjectionMatrix: function () {
    var dx = (this.right - this.left) / (2 * this.zoom);
    var dy = (this.top - this.bottom) / (2 * this.zoom);
    var cx = (this.right + this.left) / 2;
    var cy = (this.top + this.bottom) / 2;
    var left = cx - dx;
    var right = cx + dx;
    var top = cy + dy;
    var bottom = cy - dy;

    if (this.view !== null && this.view.enabled) {
      var zoomW = this.zoom / (this.view.width / this.view.fullWidth);
      var zoomH = this.zoom / (this.view.height / this.view.fullHeight);
      var scaleW = (this.right - this.left) / this.view.width;
      var scaleH = (this.top - this.bottom) / this.view.height;
      left += scaleW * (this.view.offsetX / zoomW);
      right = left + scaleW * (this.view.width / zoomW);
      top -= scaleH * (this.view.offsetY / zoomH);
      bottom = top - scaleH * (this.view.height / zoomH);
    }

    this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);
    this.projectionMatrixInverse.getInverse(this.projectionMatrix);
  },
  toJSON: function (meta) {
    var data = Object3D.prototype.toJSON.call(this, meta);
    data.object.zoom = this.zoom;
    data.object.left = this.left;
    data.object.right = this.right;
    data.object.top = this.top;
    data.object.bottom = this.bottom;
    data.object.near = this.near;
    data.object.far = this.far;
    if (this.view !== null) data.object.view = Object.assign({}, this.view);
    return data;
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 */

function DirectionalLightShadow() {
  LightShadow.call(this, new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));
}

DirectionalLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {
  constructor: DirectionalLightShadow
});
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function DirectionalLight(color, intensity) {
  Light.call(this, color, intensity);
  this.type = 'DirectionalLight';
  this.position.copy(Object3D.DefaultUp);
  this.updateMatrix();
  this.target = new Object3D();
  this.shadow = new DirectionalLightShadow();
}

DirectionalLight.prototype = Object.assign(Object.create(Light.prototype), {
  constructor: DirectionalLight,
  isDirectionalLight: true,
  copy: function (source) {
    Light.prototype.copy.call(this, source);
    this.target = source.target.clone();
    this.shadow = source.shadow.clone();
    return this;
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 */

function AmbientLight(color, intensity) {
  Light.call(this, color, intensity);
  this.type = 'AmbientLight';
  this.castShadow = undefined;
}

AmbientLight.prototype = Object.assign(Object.create(Light.prototype), {
  constructor: AmbientLight,
  isAmbientLight: true
});
/**
 * @author abelnation / http://github.com/abelnation
 */

function RectAreaLight(color, intensity, width, height) {
  Light.call(this, color, intensity);
  this.type = 'RectAreaLight';
  this.width = width !== undefined ? width : 10;
  this.height = height !== undefined ? height : 10;
}

RectAreaLight.prototype = Object.assign(Object.create(Light.prototype), {
  constructor: RectAreaLight,
  isRectAreaLight: true,
  copy: function (source) {
    Light.prototype.copy.call(this, source);
    this.width = source.width;
    this.height = source.height;
    return this;
  },
  toJSON: function (meta) {
    var data = Light.prototype.toJSON.call(this, meta);
    data.object.width = this.width;
    data.object.height = this.height;
    return data;
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 */

function MaterialLoader(manager) {
  this.manager = manager !== undefined ? manager : DefaultLoadingManager;
  this.textures = {};
}

Object.assign(MaterialLoader.prototype, {
  load: function (url, onLoad, onProgress, onError) {
    var scope = this;
    var loader = new FileLoader(scope.manager);
    loader.setPath(scope.path);
    loader.load(url, function (text) {
      onLoad(scope.parse(JSON.parse(text)));
    }, onProgress, onError);
  },
  parse: function (json) {
    var textures = this.textures;

    function getTexture(name) {
      if (textures[name] === undefined) {
        console.warn('THREE.MaterialLoader: Undefined texture', name);
      }

      return textures[name];
    }

    var material = new Materials[json.type]();
    if (json.uuid !== undefined) material.uuid = json.uuid;
    if (json.name !== undefined) material.name = json.name;
    if (json.color !== undefined) material.color.setHex(json.color);
    if (json.roughness !== undefined) material.roughness = json.roughness;
    if (json.metalness !== undefined) material.metalness = json.metalness;
    if (json.emissive !== undefined) material.emissive.setHex(json.emissive);
    if (json.specular !== undefined) material.specular.setHex(json.specular);
    if (json.shininess !== undefined) material.shininess = json.shininess;
    if (json.clearCoat !== undefined) material.clearCoat = json.clearCoat;
    if (json.clearCoatRoughness !== undefined) material.clearCoatRoughness = json.clearCoatRoughness;
    if (json.vertexColors !== undefined) material.vertexColors = json.vertexColors;
    if (json.fog !== undefined) material.fog = json.fog;
    if (json.flatShading !== undefined) material.flatShading = json.flatShading;
    if (json.blending !== undefined) material.blending = json.blending;
    if (json.combine !== undefined) material.combine = json.combine;
    if (json.side !== undefined) material.side = json.side;
    if (json.opacity !== undefined) material.opacity = json.opacity;
    if (json.transparent !== undefined) material.transparent = json.transparent;
    if (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;
    if (json.depthTest !== undefined) material.depthTest = json.depthTest;
    if (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;
    if (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;
    if (json.wireframe !== undefined) material.wireframe = json.wireframe;
    if (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;
    if (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;
    if (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;
    if (json.rotation !== undefined) material.rotation = json.rotation;
    if (json.linewidth !== 1) material.linewidth = json.linewidth;
    if (json.dashSize !== undefined) material.dashSize = json.dashSize;
    if (json.gapSize !== undefined) material.gapSize = json.gapSize;
    if (json.scale !== undefined) material.scale = json.scale;
    if (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;
    if (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;
    if (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;
    if (json.skinning !== undefined) material.skinning = json.skinning;
    if (json.morphTargets !== undefined) material.morphTargets = json.morphTargets;
    if (json.dithering !== undefined) material.dithering = json.dithering;
    if (json.visible !== undefined) material.visible = json.visible;
    if (json.userData !== undefined) material.userData = json.userData; // Shader Material

    if (json.uniforms !== undefined) {
      for (var name in json.uniforms) {
        var uniform = json.uniforms[name];
        material.uniforms[name] = {};

        switch (uniform.type) {
          case 't':
            material.uniforms[name].value = getTexture(uniform.value);
            break;

          case 'c':
            material.uniforms[name].value = new Color().setHex(uniform.value);
            break;

          case 'v2':
            material.uniforms[name].value = new Vector2().fromArray(uniform.value);
            break;

          case 'v3':
            material.uniforms[name].value = new Vector3().fromArray(uniform.value);
            break;

          case 'v4':
            material.uniforms[name].value = new Vector4().fromArray(uniform.value);
            break;

          case 'm3':
            material.uniforms[name].value = new Matrix3().fromArray(uniform.value);

          case 'm4':
            material.uniforms[name].value = new Matrix4().fromArray(uniform.value);
            break;

          default:
            material.uniforms[name].value = uniform.value;
        }
      }
    }

    if (json.defines !== undefined) material.defines = json.defines;
    if (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;
    if (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;

    if (json.extensions !== undefined) {
      for (var key in json.extensions) {
        material.extensions[key] = json.extensions[key];
      }
    } // Deprecated


    if (json.shading !== undefined) material.flatShading = json.shading === 1; // THREE.FlatShading
    // for PointsMaterial

    if (json.size !== undefined) material.size = json.size;
    if (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation; // maps

    if (json.map !== undefined) material.map = getTexture(json.map);

    if (json.alphaMap !== undefined) {
      material.alphaMap = getTexture(json.alphaMap);
      material.transparent = true;
    }

    if (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);
    if (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;
    if (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);
    if (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;

    if (json.normalScale !== undefined) {
      var normalScale = json.normalScale;

      if (Array.isArray(normalScale) === false) {
        // Blender exporter used to export a scalar. See #7459
        normalScale = [normalScale, normalScale];
      }

      material.normalScale = new Vector2().fromArray(normalScale);
    }

    if (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);
    if (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;
    if (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;
    if (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);
    if (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);
    if (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);
    if (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;
    if (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);
    if (json.envMap !== undefined) material.envMap = getTexture(json.envMap);
    if (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;
    if (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;
    if (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);
    if (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;
    if (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);
    if (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;
    if (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);
    return material;
  },
  setPath: function (value) {
    this.path = value;
    return this;
  },
  setTextures: function (value) {
    this.textures = value;
    return this;
  }
});
/**
 * @author Don McCurdy / https://www.donmccurdy.com
 */

var LoaderUtils = {
  decodeText: function (array) {
    if (typeof TextDecoder !== 'undefined') {
      return new TextDecoder().decode(array);
    } // Avoid the String.fromCharCode.apply(null, array) shortcut, which
    // throws a "maximum call stack size exceeded" error for large arrays.


    var s = '';

    for (var i = 0, il = array.length; i < il; i++) {
      // Implicitly assumes little-endian.
      s += String.fromCharCode(array[i]);
    } // Merges multi-byte utf-8 characters.


    return decodeURIComponent(escape(s));
  },
  extractUrlBase: function (url) {
    var index = url.lastIndexOf('/');
    if (index === -1) return './';
    return url.substr(0, index + 1);
  }
};
/**
 * @author mrdoob / http://mrdoob.com/
 */

exports.LoaderUtils = LoaderUtils;

function BufferGeometryLoader(manager) {
  this.manager = manager !== undefined ? manager : DefaultLoadingManager;
}

Object.assign(BufferGeometryLoader.prototype, {
  load: function (url, onLoad, onProgress, onError) {
    var scope = this;
    var loader = new FileLoader(scope.manager);
    loader.setPath(scope.path);
    loader.load(url, function (text) {
      onLoad(scope.parse(JSON.parse(text)));
    }, onProgress, onError);
  },
  parse: function (json) {
    var geometry = new BufferGeometry();
    var index = json.data.index;

    if (index !== undefined) {
      var typedArray = new TYPED_ARRAYS[index.type](index.array);
      geometry.setIndex(new BufferAttribute(typedArray, 1));
    }

    var attributes = json.data.attributes;

    for (var key in attributes) {
      var attribute = attributes[key];
      var typedArray = new TYPED_ARRAYS[attribute.type](attribute.array);
      var bufferAttribute = new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized);
      if (attribute.name !== undefined) bufferAttribute.name = attribute.name;
      geometry.addAttribute(key, bufferAttribute);
    }

    var morphAttributes = json.data.morphAttributes;

    if (morphAttributes) {
      for (var key in morphAttributes) {
        var attributeArray = morphAttributes[key];
        var array = [];

        for (var i = 0, il = attributeArray.length; i < il; i++) {
          var attribute = attributeArray[i];
          var typedArray = new TYPED_ARRAYS[attribute.type](attribute.array);
          var bufferAttribute = new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized);
          if (attribute.name !== undefined) bufferAttribute.name = attribute.name;
          array.push(bufferAttribute);
        }

        geometry.morphAttributes[key] = array;
      }
    }

    var groups = json.data.groups || json.data.drawcalls || json.data.offsets;

    if (groups !== undefined) {
      for (var i = 0, n = groups.length; i !== n; ++i) {
        var group = groups[i];
        geometry.addGroup(group.start, group.count, group.materialIndex);
      }
    }

    var boundingSphere = json.data.boundingSphere;

    if (boundingSphere !== undefined) {
      var center = new Vector3();

      if (boundingSphere.center !== undefined) {
        center.fromArray(boundingSphere.center);
      }

      geometry.boundingSphere = new Sphere(center, boundingSphere.radius);
    }

    if (json.name) geometry.name = json.name;
    if (json.userData) geometry.userData = json.userData;
    return geometry;
  },
  setPath: function (value) {
    this.path = value;
    return this;
  }
});
var TYPED_ARRAYS = {
  Int8Array: Int8Array,
  Uint8Array: Uint8Array,
  // Workaround for IE11 pre KB2929437. See #11440
  Uint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,
  Int16Array: Int16Array,
  Uint16Array: Uint16Array,
  Int32Array: Int32Array,
  Uint32Array: Uint32Array,
  Float32Array: Float32Array,
  Float64Array: Float64Array
};
/**
 * @author mrdoob / http://mrdoob.com/
 */

function ObjectLoader(manager) {
  this.manager = manager !== undefined ? manager : DefaultLoadingManager;
  this.resourcePath = '';
}

Object.assign(ObjectLoader.prototype, {
  crossOrigin: 'anonymous',
  load: function (url, onLoad, onProgress, onError) {
    var scope = this;
    var path = this.path === undefined ? LoaderUtils.extractUrlBase(url) : this.path;
    this.resourcePath = this.resourcePath || path;
    var loader = new FileLoader(scope.manager);
    loader.setPath(this.path);
    loader.load(url, function (text) {
      var json = null;

      try {
        json = JSON.parse(text);
      } catch (error) {
        if (onError !== undefined) onError(error);
        console.error('THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message);
        return;
      }

      var metadata = json.metadata;

      if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {
        console.error('THREE.ObjectLoader: Can\'t load ' + url);
        return;
      }

      scope.parse(json, onLoad);
    }, onProgress, onError);
  },
  setPath: function (value) {
    this.path = value;
    return this;
  },
  setResourcePath: function (value) {
    this.resourcePath = value;
    return this;
  },
  setCrossOrigin: function (value) {
    this.crossOrigin = value;
    return this;
  },
  parse: function (json, onLoad) {
    var shapes = this.parseShape(json.shapes);
    var geometries = this.parseGeometries(json.geometries, shapes);
    var images = this.parseImages(json.images, function () {
      if (onLoad !== undefined) onLoad(object);
    });
    var textures = this.parseTextures(json.textures, images);
    var materials = this.parseMaterials(json.materials, textures);
    var object = this.parseObject(json.object, geometries, materials);

    if (json.animations) {
      object.animations = this.parseAnimations(json.animations);
    }

    if (json.images === undefined || json.images.length === 0) {
      if (onLoad !== undefined) onLoad(object);
    }

    return object;
  },
  parseShape: function (json) {
    var shapes = {};

    if (json !== undefined) {
      for (var i = 0, l = json.length; i < l; i++) {
        var shape = new Shape().fromJSON(json[i]);
        shapes[shape.uuid] = shape;
      }
    }

    return shapes;
  },
  parseGeometries: function (json, shapes) {
    var geometries = {};

    if (json !== undefined) {
      var bufferGeometryLoader = new BufferGeometryLoader();

      for (var i = 0, l = json.length; i < l; i++) {
        var geometry;
        var data = json[i];

        switch (data.type) {
          case 'PlaneGeometry':
          case 'PlaneBufferGeometry':
            geometry = new Geometries[data.type](data.width, data.height, data.widthSegments, data.heightSegments);
            break;

          case 'BoxGeometry':
          case 'BoxBufferGeometry':
          case 'CubeGeometry':
            // backwards compatible
            geometry = new Geometries[data.type](data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
            break;

          case 'CircleGeometry':
          case 'CircleBufferGeometry':
            geometry = new Geometries[data.type](data.radius, data.segments, data.thetaStart, data.thetaLength);
            break;

          case 'CylinderGeometry':
          case 'CylinderBufferGeometry':
            geometry = new Geometries[data.type](data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
            break;

          case 'ConeGeometry':
          case 'ConeBufferGeometry':
            geometry = new Geometries[data.type](data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
            break;

          case 'SphereGeometry':
          case 'SphereBufferGeometry':
            geometry = new Geometries[data.type](data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);
            break;

          case 'DodecahedronGeometry':
          case 'DodecahedronBufferGeometry':
          case 'IcosahedronGeometry':
          case 'IcosahedronBufferGeometry':
          case 'OctahedronGeometry':
          case 'OctahedronBufferGeometry':
          case 'TetrahedronGeometry':
          case 'TetrahedronBufferGeometry':
            geometry = new Geometries[data.type](data.radius, data.detail);
            break;

          case 'RingGeometry':
          case 'RingBufferGeometry':
            geometry = new Geometries[data.type](data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);
            break;

          case 'TorusGeometry':
          case 'TorusBufferGeometry':
            geometry = new Geometries[data.type](data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);
            break;

          case 'TorusKnotGeometry':
          case 'TorusKnotBufferGeometry':
            geometry = new Geometries[data.type](data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);
            break;

          case 'TubeGeometry':
          case 'TubeBufferGeometry':
            // This only works for built-in curves (e.g. CatmullRomCurve3).
            // User defined curves or instances of CurvePath will not be deserialized.
            geometry = new Geometries[data.type](new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);
            break;

          case 'LatheGeometry':
          case 'LatheBufferGeometry':
            geometry = new Geometries[data.type](data.points, data.segments, data.phiStart, data.phiLength);
            break;

          case 'PolyhedronGeometry':
          case 'PolyhedronBufferGeometry':
            geometry = new Geometries[data.type](data.vertices, data.indices, data.radius, data.details);
            break;

          case 'ShapeGeometry':
          case 'ShapeBufferGeometry':
            var geometryShapes = [];

            for (var j = 0, jl = data.shapes.length; j < jl; j++) {
              var shape = shapes[data.shapes[j]];
              geometryShapes.push(shape);
            }

            geometry = new Geometries[data.type](geometryShapes, data.curveSegments);
            break;

          case 'ExtrudeGeometry':
          case 'ExtrudeBufferGeometry':
            var geometryShapes = [];

            for (var j = 0, jl = data.shapes.length; j < jl; j++) {
              var shape = shapes[data.shapes[j]];
              geometryShapes.push(shape);
            }

            var extrudePath = data.options.extrudePath;

            if (extrudePath !== undefined) {
              data.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);
            }

            geometry = new Geometries[data.type](geometryShapes, data.options);
            break;

          case 'BufferGeometry':
            geometry = bufferGeometryLoader.parse(data);
            break;

          case 'Geometry':
            if ('THREE' in window && 'LegacyJSONLoader' in THREE) {
              var geometryLoader = new THREE.LegacyJSONLoader();
              geometry = geometryLoader.parse(data, this.resourcePath).geometry;
            } else {
              console.error('THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type "Geometry".');
            }

            break;

          default:
            console.warn('THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"');
            continue;
        }

        geometry.uuid = data.uuid;
        if (data.name !== undefined) geometry.name = data.name;
        if (geometry.isBufferGeometry === true && data.userData !== undefined) geometry.userData = data.userData;
        geometries[data.uuid] = geometry;
      }
    }

    return geometries;
  },
  parseMaterials: function (json, textures) {
    var cache = {}; // MultiMaterial

    var materials = {};

    if (json !== undefined) {
      var loader = new MaterialLoader();
      loader.setTextures(textures);

      for (var i = 0, l = json.length; i < l; i++) {
        var data = json[i];

        if (data.type === 'MultiMaterial') {
          // Deprecated
          var array = [];

          for (var j = 0; j < data.materials.length; j++) {
            var material = data.materials[j];

            if (cache[material.uuid] === undefined) {
              cache[material.uuid] = loader.parse(material);
            }

            array.push(cache[material.uuid]);
          }

          materials[data.uuid] = array;
        } else {
          if (cache[data.uuid] === undefined) {
            cache[data.uuid] = loader.parse(data);
          }

          materials[data.uuid] = cache[data.uuid];
        }
      }
    }

    return materials;
  },
  parseAnimations: function (json) {
    var animations = [];

    for (var i = 0; i < json.length; i++) {
      var data = json[i];
      var clip = AnimationClip.parse(data);
      if (data.uuid !== undefined) clip.uuid = data.uuid;
      animations.push(clip);
    }

    return animations;
  },
  parseImages: function (json, onLoad) {
    var scope = this;
    var images = {};

    function loadImage(url) {
      scope.manager.itemStart(url);
      return loader.load(url, function () {
        scope.manager.itemEnd(url);
      }, undefined, function () {
        scope.manager.itemError(url);
        scope.manager.itemEnd(url);
      });
    }

    if (json !== undefined && json.length > 0) {
      var manager = new LoadingManager(onLoad);
      var loader = new ImageLoader(manager);
      loader.setCrossOrigin(this.crossOrigin);

      for (var i = 0, il = json.length; i < il; i++) {
        var image = json[i];
        var url = image.url;

        if (Array.isArray(url)) {
          // load array of images e.g CubeTexture
          images[image.uuid] = [];

          for (var j = 0, jl = url.length; j < jl; j++) {
            var currentUrl = url[j];
            var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(currentUrl) ? currentUrl : scope.resourcePath + currentUrl;
            images[image.uuid].push(loadImage(path));
          }
        } else {
          // load single image
          var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(image.url) ? image.url : scope.resourcePath + image.url;
          images[image.uuid] = loadImage(path);
        }
      }
    }

    return images;
  },
  parseTextures: function (json, images) {
    function parseConstant(value, type) {
      if (typeof value === 'number') return value;
      console.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);
      return type[value];
    }

    var textures = {};

    if (json !== undefined) {
      for (var i = 0, l = json.length; i < l; i++) {
        var data = json[i];

        if (data.image === undefined) {
          console.warn('THREE.ObjectLoader: No "image" specified for', data.uuid);
        }

        if (images[data.image] === undefined) {
          console.warn('THREE.ObjectLoader: Undefined image', data.image);
        }

        var texture;

        if (Array.isArray(images[data.image])) {
          texture = new CubeTexture(images[data.image]);
        } else {
          texture = new Texture(images[data.image]);
        }

        texture.needsUpdate = true;
        texture.uuid = data.uuid;
        if (data.name !== undefined) texture.name = data.name;
        if (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);
        if (data.offset !== undefined) texture.offset.fromArray(data.offset);
        if (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);
        if (data.center !== undefined) texture.center.fromArray(data.center);
        if (data.rotation !== undefined) texture.rotation = data.rotation;

        if (data.wrap !== undefined) {
          texture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);
          texture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);
        }

        if (data.format !== undefined) texture.format = data.format;
        if (data.type !== undefined) texture.type = data.type;
        if (data.encoding !== undefined) texture.encoding = data.encoding;
        if (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);
        if (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);
        if (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;
        if (data.flipY !== undefined) texture.flipY = data.flipY;
        if (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;
        if (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;
        textures[data.uuid] = texture;
      }
    }

    return textures;
  },
  parseObject: function (data, geometries, materials) {
    var object;

    function getGeometry(name) {
      if (geometries[name] === undefined) {
        console.warn('THREE.ObjectLoader: Undefined geometry', name);
      }

      return geometries[name];
    }

    function getMaterial(name) {
      if (name === undefined) return undefined;

      if (Array.isArray(name)) {
        var array = [];

        for (var i = 0, l = name.length; i < l; i++) {
          var uuid = name[i];

          if (materials[uuid] === undefined) {
            console.warn('THREE.ObjectLoader: Undefined material', uuid);
          }

          array.push(materials[uuid]);
        }

        return array;
      }

      if (materials[name] === undefined) {
        console.warn('THREE.ObjectLoader: Undefined material', name);
      }

      return materials[name];
    }

    switch (data.type) {
      case 'Scene':
        object = new Scene();

        if (data.background !== undefined) {
          if (Number.isInteger(data.background)) {
            object.background = new Color(data.background);
          }
        }

        if (data.fog !== undefined) {
          if (data.fog.type === 'Fog') {
            object.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);
          } else if (data.fog.type === 'FogExp2') {
            object.fog = new FogExp2(data.fog.color, data.fog.density);
          }
        }

        break;

      case 'PerspectiveCamera':
        object = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);
        if (data.focus !== undefined) object.focus = data.focus;
        if (data.zoom !== undefined) object.zoom = data.zoom;
        if (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;
        if (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;
        if (data.view !== undefined) object.view = Object.assign({}, data.view);
        break;

      case 'OrthographicCamera':
        object = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);
        if (data.zoom !== undefined) object.zoom = data.zoom;
        if (data.view !== undefined) object.view = Object.assign({}, data.view);
        break;

      case 'AmbientLight':
        object = new AmbientLight(data.color, data.intensity);
        break;

      case 'DirectionalLight':
        object = new DirectionalLight(data.color, data.intensity);
        break;

      case 'PointLight':
        object = new PointLight(data.color, data.intensity, data.distance, data.decay);
        break;

      case 'RectAreaLight':
        object = new RectAreaLight(data.color, data.intensity, data.width, data.height);
        break;

      case 'SpotLight':
        object = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);
        break;

      case 'HemisphereLight':
        object = new HemisphereLight(data.color, data.groundColor, data.intensity);
        break;

      case 'SkinnedMesh':
        console.warn('THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.');

      case 'Mesh':
        var geometry = getGeometry(data.geometry);
        var material = getMaterial(data.material);

        if (geometry.bones && geometry.bones.length > 0) {
          object = new SkinnedMesh(geometry, material);
        } else {
          object = new Mesh(geometry, material);
        }

        if (data.drawMode !== undefined) object.setDrawMode(data.drawMode);
        break;

      case 'LOD':
        object = new LOD();
        break;

      case 'Line':
        object = new Line(getGeometry(data.geometry), getMaterial(data.material), data.mode);
        break;

      case 'LineLoop':
        object = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));
        break;

      case 'LineSegments':
        object = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));
        break;

      case 'PointCloud':
      case 'Points':
        object = new Points(getGeometry(data.geometry), getMaterial(data.material));
        break;

      case 'Sprite':
        object = new Sprite(getMaterial(data.material));
        break;

      case 'Group':
        object = new Group();
        break;

      default:
        object = new Object3D();
    }

    object.uuid = data.uuid;
    if (data.name !== undefined) object.name = data.name;

    if (data.matrix !== undefined) {
      object.matrix.fromArray(data.matrix);
      if (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;
      if (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);
    } else {
      if (data.position !== undefined) object.position.fromArray(data.position);
      if (data.rotation !== undefined) object.rotation.fromArray(data.rotation);
      if (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);
      if (data.scale !== undefined) object.scale.fromArray(data.scale);
    }

    if (data.castShadow !== undefined) object.castShadow = data.castShadow;
    if (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;

    if (data.shadow) {
      if (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;
      if (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;
      if (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);
      if (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);
    }

    if (data.visible !== undefined) object.visible = data.visible;
    if (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;
    if (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;
    if (data.userData !== undefined) object.userData = data.userData;
    if (data.layers !== undefined) object.layers.mask = data.layers;

    if (data.children !== undefined) {
      var children = data.children;

      for (var i = 0; i < children.length; i++) {
        object.add(this.parseObject(children[i], geometries, materials));
      }
    }

    if (data.type === 'LOD') {
      var levels = data.levels;

      for (var l = 0; l < levels.length; l++) {
        var level = levels[l];
        var child = object.getObjectByProperty('uuid', level.object);

        if (child !== undefined) {
          object.addLevel(child, level.distance);
        }
      }
    }

    return object;
  }
});
var TEXTURE_MAPPING = {
  UVMapping: UVMapping,
  CubeReflectionMapping: CubeReflectionMapping,
  CubeRefractionMapping: CubeRefractionMapping,
  EquirectangularReflectionMapping: EquirectangularReflectionMapping,
  EquirectangularRefractionMapping: EquirectangularRefractionMapping,
  SphericalReflectionMapping: SphericalReflectionMapping,
  CubeUVReflectionMapping: CubeUVReflectionMapping,
  CubeUVRefractionMapping: CubeUVRefractionMapping
};
var TEXTURE_WRAPPING = {
  RepeatWrapping: RepeatWrapping,
  ClampToEdgeWrapping: ClampToEdgeWrapping,
  MirroredRepeatWrapping: MirroredRepeatWrapping
};
var TEXTURE_FILTER = {
  NearestFilter: NearestFilter,
  NearestMipMapNearestFilter: NearestMipMapNearestFilter,
  NearestMipMapLinearFilter: NearestMipMapLinearFilter,
  LinearFilter: LinearFilter,
  LinearMipMapNearestFilter: LinearMipMapNearestFilter,
  LinearMipMapLinearFilter: LinearMipMapLinearFilter
};
/**
 * @author thespite / http://clicktorelease.com/
 */

function ImageBitmapLoader(manager) {
  if (typeof createImageBitmap === 'undefined') {
    console.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');
  }

  if (typeof fetch === 'undefined') {
    console.warn('THREE.ImageBitmapLoader: fetch() not supported.');
  }

  this.manager = manager !== undefined ? manager : DefaultLoadingManager;
  this.options = undefined;
}

ImageBitmapLoader.prototype = {
  constructor: ImageBitmapLoader,
  setOptions: function setOptions(options) {
    this.options = options;
    return this;
  },
  load: function (url, onLoad, onProgress, onError) {
    if (url === undefined) url = '';
    if (this.path !== undefined) url = this.path + url;
    url = this.manager.resolveURL(url);
    var scope = this;
    var cached = Cache.get(url);

    if (cached !== undefined) {
      scope.manager.itemStart(url);
      setTimeout(function () {
        if (onLoad) onLoad(cached);
        scope.manager.itemEnd(url);
      }, 0);
      return cached;
    }

    fetch(url).then(function (res) {
      return res.blob();
    }).then(function (blob) {
      return createImageBitmap(blob, scope.options);
    }).then(function (imageBitmap) {
      Cache.add(url, imageBitmap);
      if (onLoad) onLoad(imageBitmap);
      scope.manager.itemEnd(url);
    }).catch(function (e) {
      if (onError) onError(e);
      scope.manager.itemError(url);
      scope.manager.itemEnd(url);
    });
    scope.manager.itemStart(url);
  },
  setCrossOrigin: function ()
  /* value */
  {
    return this;
  },
  setPath: function (value) {
    this.path = value;
    return this;
  }
};
/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
 **/

function ShapePath() {
  this.type = 'ShapePath';
  this.color = new Color();
  this.subPaths = [];
  this.currentPath = null;
}

Object.assign(ShapePath.prototype, {
  moveTo: function (x, y) {
    this.currentPath = new Path();
    this.subPaths.push(this.currentPath);
    this.currentPath.moveTo(x, y);
  },
  lineTo: function (x, y) {
    this.currentPath.lineTo(x, y);
  },
  quadraticCurveTo: function (aCPx, aCPy, aX, aY) {
    this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);
  },
  bezierCurveTo: function (aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
    this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);
  },
  splineThru: function (pts) {
    this.currentPath.splineThru(pts);
  },
  toShapes: function (isCCW, noHoles) {
    function toShapesNoHoles(inSubpaths) {
      var shapes = [];

      for (var i = 0, l = inSubpaths.length; i < l; i++) {
        var tmpPath = inSubpaths[i];
        var tmpShape = new Shape();
        tmpShape.curves = tmpPath.curves;
        shapes.push(tmpShape);
      }

      return shapes;
    }

    function isPointInsidePolygon(inPt, inPolygon) {
      var polyLen = inPolygon.length; // inPt on polygon contour => immediate success    or
      // toggling of inside/outside at every single! intersection point of an edge
      //  with the horizontal line through inPt, left of inPt
      //  not counting lowerY endpoints of edges and whole edges on that line

      var inside = false;

      for (var p = polyLen - 1, q = 0; q < polyLen; p = q++) {
        var edgeLowPt = inPolygon[p];
        var edgeHighPt = inPolygon[q];
        var edgeDx = edgeHighPt.x - edgeLowPt.x;
        var edgeDy = edgeHighPt.y - edgeLowPt.y;

        if (Math.abs(edgeDy) > Number.EPSILON) {
          // not parallel
          if (edgeDy < 0) {
            edgeLowPt = inPolygon[q];
            edgeDx = -edgeDx;
            edgeHighPt = inPolygon[p];
            edgeDy = -edgeDy;
          }

          if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;

          if (inPt.y === edgeLowPt.y) {
            if (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?
            // continue;				// no intersection or edgeLowPt => doesn't count !!!
          } else {
            var perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);
            if (perpEdge === 0) return true; // inPt is on contour ?

            if (perpEdge < 0) continue;
            inside = !inside; // true intersection left of inPt
          }
        } else {
          // parallel or collinear
          if (inPt.y !== edgeLowPt.y) continue; // parallel
          // edge lies on the same horizontal line as inPt

          if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !
          // continue;
        }
      }

      return inside;
    }

    var isClockWise = ShapeUtils.isClockWise;
    var subPaths = this.subPaths;
    if (subPaths.length === 0) return [];
    if (noHoles === true) return toShapesNoHoles(subPaths);
    var solid,
        tmpPath,
        tmpShape,
        shapes = [];

    if (subPaths.length === 1) {
      tmpPath = subPaths[0];
      tmpShape = new Shape();
      tmpShape.curves = tmpPath.curves;
      shapes.push(tmpShape);
      return shapes;
    }

    var holesFirst = !isClockWise(subPaths[0].getPoints());
    holesFirst = isCCW ? !holesFirst : holesFirst; // console.log("Holes first", holesFirst);

    var betterShapeHoles = [];
    var newShapes = [];
    var newShapeHoles = [];
    var mainIdx = 0;
    var tmpPoints;
    newShapes[mainIdx] = undefined;
    newShapeHoles[mainIdx] = [];

    for (var i = 0, l = subPaths.length; i < l; i++) {
      tmpPath = subPaths[i];
      tmpPoints = tmpPath.getPoints();
      solid = isClockWise(tmpPoints);
      solid = isCCW ? !solid : solid;

      if (solid) {
        if (!holesFirst && newShapes[mainIdx]) mainIdx++;
        newShapes[mainIdx] = {
          s: new Shape(),
          p: tmpPoints
        };
        newShapes[mainIdx].s.curves = tmpPath.curves;
        if (holesFirst) mainIdx++;
        newShapeHoles[mainIdx] = []; //console.log('cw', i);
      } else {
        newShapeHoles[mainIdx].push({
          h: tmpPath,
          p: tmpPoints[0]
        }); //console.log('ccw', i);
      }
    } // only Holes? -> probably all Shapes with wrong orientation


    if (!newShapes[0]) return toShapesNoHoles(subPaths);

    if (newShapes.length > 1) {
      var ambiguous = false;
      var toChange = [];

      for (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
        betterShapeHoles[sIdx] = [];
      }

      for (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
        var sho = newShapeHoles[sIdx];

        for (var hIdx = 0; hIdx < sho.length; hIdx++) {
          var ho = sho[hIdx];
          var hole_unassigned = true;

          for (var s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {
            if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {
              if (sIdx !== s2Idx) toChange.push({
                froms: sIdx,
                tos: s2Idx,
                hole: hIdx
              });

              if (hole_unassigned) {
                hole_unassigned = false;
                betterShapeHoles[s2Idx].push(ho);
              } else {
                ambiguous = true;
              }
            }
          }

          if (hole_unassigned) {
            betterShapeHoles[sIdx].push(ho);
          }
        }
      } // console.log("ambiguous: ", ambiguous);


      if (toChange.length > 0) {
        // console.log("to change: ", toChange);
        if (!ambiguous) newShapeHoles = betterShapeHoles;
      }
    }

    var tmpHoles;

    for (var i = 0, il = newShapes.length; i < il; i++) {
      tmpShape = newShapes[i].s;
      shapes.push(tmpShape);
      tmpHoles = newShapeHoles[i];

      for (var j = 0, jl = tmpHoles.length; j < jl; j++) {
        tmpShape.holes.push(tmpHoles[j].h);
      }
    } //console.log("shape", shapes);


    return shapes;
  }
});
/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author mrdoob / http://mrdoob.com/
 */

function Font(data) {
  this.type = 'Font';
  this.data = data;
}

Object.assign(Font.prototype, {
  isFont: true,
  generateShapes: function (text, size) {
    if (size === undefined) size = 100;
    var shapes = [];
    var paths = createPaths(text, size, this.data);

    for (var p = 0, pl = paths.length; p < pl; p++) {
      Array.prototype.push.apply(shapes, paths[p].toShapes());
    }

    return shapes;
  }
});

function createPaths(text, size, data) {
  var chars = Array.from ? Array.from(text) : String(text).split(''); // see #13988

  var scale = size / data.resolution;
  var line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;
  var paths = [];
  var offsetX = 0,
      offsetY = 0;

  for (var i = 0; i < chars.length; i++) {
    var char = chars[i];

    if (char === '\n') {
      offsetX = 0;
      offsetY -= line_height;
    } else {
      var ret = createPath(char, scale, offsetX, offsetY, data);
      offsetX += ret.offsetX;
      paths.push(ret.path);
    }
  }

  return paths;
}

function createPath(char, scale, offsetX, offsetY, data) {
  var glyph = data.glyphs[char] || data.glyphs['?'];
  if (!glyph) return;
  var path = new ShapePath();
  var x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;

  if (glyph.o) {
    var outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));

    for (var i = 0, l = outline.length; i < l;) {
      var action = outline[i++];

      switch (action) {
        case 'm':
          // moveTo
          x = outline[i++] * scale + offsetX;
          y = outline[i++] * scale + offsetY;
          path.moveTo(x, y);
          break;

        case 'l':
          // lineTo
          x = outline[i++] * scale + offsetX;
          y = outline[i++] * scale + offsetY;
          path.lineTo(x, y);
          break;

        case 'q':
          // quadraticCurveTo
          cpx = outline[i++] * scale + offsetX;
          cpy = outline[i++] * scale + offsetY;
          cpx1 = outline[i++] * scale + offsetX;
          cpy1 = outline[i++] * scale + offsetY;
          path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);
          break;

        case 'b':
          // bezierCurveTo
          cpx = outline[i++] * scale + offsetX;
          cpy = outline[i++] * scale + offsetY;
          cpx1 = outline[i++] * scale + offsetX;
          cpy1 = outline[i++] * scale + offsetY;
          cpx2 = outline[i++] * scale + offsetX;
          cpy2 = outline[i++] * scale + offsetY;
          path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);
          break;
      }
    }
  }

  return {
    offsetX: glyph.ha * scale,
    path: path
  };
}
/**
 * @author mrdoob / http://mrdoob.com/
 */


function FontLoader(manager) {
  this.manager = manager !== undefined ? manager : DefaultLoadingManager;
}

Object.assign(FontLoader.prototype, {
  load: function (url, onLoad, onProgress, onError) {
    var scope = this;
    var loader = new FileLoader(this.manager);
    loader.setPath(this.path);
    loader.load(url, function (text) {
      var json;

      try {
        json = JSON.parse(text);
      } catch (e) {
        console.warn('THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.');
        json = JSON.parse(text.substring(65, text.length - 2));
      }

      var font = scope.parse(json);
      if (onLoad) onLoad(font);
    }, onProgress, onError);
  },
  parse: function (json) {
    return new Font(json);
  },
  setPath: function (value) {
    this.path = value;
    return this;
  }
});
/**
 * @author alteredq / http://alteredqualia.com/
 */

function Loader() {}

Loader.Handlers = {
  handlers: [],
  add: function (regex, loader) {
    this.handlers.push(regex, loader);
  },
  get: function (file) {
    var handlers = this.handlers;

    for (var i = 0, l = handlers.length; i < l; i += 2) {
      var regex = handlers[i];
      var loader = handlers[i + 1];

      if (regex.test(file)) {
        return loader;
      }
    }

    return null;
  }
};
Object.assign(Loader.prototype, {
  crossOrigin: 'anonymous',
  onLoadStart: function () {},
  onLoadProgress: function () {},
  onLoadComplete: function () {},
  initMaterials: function (materials, texturePath, crossOrigin) {
    var array = [];

    for (var i = 0; i < materials.length; ++i) {
      array[i] = this.createMaterial(materials[i], texturePath, crossOrigin);
    }

    return array;
  },
  createMaterial: function () {
    var BlendingMode = {
      NoBlending: NoBlending,
      NormalBlending: NormalBlending,
      AdditiveBlending: AdditiveBlending,
      SubtractiveBlending: SubtractiveBlending,
      MultiplyBlending: MultiplyBlending,
      CustomBlending: CustomBlending
    };
    var color = new Color();
    var textureLoader = new TextureLoader();
    var materialLoader = new MaterialLoader();
    return function createMaterial(m, texturePath, crossOrigin) {
      // convert from old material format
      var textures = {};

      function loadTexture(path, repeat, offset, wrap, anisotropy) {
        var fullPath = texturePath + path;
        var loader = Loader.Handlers.get(fullPath);
        var texture;

        if (loader !== null) {
          texture = loader.load(fullPath);
        } else {
          textureLoader.setCrossOrigin(crossOrigin);
          texture = textureLoader.load(fullPath);
        }

        if (repeat !== undefined) {
          texture.repeat.fromArray(repeat);
          if (repeat[0] !== 1) texture.wrapS = RepeatWrapping;
          if (repeat[1] !== 1) texture.wrapT = RepeatWrapping;
        }

        if (offset !== undefined) {
          texture.offset.fromArray(offset);
        }

        if (wrap !== undefined) {
          if (wrap[0] === 'repeat') texture.wrapS = RepeatWrapping;
          if (wrap[0] === 'mirror') texture.wrapS = MirroredRepeatWrapping;
          if (wrap[1] === 'repeat') texture.wrapT = RepeatWrapping;
          if (wrap[1] === 'mirror') texture.wrapT = MirroredRepeatWrapping;
        }

        if (anisotropy !== undefined) {
          texture.anisotropy = anisotropy;
        }

        var uuid = _Math.generateUUID();

        textures[uuid] = texture;
        return uuid;
      } //


      var json = {
        uuid: _Math.generateUUID(),
        type: 'MeshLambertMaterial'
      };

      for (var name in m) {
        var value = m[name];

        switch (name) {
          case 'DbgColor':
          case 'DbgIndex':
          case 'opticalDensity':
          case 'illumination':
            break;

          case 'DbgName':
            json.name = value;
            break;

          case 'blending':
            json.blending = BlendingMode[value];
            break;

          case 'colorAmbient':
          case 'mapAmbient':
            console.warn('THREE.Loader.createMaterial:', name, 'is no longer supported.');
            break;

          case 'colorDiffuse':
            json.color = color.fromArray(value).getHex();
            break;

          case 'colorSpecular':
            json.specular = color.fromArray(value).getHex();
            break;

          case 'colorEmissive':
            json.emissive = color.fromArray(value).getHex();
            break;

          case 'specularCoef':
            json.shininess = value;
            break;

          case 'shading':
            if (value.toLowerCase() === 'basic') json.type = 'MeshBasicMaterial';
            if (value.toLowerCase() === 'phong') json.type = 'MeshPhongMaterial';
            if (value.toLowerCase() === 'standard') json.type = 'MeshStandardMaterial';
            break;

          case 'mapDiffuse':
            json.map = loadTexture(value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy);
            break;

          case 'mapDiffuseRepeat':
          case 'mapDiffuseOffset':
          case 'mapDiffuseWrap':
          case 'mapDiffuseAnisotropy':
            break;

          case 'mapEmissive':
            json.emissiveMap = loadTexture(value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy);
            break;

          case 'mapEmissiveRepeat':
          case 'mapEmissiveOffset':
          case 'mapEmissiveWrap':
          case 'mapEmissiveAnisotropy':
            break;

          case 'mapLight':
            json.lightMap = loadTexture(value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy);
            break;

          case 'mapLightRepeat':
          case 'mapLightOffset':
          case 'mapLightWrap':
          case 'mapLightAnisotropy':
            break;

          case 'mapAO':
            json.aoMap = loadTexture(value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy);
            break;

          case 'mapAORepeat':
          case 'mapAOOffset':
          case 'mapAOWrap':
          case 'mapAOAnisotropy':
            break;

          case 'mapBump':
            json.bumpMap = loadTexture(value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy);
            break;

          case 'mapBumpScale':
            json.bumpScale = value;
            break;

          case 'mapBumpRepeat':
          case 'mapBumpOffset':
          case 'mapBumpWrap':
          case 'mapBumpAnisotropy':
            break;

          case 'mapNormal':
            json.normalMap = loadTexture(value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy);
            break;

          case 'mapNormalFactor':
            json.normalScale = value;
            break;

          case 'mapNormalRepeat':
          case 'mapNormalOffset':
          case 'mapNormalWrap':
          case 'mapNormalAnisotropy':
            break;

          case 'mapSpecular':
            json.specularMap = loadTexture(value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy);
            break;

          case 'mapSpecularRepeat':
          case 'mapSpecularOffset':
          case 'mapSpecularWrap':
          case 'mapSpecularAnisotropy':
            break;

          case 'mapMetalness':
            json.metalnessMap = loadTexture(value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy);
            break;

          case 'mapMetalnessRepeat':
          case 'mapMetalnessOffset':
          case 'mapMetalnessWrap':
          case 'mapMetalnessAnisotropy':
            break;

          case 'mapRoughness':
            json.roughnessMap = loadTexture(value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy);
            break;

          case 'mapRoughnessRepeat':
          case 'mapRoughnessOffset':
          case 'mapRoughnessWrap':
          case 'mapRoughnessAnisotropy':
            break;

          case 'mapAlpha':
            json.alphaMap = loadTexture(value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy);
            break;

          case 'mapAlphaRepeat':
          case 'mapAlphaOffset':
          case 'mapAlphaWrap':
          case 'mapAlphaAnisotropy':
            break;

          case 'flipSided':
            json.side = BackSide;
            break;

          case 'doubleSided':
            json.side = DoubleSide;
            break;

          case 'transparency':
            console.warn('THREE.Loader.createMaterial: transparency has been renamed to opacity');
            json.opacity = value;
            break;

          case 'depthTest':
          case 'depthWrite':
          case 'colorWrite':
          case 'opacity':
          case 'reflectivity':
          case 'transparent':
          case 'visible':
          case 'wireframe':
            json[name] = value;
            break;

          case 'vertexColors':
            if (value === true) json.vertexColors = VertexColors;
            if (value === 'face') json.vertexColors = FaceColors;
            break;

          default:
            console.error('THREE.Loader.createMaterial: Unsupported', name, value);
            break;
        }
      }

      if (json.type === 'MeshBasicMaterial') delete json.emissive;
      if (json.type !== 'MeshPhongMaterial') delete json.specular;
      if (json.opacity < 1) json.transparent = true;
      materialLoader.setTextures(textures);
      return materialLoader.parse(json);
    };
  }()
});
/**
 * @author mrdoob / http://mrdoob.com/
 */

var context;
var AudioContext = {
  getContext: function () {
    if (context === undefined) {
      context = new (window.AudioContext || window.webkitAudioContext)();
    }

    return context;
  },
  setContext: function (value) {
    context = value;
  }
};
/**
 * @author Reece Aaron Lecrivain / http://reecenotes.com/
 */

exports.AudioContext = AudioContext;

function AudioLoader(manager) {
  this.manager = manager !== undefined ? manager : DefaultLoadingManager;
}

Object.assign(AudioLoader.prototype, {
  load: function (url, onLoad, onProgress, onError) {
    var loader = new FileLoader(this.manager);
    loader.setResponseType('arraybuffer');
    loader.setPath(this.path);
    loader.load(url, function (buffer) {
      // Create a copy of the buffer. The `decodeAudioData` method
      // detaches the buffer when complete, preventing reuse.
      var bufferCopy = buffer.slice(0);
      var context = AudioContext.getContext();
      context.decodeAudioData(bufferCopy, function (audioBuffer) {
        onLoad(audioBuffer);
      });
    }, onProgress, onError);
  },
  setPath: function (value) {
    this.path = value;
    return this;
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 */

function StereoCamera() {
  this.type = 'StereoCamera';
  this.aspect = 1;
  this.eyeSep = 0.064;
  this.cameraL = new PerspectiveCamera();
  this.cameraL.layers.enable(1);
  this.cameraL.matrixAutoUpdate = false;
  this.cameraR = new PerspectiveCamera();
  this.cameraR.layers.enable(2);
  this.cameraR.matrixAutoUpdate = false;
}

Object.assign(StereoCamera.prototype, {
  update: function () {
    var instance, focus, fov, aspect, near, far, zoom, eyeSep;
    var eyeRight = new Matrix4();
    var eyeLeft = new Matrix4();
    return function update(camera) {
      var needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov || aspect !== camera.aspect * this.aspect || near !== camera.near || far !== camera.far || zoom !== camera.zoom || eyeSep !== this.eyeSep;

      if (needsUpdate) {
        instance = this;
        focus = camera.focus;
        fov = camera.fov;
        aspect = camera.aspect * this.aspect;
        near = camera.near;
        far = camera.far;
        zoom = camera.zoom; // Off-axis stereoscopic effect based on
        // http://paulbourke.net/stereographics/stereorender/

        var projectionMatrix = camera.projectionMatrix.clone();
        eyeSep = this.eyeSep / 2;
        var eyeSepOnProjection = eyeSep * near / focus;
        var ymax = near * Math.tan(_Math.DEG2RAD * fov * 0.5) / zoom;
        var xmin, xmax; // translate xOffset

        eyeLeft.elements[12] = -eyeSep;
        eyeRight.elements[12] = eyeSep; // for left eye

        xmin = -ymax * aspect + eyeSepOnProjection;
        xmax = ymax * aspect + eyeSepOnProjection;
        projectionMatrix.elements[0] = 2 * near / (xmax - xmin);
        projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
        this.cameraL.projectionMatrix.copy(projectionMatrix); // for right eye

        xmin = -ymax * aspect - eyeSepOnProjection;
        xmax = ymax * aspect - eyeSepOnProjection;
        projectionMatrix.elements[0] = 2 * near / (xmax - xmin);
        projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
        this.cameraR.projectionMatrix.copy(projectionMatrix);
      }

      this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(eyeLeft);
      this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(eyeRight);
    };
  }()
});
/**
 * Camera for rendering cube maps
 *	- renders scene into axis-aligned cube
 *
 * @author alteredq / http://alteredqualia.com/
 */

function CubeCamera(near, far, cubeResolution, options) {
  Object3D.call(this);
  this.type = 'CubeCamera';
  var fov = 90,
      aspect = 1;
  var cameraPX = new PerspectiveCamera(fov, aspect, near, far);
  cameraPX.up.set(0, -1, 0);
  cameraPX.lookAt(new Vector3(1, 0, 0));
  this.add(cameraPX);
  var cameraNX = new PerspectiveCamera(fov, aspect, near, far);
  cameraNX.up.set(0, -1, 0);
  cameraNX.lookAt(new Vector3(-1, 0, 0));
  this.add(cameraNX);
  var cameraPY = new PerspectiveCamera(fov, aspect, near, far);
  cameraPY.up.set(0, 0, 1);
  cameraPY.lookAt(new Vector3(0, 1, 0));
  this.add(cameraPY);
  var cameraNY = new PerspectiveCamera(fov, aspect, near, far);
  cameraNY.up.set(0, 0, -1);
  cameraNY.lookAt(new Vector3(0, -1, 0));
  this.add(cameraNY);
  var cameraPZ = new PerspectiveCamera(fov, aspect, near, far);
  cameraPZ.up.set(0, -1, 0);
  cameraPZ.lookAt(new Vector3(0, 0, 1));
  this.add(cameraPZ);
  var cameraNZ = new PerspectiveCamera(fov, aspect, near, far);
  cameraNZ.up.set(0, -1, 0);
  cameraNZ.lookAt(new Vector3(0, 0, -1));
  this.add(cameraNZ);
  options = options || {
    format: RGBFormat,
    magFilter: LinearFilter,
    minFilter: LinearFilter
  };
  this.renderTarget = new WebGLRenderTargetCube(cubeResolution, cubeResolution, options);
  this.renderTarget.texture.name = "CubeCamera";

  this.update = function (renderer, scene) {
    if (this.parent === null) this.updateMatrixWorld();
    var currentRenderTarget = renderer.getRenderTarget();
    var renderTarget = this.renderTarget;
    var generateMipmaps = renderTarget.texture.generateMipmaps;
    renderTarget.texture.generateMipmaps = false;
    renderer.setRenderTarget(renderTarget, 0);
    renderer.render(scene, cameraPX);
    renderer.setRenderTarget(renderTarget, 1);
    renderer.render(scene, cameraNX);
    renderer.setRenderTarget(renderTarget, 2);
    renderer.render(scene, cameraPY);
    renderer.setRenderTarget(renderTarget, 3);
    renderer.render(scene, cameraNY);
    renderer.setRenderTarget(renderTarget, 4);
    renderer.render(scene, cameraPZ);
    renderTarget.texture.generateMipmaps = generateMipmaps;
    renderer.setRenderTarget(renderTarget, 5);
    renderer.render(scene, cameraNZ);
    renderer.setRenderTarget(currentRenderTarget);
  };

  this.clear = function (renderer, color, depth, stencil) {
    var currentRenderTarget = renderer.getRenderTarget();
    var renderTarget = this.renderTarget;

    for (var i = 0; i < 6; i++) {
      renderer.setRenderTarget(renderTarget, i);
      renderer.clear(color, depth, stencil);
    }

    renderer.setRenderTarget(currentRenderTarget);
  };
}

CubeCamera.prototype = Object.create(Object3D.prototype);
CubeCamera.prototype.constructor = CubeCamera;
/**
 * @author alteredq / http://alteredqualia.com/
 */

function Clock(autoStart) {
  this.autoStart = autoStart !== undefined ? autoStart : true;
  this.startTime = 0;
  this.oldTime = 0;
  this.elapsedTime = 0;
  this.running = false;
}

Object.assign(Clock.prototype, {
  start: function () {
    this.startTime = (typeof performance === 'undefined' ? Date : performance).now(); // see #10732

    this.oldTime = this.startTime;
    this.elapsedTime = 0;
    this.running = true;
  },
  stop: function () {
    this.getElapsedTime();
    this.running = false;
    this.autoStart = false;
  },
  getElapsedTime: function () {
    this.getDelta();
    return this.elapsedTime;
  },
  getDelta: function () {
    var diff = 0;

    if (this.autoStart && !this.running) {
      this.start();
      return 0;
    }

    if (this.running) {
      var newTime = (typeof performance === 'undefined' ? Date : performance).now();
      diff = (newTime - this.oldTime) / 1000;
      this.oldTime = newTime;
      this.elapsedTime += diff;
    }

    return diff;
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 */

function AudioListener() {
  Object3D.call(this);
  this.type = 'AudioListener';
  this.context = AudioContext.getContext();
  this.gain = this.context.createGain();
  this.gain.connect(this.context.destination);
  this.filter = null;
  this.timeDelta = 0;
}

AudioListener.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: AudioListener,
  getInput: function () {
    return this.gain;
  },
  removeFilter: function () {
    if (this.filter !== null) {
      this.gain.disconnect(this.filter);
      this.filter.disconnect(this.context.destination);
      this.gain.connect(this.context.destination);
      this.filter = null;
    }

    return this;
  },
  getFilter: function () {
    return this.filter;
  },
  setFilter: function (value) {
    if (this.filter !== null) {
      this.gain.disconnect(this.filter);
      this.filter.disconnect(this.context.destination);
    } else {
      this.gain.disconnect(this.context.destination);
    }

    this.filter = value;
    this.gain.connect(this.filter);
    this.filter.connect(this.context.destination);
    return this;
  },
  getMasterVolume: function () {
    return this.gain.gain.value;
  },
  setMasterVolume: function (value) {
    this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
    return this;
  },
  updateMatrixWorld: function () {
    var position = new Vector3();
    var quaternion = new Quaternion();
    var scale = new Vector3();
    var orientation = new Vector3();
    var clock = new Clock();
    return function updateMatrixWorld(force) {
      Object3D.prototype.updateMatrixWorld.call(this, force);
      var listener = this.context.listener;
      var up = this.up;
      this.timeDelta = clock.getDelta();
      this.matrixWorld.decompose(position, quaternion, scale);
      orientation.set(0, 0, -1).applyQuaternion(quaternion);

      if (listener.positionX) {
        // code path for Chrome (see #14393)
        var endTime = this.context.currentTime + this.timeDelta;
        listener.positionX.linearRampToValueAtTime(position.x, endTime);
        listener.positionY.linearRampToValueAtTime(position.y, endTime);
        listener.positionZ.linearRampToValueAtTime(position.z, endTime);
        listener.forwardX.linearRampToValueAtTime(orientation.x, endTime);
        listener.forwardY.linearRampToValueAtTime(orientation.y, endTime);
        listener.forwardZ.linearRampToValueAtTime(orientation.z, endTime);
        listener.upX.linearRampToValueAtTime(up.x, endTime);
        listener.upY.linearRampToValueAtTime(up.y, endTime);
        listener.upZ.linearRampToValueAtTime(up.z, endTime);
      } else {
        listener.setPosition(position.x, position.y, position.z);
        listener.setOrientation(orientation.x, orientation.y, orientation.z, up.x, up.y, up.z);
      }
    };
  }()
});
/**
 * @author mrdoob / http://mrdoob.com/
 * @author Reece Aaron Lecrivain / http://reecenotes.com/
 */

function Audio(listener) {
  Object3D.call(this);
  this.type = 'Audio';
  this.listener = listener;
  this.context = listener.context;
  this.gain = this.context.createGain();
  this.gain.connect(listener.getInput());
  this.autoplay = false;
  this.buffer = null;
  this.detune = 0;
  this.loop = false;
  this.startTime = 0;
  this.offset = 0;
  this.playbackRate = 1;
  this.isPlaying = false;
  this.hasPlaybackControl = true;
  this.sourceType = 'empty';
  this.filters = [];
}

Audio.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Audio,
  getOutput: function () {
    return this.gain;
  },
  setNodeSource: function (audioNode) {
    this.hasPlaybackControl = false;
    this.sourceType = 'audioNode';
    this.source = audioNode;
    this.connect();
    return this;
  },
  setMediaElementSource: function (mediaElement) {
    this.hasPlaybackControl = false;
    this.sourceType = 'mediaNode';
    this.source = this.context.createMediaElementSource(mediaElement);
    this.connect();
    return this;
  },
  setBuffer: function (audioBuffer) {
    this.buffer = audioBuffer;
    this.sourceType = 'buffer';
    if (this.autoplay) this.play();
    return this;
  },
  play: function () {
    if (this.isPlaying === true) {
      console.warn('THREE.Audio: Audio is already playing.');
      return;
    }

    if (this.hasPlaybackControl === false) {
      console.warn('THREE.Audio: this Audio has no playback control.');
      return;
    }

    var source = this.context.createBufferSource();
    source.buffer = this.buffer;
    source.loop = this.loop;
    source.onended = this.onEnded.bind(this);
    this.startTime = this.context.currentTime;
    source.start(this.startTime, this.offset);
    this.isPlaying = true;
    this.source = source;
    this.setDetune(this.detune);
    this.setPlaybackRate(this.playbackRate);
    return this.connect();
  },
  pause: function () {
    if (this.hasPlaybackControl === false) {
      console.warn('THREE.Audio: this Audio has no playback control.');
      return;
    }

    if (this.isPlaying === true) {
      this.source.stop();
      this.source.onended = null;
      this.offset += (this.context.currentTime - this.startTime) * this.playbackRate;
      this.isPlaying = false;
    }

    return this;
  },
  stop: function () {
    if (this.hasPlaybackControl === false) {
      console.warn('THREE.Audio: this Audio has no playback control.');
      return;
    }

    this.source.stop();
    this.source.onended = null;
    this.offset = 0;
    this.isPlaying = false;
    return this;
  },
  connect: function () {
    if (this.filters.length > 0) {
      this.source.connect(this.filters[0]);

      for (var i = 1, l = this.filters.length; i < l; i++) {
        this.filters[i - 1].connect(this.filters[i]);
      }

      this.filters[this.filters.length - 1].connect(this.getOutput());
    } else {
      this.source.connect(this.getOutput());
    }

    return this;
  },
  disconnect: function () {
    if (this.filters.length > 0) {
      this.source.disconnect(this.filters[0]);

      for (var i = 1, l = this.filters.length; i < l; i++) {
        this.filters[i - 1].disconnect(this.filters[i]);
      }

      this.filters[this.filters.length - 1].disconnect(this.getOutput());
    } else {
      this.source.disconnect(this.getOutput());
    }

    return this;
  },
  getFilters: function () {
    return this.filters;
  },
  setFilters: function (value) {
    if (!value) value = [];

    if (this.isPlaying === true) {
      this.disconnect();
      this.filters = value;
      this.connect();
    } else {
      this.filters = value;
    }

    return this;
  },
  setDetune: function (value) {
    this.detune = value;
    if (this.source.detune === undefined) return; // only set detune when available

    if (this.isPlaying === true) {
      this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);
    }

    return this;
  },
  getDetune: function () {
    return this.detune;
  },
  getFilter: function () {
    return this.getFilters()[0];
  },
  setFilter: function (filter) {
    return this.setFilters(filter ? [filter] : []);
  },
  setPlaybackRate: function (value) {
    if (this.hasPlaybackControl === false) {
      console.warn('THREE.Audio: this Audio has no playback control.');
      return;
    }

    this.playbackRate = value;

    if (this.isPlaying === true) {
      this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);
    }

    return this;
  },
  getPlaybackRate: function () {
    return this.playbackRate;
  },
  onEnded: function () {
    this.isPlaying = false;
  },
  getLoop: function () {
    if (this.hasPlaybackControl === false) {
      console.warn('THREE.Audio: this Audio has no playback control.');
      return false;
    }

    return this.loop;
  },
  setLoop: function (value) {
    if (this.hasPlaybackControl === false) {
      console.warn('THREE.Audio: this Audio has no playback control.');
      return;
    }

    this.loop = value;

    if (this.isPlaying === true) {
      this.source.loop = this.loop;
    }

    return this;
  },
  getVolume: function () {
    return this.gain.gain.value;
  },
  setVolume: function (value) {
    this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
    return this;
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 */

function PositionalAudio(listener) {
  Audio.call(this, listener);
  this.panner = this.context.createPanner();
  this.panner.connect(this.gain);
}

PositionalAudio.prototype = Object.assign(Object.create(Audio.prototype), {
  constructor: PositionalAudio,
  getOutput: function () {
    return this.panner;
  },
  getRefDistance: function () {
    return this.panner.refDistance;
  },
  setRefDistance: function (value) {
    this.panner.refDistance = value;
    return this;
  },
  getRolloffFactor: function () {
    return this.panner.rolloffFactor;
  },
  setRolloffFactor: function (value) {
    this.panner.rolloffFactor = value;
    return this;
  },
  getDistanceModel: function () {
    return this.panner.distanceModel;
  },
  setDistanceModel: function (value) {
    this.panner.distanceModel = value;
    return this;
  },
  getMaxDistance: function () {
    return this.panner.maxDistance;
  },
  setMaxDistance: function (value) {
    this.panner.maxDistance = value;
    return this;
  },
  setDirectionalCone: function (coneInnerAngle, coneOuterAngle, coneOuterGain) {
    this.panner.coneInnerAngle = coneInnerAngle;
    this.panner.coneOuterAngle = coneOuterAngle;
    this.panner.coneOuterGain = coneOuterGain;
    return this;
  },
  updateMatrixWorld: function () {
    var position = new Vector3();
    var quaternion = new Quaternion();
    var scale = new Vector3();
    var orientation = new Vector3();
    return function updateMatrixWorld(force) {
      Object3D.prototype.updateMatrixWorld.call(this, force);
      if (this.hasPlaybackControl === true && this.isPlaying === false) return;
      this.matrixWorld.decompose(position, quaternion, scale);
      orientation.set(0, 0, 1).applyQuaternion(quaternion);
      var panner = this.panner;

      if (panner.positionX) {
        // code path for Chrome and Firefox (see #14393)
        var endTime = this.context.currentTime + this.listener.timeDelta;
        panner.positionX.linearRampToValueAtTime(position.x, endTime);
        panner.positionY.linearRampToValueAtTime(position.y, endTime);
        panner.positionZ.linearRampToValueAtTime(position.z, endTime);
        panner.orientationX.linearRampToValueAtTime(orientation.x, endTime);
        panner.orientationY.linearRampToValueAtTime(orientation.y, endTime);
        panner.orientationZ.linearRampToValueAtTime(orientation.z, endTime);
      } else {
        panner.setPosition(position.x, position.y, position.z);
        panner.setOrientation(orientation.x, orientation.y, orientation.z);
      }
    };
  }()
});
/**
 * @author mrdoob / http://mrdoob.com/
 */

function AudioAnalyser(audio, fftSize) {
  this.analyser = audio.context.createAnalyser();
  this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;
  this.data = new Uint8Array(this.analyser.frequencyBinCount);
  audio.getOutput().connect(this.analyser);
}

Object.assign(AudioAnalyser.prototype, {
  getFrequencyData: function () {
    this.analyser.getByteFrequencyData(this.data);
    return this.data;
  },
  getAverageFrequency: function () {
    var value = 0,
        data = this.getFrequencyData();

    for (var i = 0; i < data.length; i++) {
      value += data[i];
    }

    return value / data.length;
  }
});
/**
 *
 * Buffered scene graph property that allows weighted accumulation.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function PropertyMixer(binding, typeName, valueSize) {
  this.binding = binding;
  this.valueSize = valueSize;
  var bufferType = Float64Array,
      mixFunction;

  switch (typeName) {
    case 'quaternion':
      mixFunction = this._slerp;
      break;

    case 'string':
    case 'bool':
      bufferType = Array;
      mixFunction = this._select;
      break;

    default:
      mixFunction = this._lerp;
  }

  this.buffer = new bufferType(valueSize * 4); // layout: [ incoming | accu0 | accu1 | orig ]
  //
  // interpolators can use .buffer as their .result
  // the data then goes to 'incoming'
  //
  // 'accu0' and 'accu1' are used frame-interleaved for
  // the cumulative result and are compared to detect
  // changes
  //
  // 'orig' stores the original state of the property

  this._mixBufferRegion = mixFunction;
  this.cumulativeWeight = 0;
  this.useCount = 0;
  this.referenceCount = 0;
}

Object.assign(PropertyMixer.prototype, {
  // accumulate data in the 'incoming' region into 'accu<i>'
  accumulate: function (accuIndex, weight) {
    // note: happily accumulating nothing when weight = 0, the caller knows
    // the weight and shouldn't have made the call in the first place
    var buffer = this.buffer,
        stride = this.valueSize,
        offset = accuIndex * stride + stride,
        currentWeight = this.cumulativeWeight;

    if (currentWeight === 0) {
      // accuN := incoming * weight
      for (var i = 0; i !== stride; ++i) {
        buffer[offset + i] = buffer[i];
      }

      currentWeight = weight;
    } else {
      // accuN := accuN + incoming * weight
      currentWeight += weight;
      var mix = weight / currentWeight;

      this._mixBufferRegion(buffer, offset, 0, mix, stride);
    }

    this.cumulativeWeight = currentWeight;
  },
  // apply the state of 'accu<i>' to the binding when accus differ
  apply: function (accuIndex) {
    var stride = this.valueSize,
        buffer = this.buffer,
        offset = accuIndex * stride + stride,
        weight = this.cumulativeWeight,
        binding = this.binding;
    this.cumulativeWeight = 0;

    if (weight < 1) {
      // accuN := accuN + original * ( 1 - cumulativeWeight )
      var originalValueOffset = stride * 3;

      this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);
    }

    for (var i = stride, e = stride + stride; i !== e; ++i) {
      if (buffer[i] !== buffer[i + stride]) {
        // value has changed -> update scene graph
        binding.setValue(buffer, offset);
        break;
      }
    }
  },
  // remember the state of the bound property and copy it to both accus
  saveOriginalState: function () {
    var binding = this.binding;
    var buffer = this.buffer,
        stride = this.valueSize,
        originalValueOffset = stride * 3;
    binding.getValue(buffer, originalValueOffset); // accu[0..1] := orig -- initially detect changes against the original

    for (var i = stride, e = originalValueOffset; i !== e; ++i) {
      buffer[i] = buffer[originalValueOffset + i % stride];
    }

    this.cumulativeWeight = 0;
  },
  // apply the state previously taken via 'saveOriginalState' to the binding
  restoreOriginalState: function () {
    var originalValueOffset = this.valueSize * 3;
    this.binding.setValue(this.buffer, originalValueOffset);
  },
  // mix functions
  _select: function (buffer, dstOffset, srcOffset, t, stride) {
    if (t >= 0.5) {
      for (var i = 0; i !== stride; ++i) {
        buffer[dstOffset + i] = buffer[srcOffset + i];
      }
    }
  },
  _slerp: function (buffer, dstOffset, srcOffset, t) {
    Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);
  },
  _lerp: function (buffer, dstOffset, srcOffset, t, stride) {
    var s = 1 - t;

    for (var i = 0; i !== stride; ++i) {
      var j = dstOffset + i;
      buffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;
    }
  }
});
/**
 *
 * A reference to a real property in the scene graph.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */
// Characters [].:/ are reserved for track binding syntax.

var RESERVED_CHARS_RE = '\\[\\]\\.:\\/';

function Composite(targetGroup, path, optionalParsedPath) {
  var parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);
  this._targetGroup = targetGroup;
  this._bindings = targetGroup.subscribe_(path, parsedPath);
}

Object.assign(Composite.prototype, {
  getValue: function (array, offset) {
    this.bind(); // bind all binding

    var firstValidIndex = this._targetGroup.nCachedObjects_,
        binding = this._bindings[firstValidIndex]; // and only call .getValue on the first

    if (binding !== undefined) binding.getValue(array, offset);
  },
  setValue: function (array, offset) {
    var bindings = this._bindings;

    for (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
      bindings[i].setValue(array, offset);
    }
  },
  bind: function () {
    var bindings = this._bindings;

    for (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
      bindings[i].bind();
    }
  },
  unbind: function () {
    var bindings = this._bindings;

    for (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {
      bindings[i].unbind();
    }
  }
});

function PropertyBinding(rootNode, path, parsedPath) {
  this.path = path;
  this.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);
  this.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;
  this.rootNode = rootNode;
}

Object.assign(PropertyBinding, {
  Composite: Composite,
  create: function (root, path, parsedPath) {
    if (!(root && root.isAnimationObjectGroup)) {
      return new PropertyBinding(root, path, parsedPath);
    } else {
      return new PropertyBinding.Composite(root, path, parsedPath);
    }
  },

  /**
   * Replaces spaces with underscores and removes unsupported characters from
   * node names, to ensure compatibility with parseTrackName().
   *
   * @param  {string} name Node name to be sanitized.
   * @return {string}
   */
  sanitizeNodeName: function () {
    var reservedRe = new RegExp('[' + RESERVED_CHARS_RE + ']', 'g');
    return function sanitizeNodeName(name) {
      return name.replace(/\s/g, '_').replace(reservedRe, '');
    };
  }(),
  parseTrackName: function () {
    // Attempts to allow node names from any language. ES5's `\w` regexp matches
    // only latin characters, and the unicode \p{L} is not yet supported. So
    // instead, we exclude reserved characters and match everything else.
    var wordChar = '[^' + RESERVED_CHARS_RE + ']';
    var wordCharOrDot = '[^' + RESERVED_CHARS_RE.replace('\\.', '') + ']'; // Parent directories, delimited by '/' or ':'. Currently unused, but must
    // be matched to parse the rest of the track name.

    var directoryRe = /((?:WC+[\/:])*)/.source.replace('WC', wordChar); // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.

    var nodeRe = /(WCOD+)?/.source.replace('WCOD', wordCharOrDot); // Object on target node, and accessor. May not contain reserved
    // characters. Accessor may contain any character except closing bracket.

    var objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace('WC', wordChar); // Property and accessor. May not contain reserved characters. Accessor may
    // contain any non-bracket characters.

    var propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace('WC', wordChar);
    var trackRe = new RegExp('' + '^' + directoryRe + nodeRe + objectRe + propertyRe + '$');
    var supportedObjectNames = ['material', 'materials', 'bones'];
    return function parseTrackName(trackName) {
      var matches = trackRe.exec(trackName);

      if (!matches) {
        throw new Error('PropertyBinding: Cannot parse trackName: ' + trackName);
      }

      var results = {
        // directoryName: matches[ 1 ], // (tschw) currently unused
        nodeName: matches[2],
        objectName: matches[3],
        objectIndex: matches[4],
        propertyName: matches[5],
        // required
        propertyIndex: matches[6]
      };
      var lastDot = results.nodeName && results.nodeName.lastIndexOf('.');

      if (lastDot !== undefined && lastDot !== -1) {
        var objectName = results.nodeName.substring(lastDot + 1); // Object names must be checked against a whitelist. Otherwise, there
        // is no way to parse 'foo.bar.baz': 'baz' must be a property, but
        // 'bar' could be the objectName, or part of a nodeName (which can
        // include '.' characters).

        if (supportedObjectNames.indexOf(objectName) !== -1) {
          results.nodeName = results.nodeName.substring(0, lastDot);
          results.objectName = objectName;
        }
      }

      if (results.propertyName === null || results.propertyName.length === 0) {
        throw new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);
      }

      return results;
    };
  }(),
  findNode: function (root, nodeName) {
    if (!nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {
      return root;
    } // search into skeleton bones.


    if (root.skeleton) {
      var bone = root.skeleton.getBoneByName(nodeName);

      if (bone !== undefined) {
        return bone;
      }
    } // search into node subtree.


    if (root.children) {
      var searchNodeSubtree = function (children) {
        for (var i = 0; i < children.length; i++) {
          var childNode = children[i];

          if (childNode.name === nodeName || childNode.uuid === nodeName) {
            return childNode;
          }

          var result = searchNodeSubtree(childNode.children);
          if (result) return result;
        }

        return null;
      };

      var subTreeNode = searchNodeSubtree(root.children);

      if (subTreeNode) {
        return subTreeNode;
      }
    }

    return null;
  }
});
Object.assign(PropertyBinding.prototype, {
  // prototype, continued
  // these are used to "bind" a nonexistent property
  _getValue_unavailable: function () {},
  _setValue_unavailable: function () {},
  BindingType: {
    Direct: 0,
    EntireArray: 1,
    ArrayElement: 2,
    HasFromToArray: 3
  },
  Versioning: {
    None: 0,
    NeedsUpdate: 1,
    MatrixWorldNeedsUpdate: 2
  },
  GetterByBindingType: [function getValue_direct(buffer, offset) {
    buffer[offset] = this.node[this.propertyName];
  }, function getValue_array(buffer, offset) {
    var source = this.resolvedProperty;

    for (var i = 0, n = source.length; i !== n; ++i) {
      buffer[offset++] = source[i];
    }
  }, function getValue_arrayElement(buffer, offset) {
    buffer[offset] = this.resolvedProperty[this.propertyIndex];
  }, function getValue_toArray(buffer, offset) {
    this.resolvedProperty.toArray(buffer, offset);
  }],
  SetterByBindingTypeAndVersioning: [[// Direct
  function setValue_direct(buffer, offset) {
    this.targetObject[this.propertyName] = buffer[offset];
  }, function setValue_direct_setNeedsUpdate(buffer, offset) {
    this.targetObject[this.propertyName] = buffer[offset];
    this.targetObject.needsUpdate = true;
  }, function setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {
    this.targetObject[this.propertyName] = buffer[offset];
    this.targetObject.matrixWorldNeedsUpdate = true;
  }], [// EntireArray
  function setValue_array(buffer, offset) {
    var dest = this.resolvedProperty;

    for (var i = 0, n = dest.length; i !== n; ++i) {
      dest[i] = buffer[offset++];
    }
  }, function setValue_array_setNeedsUpdate(buffer, offset) {
    var dest = this.resolvedProperty;

    for (var i = 0, n = dest.length; i !== n; ++i) {
      dest[i] = buffer[offset++];
    }

    this.targetObject.needsUpdate = true;
  }, function setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {
    var dest = this.resolvedProperty;

    for (var i = 0, n = dest.length; i !== n; ++i) {
      dest[i] = buffer[offset++];
    }

    this.targetObject.matrixWorldNeedsUpdate = true;
  }], [// ArrayElement
  function setValue_arrayElement(buffer, offset) {
    this.resolvedProperty[this.propertyIndex] = buffer[offset];
  }, function setValue_arrayElement_setNeedsUpdate(buffer, offset) {
    this.resolvedProperty[this.propertyIndex] = buffer[offset];
    this.targetObject.needsUpdate = true;
  }, function setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {
    this.resolvedProperty[this.propertyIndex] = buffer[offset];
    this.targetObject.matrixWorldNeedsUpdate = true;
  }], [// HasToFromArray
  function setValue_fromArray(buffer, offset) {
    this.resolvedProperty.fromArray(buffer, offset);
  }, function setValue_fromArray_setNeedsUpdate(buffer, offset) {
    this.resolvedProperty.fromArray(buffer, offset);
    this.targetObject.needsUpdate = true;
  }, function setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {
    this.resolvedProperty.fromArray(buffer, offset);
    this.targetObject.matrixWorldNeedsUpdate = true;
  }]],
  getValue: function getValue_unbound(targetArray, offset) {
    this.bind();
    this.getValue(targetArray, offset); // Note: This class uses a State pattern on a per-method basis:
    // 'bind' sets 'this.getValue' / 'setValue' and shadows the
    // prototype version of these methods with one that represents
    // the bound state. When the property is not found, the methods
    // become no-ops.
  },
  setValue: function getValue_unbound(sourceArray, offset) {
    this.bind();
    this.setValue(sourceArray, offset);
  },
  // create getter / setter pair for a property in the scene graph
  bind: function () {
    var targetObject = this.node,
        parsedPath = this.parsedPath,
        objectName = parsedPath.objectName,
        propertyName = parsedPath.propertyName,
        propertyIndex = parsedPath.propertyIndex;

    if (!targetObject) {
      targetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;
      this.node = targetObject;
    } // set fail state so we can just 'return' on error


    this.getValue = this._getValue_unavailable;
    this.setValue = this._setValue_unavailable; // ensure there is a value node

    if (!targetObject) {
      console.error('THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.');
      return;
    }

    if (objectName) {
      var objectIndex = parsedPath.objectIndex; // special cases were we need to reach deeper into the hierarchy to get the face materials....

      switch (objectName) {
        case 'materials':
          if (!targetObject.material) {
            console.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);
            return;
          }

          if (!targetObject.material.materials) {
            console.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);
            return;
          }

          targetObject = targetObject.material.materials;
          break;

        case 'bones':
          if (!targetObject.skeleton) {
            console.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);
            return;
          } // potential future optimization: skip this if propertyIndex is already an integer
          // and convert the integer string to a true integer.


          targetObject = targetObject.skeleton.bones; // support resolving morphTarget names into indices.

          for (var i = 0; i < targetObject.length; i++) {
            if (targetObject[i].name === objectIndex) {
              objectIndex = i;
              break;
            }
          }

          break;

        default:
          if (targetObject[objectName] === undefined) {
            console.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);
            return;
          }

          targetObject = targetObject[objectName];
      }

      if (objectIndex !== undefined) {
        if (targetObject[objectIndex] === undefined) {
          console.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);
          return;
        }

        targetObject = targetObject[objectIndex];
      }
    } // resolve property


    var nodeProperty = targetObject[propertyName];

    if (nodeProperty === undefined) {
      var nodeName = parsedPath.nodeName;
      console.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName + '.' + propertyName + ' but it wasn\'t found.', targetObject);
      return;
    } // determine versioning scheme


    var versioning = this.Versioning.None;
    this.targetObject = targetObject;

    if (targetObject.needsUpdate !== undefined) {
      // material
      versioning = this.Versioning.NeedsUpdate;
    } else if (targetObject.matrixWorldNeedsUpdate !== undefined) {
      // node transform
      versioning = this.Versioning.MatrixWorldNeedsUpdate;
    } // determine how the property gets bound


    var bindingType = this.BindingType.Direct;

    if (propertyIndex !== undefined) {
      // access a sub element of the property array (only primitives are supported right now)
      if (propertyName === "morphTargetInfluences") {
        // potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.
        // support resolving morphTarget names into indices.
        if (!targetObject.geometry) {
          console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);
          return;
        }

        if (targetObject.geometry.isBufferGeometry) {
          if (!targetObject.geometry.morphAttributes) {
            console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);
            return;
          }

          for (var i = 0; i < this.node.geometry.morphAttributes.position.length; i++) {
            if (targetObject.geometry.morphAttributes.position[i].name === propertyIndex) {
              propertyIndex = i;
              break;
            }
          }
        } else {
          if (!targetObject.geometry.morphTargets) {
            console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this);
            return;
          }

          for (var i = 0; i < this.node.geometry.morphTargets.length; i++) {
            if (targetObject.geometry.morphTargets[i].name === propertyIndex) {
              propertyIndex = i;
              break;
            }
          }
        }
      }

      bindingType = this.BindingType.ArrayElement;
      this.resolvedProperty = nodeProperty;
      this.propertyIndex = propertyIndex;
    } else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {
      // must use copy for Object3D.Euler/Quaternion
      bindingType = this.BindingType.HasFromToArray;
      this.resolvedProperty = nodeProperty;
    } else if (Array.isArray(nodeProperty)) {
      bindingType = this.BindingType.EntireArray;
      this.resolvedProperty = nodeProperty;
    } else {
      this.propertyName = propertyName;
    } // select getter / setter


    this.getValue = this.GetterByBindingType[bindingType];
    this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
  },
  unbind: function () {
    this.node = null; // back to the prototype version of getValue / setValue
    // note: avoiding to mutate the shape of 'this' via 'delete'

    this.getValue = this._getValue_unbound;
    this.setValue = this._setValue_unbound;
  }
}); //!\ DECLARE ALIAS AFTER assign prototype !

Object.assign(PropertyBinding.prototype, {
  // initial state of these methods that calls 'bind'
  _getValue_unbound: PropertyBinding.prototype.getValue,
  _setValue_unbound: PropertyBinding.prototype.setValue
});
/**
 *
 * A group of objects that receives a shared animation state.
 *
 * Usage:
 *
 *  - Add objects you would otherwise pass as 'root' to the
 *    constructor or the .clipAction method of AnimationMixer.
 *
 *  - Instead pass this object as 'root'.
 *
 *  - You can also add and remove objects later when the mixer
 *    is running.
 *
 * Note:
 *
 *    Objects of this class appear as one object to the mixer,
 *    so cache control of the individual objects must be done
 *    on the group.
 *
 * Limitation:
 *
 *  - The animated properties must be compatible among the
 *    all objects in the group.
 *
 *  - A single property can either be controlled through a
 *    target group or directly, but not both.
 *
 * @author tschw
 */

function AnimationObjectGroup() {
  this.uuid = _Math.generateUUID(); // cached objects followed by the active ones

  this._objects = Array.prototype.slice.call(arguments);
  this.nCachedObjects_ = 0; // threshold
  // note: read by PropertyBinding.Composite

  var indices = {};
  this._indicesByUUID = indices; // for bookkeeping

  for (var i = 0, n = arguments.length; i !== n; ++i) {
    indices[arguments[i].uuid] = i;
  }

  this._paths = []; // inside: string

  this._parsedPaths = []; // inside: { we don't care, here }

  this._bindings = []; // inside: Array< PropertyBinding >

  this._bindingsIndicesByPath = {}; // inside: indices in these arrays

  var scope = this;
  this.stats = {
    objects: {
      get total() {
        return scope._objects.length;
      },

      get inUse() {
        return this.total - scope.nCachedObjects_;
      }

    },

    get bindingsPerObject() {
      return scope._bindings.length;
    }

  };
}

Object.assign(AnimationObjectGroup.prototype, {
  isAnimationObjectGroup: true,
  add: function () {
    var objects = this._objects,
        nObjects = objects.length,
        nCachedObjects = this.nCachedObjects_,
        indicesByUUID = this._indicesByUUID,
        paths = this._paths,
        parsedPaths = this._parsedPaths,
        bindings = this._bindings,
        nBindings = bindings.length,
        knownObject = undefined;

    for (var i = 0, n = arguments.length; i !== n; ++i) {
      var object = arguments[i],
          uuid = object.uuid,
          index = indicesByUUID[uuid];

      if (index === undefined) {
        // unknown object -> add it to the ACTIVE region
        index = nObjects++;
        indicesByUUID[uuid] = index;
        objects.push(object); // accounting is done, now do the same for all bindings

        for (var j = 0, m = nBindings; j !== m; ++j) {
          bindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));
        }
      } else if (index < nCachedObjects) {
        knownObject = objects[index]; // move existing object to the ACTIVE region

        var firstActiveIndex = --nCachedObjects,
            lastCachedObject = objects[firstActiveIndex];
        indicesByUUID[lastCachedObject.uuid] = index;
        objects[index] = lastCachedObject;
        indicesByUUID[uuid] = firstActiveIndex;
        objects[firstActiveIndex] = object; // accounting is done, now do the same for all bindings

        for (var j = 0, m = nBindings; j !== m; ++j) {
          var bindingsForPath = bindings[j],
              lastCached = bindingsForPath[firstActiveIndex],
              binding = bindingsForPath[index];
          bindingsForPath[index] = lastCached;

          if (binding === undefined) {
            // since we do not bother to create new bindings
            // for objects that are cached, the binding may
            // or may not exist
            binding = new PropertyBinding(object, paths[j], parsedPaths[j]);
          }

          bindingsForPath[firstActiveIndex] = binding;
        }
      } else if (objects[index] !== knownObject) {
        console.error('THREE.AnimationObjectGroup: Different objects with the same UUID ' + 'detected. Clean the caches or recreate your infrastructure when reloading scenes.');
      } // else the object is already where we want it to be

    } // for arguments


    this.nCachedObjects_ = nCachedObjects;
  },
  remove: function () {
    var objects = this._objects,
        nCachedObjects = this.nCachedObjects_,
        indicesByUUID = this._indicesByUUID,
        bindings = this._bindings,
        nBindings = bindings.length;

    for (var i = 0, n = arguments.length; i !== n; ++i) {
      var object = arguments[i],
          uuid = object.uuid,
          index = indicesByUUID[uuid];

      if (index !== undefined && index >= nCachedObjects) {
        // move existing object into the CACHED region
        var lastCachedIndex = nCachedObjects++,
            firstActiveObject = objects[lastCachedIndex];
        indicesByUUID[firstActiveObject.uuid] = index;
        objects[index] = firstActiveObject;
        indicesByUUID[uuid] = lastCachedIndex;
        objects[lastCachedIndex] = object; // accounting is done, now do the same for all bindings

        for (var j = 0, m = nBindings; j !== m; ++j) {
          var bindingsForPath = bindings[j],
              firstActive = bindingsForPath[lastCachedIndex],
              binding = bindingsForPath[index];
          bindingsForPath[index] = firstActive;
          bindingsForPath[lastCachedIndex] = binding;
        }
      }
    } // for arguments


    this.nCachedObjects_ = nCachedObjects;
  },
  // remove & forget
  uncache: function () {
    var objects = this._objects,
        nObjects = objects.length,
        nCachedObjects = this.nCachedObjects_,
        indicesByUUID = this._indicesByUUID,
        bindings = this._bindings,
        nBindings = bindings.length;

    for (var i = 0, n = arguments.length; i !== n; ++i) {
      var object = arguments[i],
          uuid = object.uuid,
          index = indicesByUUID[uuid];

      if (index !== undefined) {
        delete indicesByUUID[uuid];

        if (index < nCachedObjects) {
          // object is cached, shrink the CACHED region
          var firstActiveIndex = --nCachedObjects,
              lastCachedObject = objects[firstActiveIndex],
              lastIndex = --nObjects,
              lastObject = objects[lastIndex]; // last cached object takes this object's place

          indicesByUUID[lastCachedObject.uuid] = index;
          objects[index] = lastCachedObject; // last object goes to the activated slot and pop

          indicesByUUID[lastObject.uuid] = firstActiveIndex;
          objects[firstActiveIndex] = lastObject;
          objects.pop(); // accounting is done, now do the same for all bindings

          for (var j = 0, m = nBindings; j !== m; ++j) {
            var bindingsForPath = bindings[j],
                lastCached = bindingsForPath[firstActiveIndex],
                last = bindingsForPath[lastIndex];
            bindingsForPath[index] = lastCached;
            bindingsForPath[firstActiveIndex] = last;
            bindingsForPath.pop();
          }
        } else {
          // object is active, just swap with the last and pop
          var lastIndex = --nObjects,
              lastObject = objects[lastIndex];
          indicesByUUID[lastObject.uuid] = index;
          objects[index] = lastObject;
          objects.pop(); // accounting is done, now do the same for all bindings

          for (var j = 0, m = nBindings; j !== m; ++j) {
            var bindingsForPath = bindings[j];
            bindingsForPath[index] = bindingsForPath[lastIndex];
            bindingsForPath.pop();
          }
        } // cached or active

      } // if object is known

    } // for arguments


    this.nCachedObjects_ = nCachedObjects;
  },
  // Internal interface used by befriended PropertyBinding.Composite:
  subscribe_: function (path, parsedPath) {
    // returns an array of bindings for the given path that is changed
    // according to the contained objects in the group
    var indicesByPath = this._bindingsIndicesByPath,
        index = indicesByPath[path],
        bindings = this._bindings;
    if (index !== undefined) return bindings[index];
    var paths = this._paths,
        parsedPaths = this._parsedPaths,
        objects = this._objects,
        nObjects = objects.length,
        nCachedObjects = this.nCachedObjects_,
        bindingsForPath = new Array(nObjects);
    index = bindings.length;
    indicesByPath[path] = index;
    paths.push(path);
    parsedPaths.push(parsedPath);
    bindings.push(bindingsForPath);

    for (var i = nCachedObjects, n = objects.length; i !== n; ++i) {
      var object = objects[i];
      bindingsForPath[i] = new PropertyBinding(object, path, parsedPath);
    }

    return bindingsForPath;
  },
  unsubscribe_: function (path) {
    // tells the group to forget about a property path and no longer
    // update the array previously obtained with 'subscribe_'
    var indicesByPath = this._bindingsIndicesByPath,
        index = indicesByPath[path];

    if (index !== undefined) {
      var paths = this._paths,
          parsedPaths = this._parsedPaths,
          bindings = this._bindings,
          lastBindingsIndex = bindings.length - 1,
          lastBindings = bindings[lastBindingsIndex],
          lastBindingsPath = path[lastBindingsIndex];
      indicesByPath[lastBindingsPath] = index;
      bindings[index] = lastBindings;
      bindings.pop();
      parsedPaths[index] = parsedPaths[lastBindingsIndex];
      parsedPaths.pop();
      paths[index] = paths[lastBindingsIndex];
      paths.pop();
    }
  }
});
/**
 *
 * Action provided by AnimationMixer for scheduling clip playback on specific
 * objects.
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 *
 */

function AnimationAction(mixer, clip, localRoot) {
  this._mixer = mixer;
  this._clip = clip;
  this._localRoot = localRoot || null;
  var tracks = clip.tracks,
      nTracks = tracks.length,
      interpolants = new Array(nTracks);
  var interpolantSettings = {
    endingStart: ZeroCurvatureEnding,
    endingEnd: ZeroCurvatureEnding
  };

  for (var i = 0; i !== nTracks; ++i) {
    var interpolant = tracks[i].createInterpolant(null);
    interpolants[i] = interpolant;
    interpolant.settings = interpolantSettings;
  }

  this._interpolantSettings = interpolantSettings;
  this._interpolants = interpolants; // bound by the mixer
  // inside: PropertyMixer (managed by the mixer)

  this._propertyBindings = new Array(nTracks);
  this._cacheIndex = null; // for the memory manager

  this._byClipCacheIndex = null; // for the memory manager

  this._timeScaleInterpolant = null;
  this._weightInterpolant = null;
  this.loop = LoopRepeat;
  this._loopCount = -1; // global mixer time when the action is to be started
  // it's set back to 'null' upon start of the action

  this._startTime = null; // scaled local time of the action
  // gets clamped or wrapped to 0..clip.duration according to loop

  this.time = 0;
  this.timeScale = 1;
  this._effectiveTimeScale = 1;
  this.weight = 1;
  this._effectiveWeight = 1;
  this.repetitions = Infinity; // no. of repetitions when looping

  this.paused = false; // true -> zero effective time scale

  this.enabled = true; // false -> zero effective weight

  this.clampWhenFinished = false; // keep feeding the last frame?

  this.zeroSlopeAtStart = true; // for smooth interpolation w/o separate

  this.zeroSlopeAtEnd = true; // clips for start, loop and end
}

Object.assign(AnimationAction.prototype, {
  // State & Scheduling
  play: function () {
    this._mixer._activateAction(this);

    return this;
  },
  stop: function () {
    this._mixer._deactivateAction(this);

    return this.reset();
  },
  reset: function () {
    this.paused = false;
    this.enabled = true;
    this.time = 0; // restart clip

    this._loopCount = -1; // forget previous loops

    this._startTime = null; // forget scheduling

    return this.stopFading().stopWarping();
  },
  isRunning: function () {
    return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
  },
  // return true when play has been called
  isScheduled: function () {
    return this._mixer._isActiveAction(this);
  },
  startAt: function (time) {
    this._startTime = time;
    return this;
  },
  setLoop: function (mode, repetitions) {
    this.loop = mode;
    this.repetitions = repetitions;
    return this;
  },
  // Weight
  // set the weight stopping any scheduled fading
  // although .enabled = false yields an effective weight of zero, this
  // method does *not* change .enabled, because it would be confusing
  setEffectiveWeight: function (weight) {
    this.weight = weight; // note: same logic as when updated at runtime

    this._effectiveWeight = this.enabled ? weight : 0;
    return this.stopFading();
  },
  // return the weight considering fading and .enabled
  getEffectiveWeight: function () {
    return this._effectiveWeight;
  },
  fadeIn: function (duration) {
    return this._scheduleFading(duration, 0, 1);
  },
  fadeOut: function (duration) {
    return this._scheduleFading(duration, 1, 0);
  },
  crossFadeFrom: function (fadeOutAction, duration, warp) {
    fadeOutAction.fadeOut(duration);
    this.fadeIn(duration);

    if (warp) {
      var fadeInDuration = this._clip.duration,
          fadeOutDuration = fadeOutAction._clip.duration,
          startEndRatio = fadeOutDuration / fadeInDuration,
          endStartRatio = fadeInDuration / fadeOutDuration;
      fadeOutAction.warp(1.0, startEndRatio, duration);
      this.warp(endStartRatio, 1.0, duration);
    }

    return this;
  },
  crossFadeTo: function (fadeInAction, duration, warp) {
    return fadeInAction.crossFadeFrom(this, duration, warp);
  },
  stopFading: function () {
    var weightInterpolant = this._weightInterpolant;

    if (weightInterpolant !== null) {
      this._weightInterpolant = null;

      this._mixer._takeBackControlInterpolant(weightInterpolant);
    }

    return this;
  },
  // Time Scale Control
  // set the time scale stopping any scheduled warping
  // although .paused = true yields an effective time scale of zero, this
  // method does *not* change .paused, because it would be confusing
  setEffectiveTimeScale: function (timeScale) {
    this.timeScale = timeScale;
    this._effectiveTimeScale = this.paused ? 0 : timeScale;
    return this.stopWarping();
  },
  // return the time scale considering warping and .paused
  getEffectiveTimeScale: function () {
    return this._effectiveTimeScale;
  },
  setDuration: function (duration) {
    this.timeScale = this._clip.duration / duration;
    return this.stopWarping();
  },
  syncWith: function (action) {
    this.time = action.time;
    this.timeScale = action.timeScale;
    return this.stopWarping();
  },
  halt: function (duration) {
    return this.warp(this._effectiveTimeScale, 0, duration);
  },
  warp: function (startTimeScale, endTimeScale, duration) {
    var mixer = this._mixer,
        now = mixer.time,
        interpolant = this._timeScaleInterpolant,
        timeScale = this.timeScale;

    if (interpolant === null) {
      interpolant = mixer._lendControlInterpolant();
      this._timeScaleInterpolant = interpolant;
    }

    var times = interpolant.parameterPositions,
        values = interpolant.sampleValues;
    times[0] = now;
    times[1] = now + duration;
    values[0] = startTimeScale / timeScale;
    values[1] = endTimeScale / timeScale;
    return this;
  },
  stopWarping: function () {
    var timeScaleInterpolant = this._timeScaleInterpolant;

    if (timeScaleInterpolant !== null) {
      this._timeScaleInterpolant = null;

      this._mixer._takeBackControlInterpolant(timeScaleInterpolant);
    }

    return this;
  },
  // Object Accessors
  getMixer: function () {
    return this._mixer;
  },
  getClip: function () {
    return this._clip;
  },
  getRoot: function () {
    return this._localRoot || this._mixer._root;
  },
  // Interna
  _update: function (time, deltaTime, timeDirection, accuIndex) {
    // called by the mixer
    if (!this.enabled) {
      // call ._updateWeight() to update ._effectiveWeight
      this._updateWeight(time);

      return;
    }

    var startTime = this._startTime;

    if (startTime !== null) {
      // check for scheduled start of action
      var timeRunning = (time - startTime) * timeDirection;

      if (timeRunning < 0 || timeDirection === 0) {
        return; // yet to come / don't decide when delta = 0
      } // start


      this._startTime = null; // unschedule

      deltaTime = timeDirection * timeRunning;
    } // apply time scale and advance time


    deltaTime *= this._updateTimeScale(time);

    var clipTime = this._updateTime(deltaTime); // note: _updateTime may disable the action resulting in
    // an effective weight of 0


    var weight = this._updateWeight(time);

    if (weight > 0) {
      var interpolants = this._interpolants;
      var propertyMixers = this._propertyBindings;

      for (var j = 0, m = interpolants.length; j !== m; ++j) {
        interpolants[j].evaluate(clipTime);
        propertyMixers[j].accumulate(accuIndex, weight);
      }
    }
  },
  _updateWeight: function (time) {
    var weight = 0;

    if (this.enabled) {
      weight = this.weight;
      var interpolant = this._weightInterpolant;

      if (interpolant !== null) {
        var interpolantValue = interpolant.evaluate(time)[0];
        weight *= interpolantValue;

        if (time > interpolant.parameterPositions[1]) {
          this.stopFading();

          if (interpolantValue === 0) {
            // faded out, disable
            this.enabled = false;
          }
        }
      }
    }

    this._effectiveWeight = weight;
    return weight;
  },
  _updateTimeScale: function (time) {
    var timeScale = 0;

    if (!this.paused) {
      timeScale = this.timeScale;
      var interpolant = this._timeScaleInterpolant;

      if (interpolant !== null) {
        var interpolantValue = interpolant.evaluate(time)[0];
        timeScale *= interpolantValue;

        if (time > interpolant.parameterPositions[1]) {
          this.stopWarping();

          if (timeScale === 0) {
            // motion has halted, pause
            this.paused = true;
          } else {
            // warp done - apply final time scale
            this.timeScale = timeScale;
          }
        }
      }
    }

    this._effectiveTimeScale = timeScale;
    return timeScale;
  },
  _updateTime: function (deltaTime) {
    var time = this.time + deltaTime;
    var duration = this._clip.duration;
    var loop = this.loop;
    var loopCount = this._loopCount;
    var pingPong = loop === LoopPingPong;

    if (deltaTime === 0) {
      if (loopCount === -1) return time;
      return pingPong && (loopCount & 1) === 1 ? duration - time : time;
    }

    if (loop === LoopOnce) {
      if (loopCount === -1) {
        // just started
        this._loopCount = 0;

        this._setEndings(true, true, false);
      }

      handle_stop: {
        if (time >= duration) {
          time = duration;
        } else if (time < 0) {
          time = 0;
        } else break handle_stop;

        if (this.clampWhenFinished) this.paused = true;else this.enabled = false;

        this._mixer.dispatchEvent({
          type: 'finished',
          action: this,
          direction: deltaTime < 0 ? -1 : 1
        });
      }
    } else {
      // repetitive Repeat or PingPong
      if (loopCount === -1) {
        // just started
        if (deltaTime >= 0) {
          loopCount = 0;

          this._setEndings(true, this.repetitions === 0, pingPong);
        } else {
          // when looping in reverse direction, the initial
          // transition through zero counts as a repetition,
          // so leave loopCount at -1
          this._setEndings(this.repetitions === 0, true, pingPong);
        }
      }

      if (time >= duration || time < 0) {
        // wrap around
        var loopDelta = Math.floor(time / duration); // signed

        time -= duration * loopDelta;
        loopCount += Math.abs(loopDelta);
        var pending = this.repetitions - loopCount;

        if (pending <= 0) {
          // have to stop (switch state, clamp time, fire event)
          if (this.clampWhenFinished) this.paused = true;else this.enabled = false;
          time = deltaTime > 0 ? duration : 0;

          this._mixer.dispatchEvent({
            type: 'finished',
            action: this,
            direction: deltaTime > 0 ? 1 : -1
          });
        } else {
          // keep running
          if (pending === 1) {
            // entering the last round
            var atStart = deltaTime < 0;

            this._setEndings(atStart, !atStart, pingPong);
          } else {
            this._setEndings(false, false, pingPong);
          }

          this._loopCount = loopCount;

          this._mixer.dispatchEvent({
            type: 'loop',
            action: this,
            loopDelta: loopDelta
          });
        }
      }

      if (pingPong && (loopCount & 1) === 1) {
        // invert time for the "pong round"
        this.time = time;
        return duration - time;
      }
    }

    this.time = time;
    return time;
  },
  _setEndings: function (atStart, atEnd, pingPong) {
    var settings = this._interpolantSettings;

    if (pingPong) {
      settings.endingStart = ZeroSlopeEnding;
      settings.endingEnd = ZeroSlopeEnding;
    } else {
      // assuming for LoopOnce atStart == atEnd == true
      if (atStart) {
        settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;
      } else {
        settings.endingStart = WrapAroundEnding;
      }

      if (atEnd) {
        settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;
      } else {
        settings.endingEnd = WrapAroundEnding;
      }
    }
  },
  _scheduleFading: function (duration, weightNow, weightThen) {
    var mixer = this._mixer,
        now = mixer.time,
        interpolant = this._weightInterpolant;

    if (interpolant === null) {
      interpolant = mixer._lendControlInterpolant();
      this._weightInterpolant = interpolant;
    }

    var times = interpolant.parameterPositions,
        values = interpolant.sampleValues;
    times[0] = now;
    values[0] = weightNow;
    times[1] = now + duration;
    values[1] = weightThen;
    return this;
  }
});
/**
 *
 * Player for AnimationClips.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function AnimationMixer(root) {
  this._root = root;

  this._initMemoryManager();

  this._accuIndex = 0;
  this.time = 0;
  this.timeScale = 1.0;
}

AnimationMixer.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
  constructor: AnimationMixer,
  _bindAction: function (action, prototypeAction) {
    var root = action._localRoot || this._root,
        tracks = action._clip.tracks,
        nTracks = tracks.length,
        bindings = action._propertyBindings,
        interpolants = action._interpolants,
        rootUuid = root.uuid,
        bindingsByRoot = this._bindingsByRootAndName,
        bindingsByName = bindingsByRoot[rootUuid];

    if (bindingsByName === undefined) {
      bindingsByName = {};
      bindingsByRoot[rootUuid] = bindingsByName;
    }

    for (var i = 0; i !== nTracks; ++i) {
      var track = tracks[i],
          trackName = track.name,
          binding = bindingsByName[trackName];

      if (binding !== undefined) {
        bindings[i] = binding;
      } else {
        binding = bindings[i];

        if (binding !== undefined) {
          // existing binding, make sure the cache knows
          if (binding._cacheIndex === null) {
            ++binding.referenceCount;

            this._addInactiveBinding(binding, rootUuid, trackName);
          }

          continue;
        }

        var path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;
        binding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());
        ++binding.referenceCount;

        this._addInactiveBinding(binding, rootUuid, trackName);

        bindings[i] = binding;
      }

      interpolants[i].resultBuffer = binding.buffer;
    }
  },
  _activateAction: function (action) {
    if (!this._isActiveAction(action)) {
      if (action._cacheIndex === null) {
        // this action has been forgotten by the cache, but the user
        // appears to be still using it -> rebind
        var rootUuid = (action._localRoot || this._root).uuid,
            clipUuid = action._clip.uuid,
            actionsForClip = this._actionsByClip[clipUuid];

        this._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);

        this._addInactiveAction(action, clipUuid, rootUuid);
      }

      var bindings = action._propertyBindings; // increment reference counts / sort out state

      for (var i = 0, n = bindings.length; i !== n; ++i) {
        var binding = bindings[i];

        if (binding.useCount++ === 0) {
          this._lendBinding(binding);

          binding.saveOriginalState();
        }
      }

      this._lendAction(action);
    }
  },
  _deactivateAction: function (action) {
    if (this._isActiveAction(action)) {
      var bindings = action._propertyBindings; // decrement reference counts / sort out state

      for (var i = 0, n = bindings.length; i !== n; ++i) {
        var binding = bindings[i];

        if (--binding.useCount === 0) {
          binding.restoreOriginalState();

          this._takeBackBinding(binding);
        }
      }

      this._takeBackAction(action);
    }
  },
  // Memory manager
  _initMemoryManager: function () {
    this._actions = []; // 'nActiveActions' followed by inactive ones

    this._nActiveActions = 0;
    this._actionsByClip = {}; // inside:
    // {
    // 	knownActions: Array< AnimationAction > - used as prototypes
    // 	actionByRoot: AnimationAction - lookup
    // }

    this._bindings = []; // 'nActiveBindings' followed by inactive ones

    this._nActiveBindings = 0;
    this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >

    this._controlInterpolants = []; // same game as above

    this._nActiveControlInterpolants = 0;
    var scope = this;
    this.stats = {
      actions: {
        get total() {
          return scope._actions.length;
        },

        get inUse() {
          return scope._nActiveActions;
        }

      },
      bindings: {
        get total() {
          return scope._bindings.length;
        },

        get inUse() {
          return scope._nActiveBindings;
        }

      },
      controlInterpolants: {
        get total() {
          return scope._controlInterpolants.length;
        },

        get inUse() {
          return scope._nActiveControlInterpolants;
        }

      }
    };
  },
  // Memory management for AnimationAction objects
  _isActiveAction: function (action) {
    var index = action._cacheIndex;
    return index !== null && index < this._nActiveActions;
  },
  _addInactiveAction: function (action, clipUuid, rootUuid) {
    var actions = this._actions,
        actionsByClip = this._actionsByClip,
        actionsForClip = actionsByClip[clipUuid];

    if (actionsForClip === undefined) {
      actionsForClip = {
        knownActions: [action],
        actionByRoot: {}
      };
      action._byClipCacheIndex = 0;
      actionsByClip[clipUuid] = actionsForClip;
    } else {
      var knownActions = actionsForClip.knownActions;
      action._byClipCacheIndex = knownActions.length;
      knownActions.push(action);
    }

    action._cacheIndex = actions.length;
    actions.push(action);
    actionsForClip.actionByRoot[rootUuid] = action;
  },
  _removeInactiveAction: function (action) {
    var actions = this._actions,
        lastInactiveAction = actions[actions.length - 1],
        cacheIndex = action._cacheIndex;
    lastInactiveAction._cacheIndex = cacheIndex;
    actions[cacheIndex] = lastInactiveAction;
    actions.pop();
    action._cacheIndex = null;
    var clipUuid = action._clip.uuid,
        actionsByClip = this._actionsByClip,
        actionsForClip = actionsByClip[clipUuid],
        knownActionsForClip = actionsForClip.knownActions,
        lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],
        byClipCacheIndex = action._byClipCacheIndex;
    lastKnownAction._byClipCacheIndex = byClipCacheIndex;
    knownActionsForClip[byClipCacheIndex] = lastKnownAction;
    knownActionsForClip.pop();
    action._byClipCacheIndex = null;
    var actionByRoot = actionsForClip.actionByRoot,
        rootUuid = (action._localRoot || this._root).uuid;
    delete actionByRoot[rootUuid];

    if (knownActionsForClip.length === 0) {
      delete actionsByClip[clipUuid];
    }

    this._removeInactiveBindingsForAction(action);
  },
  _removeInactiveBindingsForAction: function (action) {
    var bindings = action._propertyBindings;

    for (var i = 0, n = bindings.length; i !== n; ++i) {
      var binding = bindings[i];

      if (--binding.referenceCount === 0) {
        this._removeInactiveBinding(binding);
      }
    }
  },
  _lendAction: function (action) {
    // [ active actions |  inactive actions  ]
    // [  active actions >| inactive actions ]
    //                 s        a
    //                  <-swap->
    //                 a        s
    var actions = this._actions,
        prevIndex = action._cacheIndex,
        lastActiveIndex = this._nActiveActions++,
        firstInactiveAction = actions[lastActiveIndex];
    action._cacheIndex = lastActiveIndex;
    actions[lastActiveIndex] = action;
    firstInactiveAction._cacheIndex = prevIndex;
    actions[prevIndex] = firstInactiveAction;
  },
  _takeBackAction: function (action) {
    // [  active actions  | inactive actions ]
    // [ active actions |< inactive actions  ]
    //        a        s
    //         <-swap->
    //        s        a
    var actions = this._actions,
        prevIndex = action._cacheIndex,
        firstInactiveIndex = --this._nActiveActions,
        lastActiveAction = actions[firstInactiveIndex];
    action._cacheIndex = firstInactiveIndex;
    actions[firstInactiveIndex] = action;
    lastActiveAction._cacheIndex = prevIndex;
    actions[prevIndex] = lastActiveAction;
  },
  // Memory management for PropertyMixer objects
  _addInactiveBinding: function (binding, rootUuid, trackName) {
    var bindingsByRoot = this._bindingsByRootAndName,
        bindingByName = bindingsByRoot[rootUuid],
        bindings = this._bindings;

    if (bindingByName === undefined) {
      bindingByName = {};
      bindingsByRoot[rootUuid] = bindingByName;
    }

    bindingByName[trackName] = binding;
    binding._cacheIndex = bindings.length;
    bindings.push(binding);
  },
  _removeInactiveBinding: function (binding) {
    var bindings = this._bindings,
        propBinding = binding.binding,
        rootUuid = propBinding.rootNode.uuid,
        trackName = propBinding.path,
        bindingsByRoot = this._bindingsByRootAndName,
        bindingByName = bindingsByRoot[rootUuid],
        lastInactiveBinding = bindings[bindings.length - 1],
        cacheIndex = binding._cacheIndex;
    lastInactiveBinding._cacheIndex = cacheIndex;
    bindings[cacheIndex] = lastInactiveBinding;
    bindings.pop();
    delete bindingByName[trackName];

    remove_empty_map: {
      for (var _ in bindingByName) break remove_empty_map; // eslint-disable-line no-unused-vars


      delete bindingsByRoot[rootUuid];
    }
  },
  _lendBinding: function (binding) {
    var bindings = this._bindings,
        prevIndex = binding._cacheIndex,
        lastActiveIndex = this._nActiveBindings++,
        firstInactiveBinding = bindings[lastActiveIndex];
    binding._cacheIndex = lastActiveIndex;
    bindings[lastActiveIndex] = binding;
    firstInactiveBinding._cacheIndex = prevIndex;
    bindings[prevIndex] = firstInactiveBinding;
  },
  _takeBackBinding: function (binding) {
    var bindings = this._bindings,
        prevIndex = binding._cacheIndex,
        firstInactiveIndex = --this._nActiveBindings,
        lastActiveBinding = bindings[firstInactiveIndex];
    binding._cacheIndex = firstInactiveIndex;
    bindings[firstInactiveIndex] = binding;
    lastActiveBinding._cacheIndex = prevIndex;
    bindings[prevIndex] = lastActiveBinding;
  },
  // Memory management of Interpolants for weight and time scale
  _lendControlInterpolant: function () {
    var interpolants = this._controlInterpolants,
        lastActiveIndex = this._nActiveControlInterpolants++,
        interpolant = interpolants[lastActiveIndex];

    if (interpolant === undefined) {
      interpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);
      interpolant.__cacheIndex = lastActiveIndex;
      interpolants[lastActiveIndex] = interpolant;
    }

    return interpolant;
  },
  _takeBackControlInterpolant: function (interpolant) {
    var interpolants = this._controlInterpolants,
        prevIndex = interpolant.__cacheIndex,
        firstInactiveIndex = --this._nActiveControlInterpolants,
        lastActiveInterpolant = interpolants[firstInactiveIndex];
    interpolant.__cacheIndex = firstInactiveIndex;
    interpolants[firstInactiveIndex] = interpolant;
    lastActiveInterpolant.__cacheIndex = prevIndex;
    interpolants[prevIndex] = lastActiveInterpolant;
  },
  _controlInterpolantsResultBuffer: new Float32Array(1),
  // return an action for a clip optionally using a custom root target
  // object (this method allocates a lot of dynamic memory in case a
  // previously unknown clip/root combination is specified)
  clipAction: function (clip, optionalRoot) {
    var root = optionalRoot || this._root,
        rootUuid = root.uuid,
        clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,
        clipUuid = clipObject !== null ? clipObject.uuid : clip,
        actionsForClip = this._actionsByClip[clipUuid],
        prototypeAction = null;

    if (actionsForClip !== undefined) {
      var existingAction = actionsForClip.actionByRoot[rootUuid];

      if (existingAction !== undefined) {
        return existingAction;
      } // we know the clip, so we don't have to parse all
      // the bindings again but can just copy


      prototypeAction = actionsForClip.knownActions[0]; // also, take the clip from the prototype action

      if (clipObject === null) clipObject = prototypeAction._clip;
    } // clip must be known when specified via string


    if (clipObject === null) return null; // allocate all resources required to run it

    var newAction = new AnimationAction(this, clipObject, optionalRoot);

    this._bindAction(newAction, prototypeAction); // and make the action known to the memory manager


    this._addInactiveAction(newAction, clipUuid, rootUuid);

    return newAction;
  },
  // get an existing action
  existingAction: function (clip, optionalRoot) {
    var root = optionalRoot || this._root,
        rootUuid = root.uuid,
        clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,
        clipUuid = clipObject ? clipObject.uuid : clip,
        actionsForClip = this._actionsByClip[clipUuid];

    if (actionsForClip !== undefined) {
      return actionsForClip.actionByRoot[rootUuid] || null;
    }

    return null;
  },
  // deactivates all previously scheduled actions
  stopAllAction: function () {
    var actions = this._actions,
        nActions = this._nActiveActions,
        bindings = this._bindings,
        nBindings = this._nActiveBindings;
    this._nActiveActions = 0;
    this._nActiveBindings = 0;

    for (var i = 0; i !== nActions; ++i) {
      actions[i].reset();
    }

    for (var i = 0; i !== nBindings; ++i) {
      bindings[i].useCount = 0;
    }

    return this;
  },
  // advance the time and update apply the animation
  update: function (deltaTime) {
    deltaTime *= this.timeScale;
    var actions = this._actions,
        nActions = this._nActiveActions,
        time = this.time += deltaTime,
        timeDirection = Math.sign(deltaTime),
        accuIndex = this._accuIndex ^= 1; // run active actions

    for (var i = 0; i !== nActions; ++i) {
      var action = actions[i];

      action._update(time, deltaTime, timeDirection, accuIndex);
    } // update scene graph


    var bindings = this._bindings,
        nBindings = this._nActiveBindings;

    for (var i = 0; i !== nBindings; ++i) {
      bindings[i].apply(accuIndex);
    }

    return this;
  },
  // return this mixer's root target object
  getRoot: function () {
    return this._root;
  },
  // free all resources specific to a particular clip
  uncacheClip: function (clip) {
    var actions = this._actions,
        clipUuid = clip.uuid,
        actionsByClip = this._actionsByClip,
        actionsForClip = actionsByClip[clipUuid];

    if (actionsForClip !== undefined) {
      // note: just calling _removeInactiveAction would mess up the
      // iteration state and also require updating the state we can
      // just throw away
      var actionsToRemove = actionsForClip.knownActions;

      for (var i = 0, n = actionsToRemove.length; i !== n; ++i) {
        var action = actionsToRemove[i];

        this._deactivateAction(action);

        var cacheIndex = action._cacheIndex,
            lastInactiveAction = actions[actions.length - 1];
        action._cacheIndex = null;
        action._byClipCacheIndex = null;
        lastInactiveAction._cacheIndex = cacheIndex;
        actions[cacheIndex] = lastInactiveAction;
        actions.pop();

        this._removeInactiveBindingsForAction(action);
      }

      delete actionsByClip[clipUuid];
    }
  },
  // free all resources specific to a particular root target object
  uncacheRoot: function (root) {
    var rootUuid = root.uuid,
        actionsByClip = this._actionsByClip;

    for (var clipUuid in actionsByClip) {
      var actionByRoot = actionsByClip[clipUuid].actionByRoot,
          action = actionByRoot[rootUuid];

      if (action !== undefined) {
        this._deactivateAction(action);

        this._removeInactiveAction(action);
      }
    }

    var bindingsByRoot = this._bindingsByRootAndName,
        bindingByName = bindingsByRoot[rootUuid];

    if (bindingByName !== undefined) {
      for (var trackName in bindingByName) {
        var binding = bindingByName[trackName];
        binding.restoreOriginalState();

        this._removeInactiveBinding(binding);
      }
    }
  },
  // remove a targeted clip from the cache
  uncacheAction: function (clip, optionalRoot) {
    var action = this.existingAction(clip, optionalRoot);

    if (action !== null) {
      this._deactivateAction(action);

      this._removeInactiveAction(action);
    }
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 */

function Uniform(value) {
  if (typeof value === 'string') {
    console.warn('THREE.Uniform: Type parameter is no longer needed.');
    value = arguments[1];
  }

  this.value = value;
}

Uniform.prototype.clone = function () {
  return new Uniform(this.value.clone === undefined ? this.value : this.value.clone());
};
/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */


function InstancedBufferGeometry() {
  BufferGeometry.call(this);
  this.type = 'InstancedBufferGeometry';
  this.maxInstancedCount = undefined;
}

InstancedBufferGeometry.prototype = Object.assign(Object.create(BufferGeometry.prototype), {
  constructor: InstancedBufferGeometry,
  isInstancedBufferGeometry: true,
  copy: function (source) {
    BufferGeometry.prototype.copy.call(this, source);
    this.maxInstancedCount = source.maxInstancedCount;
    return this;
  },
  clone: function () {
    return new this.constructor().copy(this);
  }
});
/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */

function InstancedInterleavedBuffer(array, stride, meshPerAttribute) {
  InterleavedBuffer.call(this, array, stride);
  this.meshPerAttribute = meshPerAttribute || 1;
}

InstancedInterleavedBuffer.prototype = Object.assign(Object.create(InterleavedBuffer.prototype), {
  constructor: InstancedInterleavedBuffer,
  isInstancedInterleavedBuffer: true,
  copy: function (source) {
    InterleavedBuffer.prototype.copy.call(this, source);
    this.meshPerAttribute = source.meshPerAttribute;
    return this;
  }
});
/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */

function InstancedBufferAttribute(array, itemSize, normalized, meshPerAttribute) {
  if (typeof normalized === 'number') {
    meshPerAttribute = normalized;
    normalized = false;
    console.error('THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.');
  }

  BufferAttribute.call(this, array, itemSize, normalized);
  this.meshPerAttribute = meshPerAttribute || 1;
}

InstancedBufferAttribute.prototype = Object.assign(Object.create(BufferAttribute.prototype), {
  constructor: InstancedBufferAttribute,
  isInstancedBufferAttribute: true,
  copy: function (source) {
    BufferAttribute.prototype.copy.call(this, source);
    this.meshPerAttribute = source.meshPerAttribute;
    return this;
  }
});
/**
 * @author mrdoob / http://mrdoob.com/
 * @author bhouston / http://clara.io/
 * @author stephomi / http://stephaneginier.com/
 */

function Raycaster(origin, direction, near, far) {
  this.ray = new Ray(origin, direction); // direction is assumed to be normalized (for accurate distance calculations)

  this.near = near || 0;
  this.far = far || Infinity;
  this.params = {
    Mesh: {},
    Line: {},
    LOD: {},
    Points: {
      threshold: 1
    },
    Sprite: {}
  };
  Object.defineProperties(this.params, {
    PointCloud: {
      get: function () {
        console.warn('THREE.Raycaster: params.PointCloud has been renamed to params.Points.');
        return this.Points;
      }
    }
  });
}

function ascSort(a, b) {
  return a.distance - b.distance;
}

function intersectObject(object, raycaster, intersects, recursive) {
  if (object.visible === false) return;
  object.raycast(raycaster, intersects);

  if (recursive === true) {
    var children = object.children;

    for (var i = 0, l = children.length; i < l; i++) {
      intersectObject(children[i], raycaster, intersects, true);
    }
  }
}

Object.assign(Raycaster.prototype, {
  linePrecision: 1,
  set: function (origin, direction) {
    // direction is assumed to be normalized (for accurate distance calculations)
    this.ray.set(origin, direction);
  },
  setFromCamera: function (coords, camera) {
    if (camera && camera.isPerspectiveCamera) {
      this.ray.origin.setFromMatrixPosition(camera.matrixWorld);
      this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();
    } else if (camera && camera.isOrthographicCamera) {
      this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera

      this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);
    } else {
      console.error('THREE.Raycaster: Unsupported camera type.');
    }
  },
  intersectObject: function (object, recursive, optionalTarget) {
    var intersects = optionalTarget || [];
    intersectObject(object, this, intersects, recursive);
    intersects.sort(ascSort);
    return intersects;
  },
  intersectObjects: function (objects, recursive, optionalTarget) {
    var intersects = optionalTarget || [];

    if (Array.isArray(objects) === false) {
      console.warn('THREE.Raycaster.intersectObjects: objects is not an Array.');
      return intersects;
    }

    for (var i = 0, l = objects.length; i < l; i++) {
      intersectObject(objects[i], this, intersects, recursive);
    }

    intersects.sort(ascSort);
    return intersects;
  }
});
/**
 * @author bhouston / http://clara.io
 * @author WestLangley / http://github.com/WestLangley
 *
 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
 *
 * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
 * The azimuthal angle (theta) is measured from the positive z-axiz.
 */

function Spherical(radius, phi, theta) {
  this.radius = radius !== undefined ? radius : 1.0;
  this.phi = phi !== undefined ? phi : 0; // polar angle

  this.theta = theta !== undefined ? theta : 0; // azimuthal angle

  return this;
}

Object.assign(Spherical.prototype, {
  set: function (radius, phi, theta) {
    this.radius = radius;
    this.phi = phi;
    this.theta = theta;
    return this;
  },
  clone: function () {
    return new this.constructor().copy(this);
  },
  copy: function (other) {
    this.radius = other.radius;
    this.phi = other.phi;
    this.theta = other.theta;
    return this;
  },
  // restrict phi to be betwee EPS and PI-EPS
  makeSafe: function () {
    var EPS = 0.000001;
    this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));
    return this;
  },
  setFromVector3: function (v) {
    return this.setFromCartesianCoords(v.x, v.y, v.z);
  },
  setFromCartesianCoords: function (x, y, z) {
    this.radius = Math.sqrt(x * x + y * y + z * z);

    if (this.radius === 0) {
      this.theta = 0;
      this.phi = 0;
    } else {
      this.theta = Math.atan2(x, z);
      this.phi = Math.acos(_Math.clamp(y / this.radius, -1, 1));
    }

    return this;
  }
});
/**
 * @author Mugen87 / https://github.com/Mugen87
 *
 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
 *
 */

function Cylindrical(radius, theta, y) {
  this.radius = radius !== undefined ? radius : 1.0; // distance from the origin to a point in the x-z plane

  this.theta = theta !== undefined ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis

  this.y = y !== undefined ? y : 0; // height above the x-z plane

  return this;
}

Object.assign(Cylindrical.prototype, {
  set: function (radius, theta, y) {
    this.radius = radius;
    this.theta = theta;
    this.y = y;
    return this;
  },
  clone: function () {
    return new this.constructor().copy(this);
  },
  copy: function (other) {
    this.radius = other.radius;
    this.theta = other.theta;
    this.y = other.y;
    return this;
  },
  setFromVector3: function (v) {
    return this.setFromCartesianCoords(v.x, v.y, v.z);
  },
  setFromCartesianCoords: function (x, y, z) {
    this.radius = Math.sqrt(x * x + z * z);
    this.theta = Math.atan2(x, z);
    this.y = y;
    return this;
  }
});
/**
 * @author bhouston / http://clara.io
 */

function Box2(min, max) {
  this.min = min !== undefined ? min : new Vector2(+Infinity, +Infinity);
  this.max = max !== undefined ? max : new Vector2(-Infinity, -Infinity);
}

Object.assign(Box2.prototype, {
  set: function (min, max) {
    this.min.copy(min);
    this.max.copy(max);
    return this;
  },
  setFromPoints: function (points) {
    this.makeEmpty();

    for (var i = 0, il = points.length; i < il; i++) {
      this.expandByPoint(points[i]);
    }

    return this;
  },
  setFromCenterAndSize: function () {
    var v1 = new Vector2();
    return function setFromCenterAndSize(center, size) {
      var halfSize = v1.copy(size).multiplyScalar(0.5);
      this.min.copy(center).sub(halfSize);
      this.max.copy(center).add(halfSize);
      return this;
    };
  }(),
  clone: function () {
    return new this.constructor().copy(this);
  },
  copy: function (box) {
    this.min.copy(box.min);
    this.max.copy(box.max);
    return this;
  },
  makeEmpty: function () {
    this.min.x = this.min.y = +Infinity;
    this.max.x = this.max.y = -Infinity;
    return this;
  },
  isEmpty: function () {
    // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
    return this.max.x < this.min.x || this.max.y < this.min.y;
  },
  getCenter: function (target) {
    if (target === undefined) {
      console.warn('THREE.Box2: .getCenter() target is now required');
      target = new Vector2();
    }

    return this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
  },
  getSize: function (target) {
    if (target === undefined) {
      console.warn('THREE.Box2: .getSize() target is now required');
      target = new Vector2();
    }

    return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);
  },
  expandByPoint: function (point) {
    this.min.min(point);
    this.max.max(point);
    return this;
  },
  expandByVector: function (vector) {
    this.min.sub(vector);
    this.max.add(vector);
    return this;
  },
  expandByScalar: function (scalar) {
    this.min.addScalar(-scalar);
    this.max.addScalar(scalar);
    return this;
  },
  containsPoint: function (point) {
    return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;
  },
  containsBox: function (box) {
    return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;
  },
  getParameter: function (point, target) {
    // This can potentially have a divide by zero if the box
    // has a size dimension of 0.
    if (target === undefined) {
      console.warn('THREE.Box2: .getParameter() target is now required');
      target = new Vector2();
    }

    return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));
  },
  intersectsBox: function (box) {
    // using 4 splitting planes to rule out intersections
    return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;
  },
  clampPoint: function (point, target) {
    if (target === undefined) {
      console.warn('THREE.Box2: .clampPoint() target is now required');
      target = new Vector2();
    }

    return target.copy(point).clamp(this.min, this.max);
  },
  distanceToPoint: function () {
    var v1 = new Vector2();
    return function distanceToPoint(point) {
      var clampedPoint = v1.copy(point).clamp(this.min, this.max);
      return clampedPoint.sub(point).length();
    };
  }(),
  intersect: function (box) {
    this.min.max(box.min);
    this.max.min(box.max);
    return this;
  },
  union: function (box) {
    this.min.min(box.min);
    this.max.max(box.max);
    return this;
  },
  translate: function (offset) {
    this.min.add(offset);
    this.max.add(offset);
    return this;
  },
  equals: function (box) {
    return box.min.equals(this.min) && box.max.equals(this.max);
  }
});
/**
 * @author bhouston / http://clara.io
 */

function Line3(start, end) {
  this.start = start !== undefined ? start : new Vector3();
  this.end = end !== undefined ? end : new Vector3();
}

Object.assign(Line3.prototype, {
  set: function (start, end) {
    this.start.copy(start);
    this.end.copy(end);
    return this;
  },
  clone: function () {
    return new this.constructor().copy(this);
  },
  copy: function (line) {
    this.start.copy(line.start);
    this.end.copy(line.end);
    return this;
  },
  getCenter: function (target) {
    if (target === undefined) {
      console.warn('THREE.Line3: .getCenter() target is now required');
      target = new Vector3();
    }

    return target.addVectors(this.start, this.end).multiplyScalar(0.5);
  },
  delta: function (target) {
    if (target === undefined) {
      console.warn('THREE.Line3: .delta() target is now required');
      target = new Vector3();
    }

    return target.subVectors(this.end, this.start);
  },
  distanceSq: function () {
    return this.start.distanceToSquared(this.end);
  },
  distance: function () {
    return this.start.distanceTo(this.end);
  },
  at: function (t, target) {
    if (target === undefined) {
      console.warn('THREE.Line3: .at() target is now required');
      target = new Vector3();
    }

    return this.delta(target).multiplyScalar(t).add(this.start);
  },
  closestPointToPointParameter: function () {
    var startP = new Vector3();
    var startEnd = new Vector3();
    return function closestPointToPointParameter(point, clampToLine) {
      startP.subVectors(point, this.start);
      startEnd.subVectors(this.end, this.start);
      var startEnd2 = startEnd.dot(startEnd);
      var startEnd_startP = startEnd.dot(startP);
      var t = startEnd_startP / startEnd2;

      if (clampToLine) {
        t = _Math.clamp(t, 0, 1);
      }

      return t;
    };
  }(),
  closestPointToPoint: function (point, clampToLine, target) {
    var t = this.closestPointToPointParameter(point, clampToLine);

    if (target === undefined) {
      console.warn('THREE.Line3: .closestPointToPoint() target is now required');
      target = new Vector3();
    }

    return this.delta(target).multiplyScalar(t).add(this.start);
  },
  applyMatrix4: function (matrix) {
    this.start.applyMatrix4(matrix);
    this.end.applyMatrix4(matrix);
    return this;
  },
  equals: function (line) {
    return line.start.equals(this.start) && line.end.equals(this.end);
  }
});
/**
 * @author alteredq / http://alteredqualia.com/
 */

function ImmediateRenderObject(material) {
  Object3D.call(this);
  this.material = material;

  this.render = function ()
  /* renderCallback */
  {};
}

ImmediateRenderObject.prototype = Object.create(Object3D.prototype);
ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;
ImmediateRenderObject.prototype.isImmediateRenderObject = true;
/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 */

function VertexNormalsHelper(object, size, hex, linewidth) {
  this.object = object;
  this.size = size !== undefined ? size : 1;
  var color = hex !== undefined ? hex : 0xff0000;
  var width = linewidth !== undefined ? linewidth : 1; //

  var nNormals = 0;
  var objGeometry = this.object.geometry;

  if (objGeometry && objGeometry.isGeometry) {
    nNormals = objGeometry.faces.length * 3;
  } else if (objGeometry && objGeometry.isBufferGeometry) {
    nNormals = objGeometry.attributes.normal.count;
  } //


  var geometry = new BufferGeometry();
  var positions = new Float32BufferAttribute(nNormals * 2 * 3, 3);
  geometry.addAttribute('position', positions);
  LineSegments.call(this, geometry, new LineBasicMaterial({
    color: color,
    linewidth: width
  })); //

  this.matrixAutoUpdate = false;
  this.update();
}

VertexNormalsHelper.prototype = Object.create(LineSegments.prototype);
VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;

VertexNormalsHelper.prototype.update = function () {
  var v1 = new Vector3();
  var v2 = new Vector3();
  var normalMatrix = new Matrix3();
  return function update() {
    var keys = ['a', 'b', 'c'];
    this.object.updateMatrixWorld(true);
    normalMatrix.getNormalMatrix(this.object.matrixWorld);
    var matrixWorld = this.object.matrixWorld;
    var position = this.geometry.attributes.position; //

    var objGeometry = this.object.geometry;

    if (objGeometry && objGeometry.isGeometry) {
      var vertices = objGeometry.vertices;
      var faces = objGeometry.faces;
      var idx = 0;

      for (var i = 0, l = faces.length; i < l; i++) {
        var face = faces[i];

        for (var j = 0, jl = face.vertexNormals.length; j < jl; j++) {
          var vertex = vertices[face[keys[j]]];
          var normal = face.vertexNormals[j];
          v1.copy(vertex).applyMatrix4(matrixWorld);
          v2.copy(normal).applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1);
          position.setXYZ(idx, v1.x, v1.y, v1.z);
          idx = idx + 1;
          position.setXYZ(idx, v2.x, v2.y, v2.z);
          idx = idx + 1;
        }
      }
    } else if (objGeometry && objGeometry.isBufferGeometry) {
      var objPos = objGeometry.attributes.position;
      var objNorm = objGeometry.attributes.normal;
      var idx = 0; // for simplicity, ignore index and drawcalls, and render every normal

      for (var j = 0, jl = objPos.count; j < jl; j++) {
        v1.set(objPos.getX(j), objPos.getY(j), objPos.getZ(j)).applyMatrix4(matrixWorld);
        v2.set(objNorm.getX(j), objNorm.getY(j), objNorm.getZ(j));
        v2.applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1);
        position.setXYZ(idx, v1.x, v1.y, v1.z);
        idx = idx + 1;
        position.setXYZ(idx, v2.x, v2.y, v2.z);
        idx = idx + 1;
      }
    }

    position.needsUpdate = true;
  };
}();
/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 */


function SpotLightHelper(light, color) {
  Object3D.call(this);
  this.light = light;
  this.light.updateMatrixWorld();
  this.matrix = light.matrixWorld;
  this.matrixAutoUpdate = false;
  this.color = color;
  var geometry = new BufferGeometry();
  var positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];

  for (var i = 0, j = 1, l = 32; i < l; i++, j++) {
    var p1 = i / l * Math.PI * 2;
    var p2 = j / l * Math.PI * 2;
    positions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);
  }

  geometry.addAttribute('position', new Float32BufferAttribute(positions, 3));
  var material = new LineBasicMaterial({
    fog: false
  });
  this.cone = new LineSegments(geometry, material);
  this.add(this.cone);
  this.update();
}

SpotLightHelper.prototype = Object.create(Object3D.prototype);
SpotLightHelper.prototype.constructor = SpotLightHelper;

SpotLightHelper.prototype.dispose = function () {
  this.cone.geometry.dispose();
  this.cone.material.dispose();
};

SpotLightHelper.prototype.update = function () {
  var vector = new Vector3();
  return function update() {
    this.light.updateMatrixWorld();
    var coneLength = this.light.distance ? this.light.distance : 1000;
    var coneWidth = coneLength * Math.tan(this.light.angle);
    this.cone.scale.set(coneWidth, coneWidth, coneLength);
    vector.setFromMatrixPosition(this.light.target.matrixWorld);
    this.cone.lookAt(vector);

    if (this.color !== undefined) {
      this.cone.material.color.set(this.color);
    } else {
      this.cone.material.color.copy(this.light.color);
    }
  };
}();
/**
 * @author Sean Griffin / http://twitter.com/sgrif
 * @author Michael Guerrero / http://realitymeltdown.com
 * @author mrdoob / http://mrdoob.com/
 * @author ikerr / http://verold.com
 * @author Mugen87 / https://github.com/Mugen87
 */


function getBoneList(object) {
  var boneList = [];

  if (object && object.isBone) {
    boneList.push(object);
  }

  for (var i = 0; i < object.children.length; i++) {
    boneList.push.apply(boneList, getBoneList(object.children[i]));
  }

  return boneList;
}

function SkeletonHelper(object) {
  var bones = getBoneList(object);
  var geometry = new BufferGeometry();
  var vertices = [];
  var colors = [];
  var color1 = new Color(0, 0, 1);
  var color2 = new Color(0, 1, 0);

  for (var i = 0; i < bones.length; i++) {
    var bone = bones[i];

    if (bone.parent && bone.parent.isBone) {
      vertices.push(0, 0, 0);
      vertices.push(0, 0, 0);
      colors.push(color1.r, color1.g, color1.b);
      colors.push(color2.r, color2.g, color2.b);
    }
  }

  geometry.addAttribute('position', new Float32BufferAttribute(vertices, 3));
  geometry.addAttribute('color', new Float32BufferAttribute(colors, 3));
  var material = new LineBasicMaterial({
    vertexColors: VertexColors,
    depthTest: false,
    depthWrite: false,
    transparent: true
  });
  LineSegments.call(this, geometry, material);
  this.root = object;
  this.bones = bones;
  this.matrix = object.matrixWorld;
  this.matrixAutoUpdate = false;
}

SkeletonHelper.prototype = Object.create(LineSegments.prototype);
SkeletonHelper.prototype.constructor = SkeletonHelper;

SkeletonHelper.prototype.updateMatrixWorld = function () {
  var vector = new Vector3();
  var boneMatrix = new Matrix4();
  var matrixWorldInv = new Matrix4();
  return function updateMatrixWorld(force) {
    var bones = this.bones;
    var geometry = this.geometry;
    var position = geometry.getAttribute('position');
    matrixWorldInv.getInverse(this.root.matrixWorld);

    for (var i = 0, j = 0; i < bones.length; i++) {
      var bone = bones[i];

      if (bone.parent && bone.parent.isBone) {
        boneMatrix.multiplyMatrices(matrixWorldInv, bone.matrixWorld);
        vector.setFromMatrixPosition(boneMatrix);
        position.setXYZ(j, vector.x, vector.y, vector.z);
        boneMatrix.multiplyMatrices(matrixWorldInv, bone.parent.matrixWorld);
        vector.setFromMatrixPosition(boneMatrix);
        position.setXYZ(j + 1, vector.x, vector.y, vector.z);
        j += 2;
      }
    }

    geometry.getAttribute('position').needsUpdate = true;
    Object3D.prototype.updateMatrixWorld.call(this, force);
  };
}();
/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */


function PointLightHelper(light, sphereSize, color) {
  this.light = light;
  this.light.updateMatrixWorld();
  this.color = color;
  var geometry = new SphereBufferGeometry(sphereSize, 4, 2);
  var material = new MeshBasicMaterial({
    wireframe: true,
    fog: false
  });
  Mesh.call(this, geometry, material);
  this.matrix = this.light.matrixWorld;
  this.matrixAutoUpdate = false;
  this.update();
  /*
  var distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );
  var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );
  	this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
  this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );
  	var d = light.distance;
  	if ( d === 0.0 ) {
  		this.lightDistance.visible = false;
  	} else {
  		this.lightDistance.scale.set( d, d, d );
  	}
  	this.add( this.lightDistance );
  */
}

PointLightHelper.prototype = Object.create(Mesh.prototype);
PointLightHelper.prototype.constructor = PointLightHelper;

PointLightHelper.prototype.dispose = function () {
  this.geometry.dispose();
  this.material.dispose();
};

PointLightHelper.prototype.update = function () {
  if (this.color !== undefined) {
    this.material.color.set(this.color);
  } else {
    this.material.color.copy(this.light.color);
  }
  /*
  var d = this.light.distance;
  	if ( d === 0.0 ) {
  		this.lightDistance.visible = false;
  	} else {
  		this.lightDistance.visible = true;
  	this.lightDistance.scale.set( d, d, d );
  	}
  */

};
/**
 * @author abelnation / http://github.com/abelnation
 * @author Mugen87 / http://github.com/Mugen87
 * @author WestLangley / http://github.com/WestLangley
 *
 *  This helper must be added as a child of the light
 */


function RectAreaLightHelper(light, color) {
  this.type = 'RectAreaLightHelper';
  this.light = light;
  this.color = color; // optional hardwired color for the helper

  var positions = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0];
  var geometry = new BufferGeometry();
  geometry.addAttribute('position', new Float32BufferAttribute(positions, 3));
  geometry.computeBoundingSphere();
  var material = new LineBasicMaterial({
    fog: false
  });
  Line.call(this, geometry, material); //

  var positions2 = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0];
  var geometry2 = new BufferGeometry();
  geometry2.addAttribute('position', new Float32BufferAttribute(positions2, 3));
  geometry2.computeBoundingSphere();
  this.add(new Mesh(geometry2, new MeshBasicMaterial({
    side: BackSide,
    fog: false
  })));
  this.update();
}

RectAreaLightHelper.prototype = Object.create(Line.prototype);
RectAreaLightHelper.prototype.constructor = RectAreaLightHelper;

RectAreaLightHelper.prototype.update = function () {
  this.scale.set(0.5 * this.light.width, 0.5 * this.light.height, 1);

  if (this.color !== undefined) {
    this.material.color.set(this.color);
    this.children[0].material.color.set(this.color);
  } else {
    this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity); // prevent hue shift

    var c = this.material.color;
    var max = Math.max(c.r, c.g, c.b);
    if (max > 1) c.multiplyScalar(1 / max);
    this.children[0].material.color.copy(this.material.color);
  }
};

RectAreaLightHelper.prototype.dispose = function () {
  this.geometry.dispose();
  this.material.dispose();
  this.children[0].geometry.dispose();
  this.children[0].material.dispose();
};
/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */


function HemisphereLightHelper(light, size, color) {
  Object3D.call(this);
  this.light = light;
  this.light.updateMatrixWorld();
  this.matrix = light.matrixWorld;
  this.matrixAutoUpdate = false;
  this.color = color;
  var geometry = new OctahedronBufferGeometry(size);
  geometry.rotateY(Math.PI * 0.5);
  this.material = new MeshBasicMaterial({
    wireframe: true,
    fog: false
  });
  if (this.color === undefined) this.material.vertexColors = VertexColors;
  var position = geometry.getAttribute('position');
  var colors = new Float32Array(position.count * 3);
  geometry.addAttribute('color', new BufferAttribute(colors, 3));
  this.add(new Mesh(geometry, this.material));
  this.update();
}

HemisphereLightHelper.prototype = Object.create(Object3D.prototype);
HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;

HemisphereLightHelper.prototype.dispose = function () {
  this.children[0].geometry.dispose();
  this.children[0].material.dispose();
};

HemisphereLightHelper.prototype.update = function () {
  var vector = new Vector3();
  var color1 = new Color();
  var color2 = new Color();
  return function update() {
    var mesh = this.children[0];

    if (this.color !== undefined) {
      this.material.color.set(this.color);
    } else {
      var colors = mesh.geometry.getAttribute('color');
      color1.copy(this.light.color);
      color2.copy(this.light.groundColor);

      for (var i = 0, l = colors.count; i < l; i++) {
        var color = i < l / 2 ? color1 : color2;
        colors.setXYZ(i, color.r, color.g, color.b);
      }

      colors.needsUpdate = true;
    }

    mesh.lookAt(vector.setFromMatrixPosition(this.light.matrixWorld).negate());
  };
}();
/**
 * @author mrdoob / http://mrdoob.com/
 */


function GridHelper(size, divisions, color1, color2) {
  size = size || 10;
  divisions = divisions || 10;
  color1 = new Color(color1 !== undefined ? color1 : 0x444444);
  color2 = new Color(color2 !== undefined ? color2 : 0x888888);
  var center = divisions / 2;
  var step = size / divisions;
  var halfSize = size / 2;
  var vertices = [],
      colors = [];

  for (var i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {
    vertices.push(-halfSize, 0, k, halfSize, 0, k);
    vertices.push(k, 0, -halfSize, k, 0, halfSize);
    var color = i === center ? color1 : color2;
    color.toArray(colors, j);
    j += 3;
    color.toArray(colors, j);
    j += 3;
    color.toArray(colors, j);
    j += 3;
    color.toArray(colors, j);
    j += 3;
  }

  var geometry = new BufferGeometry();
  geometry.addAttribute('position', new Float32BufferAttribute(vertices, 3));
  geometry.addAttribute('color', new Float32BufferAttribute(colors, 3));
  var material = new LineBasicMaterial({
    vertexColors: VertexColors
  });
  LineSegments.call(this, geometry, material);
}

GridHelper.prototype = Object.create(LineSegments.prototype);
GridHelper.prototype.constructor = GridHelper;
/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / http://github.com/Mugen87
 * @author Hectate / http://www.github.com/Hectate
 */

function PolarGridHelper(radius, radials, circles, divisions, color1, color2) {
  radius = radius || 10;
  radials = radials || 16;
  circles = circles || 8;
  divisions = divisions || 64;
  color1 = new Color(color1 !== undefined ? color1 : 0x444444);
  color2 = new Color(color2 !== undefined ? color2 : 0x888888);
  var vertices = [];
  var colors = [];
  var x, z;
  var v, i, j, r, color; // create the radials

  for (i = 0; i <= radials; i++) {
    v = i / radials * (Math.PI * 2);
    x = Math.sin(v) * radius;
    z = Math.cos(v) * radius;
    vertices.push(0, 0, 0);
    vertices.push(x, 0, z);
    color = i & 1 ? color1 : color2;
    colors.push(color.r, color.g, color.b);
    colors.push(color.r, color.g, color.b);
  } // create the circles


  for (i = 0; i <= circles; i++) {
    color = i & 1 ? color1 : color2;
    r = radius - radius / circles * i;

    for (j = 0; j < divisions; j++) {
      // first vertex
      v = j / divisions * (Math.PI * 2);
      x = Math.sin(v) * r;
      z = Math.cos(v) * r;
      vertices.push(x, 0, z);
      colors.push(color.r, color.g, color.b); // second vertex

      v = (j + 1) / divisions * (Math.PI * 2);
      x = Math.sin(v) * r;
      z = Math.cos(v) * r;
      vertices.push(x, 0, z);
      colors.push(color.r, color.g, color.b);
    }
  }

  var geometry = new BufferGeometry();
  geometry.addAttribute('position', new Float32BufferAttribute(vertices, 3));
  geometry.addAttribute('color', new Float32BufferAttribute(colors, 3));
  var material = new LineBasicMaterial({
    vertexColors: VertexColors
  });
  LineSegments.call(this, geometry, material);
}

PolarGridHelper.prototype = Object.create(LineSegments.prototype);
PolarGridHelper.prototype.constructor = PolarGridHelper;
/**
 * @author Mugen87 / http://github.com/Mugen87
 */

function PositionalAudioHelper(audio, range, divisionsInnerAngle, divisionsOuterAngle) {
  this.audio = audio;
  this.range = range || 1;
  this.divisionsInnerAngle = divisionsInnerAngle || 16;
  this.divisionsOuterAngle = divisionsOuterAngle || 2;
  var geometry = new BufferGeometry();
  var divisions = this.divisionsInnerAngle + this.divisionsOuterAngle * 2;
  var positions = new Float32Array((divisions * 3 + 3) * 3);
  geometry.addAttribute('position', new BufferAttribute(positions, 3));
  var materialInnerAngle = new LineBasicMaterial({
    color: 0x00ff00
  });
  var materialOuterAngle = new LineBasicMaterial({
    color: 0xffff00
  });
  Line.call(this, geometry, [materialOuterAngle, materialInnerAngle]);
  this.update();
}

PositionalAudioHelper.prototype = Object.create(Line.prototype);
PositionalAudioHelper.prototype.constructor = PositionalAudioHelper;

PositionalAudioHelper.prototype.update = function () {
  var audio = this.audio;
  var range = this.range;
  var divisionsInnerAngle = this.divisionsInnerAngle;
  var divisionsOuterAngle = this.divisionsOuterAngle;

  var coneInnerAngle = _Math.degToRad(audio.panner.coneInnerAngle);

  var coneOuterAngle = _Math.degToRad(audio.panner.coneOuterAngle);

  var halfConeInnerAngle = coneInnerAngle / 2;
  var halfConeOuterAngle = coneOuterAngle / 2;
  var start = 0;
  var count = 0;
  var i, stride;
  var geometry = this.geometry;
  var positionAttribute = geometry.attributes.position;
  geometry.clearGroups(); //

  function generateSegment(from, to, divisions, materialIndex) {
    var step = (to - from) / divisions;
    positionAttribute.setXYZ(start, 0, 0, 0);
    count++;

    for (i = from; i < to; i += step) {
      stride = start + count;
      positionAttribute.setXYZ(stride, Math.sin(i) * range, 0, Math.cos(i) * range);
      positionAttribute.setXYZ(stride + 1, Math.sin(Math.min(i + step, to)) * range, 0, Math.cos(Math.min(i + step, to)) * range);
      positionAttribute.setXYZ(stride + 2, 0, 0, 0);
      count += 3;
    }

    geometry.addGroup(start, count, materialIndex);
    start += count;
    count = 0;
  } //


  generateSegment(-halfConeOuterAngle, -halfConeInnerAngle, divisionsOuterAngle, 0);
  generateSegment(-halfConeInnerAngle, halfConeInnerAngle, divisionsInnerAngle, 1);
  generateSegment(halfConeInnerAngle, halfConeOuterAngle, divisionsOuterAngle, 0); //

  positionAttribute.needsUpdate = true;
  if (coneInnerAngle === coneOuterAngle) this.material[0].visible = false;
};

PositionalAudioHelper.prototype.dispose = function () {
  this.geometry.dispose();
  this.material[0].dispose();
  this.material[1].dispose();
};
/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 */


function FaceNormalsHelper(object, size, hex, linewidth) {
  // FaceNormalsHelper only supports THREE.Geometry
  this.object = object;
  this.size = size !== undefined ? size : 1;
  var color = hex !== undefined ? hex : 0xffff00;
  var width = linewidth !== undefined ? linewidth : 1; //

  var nNormals = 0;
  var objGeometry = this.object.geometry;

  if (objGeometry && objGeometry.isGeometry) {
    nNormals = objGeometry.faces.length;
  } else {
    console.warn('THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.');
  } //


  var geometry = new BufferGeometry();
  var positions = new Float32BufferAttribute(nNormals * 2 * 3, 3);
  geometry.addAttribute('position', positions);
  LineSegments.call(this, geometry, new LineBasicMaterial({
    color: color,
    linewidth: width
  })); //

  this.matrixAutoUpdate = false;
  this.update();
}

FaceNormalsHelper.prototype = Object.create(LineSegments.prototype);
FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;

FaceNormalsHelper.prototype.update = function () {
  var v1 = new Vector3();
  var v2 = new Vector3();
  var normalMatrix = new Matrix3();
  return function update() {
    this.object.updateMatrixWorld(true);
    normalMatrix.getNormalMatrix(this.object.matrixWorld);
    var matrixWorld = this.object.matrixWorld;
    var position = this.geometry.attributes.position; //

    var objGeometry = this.object.geometry;
    var vertices = objGeometry.vertices;
    var faces = objGeometry.faces;
    var idx = 0;

    for (var i = 0, l = faces.length; i < l; i++) {
      var face = faces[i];
      var normal = face.normal;
      v1.copy(vertices[face.a]).add(vertices[face.b]).add(vertices[face.c]).divideScalar(3).applyMatrix4(matrixWorld);
      v2.copy(normal).applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1);
      position.setXYZ(idx, v1.x, v1.y, v1.z);
      idx = idx + 1;
      position.setXYZ(idx, v2.x, v2.y, v2.z);
      idx = idx + 1;
    }

    position.needsUpdate = true;
  };
}();
/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 */


function DirectionalLightHelper(light, size, color) {
  Object3D.call(this);
  this.light = light;
  this.light.updateMatrixWorld();
  this.matrix = light.matrixWorld;
  this.matrixAutoUpdate = false;
  this.color = color;
  if (size === undefined) size = 1;
  var geometry = new BufferGeometry();
  geometry.addAttribute('position', new Float32BufferAttribute([-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0], 3));
  var material = new LineBasicMaterial({
    fog: false
  });
  this.lightPlane = new Line(geometry, material);
  this.add(this.lightPlane);
  geometry = new BufferGeometry();
  geometry.addAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));
  this.targetLine = new Line(geometry, material);
  this.add(this.targetLine);
  this.update();
}

DirectionalLightHelper.prototype = Object.create(Object3D.prototype);
DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;

DirectionalLightHelper.prototype.dispose = function () {
  this.lightPlane.geometry.dispose();
  this.lightPlane.material.dispose();
  this.targetLine.geometry.dispose();
  this.targetLine.material.dispose();
};

DirectionalLightHelper.prototype.update = function () {
  var v1 = new Vector3();
  var v2 = new Vector3();
  var v3 = new Vector3();
  return function update() {
    v1.setFromMatrixPosition(this.light.matrixWorld);
    v2.setFromMatrixPosition(this.light.target.matrixWorld);
    v3.subVectors(v2, v1);
    this.lightPlane.lookAt(v2);

    if (this.color !== undefined) {
      this.lightPlane.material.color.set(this.color);
      this.targetLine.material.color.set(this.color);
    } else {
      this.lightPlane.material.color.copy(this.light.color);
      this.targetLine.material.color.copy(this.light.color);
    }

    this.targetLine.lookAt(v2);
    this.targetLine.scale.z = v3.length();
  };
}();
/**
 * @author alteredq / http://alteredqualia.com/
 * @author Mugen87 / https://github.com/Mugen87
 *
 *	- shows frustum, line of sight and up of the camera
 *	- suitable for fast updates
 * 	- based on frustum visualization in lightgl.js shadowmap example
 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
 */


function CameraHelper(camera) {
  var geometry = new BufferGeometry();
  var material = new LineBasicMaterial({
    color: 0xffffff,
    vertexColors: FaceColors
  });
  var vertices = [];
  var colors = [];
  var pointMap = {}; // colors

  var colorFrustum = new Color(0xffaa00);
  var colorCone = new Color(0xff0000);
  var colorUp = new Color(0x00aaff);
  var colorTarget = new Color(0xffffff);
  var colorCross = new Color(0x333333); // near

  addLine('n1', 'n2', colorFrustum);
  addLine('n2', 'n4', colorFrustum);
  addLine('n4', 'n3', colorFrustum);
  addLine('n3', 'n1', colorFrustum); // far

  addLine('f1', 'f2', colorFrustum);
  addLine('f2', 'f4', colorFrustum);
  addLine('f4', 'f3', colorFrustum);
  addLine('f3', 'f1', colorFrustum); // sides

  addLine('n1', 'f1', colorFrustum);
  addLine('n2', 'f2', colorFrustum);
  addLine('n3', 'f3', colorFrustum);
  addLine('n4', 'f4', colorFrustum); // cone

  addLine('p', 'n1', colorCone);
  addLine('p', 'n2', colorCone);
  addLine('p', 'n3', colorCone);
  addLine('p', 'n4', colorCone); // up

  addLine('u1', 'u2', colorUp);
  addLine('u2', 'u3', colorUp);
  addLine('u3', 'u1', colorUp); // target

  addLine('c', 't', colorTarget);
  addLine('p', 'c', colorCross); // cross

  addLine('cn1', 'cn2', colorCross);
  addLine('cn3', 'cn4', colorCross);
  addLine('cf1', 'cf2', colorCross);
  addLine('cf3', 'cf4', colorCross);

  function addLine(a, b, color) {
    addPoint(a, color);
    addPoint(b, color);
  }

  function addPoint(id, color) {
    vertices.push(0, 0, 0);
    colors.push(color.r, color.g, color.b);

    if (pointMap[id] === undefined) {
      pointMap[id] = [];
    }

    pointMap[id].push(vertices.length / 3 - 1);
  }

  geometry.addAttribute('position', new Float32BufferAttribute(vertices, 3));
  geometry.addAttribute('color', new Float32BufferAttribute(colors, 3));
  LineSegments.call(this, geometry, material);
  this.camera = camera;
  if (this.camera.updateProjectionMatrix) this.camera.updateProjectionMatrix();
  this.matrix = camera.matrixWorld;
  this.matrixAutoUpdate = false;
  this.pointMap = pointMap;
  this.update();
}

CameraHelper.prototype = Object.create(LineSegments.prototype);
CameraHelper.prototype.constructor = CameraHelper;

CameraHelper.prototype.update = function () {
  var geometry, pointMap;
  var vector = new Vector3();
  var camera = new Camera();

  function setPoint(point, x, y, z) {
    vector.set(x, y, z).unproject(camera);
    var points = pointMap[point];

    if (points !== undefined) {
      var position = geometry.getAttribute('position');

      for (var i = 0, l = points.length; i < l; i++) {
        position.setXYZ(points[i], vector.x, vector.y, vector.z);
      }
    }
  }

  return function update() {
    geometry = this.geometry;
    pointMap = this.pointMap;
    var w = 1,
        h = 1; // we need just camera projection matrix
    // world matrix must be identity

    camera.projectionMatrix.copy(this.camera.projectionMatrix); // center / target

    setPoint('c', 0, 0, -1);
    setPoint('t', 0, 0, 1); // near

    setPoint('n1', -w, -h, -1);
    setPoint('n2', w, -h, -1);
    setPoint('n3', -w, h, -1);
    setPoint('n4', w, h, -1); // far

    setPoint('f1', -w, -h, 1);
    setPoint('f2', w, -h, 1);
    setPoint('f3', -w, h, 1);
    setPoint('f4', w, h, 1); // up

    setPoint('u1', w * 0.7, h * 1.1, -1);
    setPoint('u2', -w * 0.7, h * 1.1, -1);
    setPoint('u3', 0, h * 2, -1); // cross

    setPoint('cf1', -w, 0, 1);
    setPoint('cf2', w, 0, 1);
    setPoint('cf3', 0, -h, 1);
    setPoint('cf4', 0, h, 1);
    setPoint('cn1', -w, 0, -1);
    setPoint('cn2', w, 0, -1);
    setPoint('cn3', 0, -h, -1);
    setPoint('cn4', 0, h, -1);
    geometry.getAttribute('position').needsUpdate = true;
  };
}();
/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / http://github.com/Mugen87
 */


function BoxHelper(object, color) {
  this.object = object;
  if (color === undefined) color = 0xffff00;
  var indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
  var positions = new Float32Array(8 * 3);
  var geometry = new BufferGeometry();
  geometry.setIndex(new BufferAttribute(indices, 1));
  geometry.addAttribute('position', new BufferAttribute(positions, 3));
  LineSegments.call(this, geometry, new LineBasicMaterial({
    color: color
  }));
  this.matrixAutoUpdate = false;
  this.update();
}

BoxHelper.prototype = Object.create(LineSegments.prototype);
BoxHelper.prototype.constructor = BoxHelper;

BoxHelper.prototype.update = function () {
  var box = new Box3();
  return function update(object) {
    if (object !== undefined) {
      console.warn('THREE.BoxHelper: .update() has no longer arguments.');
    }

    if (this.object !== undefined) {
      box.setFromObject(this.object);
    }

    if (box.isEmpty()) return;
    var min = box.min;
    var max = box.max;
    /*
      5____4
    1/___0/|
    | 6__|_7
    2/___3/
    	0: max.x, max.y, max.z
    1: min.x, max.y, max.z
    2: min.x, min.y, max.z
    3: max.x, min.y, max.z
    4: max.x, max.y, min.z
    5: min.x, max.y, min.z
    6: min.x, min.y, min.z
    7: max.x, min.y, min.z
    */

    var position = this.geometry.attributes.position;
    var array = position.array;
    array[0] = max.x;
    array[1] = max.y;
    array[2] = max.z;
    array[3] = min.x;
    array[4] = max.y;
    array[5] = max.z;
    array[6] = min.x;
    array[7] = min.y;
    array[8] = max.z;
    array[9] = max.x;
    array[10] = min.y;
    array[11] = max.z;
    array[12] = max.x;
    array[13] = max.y;
    array[14] = min.z;
    array[15] = min.x;
    array[16] = max.y;
    array[17] = min.z;
    array[18] = min.x;
    array[19] = min.y;
    array[20] = min.z;
    array[21] = max.x;
    array[22] = min.y;
    array[23] = min.z;
    position.needsUpdate = true;
    this.geometry.computeBoundingSphere();
  };
}();

BoxHelper.prototype.setFromObject = function (object) {
  this.object = object;
  this.update();
  return this;
};

BoxHelper.prototype.copy = function (source) {
  LineSegments.prototype.copy.call(this, source);
  this.object = source.object;
  return this;
};

BoxHelper.prototype.clone = function () {
  return new this.constructor().copy(this);
};
/**
 * @author WestLangley / http://github.com/WestLangley
 */


function Box3Helper(box, hex) {
  this.type = 'Box3Helper';
  this.box = box;
  var color = hex !== undefined ? hex : 0xffff00;
  var indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
  var positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];
  var geometry = new BufferGeometry();
  geometry.setIndex(new BufferAttribute(indices, 1));
  geometry.addAttribute('position', new Float32BufferAttribute(positions, 3));
  LineSegments.call(this, geometry, new LineBasicMaterial({
    color: color
  }));
  this.geometry.computeBoundingSphere();
}

Box3Helper.prototype = Object.create(LineSegments.prototype);
Box3Helper.prototype.constructor = Box3Helper;

Box3Helper.prototype.updateMatrixWorld = function (force) {
  var box = this.box;
  if (box.isEmpty()) return;
  box.getCenter(this.position);
  box.getSize(this.scale);
  this.scale.multiplyScalar(0.5);
  Object3D.prototype.updateMatrixWorld.call(this, force);
};
/**
 * @author WestLangley / http://github.com/WestLangley
 */


function PlaneHelper(plane, size, hex) {
  this.type = 'PlaneHelper';
  this.plane = plane;
  this.size = size === undefined ? 1 : size;
  var color = hex !== undefined ? hex : 0xffff00;
  var positions = [1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0];
  var geometry = new BufferGeometry();
  geometry.addAttribute('position', new Float32BufferAttribute(positions, 3));
  geometry.computeBoundingSphere();
  Line.call(this, geometry, new LineBasicMaterial({
    color: color
  })); //

  var positions2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1];
  var geometry2 = new BufferGeometry();
  geometry2.addAttribute('position', new Float32BufferAttribute(positions2, 3));
  geometry2.computeBoundingSphere();
  this.add(new Mesh(geometry2, new MeshBasicMaterial({
    color: color,
    opacity: 0.2,
    transparent: true,
    depthWrite: false
  })));
}

PlaneHelper.prototype = Object.create(Line.prototype);
PlaneHelper.prototype.constructor = PlaneHelper;

PlaneHelper.prototype.updateMatrixWorld = function (force) {
  var scale = -this.plane.constant;
  if (Math.abs(scale) < 1e-8) scale = 1e-8; // sign does not matter

  this.scale.set(0.5 * this.size, 0.5 * this.size, scale);
  this.children[0].material.side = scale < 0 ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here

  this.lookAt(this.plane.normal);
  Object3D.prototype.updateMatrixWorld.call(this, force);
};
/**
 * @author WestLangley / http://github.com/WestLangley
 * @author zz85 / http://github.com/zz85
 * @author bhouston / http://clara.io
 *
 * Creates an arrow for visualizing directions
 *
 * Parameters:
 *  dir - Vector3
 *  origin - Vector3
 *  length - Number
 *  color - color in hex value
 *  headLength - Number
 *  headWidth - Number
 */


var lineGeometry, coneGeometry;

function ArrowHelper(dir, origin, length, color, headLength, headWidth) {
  // dir is assumed to be normalized
  Object3D.call(this);
  if (dir === undefined) dir = new Vector3(0, 0, 1);
  if (origin === undefined) origin = new Vector3(0, 0, 0);
  if (length === undefined) length = 1;
  if (color === undefined) color = 0xffff00;
  if (headLength === undefined) headLength = 0.2 * length;
  if (headWidth === undefined) headWidth = 0.2 * headLength;

  if (lineGeometry === undefined) {
    lineGeometry = new BufferGeometry();
    lineGeometry.addAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));
    coneGeometry = new CylinderBufferGeometry(0, 0.5, 1, 5, 1);
    coneGeometry.translate(0, -0.5, 0);
  }

  this.position.copy(origin);
  this.line = new Line(lineGeometry, new LineBasicMaterial({
    color: color
  }));
  this.line.matrixAutoUpdate = false;
  this.add(this.line);
  this.cone = new Mesh(coneGeometry, new MeshBasicMaterial({
    color: color
  }));
  this.cone.matrixAutoUpdate = false;
  this.add(this.cone);
  this.setDirection(dir);
  this.setLength(length, headLength, headWidth);
}

ArrowHelper.prototype = Object.create(Object3D.prototype);
ArrowHelper.prototype.constructor = ArrowHelper;

ArrowHelper.prototype.setDirection = function () {
  var axis = new Vector3();
  var radians;
  return function setDirection(dir) {
    // dir is assumed to be normalized
    if (dir.y > 0.99999) {
      this.quaternion.set(0, 0, 0, 1);
    } else if (dir.y < -0.99999) {
      this.quaternion.set(1, 0, 0, 0);
    } else {
      axis.set(dir.z, 0, -dir.x).normalize();
      radians = Math.acos(dir.y);
      this.quaternion.setFromAxisAngle(axis, radians);
    }
  };
}();

ArrowHelper.prototype.setLength = function (length, headLength, headWidth) {
  if (headLength === undefined) headLength = 0.2 * length;
  if (headWidth === undefined) headWidth = 0.2 * headLength;
  this.line.scale.set(1, Math.max(0, length - headLength), 1);
  this.line.updateMatrix();
  this.cone.scale.set(headWidth, headLength, headWidth);
  this.cone.position.y = length;
  this.cone.updateMatrix();
};

ArrowHelper.prototype.setColor = function (color) {
  this.line.material.color.copy(color);
  this.cone.material.color.copy(color);
};

ArrowHelper.prototype.copy = function (source) {
  Object3D.prototype.copy.call(this, source, false);
  this.line.copy(source.line);
  this.cone.copy(source.cone);
  return this;
};

ArrowHelper.prototype.clone = function () {
  return new this.constructor().copy(this);
};
/**
 * @author sroucheray / http://sroucheray.org/
 * @author mrdoob / http://mrdoob.com/
 */


function AxesHelper(size) {
  size = size || 1;
  var vertices = [0, 0, 0, size, 0, 0, 0, 0, 0, 0, size, 0, 0, 0, 0, 0, 0, size];
  var colors = [1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1];
  var geometry = new BufferGeometry();
  geometry.addAttribute('position', new Float32BufferAttribute(vertices, 3));
  geometry.addAttribute('color', new Float32BufferAttribute(colors, 3));
  var material = new LineBasicMaterial({
    vertexColors: VertexColors
  });
  LineSegments.call(this, geometry, material);
}

AxesHelper.prototype = Object.create(LineSegments.prototype);
AxesHelper.prototype.constructor = AxesHelper;
/**
 * @author mrdoob / http://mrdoob.com/
 */

function Face4(a, b, c, d, normal, color, materialIndex) {
  console.warn('THREE.Face4 has been removed. A THREE.Face3 will be created instead.');
  return new Face3(a, b, c, normal, color, materialIndex);
}

var LineStrip = 0;
exports.LineStrip = LineStrip;
var LinePieces = 1;
exports.LinePieces = LinePieces;

function MeshFaceMaterial(materials) {
  console.warn('THREE.MeshFaceMaterial has been removed. Use an Array instead.');
  return materials;
}

function MultiMaterial(materials) {
  if (materials === undefined) materials = [];
  console.warn('THREE.MultiMaterial has been removed. Use an Array instead.');
  materials.isMultiMaterial = true;
  materials.materials = materials;

  materials.clone = function () {
    return materials.slice();
  };

  return materials;
}

function PointCloud(geometry, material) {
  console.warn('THREE.PointCloud has been renamed to THREE.Points.');
  return new Points(geometry, material);
}

function Particle(material) {
  console.warn('THREE.Particle has been renamed to THREE.Sprite.');
  return new Sprite(material);
}

function ParticleSystem(geometry, material) {
  console.warn('THREE.ParticleSystem has been renamed to THREE.Points.');
  return new Points(geometry, material);
}

function PointCloudMaterial(parameters) {
  console.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');
  return new PointsMaterial(parameters);
}

function ParticleBasicMaterial(parameters) {
  console.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');
  return new PointsMaterial(parameters);
}

function ParticleSystemMaterial(parameters) {
  console.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');
  return new PointsMaterial(parameters);
}

function Vertex(x, y, z) {
  console.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');
  return new Vector3(x, y, z);
} //


function DynamicBufferAttribute(array, itemSize) {
  console.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.');
  return new BufferAttribute(array, itemSize).setDynamic(true);
}

function Int8Attribute(array, itemSize) {
  console.warn('THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.');
  return new Int8BufferAttribute(array, itemSize);
}

function Uint8Attribute(array, itemSize) {
  console.warn('THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.');
  return new Uint8BufferAttribute(array, itemSize);
}

function Uint8ClampedAttribute(array, itemSize) {
  console.warn('THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.');
  return new Uint8ClampedBufferAttribute(array, itemSize);
}

function Int16Attribute(array, itemSize) {
  console.warn('THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.');
  return new Int16BufferAttribute(array, itemSize);
}

function Uint16Attribute(array, itemSize) {
  console.warn('THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.');
  return new Uint16BufferAttribute(array, itemSize);
}

function Int32Attribute(array, itemSize) {
  console.warn('THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.');
  return new Int32BufferAttribute(array, itemSize);
}

function Uint32Attribute(array, itemSize) {
  console.warn('THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.');
  return new Uint32BufferAttribute(array, itemSize);
}

function Float32Attribute(array, itemSize) {
  console.warn('THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.');
  return new Float32BufferAttribute(array, itemSize);
}

function Float64Attribute(array, itemSize) {
  console.warn('THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.');
  return new Float64BufferAttribute(array, itemSize);
} //


Curve.create = function (construct, getPoint) {
  console.log('THREE.Curve.create() has been deprecated');
  construct.prototype = Object.create(Curve.prototype);
  construct.prototype.constructor = construct;
  construct.prototype.getPoint = getPoint;
  return construct;
}; //


Object.assign(CurvePath.prototype, {
  createPointsGeometry: function (divisions) {
    console.warn('THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.'); // generate geometry from path points (for Line or Points objects)

    var pts = this.getPoints(divisions);
    return this.createGeometry(pts);
  },
  createSpacedPointsGeometry: function (divisions) {
    console.warn('THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.'); // generate geometry from equidistant sampling along the path

    var pts = this.getSpacedPoints(divisions);
    return this.createGeometry(pts);
  },
  createGeometry: function (points) {
    console.warn('THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.');
    var geometry = new Geometry();

    for (var i = 0, l = points.length; i < l; i++) {
      var point = points[i];
      geometry.vertices.push(new Vector3(point.x, point.y, point.z || 0));
    }

    return geometry;
  }
}); //

Object.assign(Path.prototype, {
  fromPoints: function (points) {
    console.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');
    this.setFromPoints(points);
  }
}); //

function ClosedSplineCurve3(points) {
  console.warn('THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.');
  CatmullRomCurve3.call(this, points);
  this.type = 'catmullrom';
  this.closed = true;
}

ClosedSplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype); //

function SplineCurve3(points) {
  console.warn('THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.');
  CatmullRomCurve3.call(this, points);
  this.type = 'catmullrom';
}

SplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype); //

function Spline(points) {
  console.warn('THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.');
  CatmullRomCurve3.call(this, points);
  this.type = 'catmullrom';
}

Spline.prototype = Object.create(CatmullRomCurve3.prototype);
Object.assign(Spline.prototype, {
  initFromArray: function ()
  /* a */
  {
    console.error('THREE.Spline: .initFromArray() has been removed.');
  },
  getControlPointsArray: function ()
  /* optionalTarget */
  {
    console.error('THREE.Spline: .getControlPointsArray() has been removed.');
  },
  reparametrizeByArcLength: function ()
  /* samplingCoef */
  {
    console.error('THREE.Spline: .reparametrizeByArcLength() has been removed.');
  }
}); //

function AxisHelper(size) {
  console.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.');
  return new AxesHelper(size);
}

function BoundingBoxHelper(object, color) {
  console.warn('THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.');
  return new BoxHelper(object, color);
}

function EdgesHelper(object, hex) {
  console.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.');
  return new LineSegments(new EdgesGeometry(object.geometry), new LineBasicMaterial({
    color: hex !== undefined ? hex : 0xffffff
  }));
}

GridHelper.prototype.setColors = function () {
  console.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');
};

SkeletonHelper.prototype.update = function () {
  console.error('THREE.SkeletonHelper: update() no longer needs to be called.');
};

function WireframeHelper(object, hex) {
  console.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.');
  return new LineSegments(new WireframeGeometry(object.geometry), new LineBasicMaterial({
    color: hex !== undefined ? hex : 0xffffff
  }));
} //


Object.assign(Loader.prototype, {
  extractUrlBase: function (url) {
    console.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');
    return LoaderUtils.extractUrlBase(url);
  }
});

function XHRLoader(manager) {
  console.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.');
  return new FileLoader(manager);
}

function BinaryTextureLoader(manager) {
  console.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.');
  return new DataTextureLoader(manager);
}

Object.assign(ObjectLoader.prototype, {
  setTexturePath: function (value) {
    console.warn('THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().');
    return this.setResourcePath(value);
  }
}); //

Object.assign(Box2.prototype, {
  center: function (optionalTarget) {
    console.warn('THREE.Box2: .center() has been renamed to .getCenter().');
    return this.getCenter(optionalTarget);
  },
  empty: function () {
    console.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');
    return this.isEmpty();
  },
  isIntersectionBox: function (box) {
    console.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');
    return this.intersectsBox(box);
  },
  size: function (optionalTarget) {
    console.warn('THREE.Box2: .size() has been renamed to .getSize().');
    return this.getSize(optionalTarget);
  }
});
Object.assign(Box3.prototype, {
  center: function (optionalTarget) {
    console.warn('THREE.Box3: .center() has been renamed to .getCenter().');
    return this.getCenter(optionalTarget);
  },
  empty: function () {
    console.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');
    return this.isEmpty();
  },
  isIntersectionBox: function (box) {
    console.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');
    return this.intersectsBox(box);
  },
  isIntersectionSphere: function (sphere) {
    console.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');
    return this.intersectsSphere(sphere);
  },
  size: function (optionalTarget) {
    console.warn('THREE.Box3: .size() has been renamed to .getSize().');
    return this.getSize(optionalTarget);
  }
});

Line3.prototype.center = function (optionalTarget) {
  console.warn('THREE.Line3: .center() has been renamed to .getCenter().');
  return this.getCenter(optionalTarget);
};

Object.assign(_Math, {
  random16: function () {
    console.warn('THREE.Math: .random16() has been deprecated. Use Math.random() instead.');
    return Math.random();
  },
  nearestPowerOfTwo: function (value) {
    console.warn('THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().');
    return _Math.floorPowerOfTwo(value);
  },
  nextPowerOfTwo: function (value) {
    console.warn('THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().');
    return _Math.ceilPowerOfTwo(value);
  }
});
Object.assign(Matrix3.prototype, {
  flattenToArrayOffset: function (array, offset) {
    console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
    return this.toArray(array, offset);
  },
  multiplyVector3: function (vector) {
    console.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');
    return vector.applyMatrix3(this);
  },
  multiplyVector3Array: function ()
  /* a */
  {
    console.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');
  },
  applyToBuffer: function (buffer
  /*, offset, length */
  ) {
    console.warn('THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.');
    return this.applyToBufferAttribute(buffer);
  },
  applyToVector3Array: function ()
  /* array, offset, length */
  {
    console.error('THREE.Matrix3: .applyToVector3Array() has been removed.');
  }
});
Object.assign(Matrix4.prototype, {
  extractPosition: function (m) {
    console.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');
    return this.copyPosition(m);
  },
  flattenToArrayOffset: function (array, offset) {
    console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
    return this.toArray(array, offset);
  },
  getPosition: function () {
    var v1;
    return function getPosition() {
      if (v1 === undefined) v1 = new Vector3();
      console.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');
      return v1.setFromMatrixColumn(this, 3);
    };
  }(),
  setRotationFromQuaternion: function (q) {
    console.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');
    return this.makeRotationFromQuaternion(q);
  },
  multiplyToArray: function () {
    console.warn('THREE.Matrix4: .multiplyToArray() has been removed.');
  },
  multiplyVector3: function (vector) {
    console.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');
    return vector.applyMatrix4(this);
  },
  multiplyVector4: function (vector) {
    console.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');
    return vector.applyMatrix4(this);
  },
  multiplyVector3Array: function ()
  /* a */
  {
    console.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');
  },
  rotateAxis: function (v) {
    console.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');
    v.transformDirection(this);
  },
  crossVector: function (vector) {
    console.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');
    return vector.applyMatrix4(this);
  },
  translate: function () {
    console.error('THREE.Matrix4: .translate() has been removed.');
  },
  rotateX: function () {
    console.error('THREE.Matrix4: .rotateX() has been removed.');
  },
  rotateY: function () {
    console.error('THREE.Matrix4: .rotateY() has been removed.');
  },
  rotateZ: function () {
    console.error('THREE.Matrix4: .rotateZ() has been removed.');
  },
  rotateByAxis: function () {
    console.error('THREE.Matrix4: .rotateByAxis() has been removed.');
  },
  applyToBuffer: function (buffer
  /*, offset, length */
  ) {
    console.warn('THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.');
    return this.applyToBufferAttribute(buffer);
  },
  applyToVector3Array: function ()
  /* array, offset, length */
  {
    console.error('THREE.Matrix4: .applyToVector3Array() has been removed.');
  },
  makeFrustum: function (left, right, bottom, top, near, far) {
    console.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');
    return this.makePerspective(left, right, top, bottom, near, far);
  }
});

Plane.prototype.isIntersectionLine = function (line) {
  console.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');
  return this.intersectsLine(line);
};

Quaternion.prototype.multiplyVector3 = function (vector) {
  console.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');
  return vector.applyQuaternion(this);
};

Object.assign(Ray.prototype, {
  isIntersectionBox: function (box) {
    console.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');
    return this.intersectsBox(box);
  },
  isIntersectionPlane: function (plane) {
    console.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');
    return this.intersectsPlane(plane);
  },
  isIntersectionSphere: function (sphere) {
    console.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');
    return this.intersectsSphere(sphere);
  }
});
Object.assign(Triangle.prototype, {
  area: function () {
    console.warn('THREE.Triangle: .area() has been renamed to .getArea().');
    return this.getArea();
  },
  barycoordFromPoint: function (point, target) {
    console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');
    return this.getBarycoord(point, target);
  },
  midpoint: function (target) {
    console.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');
    return this.getMidpoint(target);
  },
  normal: function (target) {
    console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');
    return this.getNormal(target);
  },
  plane: function (target) {
    console.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');
    return this.getPlane(target);
  }
});
Object.assign(Triangle, {
  barycoordFromPoint: function (point, a, b, c, target) {
    console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');
    return Triangle.getBarycoord(point, a, b, c, target);
  },
  normal: function (a, b, c, target) {
    console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');
    return Triangle.getNormal(a, b, c, target);
  }
});
Object.assign(Shape.prototype, {
  extractAllPoints: function (divisions) {
    console.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');
    return this.extractPoints(divisions);
  },
  extrude: function (options) {
    console.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');
    return new ExtrudeGeometry(this, options);
  },
  makeGeometry: function (options) {
    console.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');
    return new ShapeGeometry(this, options);
  }
});
Object.assign(Vector2.prototype, {
  fromAttribute: function (attribute, index, offset) {
    console.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');
    return this.fromBufferAttribute(attribute, index, offset);
  },
  distanceToManhattan: function (v) {
    console.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');
    return this.manhattanDistanceTo(v);
  },
  lengthManhattan: function () {
    console.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');
    return this.manhattanLength();
  }
});
Object.assign(Vector3.prototype, {
  setEulerFromRotationMatrix: function () {
    console.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');
  },
  setEulerFromQuaternion: function () {
    console.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');
  },
  getPositionFromMatrix: function (m) {
    console.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');
    return this.setFromMatrixPosition(m);
  },
  getScaleFromMatrix: function (m) {
    console.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');
    return this.setFromMatrixScale(m);
  },
  getColumnFromMatrix: function (index, matrix) {
    console.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');
    return this.setFromMatrixColumn(matrix, index);
  },
  applyProjection: function (m) {
    console.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');
    return this.applyMatrix4(m);
  },
  fromAttribute: function (attribute, index, offset) {
    console.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');
    return this.fromBufferAttribute(attribute, index, offset);
  },
  distanceToManhattan: function (v) {
    console.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');
    return this.manhattanDistanceTo(v);
  },
  lengthManhattan: function () {
    console.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');
    return this.manhattanLength();
  }
});
Object.assign(Vector4.prototype, {
  fromAttribute: function (attribute, index, offset) {
    console.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');
    return this.fromBufferAttribute(attribute, index, offset);
  },
  lengthManhattan: function () {
    console.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');
    return this.manhattanLength();
  }
}); //

Object.assign(Geometry.prototype, {
  computeTangents: function () {
    console.error('THREE.Geometry: .computeTangents() has been removed.');
  },
  computeLineDistances: function () {
    console.error('THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.');
  }
});
Object.assign(Object3D.prototype, {
  getChildByName: function (name) {
    console.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');
    return this.getObjectByName(name);
  },
  renderDepth: function () {
    console.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');
  },
  translate: function (distance, axis) {
    console.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');
    return this.translateOnAxis(axis, distance);
  },
  getWorldRotation: function () {
    console.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');
  }
});
Object.defineProperties(Object3D.prototype, {
  eulerOrder: {
    get: function () {
      console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');
      return this.rotation.order;
    },
    set: function (value) {
      console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');
      this.rotation.order = value;
    }
  },
  useQuaternion: {
    get: function () {
      console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');
    },
    set: function () {
      console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');
    }
  }
});
Object.defineProperties(LOD.prototype, {
  objects: {
    get: function () {
      console.warn('THREE.LOD: .objects has been renamed to .levels.');
      return this.levels;
    }
  }
});
Object.defineProperty(Skeleton.prototype, 'useVertexTexture', {
  get: function () {
    console.warn('THREE.Skeleton: useVertexTexture has been removed.');
  },
  set: function () {
    console.warn('THREE.Skeleton: useVertexTexture has been removed.');
  }
});

SkinnedMesh.prototype.initBones = function () {
  console.error('THREE.SkinnedMesh: initBones() has been removed.');
};

Object.defineProperty(Curve.prototype, '__arcLengthDivisions', {
  get: function () {
    console.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.');
    return this.arcLengthDivisions;
  },
  set: function (value) {
    console.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.');
    this.arcLengthDivisions = value;
  }
}); //

PerspectiveCamera.prototype.setLens = function (focalLength, filmGauge) {
  console.warn("THREE.PerspectiveCamera.setLens is deprecated. " + "Use .setFocalLength and .filmGauge for a photographic setup.");
  if (filmGauge !== undefined) this.filmGauge = filmGauge;
  this.setFocalLength(focalLength);
}; //


Object.defineProperties(Light.prototype, {
  onlyShadow: {
    set: function () {
      console.warn('THREE.Light: .onlyShadow has been removed.');
    }
  },
  shadowCameraFov: {
    set: function (value) {
      console.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');
      this.shadow.camera.fov = value;
    }
  },
  shadowCameraLeft: {
    set: function (value) {
      console.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');
      this.shadow.camera.left = value;
    }
  },
  shadowCameraRight: {
    set: function (value) {
      console.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');
      this.shadow.camera.right = value;
    }
  },
  shadowCameraTop: {
    set: function (value) {
      console.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');
      this.shadow.camera.top = value;
    }
  },
  shadowCameraBottom: {
    set: function (value) {
      console.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');
      this.shadow.camera.bottom = value;
    }
  },
  shadowCameraNear: {
    set: function (value) {
      console.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');
      this.shadow.camera.near = value;
    }
  },
  shadowCameraFar: {
    set: function (value) {
      console.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');
      this.shadow.camera.far = value;
    }
  },
  shadowCameraVisible: {
    set: function () {
      console.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');
    }
  },
  shadowBias: {
    set: function (value) {
      console.warn('THREE.Light: .shadowBias is now .shadow.bias.');
      this.shadow.bias = value;
    }
  },
  shadowDarkness: {
    set: function () {
      console.warn('THREE.Light: .shadowDarkness has been removed.');
    }
  },
  shadowMapWidth: {
    set: function (value) {
      console.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');
      this.shadow.mapSize.width = value;
    }
  },
  shadowMapHeight: {
    set: function (value) {
      console.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');
      this.shadow.mapSize.height = value;
    }
  }
}); //

Object.defineProperties(BufferAttribute.prototype, {
  length: {
    get: function () {
      console.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');
      return this.array.length;
    }
  },
  copyIndicesArray: function ()
  /* indices */
  {
    console.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');
  }
});
Object.assign(BufferGeometry.prototype, {
  addIndex: function (index) {
    console.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');
    this.setIndex(index);
  },
  addDrawCall: function (start, count, indexOffset) {
    if (indexOffset !== undefined) {
      console.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');
    }

    console.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');
    this.addGroup(start, count);
  },
  clearDrawCalls: function () {
    console.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');
    this.clearGroups();
  },
  computeTangents: function () {
    console.warn('THREE.BufferGeometry: .computeTangents() has been removed.');
  },
  computeOffsets: function () {
    console.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');
  }
});
Object.defineProperties(BufferGeometry.prototype, {
  drawcalls: {
    get: function () {
      console.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');
      return this.groups;
    }
  },
  offsets: {
    get: function () {
      console.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');
      return this.groups;
    }
  }
}); //

Object.assign(ExtrudeBufferGeometry.prototype, {
  getArrays: function () {
    console.error('THREE.ExtrudeBufferGeometry: .getArrays() has been removed.');
  },
  addShapeList: function () {
    console.error('THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.');
  },
  addShape: function () {
    console.error('THREE.ExtrudeBufferGeometry: .addShape() has been removed.');
  }
}); //

Object.defineProperties(Uniform.prototype, {
  dynamic: {
    set: function () {
      console.warn('THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.');
    }
  },
  onUpdate: {
    value: function () {
      console.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');
      return this;
    }
  }
}); //

Object.defineProperties(Material.prototype, {
  wrapAround: {
    get: function () {
      console.warn('THREE.Material: .wrapAround has been removed.');
    },
    set: function () {
      console.warn('THREE.Material: .wrapAround has been removed.');
    }
  },
  overdraw: {
    get: function () {
      console.warn('THREE.Material: .overdraw has been removed.');
    },
    set: function () {
      console.warn('THREE.Material: .overdraw has been removed.');
    }
  },
  wrapRGB: {
    get: function () {
      console.warn('THREE.Material: .wrapRGB has been removed.');
      return new Color();
    }
  },
  shading: {
    get: function () {
      console.error('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');
    },
    set: function (value) {
      console.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');
      this.flatShading = value === FlatShading;
    }
  }
});
Object.defineProperties(MeshPhongMaterial.prototype, {
  metal: {
    get: function () {
      console.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.');
      return false;
    },
    set: function () {
      console.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead');
    }
  }
});
Object.defineProperties(ShaderMaterial.prototype, {
  derivatives: {
    get: function () {
      console.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');
      return this.extensions.derivatives;
    },
    set: function (value) {
      console.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');
      this.extensions.derivatives = value;
    }
  }
}); //

Object.assign(WebGLRenderer.prototype, {
  clearTarget: function (renderTarget, color, depth, stencil) {
    console.warn('THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.');
    this.setRenderTarget(renderTarget);
    this.clear(color, depth, stencil);
  },
  animate: function (callback) {
    console.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');
    this.setAnimationLoop(callback);
  },
  getCurrentRenderTarget: function () {
    console.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');
    return this.getRenderTarget();
  },
  getMaxAnisotropy: function () {
    console.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');
    return this.capabilities.getMaxAnisotropy();
  },
  getPrecision: function () {
    console.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');
    return this.capabilities.precision;
  },
  resetGLState: function () {
    console.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');
    return this.state.reset();
  },
  supportsFloatTextures: function () {
    console.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).');
    return this.extensions.get('OES_texture_float');
  },
  supportsHalfFloatTextures: function () {
    console.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).');
    return this.extensions.get('OES_texture_half_float');
  },
  supportsStandardDerivatives: function () {
    console.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).');
    return this.extensions.get('OES_standard_derivatives');
  },
  supportsCompressedTextureS3TC: function () {
    console.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).');
    return this.extensions.get('WEBGL_compressed_texture_s3tc');
  },
  supportsCompressedTexturePVRTC: function () {
    console.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).');
    return this.extensions.get('WEBGL_compressed_texture_pvrtc');
  },
  supportsBlendMinMax: function () {
    console.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).');
    return this.extensions.get('EXT_blend_minmax');
  },
  supportsVertexTextures: function () {
    console.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');
    return this.capabilities.vertexTextures;
  },
  supportsInstancedArrays: function () {
    console.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).');
    return this.extensions.get('ANGLE_instanced_arrays');
  },
  enableScissorTest: function (boolean) {
    console.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');
    this.setScissorTest(boolean);
  },
  initMaterial: function () {
    console.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');
  },
  addPrePlugin: function () {
    console.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');
  },
  addPostPlugin: function () {
    console.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');
  },
  updateShadowMap: function () {
    console.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');
  },
  setFaceCulling: function () {
    console.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');
  }
});
Object.defineProperties(WebGLRenderer.prototype, {
  shadowMapEnabled: {
    get: function () {
      return this.shadowMap.enabled;
    },
    set: function (value) {
      console.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');
      this.shadowMap.enabled = value;
    }
  },
  shadowMapType: {
    get: function () {
      return this.shadowMap.type;
    },
    set: function (value) {
      console.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');
      this.shadowMap.type = value;
    }
  },
  shadowMapCullFace: {
    get: function () {
      console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');
      return undefined;
    },
    set: function ()
    /* value */
    {
      console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');
    }
  }
});
Object.defineProperties(WebGLShadowMap.prototype, {
  cullFace: {
    get: function () {
      console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');
      return undefined;
    },
    set: function ()
    /* cullFace */
    {
      console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');
    }
  },
  renderReverseSided: {
    get: function () {
      console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');
      return undefined;
    },
    set: function () {
      console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');
    }
  },
  renderSingleSided: {
    get: function () {
      console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');
      return undefined;
    },
    set: function () {
      console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');
    }
  }
}); //

Object.defineProperties(WebGLRenderTargetCube.prototype, {
  activeCubeFace: {
    set: function ()
    /* value */
    {
      console.warn('THREE.WebGLRenderTargetCube: .activeCubeFace has been removed. It is now the second parameter of WebGLRenderer.setRenderTarget().');
    }
  },
  activeMipMapLevel: {
    set: function ()
    /* value */
    {
      console.warn('THREE.WebGLRenderTargetCube: .activeMipMapLevel has been removed. It is now the third parameter of WebGLRenderer.setRenderTarget().');
    }
  }
}); //

Object.defineProperties(WebGLRenderTarget.prototype, {
  wrapS: {
    get: function () {
      console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');
      return this.texture.wrapS;
    },
    set: function (value) {
      console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');
      this.texture.wrapS = value;
    }
  },
  wrapT: {
    get: function () {
      console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');
      return this.texture.wrapT;
    },
    set: function (value) {
      console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');
      this.texture.wrapT = value;
    }
  },
  magFilter: {
    get: function () {
      console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');
      return this.texture.magFilter;
    },
    set: function (value) {
      console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');
      this.texture.magFilter = value;
    }
  },
  minFilter: {
    get: function () {
      console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');
      return this.texture.minFilter;
    },
    set: function (value) {
      console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');
      this.texture.minFilter = value;
    }
  },
  anisotropy: {
    get: function () {
      console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');
      return this.texture.anisotropy;
    },
    set: function (value) {
      console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');
      this.texture.anisotropy = value;
    }
  },
  offset: {
    get: function () {
      console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');
      return this.texture.offset;
    },
    set: function (value) {
      console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');
      this.texture.offset = value;
    }
  },
  repeat: {
    get: function () {
      console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');
      return this.texture.repeat;
    },
    set: function (value) {
      console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');
      this.texture.repeat = value;
    }
  },
  format: {
    get: function () {
      console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');
      return this.texture.format;
    },
    set: function (value) {
      console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');
      this.texture.format = value;
    }
  },
  type: {
    get: function () {
      console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');
      return this.texture.type;
    },
    set: function (value) {
      console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');
      this.texture.type = value;
    }
  },
  generateMipmaps: {
    get: function () {
      console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');
      return this.texture.generateMipmaps;
    },
    set: function (value) {
      console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');
      this.texture.generateMipmaps = value;
    }
  }
}); //

Object.defineProperties(WebVRManager.prototype, {
  standing: {
    set: function ()
    /* value */
    {
      console.warn('THREE.WebVRManager: .standing has been removed.');
    }
  },
  userHeight: {
    set: function ()
    /* value */
    {
      console.warn('THREE.WebVRManager: .userHeight has been removed.');
    }
  }
}); //

Audio.prototype.load = function (file) {
  console.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');
  var scope = this;
  var audioLoader = new AudioLoader();
  audioLoader.load(file, function (buffer) {
    scope.setBuffer(buffer);
  });
  return this;
};

AudioAnalyser.prototype.getData = function () {
  console.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');
  return this.getFrequencyData();
}; //


CubeCamera.prototype.updateCubeMap = function (renderer, scene) {
  console.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');
  return this.update(renderer, scene);
}; //


var GeometryUtils = {
  merge: function (geometry1, geometry2, materialIndexOffset) {
    console.warn('THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.');
    var matrix;

    if (geometry2.isMesh) {
      geometry2.matrixAutoUpdate && geometry2.updateMatrix();
      matrix = geometry2.matrix;
      geometry2 = geometry2.geometry;
    }

    geometry1.merge(geometry2, matrix, materialIndexOffset);
  },
  center: function (geometry) {
    console.warn('THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.');
    return geometry.center();
  }
};
exports.GeometryUtils = GeometryUtils;
ImageUtils.crossOrigin = undefined;

ImageUtils.loadTexture = function (url, mapping, onLoad, onError) {
  console.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');
  var loader = new TextureLoader();
  loader.setCrossOrigin(this.crossOrigin);
  var texture = loader.load(url, onLoad, undefined, onError);
  if (mapping) texture.mapping = mapping;
  return texture;
};

ImageUtils.loadTextureCube = function (urls, mapping, onLoad, onError) {
  console.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');
  var loader = new CubeTextureLoader();
  loader.setCrossOrigin(this.crossOrigin);
  var texture = loader.load(urls, onLoad, undefined, onError);
  if (mapping) texture.mapping = mapping;
  return texture;
};

ImageUtils.loadCompressedTexture = function () {
  console.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');
};

ImageUtils.loadCompressedTextureCube = function () {
  console.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');
}; //


function Projector() {
  console.error('THREE.Projector has been moved to /examples/js/renderers/Projector.js.');

  this.projectVector = function (vector, camera) {
    console.warn('THREE.Projector: .projectVector() is now vector.project().');
    vector.project(camera);
  };

  this.unprojectVector = function (vector, camera) {
    console.warn('THREE.Projector: .unprojectVector() is now vector.unproject().');
    vector.unproject(camera);
  };

  this.pickingRay = function () {
    console.error('THREE.Projector: .pickingRay() is now raycaster.setFromCamera().');
  };
} //


function CanvasRenderer() {
  console.error('THREE.CanvasRenderer has been removed');
} //


function JSONLoader() {
  console.error('THREE.JSONLoader has been removed.');
} //


var SceneUtils = {
  createMultiMaterialObject: function ()
  /* geometry, materials */
  {
    console.error('THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js');
  },
  detach: function ()
  /* child, parent, scene */
  {
    console.error('THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js');
  },
  attach: function ()
  /* child, scene, parent */
  {
    console.error('THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js');
  }
}; //

exports.SceneUtils = SceneUtils;

function LensFlare() {
  console.error('THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js');
}
},{}],"src/js/TopoViewer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TopoViewer = void 0;

var _three = require("three");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var OrbitControls = function OrbitControls(object, domElement) {
  this.object = object;
  this.domElement = domElement !== undefined ? domElement : document; // Set to false to disable this control

  this.enabled = true; // "target" sets the location of focus, where the object orbits around

  this.target = new _three.Vector3(); // How far you can dolly in and out ( PerspectiveCamera only )

  this.minDistance = 0;
  this.maxDistance = Infinity; // How far you can zoom in and out ( OrthographicCamera only )

  this.minZoom = 0;
  this.maxZoom = Infinity; // How far you can orbit vertically, upper and lower limits.
  // Range is 0 to Math.PI radians.

  this.minPolarAngle = 0; // radians

  this.maxPolarAngle = Math.PI; // radians
  // How far you can orbit horizontally, upper and lower limits.
  // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].

  this.minAzimuthAngle = -Infinity; // radians

  this.maxAzimuthAngle = Infinity; // radians
  // Set to true to enable damping (inertia)
  // If damping is enabled, you must call controls.update() in your animation loop

  this.enableDamping = false;
  this.dampingFactor = 0.25; // This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
  // Set to false to disable zooming

  this.enableZoom = true;
  this.zoomSpeed = 1.0; // Set to false to disable rotating

  this.enableRotate = true;
  this.rotateSpeed = 1.0; // Set to false to disable panning

  this.enablePan = true;
  this.panSpeed = 1.0;
  this.screenSpacePanning = false; // if true, pan in screen-space

  this.keyPanSpeed = 7.0; // pixels moved per arrow key push
  // Set to true to automatically rotate around the target
  // If auto-rotate is enabled, you must call controls.update() in your animation loop

  this.autoRotate = false;
  this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60
  // Set to false to disable use of the keys

  this.enableKeys = true; // The four arrow keys

  this.keys = {
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    BOTTOM: 40
  }; // Mouse buttons

  this.mouseButtons = {
    LEFT: _three.MOUSE.LEFT,
    MIDDLE: _three.MOUSE.MIDDLE,
    RIGHT: _three.MOUSE.RIGHT
  }; // for reset

  this.target0 = this.target.clone();
  this.position0 = this.object.position.clone();
  this.zoom0 = this.object.zoom; //
  // public methods
  //

  this.getPolarAngle = function () {
    return spherical.phi;
  };

  this.getAzimuthalAngle = function () {
    return spherical.theta;
  };

  this.saveState = function () {
    scope.target0.copy(scope.target);
    scope.position0.copy(scope.object.position);
    scope.zoom0 = scope.object.zoom;
  };

  this.reset = function () {
    scope.target.copy(scope.target0);
    scope.object.position.copy(scope.position0);
    scope.object.zoom = scope.zoom0;
    scope.object.updateProjectionMatrix();
    scope.dispatchEvent(changeEvent);
    scope.update();
    state = STATE.NONE;
  }; // this method is exposed, but perhaps it would be better if we can make it private...


  this.update = function () {
    var offset = new _three.Vector3(); // so camera.up is the orbit axis

    var quat = new _three.Quaternion().setFromUnitVectors(object.up, new _three.Vector3(0, 1, 0));
    var quatInverse = quat.clone().inverse();
    var lastPosition = new _three.Vector3();
    var lastQuaternion = new _three.Quaternion();
    return function update() {
      var position = scope.object.position;
      offset.copy(position).sub(scope.target); // rotate offset to "y-axis-is-up" space

      offset.applyQuaternion(quat); // angle from z-axis around y-axis

      spherical.setFromVector3(offset);

      if (scope.autoRotate && state === STATE.NONE) {
        rotateLeft(getAutoRotationAngle());
      }

      spherical.theta += sphericalDelta.theta;
      spherical.phi += sphericalDelta.phi; // restrict theta to be between desired limits

      spherical.theta = Math.max(scope.minAzimuthAngle, Math.min(scope.maxAzimuthAngle, spherical.theta)); // restrict phi to be between desired limits

      spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));
      spherical.makeSafe();
      spherical.radius *= scale; // restrict radius to be between desired limits

      spherical.radius = Math.max(scope.minDistance, Math.min(scope.maxDistance, spherical.radius)); // move target to panned location

      scope.target.add(panOffset);
      offset.setFromSpherical(spherical); // rotate offset back to "camera-up-vector-is-up" space

      offset.applyQuaternion(quatInverse);
      position.copy(scope.target).add(offset);
      scope.object.lookAt(scope.target);

      if (scope.enableDamping === true) {
        sphericalDelta.theta *= 1 - scope.dampingFactor;
        sphericalDelta.phi *= 1 - scope.dampingFactor;
        panOffset.multiplyScalar(1 - scope.dampingFactor);
      } else {
        sphericalDelta.set(0, 0, 0);
        panOffset.set(0, 0, 0);
      }

      scale = 1; // update condition is:
      // min(camera displacement, camera rotation in radians)^2 > EPS
      // using small-angle approximation cos(x/2) = 1 - x^2 / 8

      if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {
        scope.dispatchEvent(changeEvent);
        lastPosition.copy(scope.object.position);
        lastQuaternion.copy(scope.object.quaternion);
        zoomChanged = false;
        return true;
      }

      return false;
    };
  }();

  this.dispose = function () {
    scope.domElement.removeEventListener('contextmenu', onContextMenu, false);
    scope.domElement.removeEventListener('mousedown', onMouseDown, false);
    scope.domElement.removeEventListener('wheel', onMouseWheel, false);
    scope.domElement.removeEventListener('touchstart', onTouchStart, false);
    scope.domElement.removeEventListener('touchend', onTouchEnd, false);
    scope.domElement.removeEventListener('touchmove', onTouchMove, false);
    document.removeEventListener('mousemove', onMouseMove, false);
    document.removeEventListener('mouseup', onMouseUp, false);
    window.removeEventListener('keydown', onKeyDown, false); //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?
  }; //
  // internals
  //


  var scope = this;
  var changeEvent = {
    type: 'change'
  };
  var startEvent = {
    type: 'start'
  };
  var endEvent = {
    type: 'end'
  };
  var STATE = {
    NONE: -1,
    ROTATE: 0,
    DOLLY: 1,
    PAN: 2,
    TOUCH_ROTATE: 3,
    TOUCH_DOLLY_PAN: 4
  };
  var state = STATE.NONE;
  var EPS = 0.000001; // current position in spherical coordinates

  var spherical = new _three.Spherical();
  var sphericalDelta = new _three.Spherical();
  var scale = 1;
  var panOffset = new _three.Vector3();
  var zoomChanged = false;
  var rotateStart = new _three.Vector2();
  var rotateEnd = new _three.Vector2();
  var rotateDelta = new _three.Vector2();
  var panStart = new _three.Vector2();
  var panEnd = new _three.Vector2();
  var panDelta = new _three.Vector2();
  var dollyStart = new _three.Vector2();
  var dollyEnd = new _three.Vector2();
  var dollyDelta = new _three.Vector2();

  function getAutoRotationAngle() {
    return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;
  }

  function getZoomScale() {
    return Math.pow(0.95, scope.zoomSpeed);
  }

  function rotateLeft(angle) {
    sphericalDelta.theta -= angle;
  }

  function rotateUp(angle) {
    sphericalDelta.phi -= angle;
  }

  var panLeft = function () {
    var v = new _three.Vector3();
    return function panLeft(distance, objectMatrix) {
      v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix

      v.multiplyScalar(-distance);
      panOffset.add(v);
    };
  }();

  var panUp = function () {
    var v = new _three.Vector3();
    return function panUp(distance, objectMatrix) {
      if (scope.screenSpacePanning === true) {
        v.setFromMatrixColumn(objectMatrix, 1);
      } else {
        v.setFromMatrixColumn(objectMatrix, 0);
        v.crossVectors(scope.object.up, v);
      }

      v.multiplyScalar(distance);
      panOffset.add(v);
    };
  }(); // deltaX and deltaY are in pixels; right and down are positive


  var pan = function () {
    var offset = new _three.Vector3();
    return function pan(deltaX, deltaY) {
      var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

      if (scope.object.isPerspectiveCamera) {
        // perspective
        var position = scope.object.position;
        offset.copy(position).sub(scope.target);
        var targetDistance = offset.length(); // half of the fov is center to top of screen

        targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180.0); // we use only clientHeight here so aspect ratio does not distort speed

        panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);
        panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);
      } else if (scope.object.isOrthographicCamera) {
        // orthographic
        panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);
        panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);
      } else {
        // camera neither orthographic nor perspective
        console.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.');
        scope.enablePan = false;
      }
    };
  }();

  function dollyIn(dollyScale) {
    if (scope.object.isPerspectiveCamera) {
      scale /= dollyScale;
    } else if (scope.object.isOrthographicCamera) {
      scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom * dollyScale));
      scope.object.updateProjectionMatrix();
      zoomChanged = true;
    } else {
      console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');
      scope.enableZoom = false;
    }
  }

  function dollyOut(dollyScale) {
    if (scope.object.isPerspectiveCamera) {
      scale *= dollyScale;
    } else if (scope.object.isOrthographicCamera) {
      scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / dollyScale));
      scope.object.updateProjectionMatrix();
      zoomChanged = true;
    } else {
      console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');
      scope.enableZoom = false;
    }
  } //
  // event callbacks - update the object state
  //


  function handleMouseDownRotate(event) {
    //console.log( 'handleMouseDownRotate' );
    rotateStart.set(event.clientX, event.clientY);
  }

  function handleMouseDownDolly(event) {
    //console.log( 'handleMouseDownDolly' );
    dollyStart.set(event.clientX, event.clientY);
  }

  function handleMouseDownPan(event) {
    //console.log( 'handleMouseDownPan' );
    panStart.set(event.clientX, event.clientY);
  }

  function handleMouseMoveRotate(event) {
    //console.log( 'handleMouseMoveRotate' );
    rotateEnd.set(event.clientX, event.clientY);
    rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);
    var element = scope.domElement === document ? scope.domElement.body : scope.domElement;
    rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight); // yes, height

    rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);
    rotateStart.copy(rotateEnd);
    scope.update();
  }

  function handleMouseMoveDolly(event) {
    //console.log( 'handleMouseMoveDolly' );
    dollyEnd.set(event.clientX, event.clientY);
    dollyDelta.subVectors(dollyEnd, dollyStart);

    if (dollyDelta.y > 0) {
      dollyIn(getZoomScale());
    } else if (dollyDelta.y < 0) {
      dollyOut(getZoomScale());
    }

    dollyStart.copy(dollyEnd);
    scope.update();
  }

  function handleMouseMovePan(event) {
    //console.log( 'handleMouseMovePan' );
    panEnd.set(event.clientX, event.clientY);
    panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);
    pan(panDelta.x, panDelta.y);
    panStart.copy(panEnd);
    scope.update();
  }

  function handleMouseUp(event) {// console.log( 'handleMouseUp' );
  }

  function handleMouseWheel(event) {
    // console.log( 'handleMouseWheel' );
    if (event.deltaY < 0) {
      dollyOut(getZoomScale());
    } else if (event.deltaY > 0) {
      dollyIn(getZoomScale());
    }

    scope.update();
  }

  function handleKeyDown(event) {
    //console.log( 'handleKeyDown' );
    // prevent the browser from scrolling on cursor up/down
    event.preventDefault();

    switch (event.keyCode) {
      case scope.keys.UP:
        pan(0, scope.keyPanSpeed);
        scope.update();
        break;

      case scope.keys.BOTTOM:
        pan(0, -scope.keyPanSpeed);
        scope.update();
        break;

      case scope.keys.LEFT:
        pan(scope.keyPanSpeed, 0);
        scope.update();
        break;

      case scope.keys.RIGHT:
        pan(-scope.keyPanSpeed, 0);
        scope.update();
        break;
    }
  }

  function handleTouchStartRotate(event) {
    //console.log( 'handleTouchStartRotate' );
    rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);
  }

  function handleTouchStartDollyPan(event) {
    //console.log( 'handleTouchStartDollyPan' );
    if (scope.enableZoom) {
      var dx = event.touches[0].pageX - event.touches[1].pageX;
      var dy = event.touches[0].pageY - event.touches[1].pageY;
      var distance = Math.sqrt(dx * dx + dy * dy);
      dollyStart.set(0, distance);
    }

    if (scope.enablePan) {
      var x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);
      var y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);
      panStart.set(x, y);
    }
  }

  function handleTouchMoveRotate(event) {
    //console.log( 'handleTouchMoveRotate' );
    rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);
    rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);
    var element = scope.domElement === document ? scope.domElement.body : scope.domElement;
    rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight); // yes, height

    rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);
    rotateStart.copy(rotateEnd);
    scope.update();
  }

  function handleTouchMoveDollyPan(event) {
    //console.log( 'handleTouchMoveDollyPan' );
    if (scope.enableZoom) {
      var dx = event.touches[0].pageX - event.touches[1].pageX;
      var dy = event.touches[0].pageY - event.touches[1].pageY;
      var distance = Math.sqrt(dx * dx + dy * dy);
      dollyEnd.set(0, distance);
      dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed));
      dollyIn(dollyDelta.y);
      dollyStart.copy(dollyEnd);
    }

    if (scope.enablePan) {
      var x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);
      var y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);
      panEnd.set(x, y);
      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);
      pan(panDelta.x, panDelta.y);
      panStart.copy(panEnd);
    }

    scope.update();
  }

  function handleTouchEnd(event) {} //console.log( 'handleTouchEnd' );
  //
  // event handlers - FSM: listen for events and reset state
  //


  function onMouseDown(event) {
    if (scope.enabled === false) return; // Prevent the browser from scrolling.

    event.preventDefault(); // Manually set the focus since calling preventDefault above
    // prevents the browser from setting it automatically.

    scope.domElement.focus ? scope.domElement.focus() : window.focus();

    switch (event.button) {
      case scope.mouseButtons.LEFT:
        if (event.ctrlKey || event.metaKey || event.shiftKey) {
          if (scope.enablePan === false) return;
          handleMouseDownPan(event);
          state = STATE.PAN;
        } else {
          if (scope.enableRotate === false) return;
          handleMouseDownRotate(event);
          state = STATE.ROTATE;
        }

        break;

      case scope.mouseButtons.MIDDLE:
        if (scope.enableZoom === false) return;
        handleMouseDownDolly(event);
        state = STATE.DOLLY;
        break;

      case scope.mouseButtons.RIGHT:
        if (scope.enablePan === false) return;
        handleMouseDownPan(event);
        state = STATE.PAN;
        break;
    }

    if (state !== STATE.NONE) {
      document.addEventListener('mousemove', onMouseMove, false);
      document.addEventListener('mouseup', onMouseUp, false);
      scope.dispatchEvent(startEvent);
    }
  }

  function onMouseMove(event) {
    if (scope.enabled === false) return;
    event.preventDefault();

    switch (state) {
      case STATE.ROTATE:
        if (scope.enableRotate === false) return;
        handleMouseMoveRotate(event);
        break;

      case STATE.DOLLY:
        if (scope.enableZoom === false) return;
        handleMouseMoveDolly(event);
        break;

      case STATE.PAN:
        if (scope.enablePan === false) return;
        handleMouseMovePan(event);
        break;
    }
  }

  function onMouseUp(event) {
    if (scope.enabled === false) return;
    handleMouseUp(event);
    document.removeEventListener('mousemove', onMouseMove, false);
    document.removeEventListener('mouseup', onMouseUp, false);
    scope.dispatchEvent(endEvent);
    state = STATE.NONE;
  }

  function onMouseWheel(event) {
    if (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE && state !== STATE.ROTATE) return;
    event.preventDefault();
    event.stopPropagation();
    scope.dispatchEvent(startEvent);
    handleMouseWheel(event);
    scope.dispatchEvent(endEvent);
  }

  function onKeyDown(event) {
    if (scope.enabled === false || scope.enableKeys === false || scope.enablePan === false) return;
    handleKeyDown(event);
  }

  function onTouchStart(event) {
    if (scope.enabled === false) return;
    event.preventDefault();

    switch (event.touches.length) {
      case 1:
        // one-fingered touch: rotate
        if (scope.enableRotate === false) return;
        handleTouchStartRotate(event);
        state = STATE.TOUCH_ROTATE;
        break;

      case 2:
        // two-fingered touch: dolly-pan
        if (scope.enableZoom === false && scope.enablePan === false) return;
        handleTouchStartDollyPan(event);
        state = STATE.TOUCH_DOLLY_PAN;
        break;

      default:
        state = STATE.NONE;
    }

    if (state !== STATE.NONE) {
      scope.dispatchEvent(startEvent);
    }
  }

  function onTouchMove(event) {
    if (scope.enabled === false) return;
    event.preventDefault();
    event.stopPropagation();

    switch (event.touches.length) {
      case 1:
        // one-fingered touch: rotate
        if (scope.enableRotate === false) return;
        if (state !== STATE.TOUCH_ROTATE) return; // is this needed?

        handleTouchMoveRotate(event);
        break;

      case 2:
        // two-fingered touch: dolly-pan
        if (scope.enableZoom === false && scope.enablePan === false) return;
        if (state !== STATE.TOUCH_DOLLY_PAN) return; // is this needed?

        handleTouchMoveDollyPan(event);
        break;

      default:
        state = STATE.NONE;
    }
  }

  function onTouchEnd(event) {
    if (scope.enabled === false) return;
    handleTouchEnd(event);
    scope.dispatchEvent(endEvent);
    state = STATE.NONE;
  }

  function onContextMenu(event) {
    if (scope.enabled === false) return;
    event.preventDefault();
  } //


  scope.domElement.addEventListener('contextmenu', onContextMenu, false);
  scope.domElement.addEventListener('mousedown', onMouseDown, false);
  scope.domElement.addEventListener('wheel', onMouseWheel, false);
  scope.domElement.addEventListener('touchstart', onTouchStart, false);
  scope.domElement.addEventListener('touchend', onTouchEnd, false);
  scope.domElement.addEventListener('touchmove', onTouchMove, false);
  window.addEventListener('keydown', onKeyDown, false); // force an update at start

  this.update();
};

OrbitControls.prototype = Object.create(_three.EventDispatcher.prototype);
OrbitControls.prototype.constructor = OrbitControls;
Object.defineProperties(OrbitControls.prototype, {
  center: {
    get: function get() {
      console.warn('OrbitControls: .center has been renamed to .target');
      return this.target;
    }
  },
  // backward compatibility
  noZoom: {
    get: function get() {
      console.warn('OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.');
      return !this.enableZoom;
    },
    set: function set(value) {
      console.warn('OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.');
      this.enableZoom = !value;
    }
  },
  noRotate: {
    get: function get() {
      console.warn('OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.');
      return !this.enableRotate;
    },
    set: function set(value) {
      console.warn('OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.');
      this.enableRotate = !value;
    }
  },
  noPan: {
    get: function get() {
      console.warn('OrbitControls: .noPan has been deprecated. Use .enablePan instead.');
      return !this.enablePan;
    },
    set: function set(value) {
      console.warn('OrbitControls: .noPan has been deprecated. Use .enablePan instead.');
      this.enablePan = !value;
    }
  },
  noKeys: {
    get: function get() {
      console.warn('OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.');
      return !this.enableKeys;
    },
    set: function set(value) {
      console.warn('OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.');
      this.enableKeys = !value;
    }
  },
  staticMoving: {
    get: function get() {
      console.warn('OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.');
      return !this.enableDamping;
    },
    set: function set(value) {
      console.warn('OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.');
      this.enableDamping = !value;
    }
  },
  dynamicDampingFactor: {
    get: function get() {
      console.warn('OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.');
      return this.dampingFactor;
    },
    set: function set(value) {
      console.warn('OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.');
      this.dampingFactor = value;
    }
  }
});

var TopoViewer =
/*#__PURE__*/
function () {
  function TopoViewer(params) {
    var _this = this;

    _classCallCheck(this, TopoViewer);

    // TOPO VIEWER CONFIG PARAMS
    this.container = params.container || document.createElement('div');
    this.backgroundColor = params.backgroundColor || 0x1e1e1e;
    this.isRaycast = params.isRaycast || false;
    this.isBakedLighting = params.isBakedLighting || false;
    this.width = params.width || 512;
    this.height = params.height || 512;
    this.worldWidth = params.worldWidth || 256;
    this.worldDepth = params.worldDepth || 256;
    this.planeWidth = params.planeWidth || 7500;
    this.planeHeight = params.planeHeight || 7500;
    this.heightScale = params.heightScale || 10;
    this.textureURL = params.textureURL || '../test/img/defaultTopoViewerTexture.png';
    this.isAnimating = false;
    this.annimationId; // TOPO VIEWER DERIVED PARAMS

    this.worldHalfWidth = this.worldWidth / 2;
    this.worldHalfDepth = this.worldDepth / 2; // SCENE SETUP

    this.scene = new _three.Scene();
    this.scene.background = new _three.Color(this.backgroundColor); // CAMERA SETUP

    this.camera = new _three.PerspectiveCamera(60, this.width / this.height, 10, 20000); // RENDERER SETUP

    this.renderer = new _three.WebGLRenderer();
    this.renderer.setSize(this.width, this.height);
    this.container.appendChild(this.renderer.domElement); // CONTROL SETUP

    this.controls = new OrbitControls(this.camera, this.renderer.domElement);
    this.controls.minDistance = 100;
    this.controls.maxDistance = 10000;
    this.controls.maxPolarAngle = Math.PI / 2; // UPDATE CAMERA POSITION

    this.camera.position.x = 1500;
    this.camera.position.y = 4500;
    this.camera.position.z = 6000;
    this.controls.update(); // MISC
    // this.raycaster = new Three.Raycaster();
    // this.mouse = new Three.Vector2();
    // PLANE GEOMETRY

    this.geometry = new _three.PlaneBufferGeometry(this.planeWidth, this.planeHeight, this.worldWidth - 1, this.worldDepth - 1);
    this.geometry.attributes.position.dynamic = true;
    this.geometry.rotateX(-Math.PI / 2); // TEXTURE

    this.texture1 = new _three.TextureLoader().load(this.textureURL); // MATERIAL

    this.materials = [];
    this.materials.push(new _three.MeshNormalMaterial());
    this.materials.push(new _three.MeshBasicMaterial({
      map: this.texture1
    }));
    this.currMaterial = 0;
    this.material = this.materials[this.currMaterial];

    this.cycleMaterial = function () {
      _this.currMaterial = _this.currMaterial < _this.materials.length - 1 ? _this.currMaterial + 1 : 0;
      console.log('current material changed to ' + _this.currMaterial);
      _this.material = _this.materials[_this.currMaterial];
      _this.mesh.material = _this.materials[_this.currMaterial];

      _this.render();
    }; // MESH


    this.mesh = new _three.Mesh(this.geometry, this.material);
    this.scene.add(this.mesh); // ANNIMATION

    this.animate = function () {
      _this.annimationId = requestAnimationFrame(_this.animate);

      _this.render();
    };

    this.stopAnimate = function () {
      cancelAnimationFrame(_this.annimationId); // console.log('ANNIMATION STOPED');
    };
  } // METHODS
  //------------------------------------------------------------
  // Get the Render Canvas


  _createClass(TopoViewer, [{
    key: "getDOMElement",
    value: function getDOMElement() {
      return this.renderer.domElement;
    } // Sets the input image

  }, {
    key: "setInputImage",
    value: function setInputImage(inputURL) {
      this.inputImage.src = inputURL;
    } // Sets the Height Data

  }, {
    key: "getHeightData",
    value: function getHeightData(img, scale) {
      if (scale == undefined) scale = 1;
      var canvas = document.createElement('canvas'); // document.body.appendChild(canvas);

      canvas.width = img.width;
      canvas.height = img.height;
      var context = canvas.getContext('2d');
      var size = img.width * img.height; // console.log(img.width);

      var data = new Uint8Array(size);
      context.drawImage(img, 0, 0);

      for (var i = 0; i < size; i++) {
        data[i] = 0;
      }

      var pix = context.getImageData(0, 0, img.width, img.height).data;
      return this.averageHeightData(pix, scale);
    }
  }, {
    key: "averageHeightData",
    value: function averageHeightData(pix, scale) {
      var data = new Uint8Array(pix.length / 4);
      var j = 0;

      for (var i = 0; i < pix.length; i += 4) {
        var all = pix[i] + pix[i + 1] + pix[i + 2];
        data[j++] = all / (3 * scale);
      }

      return data;
    } // Updated the Plane Geometry

  }, {
    key: "updateGeometry",
    value: function updateGeometry(heightData) {
      var vertices = this.geometry.attributes.position.array;

      for (var i = 0, j = 0, l = vertices.length; i < l; i++, j += 3) {
        vertices[j + 1] = heightData[i] * this.heightScale;
      }

      this.geometry.attributes.position.needsUpdate = true;
      this.geometry.computeVertexNormals();
    } // Generate the Canvas for a bAked Texture

  }, {
    key: "generateBakedTexture",
    value: function generateBakedTexture(data, width, height) {
      // bake lighting into texture
      var canvas, canvasScaled, context, image, imageData, vector3, sun, shade;
      vector3 = new _three.Vector3(0, 0, 0);
      sun = new _three.Vector3(1, 1, 1);
      sun.normalize();
      canvas = document.createElement('canvas');
      canvas.width = width;
      canvas.height = height;
      context = canvas.getContext('2d');
      context.fillStyle = '#000';
      context.fillRect(0, 0, width, height);
      image = context.getImageData(0, 0, canvas.width, canvas.height);
      imageData = image.data;

      for (var i = 0, j = 0, l = imageData.length; i < l; i += 4, j++) {
        vector3.x = data[j - 2] - data[j + 2];
        vector3.y = 2;
        vector3.z = data[j - width * 2] - data[j + width * 2];
        vector3.normalize();
        shade = vector3.dot(sun);
        imageData[i] = (96 + shade * 128) * (0.5 + data[j] * 0.007);
        imageData[i + 1] = (32 + shade * 96) * (0.5 + data[j] * 0.007);
        imageData[i + 2] = shade * 96 * (0.5 + data[j] * 0.007);
      }

      context.putImageData(image, 0, 0); // Scaled 4x

      canvasScaled = document.createElement('canvas');
      canvasScaled.width = width * 4;
      canvasScaled.height = height * 4;
      context = canvasScaled.getContext('2d');
      context.scale(4, 4);
      context.drawImage(canvas, 0, 0);
      image = context.getImageData(0, 0, canvasScaled.width, canvasScaled.height);
      imageData = image.data;

      for (var i = 0, l = imageData.length; i < l; i += 4) {
        var v = ~~(Math.random() * 5);
        imageData[i] += v;
        imageData[i + 1] += v;
        imageData[i + 2] += v;
      }

      context.putImageData(image, 0, 0);
      return canvasScaled;
    } // Builds the texture

  }, {
    key: "buildTexture",
    value: function buildTexture(data, image) {
      // image = this.inputImage;
      var texture;

      if (this.isBakedLighting) {
        texture = new _three.CanvasTexture(this.generateBakedTexture(data, this.worldWidth, this.worldDepth));
      } else {
        texture = new _three.Texture(image);
      }

      texture.wrapS = _three.ClampToEdgeWrapping;
      texture.wrapT = _three.ClampToEdgeWrapping;
      return texture;
    } // Updates the Model Geometry and Rendering

  }, {
    key: "updateModel",
    value: function updateModel(input) {
      var scale = 1; // TODO fix this
      // setInputImage(inputURL);
      // const data = this.getHeightData(image);

      var data = this.averageHeightData(input, scale);
      this.updateGeometry(data); // Optional --- ????

      this.controls.target.y = data[this.worldHalfWidth + this.worldHalfDepth * this.worldWidth] + 500; // this.texture = this.buildTexture(data, image);
      // console.log(this);

      this.render();
    }
  }, {
    key: "attatchTo",
    value: function attatchTo(container) {
      container.appendChild(this.container);
    } // Render the Scene and Camera

  }, {
    key: "render",
    value: function render() {
      this.renderer.render(this.scene, this.camera);
    }
  }]);

  return TopoViewer;
}(); // function newFunction() {
//     return *;
// }


exports.TopoViewer = TopoViewer;
},{"three":"node_modules/three/build/three.module.js"}],"src/js/GridPainter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GridPainter = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Color class for 256 RGB
var GridColor =
/*#__PURE__*/
function () {
  function GridColor(params) {
    _classCallCheck(this, GridColor);

    this.r = params.r || 0;
    this.g = params.g || 0;
    this.b = params.b || 0;
  } // Sets the rgb color value


  _createClass(GridColor, [{
    key: "setColor",
    value: function setColor(obj) {
      this.r = obj.r;
      this.g = obj.g;
      this.b = obj.b;
    }
  }], [{
    key: "copy",
    value: function copy(color) {
      return new GridColor({
        r: color.r,
        g: color.g,
        b: color.b
      });
    }
  }, {
    key: "add",
    value: function add(color1, color2) {
      return GridColor.clamp(new GridColor({
        r: color1.r + color2.r,
        g: color1.r + color2.g,
        b: color1.r + color2.b
      }));
    } // Returns the differnece in Color between low and high

  }, {
    key: "diff",
    value: function diff(high, low) {
      return GridColor.clamp(new GridColor({
        r: high.r - low.r,
        g: high.g - low.g,
        b: high.b - low.b
      }));
    }
  }, {
    key: "divide",
    value: function divide(color, scalar) {
      if (scalar && scalar != 0) {
        return new GridColor({
          r: Math.floor(Math.abs(color.r / scalar)),
          g: Math.floor(Math.abs(color.g / scalar)),
          b: Math.floor(Math.abs(color.b / scalar))
        });
      } else {
        return new GridColor();
      }
    }
  }, {
    key: "clamp",
    value: function clamp(color) {
      var newColor = GridColor.copy(color);
      if (newColor.r < 0) newColor.r = 0;
      if (newColor.g < 0) newColor.g = 0;
      if (newColor.b < 0) newColor.b = 0;
      if (newColor.r > 255) newColor.r = 255;
      if (newColor.g > 255) newColor.g = 255;
      if (newColor.b > 255) newColor.b = 255;
      return newColor;
    } // returns an array of Colors linearly interoplated between low and high Color

  }, {
    key: "interval",
    value: function interval(low, high, numColors) {
      // If numberof colors is not provided or less than 1 return black
      if (!numColors || numColors < 1) {
        return [new GridColor()]; // If number of colors is 1 return low
      } else if (numColors === 1) {
        return [low];
      } else {
        var colorDiff = GridColor.clamp(GridColor.divide(GridColor.diff(high, low), numColors - 1));
        var colorInterval = [];
        var colorStep = GridColor.copy(low);

        for (var i = 0; i < numColors; i++) {
          colorInterval.push(GridColor.copy(colorStep));
          colorStep = GridColor.add(colorStep, colorDiff);
        }

        if (numColors === colorInterval.length) {
          return colorInterval;
        }
      }
    }
  }]);

  return GridColor;
}();

var GridCell =
/*#__PURE__*/
function () {
  function GridCell(index, initialColorIndex, params) {
    _classCallCheck(this, GridCell);

    this.colors = params.colorArray;
    this.colorIndex = initialColorIndex;
    this.color = this.colors[this.colorIndex];
    this.setPosition(index, params.divs, params.width, params.height); // Used for advancing in different directions

    this.advance = true;
  } // Move to next Color in the color list


  _createClass(GridCell, [{
    key: "nextColor",
    value: function nextColor() {
      if (this.colorIndex < this.colors.length - 1) {
        this.colorIndex++;
        this.color = this.colors[this.colorIndex];
      }
    } // Move to the previous color in the color list

  }, {
    key: "prevColor",
    value: function prevColor() {
      if (this.colorIndex > 0) {
        this.colorIndex--;
        this.color = this.colors[this.colorIndex];
      }
    } // Advances the color, independant of direction, if at the end of the list
    // It will advance in the opposite direction

  }, {
    key: "advanceColor",
    value: function advanceColor() {
      if (this.colorIndex === 0 || this.colorIndex === this.colors.length - 1) this.advance = !this.advance;

      if (this.advance) {
        this.nextColor();
      } else {
        this.prevColor();
      }
    } // Sets the Color relative to the index in the color swatch

  }, {
    key: "setColor",
    value: function setColor(index) {
      if (index != this.colorIndex && index >= 0 && index < this.colors.length) {
        this.colorIndex = index;
        this.color = this.colors[this.colorIndex];
      }
    } // helpful for binary switching

  }, {
    key: "flipColor",
    value: function flipColor() {
      this.setColor(1 - this.colorIndex);
    } // Returns a valid CSS RGB Color

  }, {
    key: "getColor",
    value: function getColor() {
      function componentToHex(c) {
        var hex = c.toString(16);
        return hex.length == 1 ? '0' + hex : hex;
      }

      return '#' + componentToHex(this.color.r) + componentToHex(this.color.g) + componentToHex(this.color.b);
    } // Currently only supports equal div in X and Y

  }, {
    key: "setPosition",
    value: function setPosition(index, divs, width, height) {
      this.index = index;
      this.row = Math.floor(index / divs);
      this.col = index % divs; // this.x = this.col * width;
      // this.y = this.row * height;
      // this.width = width;
      // this.height = height;

      this.x = Math.round(width * this.col);
      this.y = Math.round(height * this.row);
      var nextx = Math.round(width * (this.col + 1));
      var nexty = Math.round(height * (this.row + 1));
      this.width = nextx - this.x;
      this.height = nexty - this.y; // this.width = (this.col === divs - 1) ? ((this.col + 1) * width - this.x) : Math.floor(width);
      // this.height = (this.row === divs - 1) ? ((this.row + 1) * height - this.y) : Math.floor(height);
    } // Gets the Cells Drawing Rect for Cell Updates

  }, {
    key: "getRect",
    value: function getRect() {
      return {
        x: this.x,
        y: this.y,
        w: this.width,
        h: this.height
      };
    } // Gets the Cells rows and columns

  }, {
    key: "getGridPos",
    value: function getGridPos() {
      return {
        row: this.row,
        col: this.col
      };
    }
  }]);

  return GridCell;
}();

var GridPainter =
/*#__PURE__*/
function () {
  function GridPainter(params) {
    _classCallCheck(this, GridPainter);

    // GRID PAINTER CONFIG PARAMS
    this.container = params.container !== undefined ? params.container : document.createElement('div');
    this.container.className = params.containerClassName !== undefined ? params.containerClassName : this.container.className;
    this.canvas = params.canvas !== undefined ? params.canvas : document.createElement('canvas');
    this.canvas.className = params.canvasClassName !== undefined ? params.canvasClassName : this.canvasClassName;
    this.canvas.width = params.width !== undefined ? params.width : 512;
    this.canvas.height = params.height !== undefined ? params.height : 512;
    this.divisions = params.divisions !== undefined ? params.divisions : 16; // External callbacks that can be registered for Events created by the class
    // The GridPainter object will be passed into the callback arguments along with the originial event.

    this.callbacks = params.callbacks !== undefined ? params.callbacks : {};
    this.numColors = Array.isArray(params.colors) ? params.colors.length : params.numColors || 2;
    this.colorLow = params.colorLow ? new GridColor(params.colorLow) : new GridColor({
      r: 12,
      g: 12,
      b: 12
    });
    this.colorHigh = params.colorHigh ? new GridColor(params.colorHigh) : new GridColor({
      r: 240,
      g: 240,
      b: 240
    });
    this.startColor = params.startColor !== undefined ? params.startColor : 0;
    this.colors = Array.isArray(params.colors) ? params.colors.map(function (color) {
      return new GridColor(color);
    }) : GridColor.interval(this.colorLow, this.colorHigh, this.numColors);
    this.initPattern = params.initPattern !== undefined ? params.initPattern : 'alternate'; // SETUP DRAWING CANVAS

    this.container.appendChild(this.canvas);
    this.canvas.gridPainter = this; // TODO Attatch the canvas to the grid ??? 

    this.context = this.canvas.getContext('2d'); // this.context.imageSmoothingQuality = 'high';
    // this.context.translate(0.5, 0.5);

    this.cellWidth = this.canvas.width / this.divisions;
    this.cellHeight = this.canvas.height / this.divisions;
    this.gridParams = {
      colorArray: this.colors,
      divs: this.divisions,
      width: this.cellWidth,
      height: this.cellHeight
    };
    this.cells = this.setPattern(this.initPattern); // TODO -------------------------------------------------------------------
    // SETUP EVENT HANDLERS

    this.setupEventHandlers(); // RENDER ALL CELLS

    this.renderAllCells();
  } // Setsup the event handlers for the GridPainter


  _createClass(GridPainter, [{
    key: "setupEventHandlers",
    value: function setupEventHandlers() {
      var _this = this;

      // Canvas On Click
      // ---------------
      this.canvas.onclick = function (e) {
        // Get the mouse coords
        var coord = {
          x: e.pageX - _this.canvas.offsetLeft,
          y: e.pageY - _this.canvas.offsetTop
        }; // Get the Cell and Cell Index

        var cellIndex = _this.getCellIndex(coord);

        var cell = _this.cells[cellIndex]; // Change the cell Color (Flip if Binary, otherwise advance the color, up or down)

        if (_this.numColors === 2) cell.flipColor();
        if (_this.numColors > 2) cell.advanceColor(); // Render the new cell on the canvas

        _this.renderCell(cell); // Optional Callback


        if (_this.callbacks.onclickCallback !== undefined) _this.callbacks.onclickCallback(_this, e);
      }; // TODO ----- ADD OTHER EVENT HANDLERS HERE

    } // TODO - Add patterns to this
    // Set the Cells to different patterns

  }, {
    key: "setPattern",
    value: function setPattern(pattern) {
      var _this2 = this;

      // Create a new Array 
      var cells = new Array(this.divisions * this.divisions);

      for (var i = 0; i < cells.length; i++) {
        cells[i] = new GridCell(i, this.startColor, this.gridParams);
      } // TODO move to switch-case...


      if (pattern === 'alternate') {
        cells = cells.map(function (cell, index) {
          var row = Math.floor(index / _this2.divisions) % 2;
          var col = index % _this2.divisions % 2;
          if (!row && !col || row && col) return new GridCell(index, 0, _this2.gridParams);
          return new GridCell(index, _this2.numColors - 1, _this2.gridParams);
        });
      } else if (pattern === 'random') {
        cells = cells.map(function (cell, index) {
          var randomIndex = Math.floor(Math.random() * (_this2.numColors - 1));
          return new GridCell(index, randomIndex, _this2.gridParams);
        });
      } else {
        // If No Pattern supplied, return all black grid pattern
        cells = cells.map(function (cell, index) {
          new GridCell(index, _this2.startColor, _this2.gridParams);
        });
      }

      return cells;
    } // Gets the Cell row and column from the Canvas Coords

  }, {
    key: "getCellPosition",
    value: function getCellPosition(coord) {
      var row, col;
      col = Math.floor(this.divisions * coord.x / this.canvas.width);
      row = Math.floor(this.divisions * coord.y / this.canvas.height);
      return {
        row: row,
        col: col
      };
    } // Gets the Cell index from the Canvas Coords

  }, {
    key: "getCellIndex",
    value: function getCellIndex(coord) {
      var pos = this.getCellPosition(coord);
      return pos.row * this.divisions + pos.col;
    } // Clear out all cell values (does not rerender the cells)

  }, {
    key: "setAllCells",
    value: function setAllCells(colorIndex) {
      var _this3 = this;

      this.cells = this.cells.map(function (cell, index) {
        return new GridCell(index, colorIndex, _this3.gridParams);
      });
    } // Draws the cell to the canvas based on index

  }, {
    key: "renderCell",
    value: function renderCell(cell) {
      var rect = cell.getRect();
      var color = cell.getColor();
      this.context.fillStyle = color;
      this.context.fillRect(rect.x, rect.y, rect.w, rect.h);
    } // Draws/Redraws all cells

  }, {
    key: "renderAllCells",
    value: function renderAllCells() {
      for (var i = 0; i < this.cells.length; i++) {
        this.renderCell(this.cells[i]);
      }
    } // TODO - Clear this up

  }, {
    key: "getImageDataResample",
    value: function getImageDataResample(width, height) {
      var width_source = this.canvas.width;
      var height_source = this.canvas.height;
      width = Math.round(width);
      height = Math.round(height);
      var ratio_w = width_source / width;
      var ratio_h = height_source / height;
      var ratio_w_half = Math.ceil(ratio_w / 2);
      var ratio_h_half = Math.ceil(ratio_h / 2);
      var ctx = this.context;
      var img = ctx.getImageData(0, 0, width_source, height_source);
      var img2 = ctx.createImageData(width, height);
      var data = img.data;
      var data2 = img2.data; // Sampling Procedure

      for (var j = 0; j < height; j++) {
        for (var i = 0; i < width; i++) {
          var x2 = (i + j * width) * 4;
          var weight = 0;
          var weights = 0;
          var weights_alpha = 0;
          var gx_r = 0;
          var gx_g = 0;
          var gx_b = 0;
          var gx_a = 0;
          var center_y = (j + 0.5) * ratio_h;
          var yy_start = Math.floor(j * ratio_h);
          var yy_stop = Math.ceil((j + 1) * ratio_h);

          for (var yy = yy_start; yy < yy_stop; yy++) {
            var dy = Math.abs(center_y - (yy + 0.5)) / ratio_h_half;
            var center_x = (i + 0.5) * ratio_w;
            var w0 = dy * dy; //pre-calc part of w

            var xx_start = Math.floor(i * ratio_w);
            var xx_stop = Math.ceil((i + 1) * ratio_w);

            for (var xx = xx_start; xx < xx_stop; xx++) {
              var dx = Math.abs(center_x - (xx + 0.5)) / ratio_w_half;
              var w = Math.sqrt(w0 + dx * dx);

              if (w >= 1) {
                //pixel too far
                continue;
              } //hermite filter


              weight = 2 * w * w * w - 3 * w * w + 1;
              var pos_x = 4 * (xx + yy * width_source); //alpha

              gx_a += weight * data[pos_x + 3];
              weights_alpha += weight; //colors

              if (data[pos_x + 3] < 255) weight = weight * data[pos_x + 3] / 250;
              gx_r += weight * data[pos_x];
              gx_g += weight * data[pos_x + 1];
              gx_b += weight * data[pos_x + 2];
              weights += weight;
            }
          }

          data2[x2] = gx_r / weights;
          data2[x2 + 1] = gx_g / weights;
          data2[x2 + 2] = gx_b / weights;
          data2[x2 + 3] = gx_a / weights_alpha;
        }
      }

      return data2; // //clear and resize canvas
      // if (resize_canvas === true) {
      //     canvas.width = width;
      //     canvas.height = height;
      // } else {
      //     ctx.clearRect(0, 0, width_source, height_source);
      // }
      // //draw
      // ctx.putImageData(img2, 0, 0);
    }
  }, {
    key: "getImageData",
    value: function getImageData() {
      var imgdata = this.context.getImageData(0, 0, 256, 256);
      return imgdata.data;
    } // Attatches this to another external container

  }, {
    key: "attatchTo",
    value: function attatchTo(container) {
      container.appendChild(this.container);
    } // TODO -------------------------------------------------------------------
    // downloadGrid() {
    // TODO
    // }
    // uploadGrid(divisions, values) {
    // TODO
    // }

  }]);

  return GridPainter;
}();

exports.GridPainter = GridPainter;
},{}],"node_modules/base64-js/index.js":[function(require,module,exports) {
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  for (var i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],"node_modules/ieee754/index.js":[function(require,module,exports) {
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"node_modules/isarray/index.js":[function(require,module,exports) {
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"node_modules/buffer/index.js":[function(require,module,exports) {

var global = arguments[3];
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

},{"base64-js":"node_modules/base64-js/index.js","ieee754":"node_modules/ieee754/index.js","isarray":"node_modules/isarray/index.js","buffer":"node_modules/buffer/index.js"}],"node_modules/safe-buffer/index.js":[function(require,module,exports) {

/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":"node_modules/buffer/index.js"}],"node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"node_modules/randombytes/browser.js":[function(require,module,exports) {

var global = arguments[3];
var process = require("process");
'use strict'

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = require('safe-buffer').Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer.allocUnsafe(size)

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
      }
    } else {
      crypto.getRandomValues(bytes)
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

},{"safe-buffer":"node_modules/safe-buffer/index.js","process":"node_modules/process/browser.js"}],"node_modules/inherits/inherits_browser.js":[function(require,module,exports) {
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],"node_modules/events/events.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;

if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};

function EventEmitter() {
  EventEmitter.init.call(this);
}

module.exports = EventEmitter; // Backwards-compat with node 0.10.x

EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.

var defaultMaxListeners = 10;
Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function () {
    return defaultMaxListeners;
  },
  set: function (arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }

    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function () {
  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}; // Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.


EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }

  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];

  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);

  var doError = type === 'error';
  var events = this._events;
  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false; // If there is no 'error' event listener then throw.

  if (doError) {
    var er;
    if (args.length > 0) er = args[0];

    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    } // At least give some kind of context to the user


    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];
  if (handler === undefined) return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);

    for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }

  events = target._events;

  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object

      events = target._events;
    }

    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener]; // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    } // Check for listener leak


    m = $getMaxListeners(target);

    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true; // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax

      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};

function onceWrapper() {
  var args = [];

  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);

  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    ReflectApply(this.listener, this.target, args);
  }
}

function _onceWrap(target, type, listener) {
  var state = {
    fired: false,
    wrapFn: undefined,
    target: target,
    type: type,
    listener: listener
  };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }

  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }

  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
}; // Emits a 'removeListener' event if and only if the listener was removed.


EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;

  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }

  events = this._events;
  if (events === undefined) return this;
  list = events[type];
  if (list === undefined) return this;

  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = Object.create(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;

    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }

    if (position < 0) return this;
    if (position === 0) list.shift();else {
      spliceOne(list, position);
    }
    if (list.length === 1) events[type] = list[0];
    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
  }

  return this;
};

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;
  events = this._events;
  if (events === undefined) return this; // not listening for removeListener, no need to emit

  if (events.removeListener === undefined) {
    if (arguments.length === 0) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== undefined) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
    }

    return this;
  } // emit removeListener for all listeners on all events


  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;

    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }

    this.removeAllListeners('removeListener');
    this._events = Object.create(null);
    this._eventsCount = 0;
    return this;
  }

  listeners = events[type];

  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners !== undefined) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }

  return this;
};

function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined) return [];
  var evlistener = events[type];
  if (evlistener === undefined) return [];
  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;

function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);

  for (var i = 0; i < n; ++i) copy[i] = arr[i];

  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) list[index] = list[index + 1];

  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);

  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }

  return ret;
}
},{}],"node_modules/process-nextick-args/index.js":[function(require,module,exports) {
var process = require("process");
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


},{"process":"node_modules/process/browser.js"}],"node_modules/readable-stream/lib/internal/streams/stream.js":[function(require,module,exports) {
module.exports = require('stream');

},{"stream":"node_modules/stream-browserify/index.js"}],"node_modules/core-util-is/lib/util.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

},{"buffer":"node_modules/buffer/index.js"}],"node_modules/parcel-bundler/src/builtins/_empty.js":[function(require,module,exports) {

},{}],"node_modules/readable-stream/lib/internal/streams/BufferList.js":[function(require,module,exports) {

'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
var util = require('util');

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}
},{"safe-buffer":"node_modules/safe-buffer/index.js","util":"node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/readable-stream/lib/internal/streams/destroy.js":[function(require,module,exports) {
'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":"node_modules/process-nextick-args/index.js"}],"node_modules/util-deprecate/browser.js":[function(require,module,exports) {
var global = arguments[3];

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

},{}],"node_modules/readable-stream/lib/_stream_writable.js":[function(require,module,exports) {
var process = require("process");

var global = arguments[3];
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
},{"process-nextick-args":"node_modules/process-nextick-args/index.js","core-util-is":"node_modules/core-util-is/lib/util.js","inherits":"node_modules/inherits/inherits_browser.js","util-deprecate":"node_modules/util-deprecate/browser.js","./internal/streams/stream":"node_modules/readable-stream/lib/internal/streams/stream.js","safe-buffer":"node_modules/safe-buffer/index.js","./internal/streams/destroy":"node_modules/readable-stream/lib/internal/streams/destroy.js","./_stream_duplex":"node_modules/readable-stream/lib/_stream_duplex.js","process":"node_modules/process/browser.js"}],"node_modules/readable-stream/lib/_stream_duplex.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};
},{"process-nextick-args":"node_modules/process-nextick-args/index.js","core-util-is":"node_modules/core-util-is/lib/util.js","inherits":"node_modules/inherits/inherits_browser.js","./_stream_readable":"node_modules/readable-stream/lib/_stream_readable.js","./_stream_writable":"node_modules/readable-stream/lib/_stream_writable.js"}],"node_modules/readable-stream/node_modules/string_decoder/lib/string_decoder.js":[function(require,module,exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/readable-stream/lib/_stream_readable.js":[function(require,module,exports) {

var global = arguments[3];
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
},{"process-nextick-args":"node_modules/process-nextick-args/index.js","isarray":"node_modules/isarray/index.js","events":"node_modules/events/events.js","./internal/streams/stream":"node_modules/readable-stream/lib/internal/streams/stream.js","safe-buffer":"node_modules/safe-buffer/index.js","core-util-is":"node_modules/core-util-is/lib/util.js","inherits":"node_modules/inherits/inherits_browser.js","util":"node_modules/parcel-bundler/src/builtins/_empty.js","./internal/streams/BufferList":"node_modules/readable-stream/lib/internal/streams/BufferList.js","./internal/streams/destroy":"node_modules/readable-stream/lib/internal/streams/destroy.js","./_stream_duplex":"node_modules/readable-stream/lib/_stream_duplex.js","string_decoder/":"node_modules/readable-stream/node_modules/string_decoder/lib/string_decoder.js","process":"node_modules/process/browser.js"}],"node_modules/readable-stream/lib/_stream_transform.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":"node_modules/readable-stream/lib/_stream_duplex.js","core-util-is":"node_modules/core-util-is/lib/util.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/readable-stream/lib/_stream_passthrough.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":"node_modules/readable-stream/lib/_stream_transform.js","core-util-is":"node_modules/core-util-is/lib/util.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/readable-stream/readable-browser.js":[function(require,module,exports) {
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_readable.js":"node_modules/readable-stream/lib/_stream_readable.js","./lib/_stream_writable.js":"node_modules/readable-stream/lib/_stream_writable.js","./lib/_stream_duplex.js":"node_modules/readable-stream/lib/_stream_duplex.js","./lib/_stream_transform.js":"node_modules/readable-stream/lib/_stream_transform.js","./lib/_stream_passthrough.js":"node_modules/readable-stream/lib/_stream_passthrough.js"}],"node_modules/readable-stream/writable-browser.js":[function(require,module,exports) {
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":"node_modules/readable-stream/lib/_stream_writable.js"}],"node_modules/readable-stream/duplex-browser.js":[function(require,module,exports) {
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":"node_modules/readable-stream/lib/_stream_duplex.js"}],"node_modules/readable-stream/transform.js":[function(require,module,exports) {
module.exports = require('./readable').Transform

},{"./readable":"node_modules/readable-stream/readable-browser.js"}],"node_modules/readable-stream/passthrough.js":[function(require,module,exports) {
module.exports = require('./readable').PassThrough

},{"./readable":"node_modules/readable-stream/readable-browser.js"}],"node_modules/stream-browserify/index.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":"node_modules/events/events.js","inherits":"node_modules/inherits/inherits_browser.js","readable-stream/readable.js":"node_modules/readable-stream/readable-browser.js","readable-stream/writable.js":"node_modules/readable-stream/writable-browser.js","readable-stream/duplex.js":"node_modules/readable-stream/duplex-browser.js","readable-stream/transform.js":"node_modules/readable-stream/transform.js","readable-stream/passthrough.js":"node_modules/readable-stream/passthrough.js"}],"node_modules/hash-base/index.js":[function(require,module,exports) {

'use strict';

var Buffer = require('safe-buffer').Buffer;

var Transform = require('stream').Transform;

var inherits = require('inherits');

function throwIfNotStringOrBuffer(val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer');
  }
}

function HashBase(blockSize) {
  Transform.call(this);
  this._block = Buffer.allocUnsafe(blockSize);
  this._blockSize = blockSize;
  this._blockOffset = 0;
  this._length = [0, 0, 0, 0];
  this._finalized = false;
}

inherits(HashBase, Transform);

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null;

  try {
    this.update(chunk, encoding);
  } catch (err) {
    error = err;
  }

  callback(error);
};

HashBase.prototype._flush = function (callback) {
  var error = null;

  try {
    this.push(this.digest());
  } catch (err) {
    error = err;
  }

  callback(error);
};

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data');
  if (this._finalized) throw new Error('Digest already called');
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding); // consume data

  var block = this._block;
  var offset = 0;

  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++];

    this._update();

    this._blockOffset = 0;
  }

  while (offset < data.length) block[this._blockOffset++] = data[offset++]; // update length


  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry;
    carry = this._length[j] / 0x0100000000 | 0;
    if (carry > 0) this._length[j] -= 0x0100000000 * carry;
  }

  return this;
};

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented');
};

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called');
  this._finalized = true;

  var digest = this._digest();

  if (encoding !== undefined) digest = digest.toString(encoding); // reset state

  this._block.fill(0);

  this._blockOffset = 0;

  for (var i = 0; i < 4; ++i) this._length[i] = 0;

  return digest;
};

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented');
};

module.exports = HashBase;
},{"safe-buffer":"node_modules/safe-buffer/index.js","stream":"node_modules/stream-browserify/index.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/md5.js/index.js":[function(require,module,exports) {

'use strict'
var inherits = require('inherits')
var HashBase = require('hash-base')
var Buffer = require('safe-buffer').Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5

},{"inherits":"node_modules/inherits/inherits_browser.js","hash-base":"node_modules/hash-base/index.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/ripemd160/index.js":[function(require,module,exports) {

'use strict'
var Buffer = require('buffer').Buffer
var inherits = require('inherits')
var HashBase = require('hash-base')

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160

},{"buffer":"node_modules/buffer/index.js","inherits":"node_modules/inherits/inherits_browser.js","hash-base":"node_modules/hash-base/index.js"}],"node_modules/sha.js/hash.js":[function(require,module,exports) {

var Buffer = require('safe-buffer').Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

},{"safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/sha.js/sha.js":[function(require,module,exports) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha

},{"inherits":"node_modules/inherits/inherits_browser.js","./hash":"node_modules/sha.js/hash.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/sha.js/sha1.js":[function(require,module,exports) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

},{"inherits":"node_modules/inherits/inherits_browser.js","./hash":"node_modules/sha.js/hash.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/sha.js/sha256.js":[function(require,module,exports) {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

},{"inherits":"node_modules/inherits/inherits_browser.js","./hash":"node_modules/sha.js/hash.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/sha.js/sha224.js":[function(require,module,exports) {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Sha256 = require('./sha256')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

},{"inherits":"node_modules/inherits/inherits_browser.js","./sha256":"node_modules/sha.js/sha256.js","./hash":"node_modules/sha.js/hash.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/sha.js/sha512.js":[function(require,module,exports) {

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512

},{"inherits":"node_modules/inherits/inherits_browser.js","./hash":"node_modules/sha.js/hash.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/sha.js/sha384.js":[function(require,module,exports) {

var inherits = require('inherits')
var SHA512 = require('./sha512')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384

},{"inherits":"node_modules/inherits/inherits_browser.js","./sha512":"node_modules/sha.js/sha512.js","./hash":"node_modules/sha.js/hash.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/sha.js/index.js":[function(require,module,exports) {
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = require('./sha')
exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

},{"./sha":"node_modules/sha.js/sha.js","./sha1":"node_modules/sha.js/sha1.js","./sha224":"node_modules/sha.js/sha224.js","./sha256":"node_modules/sha.js/sha256.js","./sha384":"node_modules/sha.js/sha384.js","./sha512":"node_modules/sha.js/sha512.js"}],"node_modules/string_decoder/lib/string_decoder.js":[function(require,module,exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/cipher-base/index.js":[function(require,module,exports) {

var Buffer = require('safe-buffer').Buffer
var Transform = require('stream').Transform
var StringDecoder = require('string_decoder').StringDecoder
var inherits = require('inherits')

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase

},{"safe-buffer":"node_modules/safe-buffer/index.js","stream":"node_modules/stream-browserify/index.js","string_decoder":"node_modules/string_decoder/lib/string_decoder.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/create-hash/browser.js":[function(require,module,exports) {
'use strict'
var inherits = require('inherits')
var MD5 = require('md5.js')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')
var Base = require('cipher-base')

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}

},{"inherits":"node_modules/inherits/inherits_browser.js","md5.js":"node_modules/md5.js/index.js","ripemd160":"node_modules/ripemd160/index.js","sha.js":"node_modules/sha.js/index.js","cipher-base":"node_modules/cipher-base/index.js"}],"node_modules/create-hmac/legacy.js":[function(require,module,exports) {

'use strict'
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var Base = require('cipher-base')

var ZEROS = Buffer.alloc(128)
var blocksize = 64

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = alg(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = [ipad]
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.push(data)
}

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash))
  return this._alg(Buffer.concat([this._opad, h]))
}
module.exports = Hmac

},{"inherits":"node_modules/inherits/inherits_browser.js","safe-buffer":"node_modules/safe-buffer/index.js","cipher-base":"node_modules/cipher-base/index.js"}],"node_modules/create-hash/md5.js":[function(require,module,exports) {
var MD5 = require('md5.js')

module.exports = function (buffer) {
  return new MD5().update(buffer).digest()
}

},{"md5.js":"node_modules/md5.js/index.js"}],"node_modules/create-hmac/browser.js":[function(require,module,exports) {

'use strict'
var inherits = require('inherits')
var Legacy = require('./legacy')
var Base = require('cipher-base')
var Buffer = require('safe-buffer').Buffer
var md5 = require('create-hash/md5')
var RIPEMD160 = require('ripemd160')

var sha = require('sha.js')

var ZEROS = Buffer.alloc(128)

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    key = hash.update(key).digest()
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
  this._hash.update(ipad)
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.update(data)
}

Hmac.prototype._final = function () {
  var h = this._hash.digest()
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
  return hash.update(this._opad).update(h).digest()
}

module.exports = function createHmac (alg, key) {
  alg = alg.toLowerCase()
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key)
  }
  if (alg === 'md5') {
    return new Legacy(md5, key)
  }
  return new Hmac(alg, key)
}

},{"inherits":"node_modules/inherits/inherits_browser.js","./legacy":"node_modules/create-hmac/legacy.js","cipher-base":"node_modules/cipher-base/index.js","safe-buffer":"node_modules/safe-buffer/index.js","create-hash/md5":"node_modules/create-hash/md5.js","ripemd160":"node_modules/ripemd160/index.js","sha.js":"node_modules/sha.js/index.js"}],"node_modules/browserify-sign/browser/algorithms.json":[function(require,module,exports) {
module.exports = {
  "sha224WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "RSA-SHA224": {
    "sign": "ecdsa/rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "sha256WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "RSA-SHA256": {
    "sign": "ecdsa/rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "sha384WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "RSA-SHA384": {
    "sign": "ecdsa/rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "sha512WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA512": {
    "sign": "ecdsa/rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA1": {
    "sign": "rsa",
    "hash": "sha1",
    "id": "3021300906052b0e03021a05000414"
  },
  "ecdsa-with-SHA1": {
    "sign": "ecdsa",
    "hash": "sha1",
    "id": ""
  },
  "sha256": {
    "sign": "ecdsa",
    "hash": "sha256",
    "id": ""
  },
  "sha224": {
    "sign": "ecdsa",
    "hash": "sha224",
    "id": ""
  },
  "sha384": {
    "sign": "ecdsa",
    "hash": "sha384",
    "id": ""
  },
  "sha512": {
    "sign": "ecdsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-SHA1": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-WITH-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-WITH-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-WITH-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-WITH-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-RIPEMD160": {
    "sign": "dsa",
    "hash": "rmd160",
    "id": ""
  },
  "ripemd160WithRSA": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "RSA-RIPEMD160": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "md5WithRSAEncryption": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  },
  "RSA-MD5": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  }
}
;
},{}],"node_modules/browserify-sign/algos.js":[function(require,module,exports) {
module.exports = require('./browser/algorithms.json')

},{"./browser/algorithms.json":"node_modules/browserify-sign/browser/algorithms.json"}],"node_modules/pbkdf2/lib/precondition.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var MAX_ALLOC = Math.pow(2, 30) - 1; // default in iojs

function checkBuffer(buf, name) {
  if (typeof buf !== 'string' && !Buffer.isBuffer(buf)) {
    throw new TypeError(name + ' must be a buffer or string');
  }
}

module.exports = function (password, salt, iterations, keylen) {
  checkBuffer(password, 'Password');
  checkBuffer(salt, 'Salt');

  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number');
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations');
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number');
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
    /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length');
  }
};
},{"buffer":"node_modules/buffer/index.js"}],"node_modules/pbkdf2/lib/default-encoding.js":[function(require,module,exports) {
var process = require("process");
var defaultEncoding;
/* istanbul ignore next */

if (process.browser) {
  defaultEncoding = 'utf-8';
} else {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10);
  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary';
}

module.exports = defaultEncoding;
},{"process":"node_modules/process/browser.js"}],"node_modules/pbkdf2/lib/sync.js":[function(require,module,exports) {

var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
};

var createHmac = require('create-hmac');

var checkParameters = require('../lib/precondition');

var defaultEncoding = require('../lib/default-encoding');

var Buffer = require('safe-buffer').Buffer;

function pbkdf2(password, salt, iterations, keylen, digest) {
  checkParameters(password, salt, iterations, keylen);
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding);
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding);
  digest = digest || 'sha1';
  var DK = Buffer.allocUnsafe(keylen);
  var block1 = Buffer.allocUnsafe(salt.length + 4);
  salt.copy(block1, 0, 0, salt.length);
  var destPos = 0;
  var hLen = sizes[digest];
  var l = Math.ceil(keylen / hLen);

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length);
    var T = createHmac(digest, password).update(block1).digest();
    var U = T;

    for (var j = 1; j < iterations; j++) {
      U = createHmac(digest, password).update(U).digest();

      for (var k = 0; k < hLen; k++) T[k] ^= U[k];
    }

    T.copy(DK, destPos);
    destPos += hLen;
  }

  return DK;
}

module.exports = pbkdf2;
},{"create-hmac":"node_modules/create-hmac/browser.js","../lib/precondition":"node_modules/pbkdf2/lib/precondition.js","../lib/default-encoding":"node_modules/pbkdf2/lib/default-encoding.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/pbkdf2/lib/async.js":[function(require,module,exports) {

var global = arguments[3];
var process = require("process");
var checkParameters = require('./precondition');

var defaultEncoding = require('./default-encoding');

var sync = require('./sync');

var Buffer = require('safe-buffer').Buffer;

var ZERO_BUF;
var subtle = global.crypto && global.crypto.subtle;
var toBrowser = {
  'sha': 'SHA-1',
  'sha-1': 'SHA-1',
  'sha1': 'SHA-1',
  'sha256': 'SHA-256',
  'sha-256': 'SHA-256',
  'sha384': 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  'sha512': 'SHA-512'
};
var checks = [];

function checkNative(algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false);
  }

  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false);
  }

  if (checks[algo] !== undefined) {
    return checks[algo];
  }

  ZERO_BUF = ZERO_BUF || Buffer.alloc(8);
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function () {
    return true;
  }).catch(function () {
    return false;
  });
  checks[algo] = prom;
  return prom;
}

function browserPbkdf2(password, salt, iterations, length, algo) {
  return subtle.importKey('raw', password, {
    name: 'PBKDF2'
  }, false, ['deriveBits']).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3);
  }).then(function (res) {
    return Buffer.from(res);
  });
}

function resolvePromise(promise, callback) {
  promise.then(function (out) {
    process.nextTick(function () {
      callback(null, out);
    });
  }, function (e) {
    process.nextTick(function () {
      callback(e);
    });
  });
}

module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest;
    digest = undefined;
  }

  digest = digest || 'sha1';
  var algo = toBrowser[digest.toLowerCase()];

  if (!algo || typeof global.Promise !== 'function') {
    return process.nextTick(function () {
      var out;

      try {
        out = sync(password, salt, iterations, keylen, digest);
      } catch (e) {
        return callback(e);
      }

      callback(null, out);
    });
  }

  checkParameters(password, salt, iterations, keylen);
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2');
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding);
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding);
  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo);
    return sync(password, salt, iterations, keylen, digest);
  }), callback);
};
},{"./precondition":"node_modules/pbkdf2/lib/precondition.js","./default-encoding":"node_modules/pbkdf2/lib/default-encoding.js","./sync":"node_modules/pbkdf2/lib/sync.js","safe-buffer":"node_modules/safe-buffer/index.js","process":"node_modules/process/browser.js"}],"node_modules/pbkdf2/browser.js":[function(require,module,exports) {
exports.pbkdf2 = require('./lib/async');
exports.pbkdf2Sync = require('./lib/sync');
},{"./lib/async":"node_modules/pbkdf2/lib/async.js","./lib/sync":"node_modules/pbkdf2/lib/sync.js"}],"node_modules/des.js/lib/des/utils.js":[function(require,module,exports) {
'use strict';

exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};

},{}],"node_modules/minimalistic-assert/index.js":[function(require,module,exports) {
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],"node_modules/des.js/lib/des/cipher.js":[function(require,module,exports) {
'use strict';

var assert = require('minimalistic-assert');

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};

},{"minimalistic-assert":"node_modules/minimalistic-assert/index.js"}],"node_modules/des.js/lib/des/des.js":[function(require,module,exports) {
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var des = require('../des');
var utils = des.utils;
var Cipher = des.Cipher;

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};

},{"minimalistic-assert":"node_modules/minimalistic-assert/index.js","inherits":"node_modules/inherits/inherits_browser.js","../des":"node_modules/des.js/lib/des.js"}],"node_modules/des.js/lib/des/cbc.js":[function(require,module,exports) {
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};

},{"minimalistic-assert":"node_modules/minimalistic-assert/index.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/des.js/lib/des/ede.js":[function(require,module,exports) {
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var des = require('../des');
var Cipher = des.Cipher;
var DES = des.DES;

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"minimalistic-assert":"node_modules/minimalistic-assert/index.js","inherits":"node_modules/inherits/inherits_browser.js","../des":"node_modules/des.js/lib/des.js"}],"node_modules/des.js/lib/des.js":[function(require,module,exports) {
'use strict';

exports.utils = require('./des/utils');
exports.Cipher = require('./des/cipher');
exports.DES = require('./des/des');
exports.CBC = require('./des/cbc');
exports.EDE = require('./des/ede');

},{"./des/utils":"node_modules/des.js/lib/des/utils.js","./des/cipher":"node_modules/des.js/lib/des/cipher.js","./des/des":"node_modules/des.js/lib/des/des.js","./des/cbc":"node_modules/des.js/lib/des/cbc.js","./des/ede":"node_modules/des.js/lib/des/ede.js"}],"node_modules/browserify-des/index.js":[function(require,module,exports) {

var CipherBase = require('cipher-base')
var des = require('des.js')
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (!Buffer.isBuffer(key)) {
    key = Buffer.from(key)
  }
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  if (!Buffer.isBuffer(iv)) {
    iv = Buffer.from(iv)
  }
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return Buffer.from(this._des.update(data))
}
DES.prototype._final = function () {
  return Buffer.from(this._des.final())
}

},{"cipher-base":"node_modules/cipher-base/index.js","des.js":"node_modules/des.js/lib/des.js","inherits":"node_modules/inherits/inherits_browser.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/browserify-aes/modes/ecb.js":[function(require,module,exports) {
exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}

},{}],"node_modules/buffer-xor/index.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

},{"buffer":"node_modules/buffer/index.js"}],"node_modules/browserify-aes/modes/cbc.js":[function(require,module,exports) {
var xor = require('buffer-xor')

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}

},{"buffer-xor":"node_modules/buffer-xor/index.js"}],"node_modules/browserify-aes/modes/cfb.js":[function(require,module,exports) {

var Buffer = require('safe-buffer').Buffer
var xor = require('buffer-xor')

function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0)
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = Buffer.allocUnsafe(0)
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}

},{"safe-buffer":"node_modules/safe-buffer/index.js","buffer-xor":"node_modules/buffer-xor/index.js"}],"node_modules/browserify-aes/modes/cfb8.js":[function(require,module,exports) {

var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam

  self._prev = Buffer.concat([
    self._prev.slice(1),
    Buffer.from([decrypt ? byteParam : out])
  ])

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/browserify-aes/modes/cfb1.js":[function(require,module,exports) {

var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}

function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = Buffer.allocUnsafe(buffer.length)
  buffer = Buffer.concat([buffer, Buffer.from([value])])

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/browserify-aes/modes/ofb.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var xor = require('buffer-xor')

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

},{"buffer-xor":"node_modules/buffer-xor/index.js","buffer":"node_modules/buffer/index.js"}],"node_modules/browserify-aes/incr32.js":[function(require,module,exports) {
function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}
module.exports = incr32

},{}],"node_modules/browserify-aes/modes/ctr.js":[function(require,module,exports) {

var xor = require('buffer-xor')
var Buffer = require('safe-buffer').Buffer
var incr32 = require('../incr32')

function getBlock (self) {
  var out = self._cipher.encryptBlockRaw(self._prev)
  incr32(self._prev)
  return out
}

var blockSize = 16
exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize)
  var start = self._cache.length
  self._cache = Buffer.concat([
    self._cache,
    Buffer.allocUnsafe(chunkNum * blockSize)
  ])
  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self)
    var offset = start + i * blockSize
    self._cache.writeUInt32BE(out[0], offset + 0)
    self._cache.writeUInt32BE(out[1], offset + 4)
    self._cache.writeUInt32BE(out[2], offset + 8)
    self._cache.writeUInt32BE(out[3], offset + 12)
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

},{"buffer-xor":"node_modules/buffer-xor/index.js","safe-buffer":"node_modules/safe-buffer/index.js","../incr32":"node_modules/browserify-aes/incr32.js"}],"node_modules/browserify-aes/modes/list.json":[function(require,module,exports) {
module.exports = {
  "aes-128-ecb": {
    "cipher": "AES",
    "key": 128,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-192-ecb": {
    "cipher": "AES",
    "key": 192,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-256-ecb": {
    "cipher": "AES",
    "key": 256,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-128-cbc": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-192-cbc": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-256-cbc": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes128": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes192": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes256": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-128-cfb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-192-cfb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-256-cfb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-128-cfb8": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-192-cfb8": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-256-cfb8": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-128-cfb1": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-192-cfb1": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-256-cfb1": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-128-ofb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-192-ofb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-256-ofb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-128-ctr": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-192-ctr": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-256-ctr": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-128-gcm": {
    "cipher": "AES",
    "key": 128,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-192-gcm": {
    "cipher": "AES",
    "key": 192,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-256-gcm": {
    "cipher": "AES",
    "key": 256,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  }
}
;
},{}],"node_modules/browserify-aes/modes/index.js":[function(require,module,exports) {
var modeModules = {
  ECB: require('./ecb'),
  CBC: require('./cbc'),
  CFB: require('./cfb'),
  CFB8: require('./cfb8'),
  CFB1: require('./cfb1'),
  OFB: require('./ofb'),
  CTR: require('./ctr'),
  GCM: require('./ctr')
}

var modes = require('./list.json')

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode]
}

module.exports = modes

},{"./ecb":"node_modules/browserify-aes/modes/ecb.js","./cbc":"node_modules/browserify-aes/modes/cbc.js","./cfb":"node_modules/browserify-aes/modes/cfb.js","./cfb8":"node_modules/browserify-aes/modes/cfb8.js","./cfb1":"node_modules/browserify-aes/modes/cfb1.js","./ofb":"node_modules/browserify-aes/modes/ofb.js","./ctr":"node_modules/browserify-aes/modes/ctr.js","./list.json":"node_modules/browserify-aes/modes/list.json"}],"node_modules/browserify-aes/aes.js":[function(require,module,exports) {

// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer = require('safe-buffer').Buffer

function asUInt32Array (buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

  var len = (buf.length / 4) | 0
  var out = new Array(len)

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4)
  }

  return out
}

function scrubVec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
}

function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0]
  var SUB_MIX1 = SUB_MIX[1]
  var SUB_MIX2 = SUB_MIX[2]
  var SUB_MIX3 = SUB_MIX[3]

  var s0 = M[0] ^ keySchedule[0]
  var s1 = M[1] ^ keySchedule[1]
  var s2 = M[2] ^ keySchedule[2]
  var s3 = M[3] ^ keySchedule[3]
  var t0, t1, t2, t3
  var ksRow = 4

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }

  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  t0 = t0 >>> 0
  t1 = t1 >>> 0
  t2 = t2 >>> 0
  t3 = t3 >>> 0

  return [t0, t1, t2, t3]
}

// AES constants
var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
var G = (function () {
  // Compute double table
  var d = new Array(256)
  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1
    } else {
      d[j] = (j << 1) ^ 0x11b
    }
  }

  var SBOX = []
  var INV_SBOX = []
  var SUB_MIX = [[], [], [], []]
  var INV_SUB_MIX = [[], [], [], []]

  // Walk GF(2^8)
  var x = 0
  var xi = 0
  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    SBOX[x] = sx
    INV_SBOX[sx] = x

    // Compute multiplication
    var x2 = d[x]
    var x4 = d[x2]
    var x8 = d[x4]

    // Compute sub bytes, mix columns tables
    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    SUB_MIX[3][x] = t

    // Compute inv sub bytes, inv mix columns tables
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    INV_SUB_MIX[3][sx] = t

    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  }
})()

function AES (key) {
  this._key = asUInt32Array(key)
  this._reset()
}

AES.blockSize = 4 * 4
AES.keySize = 256 / 8
AES.prototype.blockSize = AES.blockSize
AES.prototype.keySize = AES.keySize
AES.prototype._reset = function () {
  var keyWords = this._key
  var keySize = keyWords.length
  var nRounds = keySize + 6
  var ksRows = (nRounds + 1) * 4

  var keySchedule = []
  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k]
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1]

    if (k % keySize === 0) {
      t = (t << 8) | (t >>> 24)
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])

      t ^= RCON[(k / keySize) | 0] << 24
    } else if (keySize > 6 && k % keySize === 4) {
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t
  }

  var invKeySchedule = []
  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt
    } else {
      invKeySchedule[ik] =
        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
    }
  }

  this._nRounds = nRounds
  this._keySchedule = keySchedule
  this._invKeySchedule = invKeySchedule
}

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M)
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
}

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M)

  // swap
  var m1 = M[1]
  M[1] = M[3]
  M[3] = m1

  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule)
  scrubVec(this._invKeySchedule)
  scrubVec(this._key)
}

module.exports.AES = AES

},{"safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/browserify-aes/ghash.js":[function(require,module,exports) {

var Buffer = require('safe-buffer').Buffer
var ZEROES = Buffer.alloc(16, 0)

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}

function fromArray (out) {
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0] >>> 0, 0)
  buf.writeUInt32BE(out[1] >>> 0, 4)
  buf.writeUInt32BE(out[2] >>> 0, 8)
  buf.writeUInt32BE(out[3] >>> 0, 12)
  return buf
}

function GHASH (key) {
  this.h = key
  this.state = Buffer.alloc(16, 0)
  this.cache = Buffer.allocUnsafe(0)
}

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho VÃ¤hÃ¤-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsbVi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0]
      Zi[1] ^= Vi[1]
      Zi[2] ^= Vi[2]
      Zi[3] ^= Vi[3]
    }

    // Store the value of LSB(V_i)
    lsbVi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsbVi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16))
  }

  this.ghash(fromArray([0, abl, 0, bl]))
  return this.state
}

module.exports = GHASH

},{"safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/browserify-aes/authCipher.js":[function(require,module,exports) {

var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('buffer-xor')
var incr32 = require('./incr32')

function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) out++

  var len = Math.min(a.length, b.length)
  for (var i = 0; i < len; ++i) {
    out += (a[i] ^ b[i])
  }

  return out
}

function calcIv (self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
  }
  var ghash = new GHASH(ck)
  var len = iv.length
  var toPad = len % 16
  ghash.update(iv)
  if (toPad) {
    toPad = 16 - toPad
    ghash.update(Buffer.alloc(toPad, 0))
  }
  ghash.update(Buffer.alloc(8, 0))
  var ivBits = len * 8
  var tail = Buffer.alloc(8)
  tail.writeUIntBE(ivBits, 0, 8)
  ghash.update(tail)
  self._finID = ghash.state
  var out = Buffer.from(self._finID)
  incr32(out)
  return out
}
function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  var h = Buffer.alloc(4, 0)

  this._cipher = new aes.AES(key)
  var ck = this._cipher.encryptBlock(h)
  this._ghash = new GHASH(ck)
  iv = calcIv(this, iv, ck)

  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  this._mode = mode

  this._authTag = null
  this._called = false
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = Buffer.alloc(rump, 0)
      this._ghash.update(rump)
    }
  }

  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

  this._authTag = tag
  this._cipher.scrub()
}

StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

  return this._authTag
}

StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

  this._authTag = tag
}

StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state')

  this._ghash.update(buf)
  this._alen += buf.length
}

module.exports = StreamCipher

},{"./aes":"node_modules/browserify-aes/aes.js","safe-buffer":"node_modules/safe-buffer/index.js","cipher-base":"node_modules/cipher-base/index.js","inherits":"node_modules/inherits/inherits_browser.js","./ghash":"node_modules/browserify-aes/ghash.js","buffer-xor":"node_modules/buffer-xor/index.js","./incr32":"node_modules/browserify-aes/incr32.js"}],"node_modules/browserify-aes/streamCipher.js":[function(require,module,exports) {

var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')

function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._mode = mode
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}

StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

module.exports = StreamCipher

},{"./aes":"node_modules/browserify-aes/aes.js","safe-buffer":"node_modules/safe-buffer/index.js","cipher-base":"node_modules/cipher-base/index.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/evp_bytestokey/index.js":[function(require,module,exports) {

var Buffer = require('safe-buffer').Buffer
var MD5 = require('md5.js')

/* eslint-disable camelcase */
function EVP_BytesToKey (password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
  }

  var keyLen = keyBits / 8
  var key = Buffer.alloc(keyLen)
  var iv = Buffer.alloc(ivLen || 0)
  var tmp = Buffer.alloc(0)

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5()
    hash.update(tmp)
    hash.update(password)
    if (salt) hash.update(salt)
    tmp = hash.digest()

    var used = 0

    if (keyLen > 0) {
      var keyStart = key.length - keyLen
      used = Math.min(keyLen, tmp.length)
      tmp.copy(key, keyStart, 0, used)
      keyLen -= used
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen
      var length = Math.min(ivLen, tmp.length - used)
      tmp.copy(iv, ivStart, used, used + length)
      ivLen -= length
    }
  }

  tmp.fill(0)
  return { key: key, iv: iv }
}

module.exports = EVP_BytesToKey

},{"safe-buffer":"node_modules/safe-buffer/index.js","md5.js":"node_modules/md5.js/index.js"}],"node_modules/browserify-aes/encrypter.js":[function(require,module,exports) {

var MODES = require('./modes')
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Cipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Cipher, Transform)

Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []

  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }

  return Buffer.concat(out)
}

var PADDING = Buffer.alloc(16, 0x10)

Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = Buffer.allocUnsafe(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }

  return Buffer.concat([this.cache, padBuff])
}

function createCipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv)
  }

  return new Cipher(config.module, password, iv)
}

function createCipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

},{"./modes":"node_modules/browserify-aes/modes/index.js","./authCipher":"node_modules/browserify-aes/authCipher.js","safe-buffer":"node_modules/safe-buffer/index.js","./streamCipher":"node_modules/browserify-aes/streamCipher.js","cipher-base":"node_modules/cipher-base/index.js","./aes":"node_modules/browserify-aes/aes.js","evp_bytestokey":"node_modules/evp_bytestokey/index.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/browserify-aes/decrypter.js":[function(require,module,exports) {

var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var MODES = require('./modes')
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Decipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Decipher, Transform)

Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}

Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }

  return null
}

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache
}

function unpad (last) {
  var padded = last[15]
  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data')
  }
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) return

  return last.slice(0, 16 - padded)
}

function createDecipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true)
  }

  return new Decipher(config.module, password, iv)
}

function createDecipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}

exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

},{"./authCipher":"node_modules/browserify-aes/authCipher.js","safe-buffer":"node_modules/safe-buffer/index.js","./modes":"node_modules/browserify-aes/modes/index.js","./streamCipher":"node_modules/browserify-aes/streamCipher.js","cipher-base":"node_modules/cipher-base/index.js","./aes":"node_modules/browserify-aes/aes.js","evp_bytestokey":"node_modules/evp_bytestokey/index.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/browserify-aes/browser.js":[function(require,module,exports) {
var ciphers = require('./encrypter')
var deciphers = require('./decrypter')
var modes = require('./modes/list.json')

function getCiphers () {
  return Object.keys(modes)
}

exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"./encrypter":"node_modules/browserify-aes/encrypter.js","./decrypter":"node_modules/browserify-aes/decrypter.js","./modes/list.json":"node_modules/browserify-aes/modes/list.json"}],"node_modules/browserify-des/modes.js":[function(require,module,exports) {
exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}

},{}],"node_modules/browserify-cipher/browser.js":[function(require,module,exports) {
var DES = require('browserify-des')
var aes = require('browserify-aes/browser')
var aesModes = require('browserify-aes/modes')
var desModes = require('browserify-des/modes')
var ebtk = require('evp_bytestokey')

function createCipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}

function createDecipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

  throw new TypeError('invalid suite type')
}

function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

  throw new TypeError('invalid suite type')
}

function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}

exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"browserify-des":"node_modules/browserify-des/index.js","browserify-aes/browser":"node_modules/browserify-aes/browser.js","browserify-aes/modes":"node_modules/browserify-aes/modes/index.js","browserify-des/modes":"node_modules/browserify-des/modes.js","evp_bytestokey":"node_modules/evp_bytestokey/index.js"}],"node_modules/bn.js/lib/bn.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = require('buffer').Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":"node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/brorand/index.js":[function(require,module,exports) {
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = require('crypto');
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}

},{"crypto":"node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/miller-rabin/lib/mr.js":[function(require,module,exports) {
var bn = require('bn.js');
var brorand = require('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do
    var a = new bn(this.rand.generate(min_bytes));
  while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

},{"bn.js":"node_modules/bn.js/lib/bn.js","brorand":"node_modules/brorand/index.js"}],"node_modules/diffie-hellman/lib/generatePrime.js":[function(require,module,exports) {
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}

},{"randombytes":"node_modules/randombytes/browser.js","bn.js":"node_modules/bn.js/lib/bn.js","miller-rabin":"node_modules/miller-rabin/lib/mr.js"}],"node_modules/diffie-hellman/lib/primes.json":[function(require,module,exports) {
module.exports = {
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
};
},{}],"node_modules/diffie-hellman/lib/dh.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

},{"bn.js":"node_modules/bn.js/lib/bn.js","miller-rabin":"node_modules/miller-rabin/lib/mr.js","./generatePrime":"node_modules/diffie-hellman/lib/generatePrime.js","randombytes":"node_modules/randombytes/browser.js","buffer":"node_modules/buffer/index.js"}],"node_modules/diffie-hellman/browser.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var generatePrime = require('./lib/generatePrime')
var primes = require('./lib/primes.json')

var DH = require('./lib/dh')

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

},{"./lib/generatePrime":"node_modules/diffie-hellman/lib/generatePrime.js","./lib/primes.json":"node_modules/diffie-hellman/lib/primes.json","./lib/dh":"node_modules/diffie-hellman/lib/dh.js","buffer":"node_modules/buffer/index.js"}],"node_modules/browserify-rsa/index.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var bn = require('bn.js');
var randomBytes = require('randombytes');
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).umod(p);
  h.imul(q);
  m2.iadd(h);
  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}

},{"bn.js":"node_modules/bn.js/lib/bn.js","randombytes":"node_modules/randombytes/browser.js","buffer":"node_modules/buffer/index.js"}],"node_modules/elliptic/package.json":[function(require,module,exports) {
module.exports = {
  "name": "elliptic",
  "version": "6.4.1",
  "description": "EC cryptography",
  "main": "lib/elliptic.js",
  "files": [
    "lib"
  ],
  "scripts": {
    "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "lint": "npm run jscs && npm run jshint",
    "unit": "istanbul test _mocha --reporter=spec test/index.js",
    "test": "npm run lint && npm run unit",
    "version": "grunt dist && git add dist/"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:indutny/elliptic"
  },
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "author": "Fedor Indutny <fedor@indutny.com>",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "homepage": "https://github.com/indutny/elliptic",
  "devDependencies": {
    "brfs": "^1.4.3",
    "coveralls": "^2.11.3",
    "grunt": "^0.4.5",
    "grunt-browserify": "^5.0.0",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-connect": "^1.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^1.0.1",
    "grunt-mocha-istanbul": "^3.0.1",
    "grunt-saucelabs": "^8.6.2",
    "istanbul": "^0.4.2",
    "jscs": "^2.9.0",
    "jshint": "^2.6.0",
    "mocha": "^2.1.0"
  },
  "dependencies": {
    "bn.js": "^4.4.0",
    "brorand": "^1.0.1",
    "hash.js": "^1.0.0",
    "hmac-drbg": "^1.0.0",
    "inherits": "^2.0.1",
    "minimalistic-assert": "^1.0.0",
    "minimalistic-crypto-utils": "^1.0.0"
  }
}
;
},{}],"node_modules/minimalistic-crypto-utils/lib/utils.js":[function(require,module,exports) {
'use strict';

var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

},{}],"node_modules/elliptic/lib/elliptic/utils.js":[function(require,module,exports) {
'use strict';

var utils = exports;
var BN = require('bn.js');
var minAssert = require('minimalistic-assert');
var minUtils = require('minimalistic-crypto-utils');

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w) {
  var naf = [];
  var ws = 1 << (w + 1);
  var k = num.clone();
  while (k.cmpn(1) >= 0) {
    var z;
    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }
    naf.push(z);

    // Optimization, shift by word if possible
    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
    for (var i = 1; i < shift; i++)
      naf.push(0);
    k.iushrn(shift);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
           this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                     bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;


},{"bn.js":"node_modules/bn.js/lib/bn.js","minimalistic-assert":"node_modules/minimalistic-assert/index.js","minimalistic-crypto-utils":"node_modules/minimalistic-crypto-utils/lib/utils.js"}],"node_modules/elliptic/lib/elliptic/curve/base.js":[function(require,module,exports) {
'use strict';

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len,
                                                       jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
                          bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"bn.js":"node_modules/bn.js/lib/bn.js","../../elliptic":"node_modules/elliptic/lib/elliptic.js"}],"node_modules/elliptic/lib/elliptic/curve/short.js":[function(require,module,exports) {
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);

  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../curve":"node_modules/elliptic/lib/elliptic/curve/index.js","../../elliptic":"node_modules/elliptic/lib/elliptic.js","bn.js":"node_modules/bn.js/lib/bn.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/elliptic/lib/elliptic/curve/mont.js":[function(require,module,exports) {
'use strict';

var curve = require('../curve');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var elliptic = require('../../elliptic');
var utils = elliptic.utils;

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../curve":"node_modules/elliptic/lib/elliptic/curve/index.js","bn.js":"node_modules/bn.js/lib/bn.js","inherits":"node_modules/inherits/inherits_browser.js","../../elliptic":"node_modules/elliptic/lib/elliptic.js"}],"node_modules/elliptic/lib/elliptic/curve/edwards.js":[function(require,module,exports) {
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../curve":"node_modules/elliptic/lib/elliptic/curve/index.js","../../elliptic":"node_modules/elliptic/lib/elliptic.js","bn.js":"node_modules/bn.js/lib/bn.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/elliptic/lib/elliptic/curve/index.js":[function(require,module,exports) {
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":"node_modules/elliptic/lib/elliptic/curve/base.js","./short":"node_modules/elliptic/lib/elliptic/curve/short.js","./mont":"node_modules/elliptic/lib/elliptic/curve/mont.js","./edwards":"node_modules/elliptic/lib/elliptic/curve/edwards.js"}],"node_modules/hash.js/lib/hash/utils.js":[function(require,module,exports) {
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"minimalistic-assert":"node_modules/minimalistic-assert/index.js","inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/hash.js/lib/hash/common.js":[function(require,module,exports) {
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"./utils":"node_modules/hash.js/lib/hash/utils.js","minimalistic-assert":"node_modules/minimalistic-assert/index.js"}],"node_modules/hash.js/lib/hash/sha/common.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;

},{"../utils":"node_modules/hash.js/lib/hash/utils.js"}],"node_modules/hash.js/lib/hash/sha/1.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../utils":"node_modules/hash.js/lib/hash/utils.js","../common":"node_modules/hash.js/lib/hash/common.js","./common":"node_modules/hash.js/lib/hash/sha/common.js"}],"node_modules/hash.js/lib/hash/sha/256.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var assert = require('minimalistic-assert');

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../utils":"node_modules/hash.js/lib/hash/utils.js","../common":"node_modules/hash.js/lib/hash/common.js","./common":"node_modules/hash.js/lib/hash/sha/common.js","minimalistic-assert":"node_modules/minimalistic-assert/index.js"}],"node_modules/hash.js/lib/hash/sha/224.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var SHA256 = require('./256');

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};


},{"../utils":"node_modules/hash.js/lib/hash/utils.js","./256":"node_modules/hash.js/lib/hash/sha/256.js"}],"node_modules/hash.js/lib/hash/sha/512.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var common = require('../common');
var assert = require('minimalistic-assert');

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../utils":"node_modules/hash.js/lib/hash/utils.js","../common":"node_modules/hash.js/lib/hash/common.js","minimalistic-assert":"node_modules/minimalistic-assert/index.js"}],"node_modules/hash.js/lib/hash/sha/384.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');

var SHA512 = require('./512');

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

},{"../utils":"node_modules/hash.js/lib/hash/utils.js","./512":"node_modules/hash.js/lib/hash/sha/512.js"}],"node_modules/hash.js/lib/hash/sha.js":[function(require,module,exports) {
'use strict';

exports.sha1 = require('./sha/1');
exports.sha224 = require('./sha/224');
exports.sha256 = require('./sha/256');
exports.sha384 = require('./sha/384');
exports.sha512 = require('./sha/512');

},{"./sha/1":"node_modules/hash.js/lib/hash/sha/1.js","./sha/224":"node_modules/hash.js/lib/hash/sha/224.js","./sha/256":"node_modules/hash.js/lib/hash/sha/256.js","./sha/384":"node_modules/hash.js/lib/hash/sha/384.js","./sha/512":"node_modules/hash.js/lib/hash/sha/512.js"}],"node_modules/hash.js/lib/hash/ripemd.js":[function(require,module,exports) {
'use strict';

var utils = require('./utils');
var common = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"./utils":"node_modules/hash.js/lib/hash/utils.js","./common":"node_modules/hash.js/lib/hash/common.js"}],"node_modules/hash.js/lib/hash/hmac.js":[function(require,module,exports) {
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"./utils":"node_modules/hash.js/lib/hash/utils.js","minimalistic-assert":"node_modules/minimalistic-assert/index.js"}],"node_modules/hash.js/lib/hash.js":[function(require,module,exports) {
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/utils":"node_modules/hash.js/lib/hash/utils.js","./hash/common":"node_modules/hash.js/lib/hash/common.js","./hash/sha":"node_modules/hash.js/lib/hash/sha.js","./hash/ripemd":"node_modules/hash.js/lib/hash/ripemd.js","./hash/hmac":"node_modules/hash.js/lib/hash/hmac.js"}],"node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js":[function(require,module,exports) {
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};

},{}],"node_modules/elliptic/lib/elliptic/curves.js":[function(require,module,exports) {
'use strict';

var curves = exports;

var hash = require('hash.js');
var elliptic = require('../elliptic');

var assert = elliptic.utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new elliptic.curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new elliptic.curve.edwards(options);
  else
    this.curve = new elliptic.curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
  ]
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});

},{"hash.js":"node_modules/hash.js/lib/hash.js","../elliptic":"node_modules/elliptic/lib/elliptic.js","./precomputed/secp256k1":"node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js"}],"node_modules/hmac-drbg/lib/hmac-drbg.js":[function(require,module,exports) {
'use strict';

var hash = require('hash.js');
var utils = require('minimalistic-crypto-utils');
var assert = require('minimalistic-assert');

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};

},{"hash.js":"node_modules/hash.js/lib/hash.js","minimalistic-crypto-utils":"node_modules/minimalistic-crypto-utils/lib/utils.js","minimalistic-assert":"node_modules/minimalistic-assert/index.js"}],"node_modules/elliptic/lib/elliptic/ec/key.js":[function(require,module,exports) {
'use strict';

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"bn.js":"node_modules/bn.js/lib/bn.js","../../elliptic":"node_modules/elliptic/lib/elliptic.js"}],"node_modules/elliptic/lib/elliptic/ec/signature.js":[function(require,module,exports) {
'use strict';

var BN = require('bn.js');

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }
  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0 && (r[1] & 0x80)) {
    r = r.slice(1);
  }
  if (s[0] === 0 && (s[1] & 0x80)) {
    s = s.slice(1);
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

},{"bn.js":"node_modules/bn.js/lib/bn.js","../../elliptic":"node_modules/elliptic/lib/elliptic.js"}],"node_modules/elliptic/lib/elliptic/ec/index.js":[function(require,module,exports) {
'use strict';

var BN = require('bn.js');
var HmacDRBG = require('hmac-drbg');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = elliptic.curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof elliptic.curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ?
        options.k(iter) :
        new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"bn.js":"node_modules/bn.js/lib/bn.js","hmac-drbg":"node_modules/hmac-drbg/lib/hmac-drbg.js","../../elliptic":"node_modules/elliptic/lib/elliptic.js","./key":"node_modules/elliptic/lib/elliptic/ec/key.js","./signature":"node_modules/elliptic/lib/elliptic/ec/signature.js"}],"node_modules/elliptic/lib/elliptic/eddsa/key.js":[function(require,module,exports) {
'use strict';

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

},{"../../elliptic":"node_modules/elliptic/lib/elliptic.js"}],"node_modules/elliptic/lib/elliptic/eddsa/signature.js":[function(require,module,exports) {
'use strict';

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

},{"bn.js":"node_modules/bn.js/lib/bn.js","../../elliptic":"node_modules/elliptic/lib/elliptic.js"}],"node_modules/elliptic/lib/elliptic/eddsa/index.js":[function(require,module,exports) {
'use strict';

var hash = require('hash.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  var curve = elliptic.curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
               .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

},{"hash.js":"node_modules/hash.js/lib/hash.js","../../elliptic":"node_modules/elliptic/lib/elliptic.js","./key":"node_modules/elliptic/lib/elliptic/eddsa/key.js","./signature":"node_modules/elliptic/lib/elliptic/eddsa/signature.js"}],"node_modules/elliptic/lib/elliptic.js":[function(require,module,exports) {
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":"node_modules/elliptic/package.json","./elliptic/utils":"node_modules/elliptic/lib/elliptic/utils.js","brorand":"node_modules/brorand/index.js","./elliptic/curve":"node_modules/elliptic/lib/elliptic/curve/index.js","./elliptic/curves":"node_modules/elliptic/lib/elliptic/curves.js","./elliptic/ec":"node_modules/elliptic/lib/elliptic/ec/index.js","./elliptic/eddsa":"node_modules/elliptic/lib/elliptic/eddsa/index.js"}],"node_modules/indexof/index.js":[function(require,module,exports) {

var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};
},{}],"node_modules/vm-browserify/index.js":[function(require,module,exports) {
var indexOf = require('indexof');

var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    forEach(Object_keys(ctx), function (key) {
        context[key] = ctx[key];
    });

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};

},{"indexof":"node_modules/indexof/index.js"}],"node_modules/asn1.js/lib/asn1/api.js":[function(require,module,exports) {
var asn1 = require('../asn1');
var inherits = require('inherits');

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = require('vm').runInThisContext(
      '(function ' + this.name + '(entity) {\n' +
      '  this._initNamed(entity);\n' +
      '})'
    );
  } catch (e) {
    named = function (entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"../asn1":"node_modules/asn1.js/lib/asn1.js","inherits":"node_modules/inherits/inherits_browser.js","vm":"node_modules/vm-browserify/index.js"}],"node_modules/asn1.js/lib/asn1/base/reporter.js":[function(require,module,exports) {
var inherits = require('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};

},{"inherits":"node_modules/inherits/inherits_browser.js"}],"node_modules/asn1.js/lib/asn1/base/buffer.js":[function(require,module,exports) {

var inherits = require('inherits');
var Reporter = require('../base').Reporter;
var Buffer = require('buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"inherits":"node_modules/inherits/inherits_browser.js","../base":"node_modules/asn1.js/lib/asn1/base/index.js","buffer":"node_modules/buffer/index.js"}],"node_modules/asn1.js/lib/asn1/base/node.js":[function(require,module,exports) {
var Reporter = require('../base').Reporter;
var EncoderBuffer = require('../base').EncoderBuffer;
var DecoderBuffer = require('../base').DecoderBuffer;
var assert = require('minimalistic-assert');

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  var result = state['default'];
  var present = true;

  var prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    var tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    var start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input, options);
    else
      result = this._decodeChoice(input, options);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      var data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
          ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
        ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
};

},{"../base":"node_modules/asn1.js/lib/asn1/base/index.js","minimalistic-assert":"node_modules/minimalistic-assert/index.js"}],"node_modules/asn1.js/lib/asn1/base/index.js":[function(require,module,exports) {
var base = exports;

base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./reporter":"node_modules/asn1.js/lib/asn1/base/reporter.js","./buffer":"node_modules/asn1.js/lib/asn1/base/buffer.js","./node":"node_modules/asn1.js/lib/asn1/base/node.js"}],"node_modules/asn1.js/lib/asn1/constants/der.js":[function(require,module,exports) {
var constants = require('../constants');

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);

},{"../constants":"node_modules/asn1.js/lib/asn1/constants/index.js"}],"node_modules/asn1.js/lib/asn1/constants/index.js":[function(require,module,exports) {
var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = require('./der');

},{"./der":"node_modules/asn1.js/lib/asn1/constants/der.js"}],"node_modules/asn1.js/lib/asn1/decoders/der.js":[function(require,module,exports) {
var inherits = require('inherits');

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.save();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
                                                    options) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    var raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    var str = '';
    for (var i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    var numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    var printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var result;
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    var tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}

},{"inherits":"node_modules/inherits/inherits_browser.js","../../asn1":"node_modules/asn1.js/lib/asn1.js"}],"node_modules/asn1.js/lib/asn1/decoders/pem.js":[function(require,module,exports) {

var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var DERDecoder = require('./der');

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);

  var label = options.label.toUpperCase();

  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;
  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  var base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9\+\/=]+/gi, '');

  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

},{"inherits":"node_modules/inherits/inherits_browser.js","buffer":"node_modules/buffer/index.js","./der":"node_modules/asn1.js/lib/asn1/decoders/der.js"}],"node_modules/asn1.js/lib/asn1/decoders/index.js":[function(require,module,exports) {
var decoders = exports;

decoders.der = require('./der');
decoders.pem = require('./pem');

},{"./der":"node_modules/asn1.js/lib/asn1/decoders/der.js","./pem":"node_modules/asn1.js/lib/asn1/decoders/pem.js"}],"node_modules/asn1.js/lib/asn1/encoders/der.js":[function(require,module,exports) {

var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var base = asn1.base;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    var buf = new Buffer(str.length * 2);
    for (var i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}

},{"inherits":"node_modules/inherits/inherits_browser.js","buffer":"node_modules/buffer/index.js","../../asn1":"node_modules/asn1.js/lib/asn1.js"}],"node_modules/asn1.js/lib/asn1/encoders/pem.js":[function(require,module,exports) {
var inherits = require('inherits');

var DEREncoder = require('./der');

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);

  var p = buf.toString('base64');
  var out = [ '-----BEGIN ' + options.label + '-----' ];
  for (var i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

},{"inherits":"node_modules/inherits/inherits_browser.js","./der":"node_modules/asn1.js/lib/asn1/encoders/der.js"}],"node_modules/asn1.js/lib/asn1/encoders/index.js":[function(require,module,exports) {
var encoders = exports;

encoders.der = require('./der');
encoders.pem = require('./pem');

},{"./der":"node_modules/asn1.js/lib/asn1/encoders/der.js","./pem":"node_modules/asn1.js/lib/asn1/encoders/pem.js"}],"node_modules/asn1.js/lib/asn1.js":[function(require,module,exports) {
var asn1 = exports;

asn1.bignum = require('bn.js');

asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"bn.js":"node_modules/bn.js/lib/bn.js","./asn1/api":"node_modules/asn1.js/lib/asn1/api.js","./asn1/base":"node_modules/asn1.js/lib/asn1/base/index.js","./asn1/constants":"node_modules/asn1.js/lib/asn1/constants/index.js","./asn1/decoders":"node_modules/asn1.js/lib/asn1/decoders/index.js","./asn1/encoders":"node_modules/asn1.js/lib/asn1/encoders/index.js"}],"node_modules/parse-asn1/certificate.js":[function(require,module,exports) {
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen

'use strict'

var asn = require('asn1.js')

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  })
})

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(
    this.key('type').objid(),
    this.key('value').any()
  )
})

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional(),
    this.key('curve').objid().optional()
  )
})

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue)
})

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName)
})

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  })
})

var Validity = asn.define('Validity', function () {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  )
})

var Extension = asn.define('Extension', function () {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  )
})

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(
    this.key('version').explicit(0).int().optional(),
    this.key('serialNumber').int(),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
    this.key('extensions').explicit(3).seqof(Extension).optional()
  )
})

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signatureValue').bitstr()
  )
})

module.exports = X509Certificate

},{"asn1.js":"node_modules/asn1.js/lib/asn1.js"}],"node_modules/parse-asn1/asn1.js":[function(require,module,exports) {
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
'use strict'

var asn1 = require('asn1.js')

exports.certificate = require('./certificate')

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})

},{"asn1.js":"node_modules/asn1.js/lib/asn1.js","./certificate":"node_modules/parse-asn1/certificate.js"}],"node_modules/parse-asn1/aesid.json":[function(require,module,exports) {
module.exports = {"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
};
},{}],"node_modules/parse-asn1/fixProc.js":[function(require,module,exports) {

// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m
var evp = require('evp_bytestokey')
var ciphers = require('browserify-aes')
var Buffer = require('safe-buffer').Buffer
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = new Buffer(match2[2].replace(/[\r\n]/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = Buffer.from(match[2], 'hex')
    var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1]
  return {
    tag: tag,
    data: decrypted
  }
}

},{"evp_bytestokey":"node_modules/evp_bytestokey/index.js","browserify-aes":"node_modules/browserify-aes/browser.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/parse-asn1/index.js":[function(require,module,exports) {

var asn1 = require('./asn1')
var aesid = require('./aesid.json')
var fixProc = require('./fixProc')
var ciphers = require('browserify-aes')
var compat = require('pbkdf2')
var Buffer = require('safe-buffer').Buffer
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
      // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der')
      }
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}

},{"./asn1":"node_modules/parse-asn1/asn1.js","./aesid.json":"node_modules/parse-asn1/aesid.json","./fixProc":"node_modules/parse-asn1/fixProc.js","browserify-aes":"node_modules/browserify-aes/browser.js","pbkdf2":"node_modules/pbkdf2/browser.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/browserify-sign/browser/curves.json":[function(require,module,exports) {
module.exports = {
  "1.3.132.0.10": "secp256k1",
  "1.3.132.0.33": "p224",
  "1.2.840.10045.3.1.1": "p192",
  "1.2.840.10045.3.1.7": "p256",
  "1.3.132.0.34": "p384",
  "1.3.132.0.35": "p521"
}
;
},{}],"node_modules/browserify-sign/browser/sign.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var createHmac = require('create-hmac')
var crt = require('browserify-rsa')
var EC = require('elliptic').ec
var BN = require('bn.js')
var parseKeys = require('parse-asn1')
var curves = require('./curves.json')

function sign (hash, key, hashType, signType, tag) {
  var priv = parseKeys(key)
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong private key type')
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = priv.modulus.byteLength()
  var pad = [ 0, 1 ]
  while (hash.length + pad.length + 1 < len) pad.push(0xff)
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) pad.push(hash[i])

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.keyFromPrivate(priv.privateKey)
  var out = key.sign(hash)

  return new Buffer(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (s.cmpn(0) === 0) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) r = [ 0 ].concat(r)
  if (s[0] & 0x80) s = [ 0 ].concat(s)

  var total = r.length + s.length + 4
  var res = [ 0x30, total, 0x02, r.length ]
  res = res.concat(r, [ 0x02, s.length ], s)
  return new Buffer(res)
}

function getKey (x, q, hash, algo) {
  x = new Buffer(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length)
    zeros.fill(0)
    x = Buffer.concat([ zeros, x ])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = new Buffer(hlen)
  v.fill(1)
  var k = new Buffer(hlen)
  k.fill(0)
  k = createHmac(algo, k).update(v).update(new Buffer([ 0 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  k = createHmac(algo, k).update(v).update(new Buffer([ 1 ])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  return { k: k, v: v }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) bits.ishrn(shift)
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = new Buffer(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length)
    zeros.fill(0)
    out = Buffer.concat([ zeros, out ])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t
  var k

  do {
    t = new Buffer(0)

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest()
      t = Buffer.concat([ t, kv.v ])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([ 0 ])).digest()
    kv.v = createHmac(algo, kv.k).update(kv.v).digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

},{"create-hmac":"node_modules/create-hmac/browser.js","browserify-rsa":"node_modules/browserify-rsa/index.js","elliptic":"node_modules/elliptic/lib/elliptic.js","bn.js":"node_modules/bn.js/lib/bn.js","parse-asn1":"node_modules/parse-asn1/index.js","./curves.json":"node_modules/browserify-sign/browser/curves.json","buffer":"node_modules/buffer/index.js"}],"node_modules/browserify-sign/browser/verify.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var BN = require('bn.js')
var EC = require('elliptic').ec
var parseKeys = require('parse-asn1')
var curves = require('./curves.json')

function verify (sig, hash, key, signType, tag) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong public key type')
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = pub.modulus.byteLength()
  var pad = [ 1 ]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = new Buffer(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))
  sig = new Buffer(sig.fromRed().toArray())
  var out = padNum < 8 ? 1 : 0
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) out = 1

  i = -1
  while (++i < len) out |= sig[i] ^ pad[i]
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
    .mod(p)
    .mod(q)
  return v.cmp(r) === 0
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) throw new Error('invalid sig')
  if (b.cmp(q) >= q) throw new Error('invalid sig')
}

module.exports = verify

},{"bn.js":"node_modules/bn.js/lib/bn.js","elliptic":"node_modules/elliptic/lib/elliptic.js","parse-asn1":"node_modules/parse-asn1/index.js","./curves.json":"node_modules/browserify-sign/browser/curves.json","buffer":"node_modules/buffer/index.js"}],"node_modules/browserify-sign/browser/index.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var createHash = require('create-hash')
var stream = require('stream')
var inherits = require('inherits')
var sign = require('./sign')
var verify = require('./verify')

var algorithms = require('./algorithms.json')
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = new Buffer(algorithms[key].id, 'hex')
  algorithms[key.toLowerCase()] = algorithms[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(hash, key, this._hashType, this._signType, this._tag)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') sig = new Buffer(sig, enc)

  this.end()
  var hash = this._hash.digest()
  return verify(sig, hash, key, this._signType, this._tag)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

},{"create-hash":"node_modules/create-hash/browser.js","stream":"node_modules/stream-browserify/index.js","inherits":"node_modules/inherits/inherits_browser.js","./sign":"node_modules/browserify-sign/browser/sign.js","./verify":"node_modules/browserify-sign/browser/verify.js","./algorithms.json":"node_modules/browserify-sign/browser/algorithms.json","buffer":"node_modules/buffer/index.js"}],"node_modules/create-ecdh/browser.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var elliptic = require('elliptic')
var BN = require('bn.js')

module.exports = function createECDH (curve) {
  return new ECDH(curve)
}

var aliases = {
  secp256k1: {
    name: 'secp256k1',
    byteLength: 32
  },
  secp224r1: {
    name: 'p224',
    byteLength: 28
  },
  prime256v1: {
    name: 'p256',
    byteLength: 32
  },
  prime192v1: {
    name: 'p192',
    byteLength: 24
  },
  ed25519: {
    name: 'ed25519',
    byteLength: 32
  },
  secp384r1: {
    name: 'p384',
    byteLength: 48
  },
  secp521r1: {
    name: 'p521',
    byteLength: 66
  }
}

aliases.p224 = aliases.secp224r1
aliases.p256 = aliases.secp256r1 = aliases.prime256v1
aliases.p192 = aliases.secp192r1 = aliases.prime192v1
aliases.p384 = aliases.secp384r1
aliases.p521 = aliases.secp521r1

function ECDH (curve) {
  this.curveType = aliases[curve]
  if (!this.curveType) {
    this.curveType = {
      name: curve
    }
  }
  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
  this.keys = void 0
}

ECDH.prototype.generateKeys = function (enc, format) {
  this.keys = this.curve.genKeyPair()
  return this.getPublicKey(enc, format)
}

ECDH.prototype.computeSecret = function (other, inenc, enc) {
  inenc = inenc || 'utf8'
  if (!Buffer.isBuffer(other)) {
    other = new Buffer(other, inenc)
  }
  var otherPub = this.curve.keyFromPublic(other).getPublic()
  var out = otherPub.mul(this.keys.getPrivate()).getX()
  return formatReturnValue(out, enc, this.curveType.byteLength)
}

ECDH.prototype.getPublicKey = function (enc, format) {
  var key = this.keys.getPublic(format === 'compressed', true)
  if (format === 'hybrid') {
    if (key[key.length - 1] % 2) {
      key[0] = 7
    } else {
      key[0] = 6
    }
  }
  return formatReturnValue(key, enc)
}

ECDH.prototype.getPrivateKey = function (enc) {
  return formatReturnValue(this.keys.getPrivate(), enc)
}

ECDH.prototype.setPublicKey = function (pub, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc)
  }
  this.keys._importPublic(pub)
  return this
}

ECDH.prototype.setPrivateKey = function (priv, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc)
  }

  var _priv = new BN(priv)
  _priv = _priv.toString(16)
  this.keys = this.curve.genKeyPair()
  this.keys._importPrivate(_priv)
  return this
}

function formatReturnValue (bn, enc, len) {
  if (!Array.isArray(bn)) {
    bn = bn.toArray()
  }
  var buf = new Buffer(bn)
  if (len && buf.length < len) {
    var zeros = new Buffer(len - buf.length)
    zeros.fill(0)
    buf = Buffer.concat([zeros, buf])
  }
  if (!enc) {
    return buf
  } else {
    return buf.toString(enc)
  }
}

},{"elliptic":"node_modules/elliptic/lib/elliptic.js","bn.js":"node_modules/bn.js/lib/bn.js","buffer":"node_modules/buffer/index.js"}],"node_modules/public-encrypt/mgf.js":[function(require,module,exports) {

var createHash = require('create-hash')
var Buffer = require('safe-buffer').Buffer

module.exports = function (seed, len) {
  var t = Buffer.alloc(0)
  var i = 0
  var c
  while (t.length < len) {
    c = i2ops(i++)
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
  }
  return t.slice(0, len)
}

function i2ops (c) {
  var out = Buffer.allocUnsafe(4)
  out.writeUInt32BE(c, 0)
  return out
}

},{"create-hash":"node_modules/create-hash/browser.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/public-encrypt/xor.js":[function(require,module,exports) {
module.exports = function xor (a, b) {
  var len = a.length
  var i = -1
  while (++i < len) {
    a[i] ^= b[i]
  }
  return a
}

},{}],"node_modules/public-encrypt/withPublic.js":[function(require,module,exports) {

var BN = require('bn.js')
var Buffer = require('safe-buffer').Buffer

function withPublic (paddedMsg, key) {
  return Buffer.from(paddedMsg
    .toRed(BN.mont(key.modulus))
    .redPow(new BN(key.publicExponent))
    .fromRed()
    .toArray())
}

module.exports = withPublic

},{"bn.js":"node_modules/bn.js/lib/bn.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/public-encrypt/publicEncrypt.js":[function(require,module,exports) {

var parseKeys = require('parse-asn1')
var randomBytes = require('randombytes')
var createHash = require('create-hash')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var withPublic = require('./withPublic')
var crt = require('browserify-rsa')
var Buffer = require('safe-buffer').Buffer

module.exports = function publicEncrypt (publicKey, msg, reverse) {
  var padding
  if (publicKey.padding) {
    padding = publicKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }
  var key = parseKeys(publicKey)
  var paddedMsg
  if (padding === 4) {
    paddedMsg = oaep(key, msg)
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    paddedMsg = new BN(msg)
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus')
    }
  } else {
    throw new Error('unknown padding')
  }
  if (reverse) {
    return crt(paddedMsg, key)
  } else {
    return withPublic(paddedMsg, key)
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var mLen = msg.length
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  var hLen2 = 2 * hLen
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long')
  }
  var ps = Buffer.alloc(k - mLen - hLen2 - 2)
  var dblen = k - hLen - 1
  var seed = randomBytes(hLen)
  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
  var maskedSeed = xor(seed, mgf(maskedDb, hLen))
  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
}
function pkcs1 (key, msg, reverse) {
  var mLen = msg.length
  var k = key.modulus.byteLength()
  if (mLen > k - 11) {
    throw new Error('message too long')
  }
  var ps
  if (reverse) {
    ps = Buffer.alloc(k - mLen - 3, 0xff)
  } else {
    ps = nonZero(k - mLen - 3)
  }
  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
}
function nonZero (len) {
  var out = Buffer.allocUnsafe(len)
  var i = 0
  var cache = randomBytes(len * 2)
  var cur = 0
  var num
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2)
      cur = 0
    }
    num = cache[cur++]
    if (num) {
      out[i++] = num
    }
  }
  return out
}

},{"parse-asn1":"node_modules/parse-asn1/index.js","randombytes":"node_modules/randombytes/browser.js","create-hash":"node_modules/create-hash/browser.js","./mgf":"node_modules/public-encrypt/mgf.js","./xor":"node_modules/public-encrypt/xor.js","bn.js":"node_modules/bn.js/lib/bn.js","./withPublic":"node_modules/public-encrypt/withPublic.js","browserify-rsa":"node_modules/browserify-rsa/index.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/public-encrypt/privateDecrypt.js":[function(require,module,exports) {

var parseKeys = require('parse-asn1')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var crt = require('browserify-rsa')
var createHash = require('create-hash')
var withPublic = require('./withPublic')
var Buffer = require('safe-buffer').Buffer

module.exports = function privateDecrypt (privateKey, enc, reverse) {
  var padding
  if (privateKey.padding) {
    padding = privateKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }

  var key = parseKeys(privateKey)
  var k = key.modulus.byteLength()
  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error')
  }
  var msg
  if (reverse) {
    msg = withPublic(new BN(enc), key)
  } else {
    msg = crt(enc, key)
  }
  var zBuffer = Buffer.alloc(k - msg.length)
  msg = Buffer.concat([zBuffer, msg], k)
  if (padding === 4) {
    return oaep(key, msg)
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    return msg
  } else {
    throw new Error('unknown padding')
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  if (msg[0] !== 0) {
    throw new Error('decryption error')
  }
  var maskedSeed = msg.slice(1, hLen + 1)
  var maskedDb = msg.slice(hLen + 1)
  var seed = xor(maskedSeed, mgf(maskedDb, hLen))
  var db = xor(maskedDb, mgf(seed, k - hLen - 1))
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error')
  }
  var i = hLen
  while (db[i] === 0) {
    i++
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error')
  }
  return db.slice(i)
}

function pkcs1 (key, msg, reverse) {
  var p1 = msg.slice(0, 2)
  var i = 2
  var status = 0
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++
      break
    }
  }
  var ps = msg.slice(2, i - 1)

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
    status++
  }
  if (ps.length < 8) {
    status++
  }
  if (status) {
    throw new Error('decryption error')
  }
  return msg.slice(i)
}
function compare (a, b) {
  a = Buffer.from(a)
  b = Buffer.from(b)
  var dif = 0
  var len = a.length
  if (a.length !== b.length) {
    dif++
    len = Math.min(a.length, b.length)
  }
  var i = -1
  while (++i < len) {
    dif += (a[i] ^ b[i])
  }
  return dif
}

},{"parse-asn1":"node_modules/parse-asn1/index.js","./mgf":"node_modules/public-encrypt/mgf.js","./xor":"node_modules/public-encrypt/xor.js","bn.js":"node_modules/bn.js/lib/bn.js","browserify-rsa":"node_modules/browserify-rsa/index.js","create-hash":"node_modules/create-hash/browser.js","./withPublic":"node_modules/public-encrypt/withPublic.js","safe-buffer":"node_modules/safe-buffer/index.js"}],"node_modules/public-encrypt/browser.js":[function(require,module,exports) {
exports.publicEncrypt = require('./publicEncrypt')
exports.privateDecrypt = require('./privateDecrypt')

exports.privateEncrypt = function privateEncrypt (key, buf) {
  return exports.publicEncrypt(key, buf, true)
}

exports.publicDecrypt = function publicDecrypt (key, buf) {
  return exports.privateDecrypt(key, buf, true)
}

},{"./publicEncrypt":"node_modules/public-encrypt/publicEncrypt.js","./privateDecrypt":"node_modules/public-encrypt/privateDecrypt.js"}],"node_modules/randomfill/browser.js":[function(require,module,exports) {

var global = arguments[3];
var process = require("process");
'use strict'

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}
var safeBuffer = require('safe-buffer')
var randombytes = require('randombytes')
var Buffer = safeBuffer.Buffer
var kBufferMaxLength = safeBuffer.kMaxLength
var crypto = global.crypto || global.msCrypto
var kMaxUint32 = Math.pow(2, 32) - 1
function assertOffset (offset, length) {
  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
    throw new TypeError('offset must be a number')
  }

  if (offset > kMaxUint32 || offset < 0) {
    throw new TypeError('offset must be a uint32')
  }

  if (offset > kBufferMaxLength || offset > length) {
    throw new RangeError('offset out of range')
  }
}

function assertSize (size, offset, length) {
  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
    throw new TypeError('size must be a number')
  }

  if (size > kMaxUint32 || size < 0) {
    throw new TypeError('size must be a uint32')
  }

  if (size + offset > length || size > kBufferMaxLength) {
    throw new RangeError('buffer too small')
  }
}
if ((crypto && crypto.getRandomValues) || !process.browser) {
  exports.randomFill = randomFill
  exports.randomFillSync = randomFillSync
} else {
  exports.randomFill = oldBrowser
  exports.randomFillSync = oldBrowser
}
function randomFill (buf, offset, size, cb) {
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  if (typeof offset === 'function') {
    cb = offset
    offset = 0
    size = buf.length
  } else if (typeof size === 'function') {
    cb = size
    size = buf.length - offset
  } else if (typeof cb !== 'function') {
    throw new TypeError('"cb" argument must be a function')
  }
  assertOffset(offset, buf.length)
  assertSize(size, offset, buf.length)
  return actualFill(buf, offset, size, cb)
}

function actualFill (buf, offset, size, cb) {
  if (process.browser) {
    var ourBuf = buf.buffer
    var uint = new Uint8Array(ourBuf, offset, size)
    crypto.getRandomValues(uint)
    if (cb) {
      process.nextTick(function () {
        cb(null, buf)
      })
      return
    }
    return buf
  }
  if (cb) {
    randombytes(size, function (err, bytes) {
      if (err) {
        return cb(err)
      }
      bytes.copy(buf, offset)
      cb(null, buf)
    })
    return
  }
  var bytes = randombytes(size)
  bytes.copy(buf, offset)
  return buf
}
function randomFillSync (buf, offset, size) {
  if (typeof offset === 'undefined') {
    offset = 0
  }
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  assertOffset(offset, buf.length)

  if (size === undefined) size = buf.length - offset

  assertSize(size, offset, buf.length)

  return actualFill(buf, offset, size)
}

},{"safe-buffer":"node_modules/safe-buffer/index.js","randombytes":"node_modules/randombytes/browser.js","process":"node_modules/process/browser.js"}],"node_modules/crypto-browserify/index.js":[function(require,module,exports) {
'use strict'

exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')
exports.createHash = exports.Hash = require('create-hash')
exports.createHmac = exports.Hmac = require('create-hmac')

var algos = require('browserify-sign/algos')
var algoKeys = Object.keys(algos)
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
exports.getHashes = function () {
  return hashes
}

var p = require('pbkdf2')
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = require('browserify-cipher')

exports.Cipher = aes.Cipher
exports.createCipher = aes.createCipher
exports.Cipheriv = aes.Cipheriv
exports.createCipheriv = aes.createCipheriv
exports.Decipher = aes.Decipher
exports.createDecipher = aes.createDecipher
exports.Decipheriv = aes.Decipheriv
exports.createDecipheriv = aes.createDecipheriv
exports.getCiphers = aes.getCiphers
exports.listCiphers = aes.listCiphers

var dh = require('diffie-hellman')

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
exports.getDiffieHellman = dh.getDiffieHellman
exports.createDiffieHellman = dh.createDiffieHellman
exports.DiffieHellman = dh.DiffieHellman

var sign = require('browserify-sign')

exports.createSign = sign.createSign
exports.Sign = sign.Sign
exports.createVerify = sign.createVerify
exports.Verify = sign.Verify

exports.createECDH = require('create-ecdh')

var publicEncrypt = require('public-encrypt')

exports.publicEncrypt = publicEncrypt.publicEncrypt
exports.privateEncrypt = publicEncrypt.privateEncrypt
exports.publicDecrypt = publicEncrypt.publicDecrypt
exports.privateDecrypt = publicEncrypt.privateDecrypt

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

var rf = require('randomfill')

exports.randomFill = rf.randomFill
exports.randomFillSync = rf.randomFillSync

exports.createCredentials = function () {
  throw new Error([
    'sorry, createCredentials is not implemented yet',
    'we accept pull requests',
    'https://github.com/crypto-browserify/crypto-browserify'
  ].join('\n'))
}

exports.constants = {
  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
  'DH_CHECK_P_NOT_PRIME': 1,
  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
  'DH_NOT_SUITABLE_GENERATOR': 8,
  'NPN_ENABLED': 1,
  'ALPN_ENABLED': 1,
  'RSA_PKCS1_PADDING': 1,
  'RSA_SSLV23_PADDING': 2,
  'RSA_NO_PADDING': 3,
  'RSA_PKCS1_OAEP_PADDING': 4,
  'RSA_X931_PADDING': 5,
  'RSA_PKCS1_PSS_PADDING': 6,
  'POINT_CONVERSION_COMPRESSED': 2,
  'POINT_CONVERSION_UNCOMPRESSED': 4,
  'POINT_CONVERSION_HYBRID': 6
}

},{"randombytes":"node_modules/randombytes/browser.js","create-hash":"node_modules/create-hash/browser.js","create-hmac":"node_modules/create-hmac/browser.js","browserify-sign/algos":"node_modules/browserify-sign/algos.js","pbkdf2":"node_modules/pbkdf2/browser.js","browserify-cipher":"node_modules/browserify-cipher/browser.js","diffie-hellman":"node_modules/diffie-hellman/browser.js","browserify-sign":"node_modules/browserify-sign/browser/index.js","create-ecdh":"node_modules/create-ecdh/browser.js","public-encrypt":"node_modules/public-encrypt/browser.js","randomfill":"node_modules/randomfill/browser.js"}],"node_modules/node-fetch/browser.js":[function(require,module,exports) {
module.exports = exports = window.fetch; // Needed for TypeScript and Webpack.

exports.default = window.fetch.bind(window);
exports.Headers = window.Headers;
exports.Request = window.Request;
exports.Response = window.Response;
},{}],"src/lib/tf.min.js":[function(require,module,exports) {
var define;
var process = require("process");
var Buffer = require("buffer").Buffer;
var global = arguments[3];
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// @tensorflow/tfjs Copyright 2019 Google
!function (e, t) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? t(exports) : "function" == typeof define && define.amd ? define(["exports"], t) : t(e.tf = e.tf || {});
}(this, function (exports) {
  "use strict";

  var _extendStatics = function extendStatics(e, t) {
    return (_extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (e, t) {
      e.__proto__ = t;
    } || function (e, t) {
      for (var r in t) {
        t.hasOwnProperty(r) && (e[r] = t[r]);
      }
    })(e, t);
  };

  function __extends(e, t) {
    function r() {
      this.constructor = e;
    }

    _extendStatics(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r());
  }

  var _assign = function __assign() {
    return (_assign = Object.assign || function (e) {
      for (var t, r = 1, n = arguments.length; r < n; r++) {
        for (var a in t = arguments[r]) {
          Object.prototype.hasOwnProperty.call(t, a) && (e[a] = t[a]);
        }
      }

      return e;
    }).apply(this, arguments);
  };

  function __awaiter(e, t, r, n) {
    return new (r || (r = Promise))(function (a, o) {
      function i(e) {
        try {
          u(n.next(e));
        } catch (e) {
          o(e);
        }
      }

      function s(e) {
        try {
          u(n.throw(e));
        } catch (e) {
          o(e);
        }
      }

      function u(e) {
        e.done ? a(e.value) : new r(function (t) {
          t(e.value);
        }).then(i, s);
      }

      u((n = n.apply(e, t || [])).next());
    });
  }

  function __generator(e, t) {
    var r,
        n,
        a,
        o,
        i = {
      label: 0,
      sent: function sent() {
        if (1 & a[0]) throw a[1];
        return a[1];
      },
      trys: [],
      ops: []
    };
    return o = {
      next: s(0),
      throw: s(1),
      return: s(2)
    }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {
      return this;
    }), o;

    function s(o) {
      return function (s) {
        return function (o) {
          if (r) throw new TypeError("Generator is already executing.");

          for (; i;) {
            try {
              if (r = 1, n && (a = 2 & o[0] ? n.return : o[0] ? n.throw || ((a = n.return) && a.call(n), 0) : n.next) && !(a = a.call(n, o[1])).done) return a;

              switch (n = 0, a && (o = [2 & o[0], a.value]), o[0]) {
                case 0:
                case 1:
                  a = o;
                  break;

                case 4:
                  return i.label++, {
                    value: o[1],
                    done: !1
                  };

                case 5:
                  i.label++, n = o[1], o = [0];
                  continue;

                case 7:
                  o = i.ops.pop(), i.trys.pop();
                  continue;

                default:
                  if (!(a = (a = i.trys).length > 0 && a[a.length - 1]) && (6 === o[0] || 2 === o[0])) {
                    i = 0;
                    continue;
                  }

                  if (3 === o[0] && (!a || o[1] > a[0] && o[1] < a[3])) {
                    i.label = o[1];
                    break;
                  }

                  if (6 === o[0] && i.label < a[1]) {
                    i.label = a[1], a = o;
                    break;
                  }

                  if (a && i.label < a[2]) {
                    i.label = a[2], i.ops.push(o);
                    break;
                  }

                  a[2] && i.ops.pop(), i.trys.pop();
                  continue;
              }

              o = t.call(e, i);
            } catch (e) {
              o = [6, e], n = 0;
            } finally {
              r = a = 0;
            }
          }

          if (5 & o[0]) throw o[1];
          return {
            value: o[0] ? o[1] : void 0,
            done: !0
          };
        }([o, s]);
      };
    }
  }

  var contexts = {},
      WEBGL_ATTRIBUTES = {
    alpha: !1,
    antialias: !1,
    premultipliedAlpha: !1,
    preserveDrawingBuffer: !1,
    depth: !1,
    stencil: !1,
    failIfMajorPerformanceCaveat: !0
  };

  function getWebGLContext(e) {
    e in contexts || (document.createElement("canvas").addEventListener("webglcontextlost", function (t) {
      t.preventDefault(), delete contexts[e];
    }, !1), contexts[e] = getWebGLRenderingContext(e));
    var t = contexts[e];
    return t.isContextLost() ? (delete contexts[e], getWebGLContext(e)) : (t.disable(t.DEPTH_TEST), t.disable(t.STENCIL_TEST), t.disable(t.BLEND), t.disable(t.DITHER), t.disable(t.POLYGON_OFFSET_FILL), t.disable(t.SAMPLE_COVERAGE), t.enable(t.SCISSOR_TEST), t.enable(t.CULL_FACE), t.cullFace(t.BACK), contexts[e]);
  }

  function getWebGLRenderingContext(e) {
    if (1 !== e && 2 !== e) throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");
    var t = document.createElement("canvas");
    return 1 === e ? t.getContext("webgl", WEBGL_ATTRIBUTES) || t.getContext("experimental-webgl", WEBGL_ATTRIBUTES) : t.getContext("webgl2", WEBGL_ATTRIBUTES);
  }

  function isMobile() {
    var e = navigator.userAgent || navigator.vendor || window.opera;
    return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0, 4));
  }

  function shuffle(e) {
    for (var t = e.length, r = 0, n = 0; t > 0;) {
      n = Math.random() * t | 0, r = e[--t], e[t] = e[n], e[n] = r;
    }
  }

  function clamp(e, t, r) {
    return Math.max(e, Math.min(t, r));
  }

  function nearestLargerEven(e) {
    return e % 2 == 0 ? e : e + 1;
  }

  function sum(e) {
    for (var t = 0, r = 0; r < e.length; r++) {
      t += e[r];
    }

    return t;
  }

  function randUniform(e, t) {
    var r = Math.random();
    return t * r + (1 - r) * e;
  }

  function distSquared(e, t) {
    for (var r = 0, n = 0; n < e.length; n++) {
      var a = Number(e[n]) - Number(t[n]);
      r += a * a;
    }

    return r;
  }

  function assert(e, t) {
    if (!e) throw new Error("string" == typeof t ? t : t());
  }

  function assertShapesMatch(e, t, r) {
    void 0 === r && (r = ""), assert(arraysEqual(e, t), r + " Shapes " + e + " and " + t + " must match");
  }

  function assertNonNull(e) {
    assert(null != e, "The input to the tensor constructor must be a non-null value.");
  }

  function flatten(e, t) {
    if (void 0 === t && (t = []), Array.isArray(e) || isTypedArray(e)) for (var r = 0; r < e.length; ++r) {
      flatten(e[r], t);
    } else t.push(e);
    return t;
  }

  function sizeFromShape(e) {
    if (0 === e.length) return 1;

    for (var t = e[0], r = 1; r < e.length; r++) {
      t *= e[r];
    }

    return t;
  }

  function isScalarShape(e) {
    return 0 === e.length;
  }

  function arraysEqual(e, t) {
    if (e === t) return !0;
    if (null == e || null == t) return !1;
    if (e.length !== t.length) return !1;

    for (var r = 0; r < e.length; r++) {
      if (e[r] !== t[r]) return !1;
    }

    return !0;
  }

  function isInt(e) {
    return e % 1 == 0;
  }

  function tanh(e) {
    if (null != Math.tanh) return Math.tanh(e);
    if (e === 1 / 0) return 1;
    if (e === -1 / 0) return -1;
    var t = Math.exp(2 * e);
    return (t - 1) / (t + 1);
  }

  function sizeToSquarishShape(e) {
    var t = Math.ceil(Math.sqrt(e));
    return [t, Math.ceil(e / t)];
  }

  function createShuffledIndices(e) {
    for (var t = new Uint32Array(e), r = 0; r < e; ++r) {
      t[r] = r;
    }

    return shuffle(t), t;
  }

  function rightPad(e, t) {
    return t <= e.length ? e : e + " ".repeat(t - e.length);
  }

  function repeatedTry(e, t, r) {
    return void 0 === t && (t = function t(e) {
      return 0;
    }), new Promise(function (n, a) {
      var o = 0,
          i = function i() {
        if (e()) n();else {
          var s = t(++o);
          null != r && o >= r ? a() : setTimeout(i, s);
        }
      };

      i();
    });
  }

  function inferFromImplicitShape(e, t) {
    for (var r = 1, n = -1, a = 0; a < e.length; ++a) {
      if (e[a] >= 0) r *= e[a];else if (-1 === e[a]) {
        if (-1 !== n) throw Error("Shapes can only have 1 implicit size. Found -1 at dim " + n + " and dim " + a);
        n = a;
      } else if (e[a] < 0) throw Error("Shapes can not be < 0. Found " + e[a] + " at dim " + a);
    }

    if (-1 === n) {
      if (t > 0 && t !== r) throw Error("Size(" + t + ") must match the product of shape " + e);
      return e;
    }

    if (0 === r) throw Error("Cannot infer the missing size in [" + e + "] when there are 0 elements");
    if (t % r != 0) throw Error("The implicit shape can't be a fractional number. Got " + t + " / " + r);
    var o = e.slice();
    return o[n] = t / r, o;
  }

  function parseAxisParam(e, t) {
    var r = t.length;
    return assert((e = null == e ? t.map(function (e, t) {
      return t;
    }) : [].concat(e)).every(function (e) {
      return e >= -r && e < r;
    }), "All values in axis param must be in range [-" + r + ", " + r + ") but got axis " + e), assert(e.every(function (e) {
      return isInt(e);
    }), "All values in axis param must be integers but got axis " + e), e.map(function (e) {
      return e < 0 ? r + e : e;
    });
  }

  function squeezeShape(e, t) {
    for (var r = [], n = [], a = null == t ? null : parseAxisParam(t, e).sort(), o = 0, i = 0; i < e.length; ++i) {
      if (null != a) {
        if (a[o] === i && 1 !== e[i]) throw new Error("Can't squeeze axis " + i + " since its dim '" + e[i] + "' is not 1");
        (null == a[o] || a[o] > i) && 1 === e[i] && (r.push(e[i]), n.push(i)), a[o] <= i && o++;
      }

      1 !== e[i] && (r.push(e[i]), n.push(i));
    }

    return {
      newShape: r,
      keptDims: n
    };
  }

  function getTypedArrayFromDType(e, t) {
    var r = null;
    if (null == e || "float32" === e) r = new Float32Array(t);else if ("int32" === e) r = new Int32Array(t);else {
      if ("bool" !== e) throw new Error("Unknown data type " + e);
      r = new Uint8Array(t);
    }
    return r;
  }

  function getArrayFromDType(e, t) {
    var r = null;
    if (null == e || "float32" === e) r = new Float32Array(t);else if ("int32" === e) r = new Int32Array(t);else if ("bool" === e) r = new Uint8Array(t);else {
      if ("string" !== e) throw new Error("Unknown data type " + e);
      r = new Array(t);
    }
    return r;
  }

  function checkComputationForErrors(e, t, r) {
    if ("float32" === t) for (var n = 0; n < e.length; n++) {
      var a = e[n];
      if (isNaN(a) || !isFinite(a)) throw Error("The result of the '" + r + "' is " + a + ".");
    }
  }

  function checkConversionForErrors(e, t) {
    for (var r = 0; r < e.length; r++) {
      var n = e[r];
      if (isNaN(n) || !isFinite(n)) throw Error("A tensor of type " + t + " being uploaded contains " + n + ".");
    }
  }

  function hasEncodingLoss(e, t) {
    return !("complex64" === t || "float32" === t && "complex64" !== e || "int32" === t && "float32" !== e && "complex64" !== e || "bool" === t && "bool" === e);
  }

  function isTypedArray(e) {
    return e instanceof Float32Array || e instanceof Int32Array || e instanceof Uint8Array;
  }

  function bytesPerElement(e) {
    if ("float32" === e || "int32" === e) return 4;
    if ("complex64" === e) return 8;
    if ("bool" === e) return 1;
    throw new Error("Unknown dtype " + e);
  }

  function bytesFromStringArray(e) {
    if (null == e) return 0;
    var t = 0;
    return e.forEach(function (e) {
      return t += 2 * e.length;
    }), t;
  }

  function isString(e) {
    return "string" == typeof e || e instanceof String;
  }

  function isBoolean(e) {
    return "boolean" == typeof e;
  }

  function isNumber(e) {
    return "number" == typeof e;
  }

  function inferDtype(e) {
    return Array.isArray(e) ? inferDtype(e[0]) : e instanceof Float32Array ? "float32" : e instanceof Int32Array || e instanceof Uint8Array ? "int32" : isNumber(e) ? "float32" : isString(e) ? "string" : isBoolean(e) ? "bool" : "float32";
  }

  function isFunction(e) {
    return !!(e && e.constructor && e.call && e.apply);
  }

  function nearestDivisor(e, t) {
    for (var r = t; r < e; ++r) {
      if (e % r == 0) return r;
    }

    return e;
  }

  function computeStrides(e) {
    var t = e.length;
    if (t < 2) return [];
    var r = new Array(t - 1);
    r[t - 2] = e[t - 1];

    for (var n = t - 3; n >= 0; --n) {
      r[n] = r[n + 1] * e[n + 1];
    }

    return r;
  }

  function toTypedArray(e, t, r) {
    if ("string" === t) throw new Error("Cannot convert a string[] to a TypedArray");
    if (Array.isArray(e) && (e = flatten(e)), r && checkConversionForErrors(e, t), noConversionNeeded(e, t)) return e;
    if (null == t || "float32" === t || "complex64" === t) return new Float32Array(e);
    if ("int32" === t) return new Int32Array(e);

    if ("bool" === t) {
      for (var n = new Uint8Array(e.length), a = 0; a < n.length; ++a) {
        0 !== Math.round(e[a]) && (n[a] = 1);
      }

      return n;
    }

    throw new Error("Unknown data type " + t);
  }

  function createNestedArray(e, t, r) {
    var n = new Array();
    if (1 === t.length) for (var a = t[0], o = 0; o < a; o++) {
      n[o] = r[e + o];
    } else {
      a = t[0];
      var i = t.slice(1),
          s = i.reduce(function (e, t) {
        return e * t;
      });

      for (o = 0; o < a; o++) {
        n[o] = createNestedArray(e + o * s, i, r);
      }
    }
    return n;
  }

  function toNestedArray(e, t) {
    if (0 === e.length) return t[0];
    var r = e.reduce(function (e, t) {
      return e * t;
    });
    if (0 === r) return [];
    if (r !== t.length) throw new Error("[" + e + "] does not match the input size.");
    return createNestedArray(0, e, t);
  }

  function noConversionNeeded(e, t) {
    return e instanceof Float32Array && "float32" === t || e instanceof Int32Array && "int32" === t || e instanceof Uint8Array && "bool" === t;
  }

  function makeOnesTypedArray(e, t) {
    for (var r = makeZerosTypedArray(e, t), n = 0; n < r.length; n++) {
      r[n] = 1;
    }

    return r;
  }

  function makeZerosTypedArray(e, t) {
    if (null == t || "float32" === t || "complex64" === t) return new Float32Array(e);
    if ("int32" === t) return new Int32Array(e);
    if ("bool" === t) return new Uint8Array(e);
    throw new Error("Unknown data type " + t);
  }

  function now() {
    if ("undefined" != typeof performance) return performance.now();

    if ("undefined" != typeof process) {
      var e = process.hrtime();
      return 1e3 * e[0] + e[1] / 1e6;
    }

    throw new Error("Cannot measure time in this environment. You should run tf.js in the browser or in Node.js");
  }

  function monitorPromisesProgress(e, t, r, n) {
    !function (e) {
      assert(null != e && Array.isArray(e) && e.length > 0, "promises must be a none empty array");
    }(e), function (e, t) {
      assert(e >= 0 && e <= 1, "Progress fraction must be in range [0, 1], but got startFraction " + e), assert(t >= 0 && t <= 1, "Progress fraction must be in range [0, 1], but got endFraction " + t), assert(t >= e, "startFraction must be no more than endFraction, but got startFraction " + e + " and endFraction " + t);
    }(r = null == r ? 0 : r, n = null == n ? 1 : n);
    var a = 0;
    return Promise.all(e.map(function (o) {
      return o.then(function (o) {
        var i = r + ++a / e.length * (n - r);
        return t(i), o;
      }), o;
    }));
  }

  var util = Object.freeze({
    shuffle: shuffle,
    clamp: clamp,
    nearestLargerEven: nearestLargerEven,
    sum: sum,
    randUniform: randUniform,
    distSquared: distSquared,
    assert: assert,
    assertShapesMatch: assertShapesMatch,
    assertNonNull: assertNonNull,
    flatten: flatten,
    sizeFromShape: sizeFromShape,
    isScalarShape: isScalarShape,
    arraysEqual: arraysEqual,
    isInt: isInt,
    tanh: tanh,
    sizeToSquarishShape: sizeToSquarishShape,
    createShuffledIndices: createShuffledIndices,
    rightPad: rightPad,
    repeatedTry: repeatedTry,
    inferFromImplicitShape: inferFromImplicitShape,
    parseAxisParam: parseAxisParam,
    squeezeShape: squeezeShape,
    getTypedArrayFromDType: getTypedArrayFromDType,
    getArrayFromDType: getArrayFromDType,
    checkComputationForErrors: checkComputationForErrors,
    checkConversionForErrors: checkConversionForErrors,
    hasEncodingLoss: hasEncodingLoss,
    isTypedArray: isTypedArray,
    bytesPerElement: bytesPerElement,
    bytesFromStringArray: bytesFromStringArray,
    isString: isString,
    isBoolean: isBoolean,
    isNumber: isNumber,
    inferDtype: inferDtype,
    isFunction: isFunction,
    nearestDivisor: nearestDivisor,
    computeStrides: computeStrides,
    toTypedArray: toTypedArray,
    toNestedArray: toNestedArray,
    makeOnesTypedArray: makeOnesTypedArray,
    makeZerosTypedArray: makeZerosTypedArray,
    now: now,
    monitorPromisesProgress: monitorPromisesProgress
  }),
      Profiler = function () {
    function e(e, t) {
      this.backendTimer = e, this.logger = t, null == t && (this.logger = new Logger());
    }

    return e.prototype.profileKernel = function (e, t) {
      var r,
          n = this,
          a = this.backendTimer.time(function () {
        r = t();
      });
      return (Array.isArray(r) ? r : [r]).forEach(function (t) {
        var r = t.dataSync();
        checkComputationForErrors(r, t.dtype, e), a.then(function (a) {
          var o = "";
          null != a.getExtraProfileInfo && (o = a.getExtraProfileInfo()), n.logger.logKernelProfile(e, t, r, a.kernelMs, o);
        });
      }), r;
    }, e;
  }(),
      Logger = function () {
    function e() {}

    return e.prototype.logKernelProfile = function (e, t, r, n, a) {
      var o = rightPad(n + "ms", 9),
          i = rightPad(e, 25),
          s = t.rank,
          u = t.size,
          l = rightPad(t.shape.toString(), 14);
      console.log("%c" + i + "\t%c" + o + "\t%c" + s + "D " + l + "\t%c" + u + "\t%c" + a, "font-weight:bold", "color:red", "color:blue", "color: orange", "color: green");
    }, e;
  }(),
      FORMAT_LIMIT_NUM_VALS = 20,
      FORMAT_NUM_FIRST_LAST_VALS = 3,
      FORMAT_NUM_SIG_DIGITS = 7;

  function tensorToString(e, t, r, n) {
    var a = computeStrides(t),
        o = computeMaxSizePerColumn(e, t, r, a),
        i = t.length,
        s = subTensorToString(e, t, r, a, o),
        u = ["Tensor"];
    return n && (u.push("  dtype: " + r), u.push("  rank: " + i), u.push("  shape: [" + t + "]"), u.push("  values:")), u.push(s.map(function (e) {
      return "    " + e;
    }).join("\n")), u.join("\n");
  }

  function computeMaxSizePerColumn(e, t, r, n) {
    var a = sizeFromShape(t),
        o = n[n.length - 1],
        i = new Array(o).fill(0),
        s = t.length,
        u = "complex64" === r ? createComplexTuples(e) : e;
    if (s > 1) for (var l = 0; l < a / o; l++) {
      for (var p = l * o, c = 0; c < o; c++) {
        i[c] = Math.max(i[c], valToString(u[p + c], 0).length);
      }
    }
    return i;
  }

  function valToString(e, t) {
    return rightPad(Array.isArray(e) ? parseFloat(e[0].toFixed(FORMAT_NUM_SIG_DIGITS)) + " + " + parseFloat(e[1].toFixed(FORMAT_NUM_SIG_DIGITS)) + "j" : isString(e) ? "'" + e + "'" : parseFloat(e.toFixed(FORMAT_NUM_SIG_DIGITS)).toString(), t);
  }

  function subTensorToString(e, t, r, n, a, o) {
    void 0 === o && (o = !0);
    var i = "complex64" === r ? 2 : 1,
        s = t[0],
        u = t.length;
    if (0 === u) return "complex64" === r ? [valToString(createComplexTuples(e)[0], 0)] : [e[0].toString()];

    if (1 === u) {
      if (s > FORMAT_LIMIT_NUM_VALS) {
        var l = FORMAT_NUM_FIRST_LAST_VALS * i,
            p = Array.from(e.slice(0, l)),
            c = Array.from(e.slice(s - FORMAT_NUM_FIRST_LAST_VALS * i, s));
        return "complex64" === r && (p = createComplexTuples(p), c = createComplexTuples(c)), ["[" + p.map(function (e, t) {
          return valToString(e, a[t]);
        }).join(", ") + ", ..., " + c.map(function (e, t) {
          return valToString(e, a[s - FORMAT_NUM_FIRST_LAST_VALS + t]);
        }).join(", ") + "]"];
      }

      return ["[" + ("complex64" === r ? createComplexTuples(e) : Array.from(e)).map(function (e, t) {
        return valToString(e, a[t]);
      }).join(", ") + "]"];
    }

    var h = t.slice(1),
        d = n.slice(1),
        f = n[0] * i,
        m = [];

    if (s > FORMAT_LIMIT_NUM_VALS) {
      for (var g = 0; g < FORMAT_NUM_FIRST_LAST_VALS; g++) {
        var y = (v = g * f) + f;
        m.push.apply(m, subTensorToString(e.slice(v, y), h, r, d, a, !1));
      }

      for (m.push("..."), g = s - FORMAT_NUM_FIRST_LAST_VALS; g < s; g++) {
        y = (v = g * f) + f, m.push.apply(m, subTensorToString(e.slice(v, y), h, r, d, a, g === s - 1));
      }
    } else for (g = 0; g < s; g++) {
      var v;
      y = (v = g * f) + f, m.push.apply(m, subTensorToString(e.slice(v, y), h, r, d, a, g === s - 1));
    }

    var x = 2 === u ? "," : "";

    for (m[0] = "[" + m[0] + x, g = 1; g < m.length - 1; g++) {
      m[g] = " " + m[g] + x;
    }

    var b = ",\n";

    for (g = 2; g < u; g++) {
      b += "\n";
    }

    return m[m.length - 1] = " " + m[m.length - 1] + "]" + (o ? "" : b), m;
  }

  function createComplexTuples(e) {
    for (var t = [], r = 0; r < e.length; r += 2) {
      t.push([e[r], e[r + 1]]);
    }

    return t;
  }

  var TensorBuffer = function () {
    function e(e, t, r) {
      if (this.dtype = t, this.shape = e.slice(), this.size = sizeFromShape(e), null != r) {
        var n = r.length;
        assert(n === this.size, "Length of values '" + n + "' does not match the size inferred by the shape '" + this.size + "'.");
      }

      if ("complex64" === t) throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");
      this.values = r || getArrayFromDType(t, sizeFromShape(this.shape)), this.strides = computeStrides(e);
    }

    return e.prototype.set = function (e) {
      for (var t = [], r = 1; r < arguments.length; r++) {
        t[r - 1] = arguments[r];
      }

      0 === t.length && (t = [0]), assert(t.length === this.rank, "The number of provided coordinates (" + t.length + ") must match the rank (" + this.rank + ")");
      var n = this.locToIndex(t);
      this.values[n] = e;
    }, e.prototype.get = function () {
      for (var e = [], t = 0; t < arguments.length; t++) {
        e[t] = arguments[t];
      }

      0 === e.length && (e = [0]);

      for (var r = e[e.length - 1], n = 0; n < e.length - 1; ++n) {
        r += this.strides[n] * e[n];
      }

      return this.values[r];
    }, e.prototype.locToIndex = function (e) {
      if (0 === this.rank) return 0;
      if (1 === this.rank) return e[0];

      for (var t = e[e.length - 1], r = 0; r < e.length - 1; ++r) {
        t += this.strides[r] * e[r];
      }

      return t;
    }, e.prototype.indexToLoc = function (e) {
      if (0 === this.rank) return [];
      if (1 === this.rank) return [e];

      for (var t = new Array(this.shape.length), r = 0; r < t.length - 1; ++r) {
        t[r] = Math.floor(e / this.strides[r]), e -= t[r] * this.strides[r];
      }

      return t[t.length - 1] = e, t;
    }, Object.defineProperty(e.prototype, "rank", {
      get: function get() {
        return this.shape.length;
      },
      enumerable: !0,
      configurable: !0
    }), e.prototype.toTensor = function () {
      return Tensor.make(this.shape, {
        values: this.values
      }, this.dtype);
    }, e;
  }(),
      trackerFn = null,
      opHandler = null,
      deprecationWarningFn = null;

  function setTensorTracker(e) {
    trackerFn = e;
  }

  function setOpHandler(e) {
    opHandler = e;
  }

  function setDeprecationWarningFn(e) {
    deprecationWarningFn = e;
  }

  var Tensor = function () {
    function e(e, t, r, n) {
      this.isDisposedInternal = !1, this.shape = e.slice(), this.dtype = t || "float32", this.size = sizeFromShape(e), this.strides = computeStrides(e), this.dataId = null != n ? n : {}, this.id = trackerFn().nextTensorId(), this.rankType = this.rank < 5 ? this.rank.toString() : "higher", trackerFn().registerTensor(this), null != r && trackerFn().write(this.dataId, r);
    }

    return e.make = function (t, r, n) {
      return new e(t, n, r.values, r.dataId);
    }, e.prototype.flatten = function () {
      return this.throwIfDisposed(), this.as1D();
    }, e.prototype.asScalar = function () {
      return this.throwIfDisposed(), assert(1 === this.size, "The array must have only 1 element."), this.reshape([]);
    }, e.prototype.as1D = function () {
      return this.throwIfDisposed(), this.reshape([this.size]);
    }, e.prototype.as2D = function (e, t) {
      return this.throwIfDisposed(), this.reshape([e, t]);
    }, e.prototype.as3D = function (e, t, r) {
      return this.throwIfDisposed(), this.reshape([e, t, r]);
    }, e.prototype.as4D = function (e, t, r, n) {
      return this.throwIfDisposed(), this.reshape([e, t, r, n]);
    }, e.prototype.as5D = function (e, t, r, n, a) {
      return this.throwIfDisposed(), this.reshape([e, t, r, n, a]);
    }, e.prototype.asType = function (e) {
      return this.throwIfDisposed(), opHandler.cast(this, e);
    }, Object.defineProperty(e.prototype, "rank", {
      get: function get() {
        return this.shape.length;
      },
      enumerable: !0,
      configurable: !0
    }), e.prototype.get = function () {
      for (var e = [], t = 0; t < arguments.length; t++) {
        e[t] = arguments[t];
      }

      deprecationWarningFn("Tensor.get() is deprecated. Use Tensor.array() and native array indexing instead."), assert(e.length === this.rank, "Number of coordinates in get() must match the rank of the tensor"), assert("complex64" !== this.dtype, "Tensor.get() is not supported for complex64 tensors yet."), this.throwIfDisposed(), 0 === e.length && (e = [0]);

      for (var r = e[e.length - 1], n = 0; n < e.length - 1; ++n) {
        r += this.strides[n] * e[n];
      }

      return this.dataSync()[r];
    }, e.prototype.buffer = function () {
      return deprecationWarningFn("Tensor.buffer() is renamed to Tensor.bufferSync() in TensorFlow.js 1.0 and Tensor.buffer() will become an async function."), opHandler.buffer(this.shape, this.dtype, this.dataSync());
    }, e.prototype.bufferSync = function () {
      return opHandler.buffer(this.shape, this.dtype, this.dataSync());
    }, e.prototype.array = function () {
      return __awaiter(this, void 0, void 0, function () {
        var e, t;
        return __generator(this, function (r) {
          switch (r.label) {
            case 0:
              return e = toNestedArray, t = [this.shape], [4, this.data()];

            case 1:
              return [2, e.apply(void 0, t.concat([r.sent()]))];
          }
        });
      });
    }, e.prototype.arraySync = function () {
      return toNestedArray(this.shape, this.dataSync());
    }, e.prototype.data = function () {
      return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (e) {
          return this.throwIfDisposed(), [2, trackerFn().read(this.dataId)];
        });
      });
    }, e.prototype.dataSync = function () {
      return this.throwIfDisposed(), trackerFn().readSync(this.dataId);
    }, e.prototype.dispose = function () {
      this.isDisposed || (trackerFn().disposeTensor(this), this.isDisposedInternal = !0);
    }, Object.defineProperty(e.prototype, "isDisposed", {
      get: function get() {
        return this.isDisposedInternal;
      },
      enumerable: !0,
      configurable: !0
    }), e.prototype.throwIfDisposed = function () {
      if (this.isDisposed) throw new Error("Tensor is disposed.");
    }, e.prototype.toFloat = function () {
      return this.asType("float32");
    }, e.prototype.toInt = function () {
      return this.asType("int32");
    }, e.prototype.toBool = function () {
      return this.asType("bool");
    }, e.prototype.print = function (e) {
      return void 0 === e && (e = !1), opHandler.print(this, e);
    }, e.prototype.reshape = function (e) {
      return this.throwIfDisposed(), opHandler.reshape(this, e);
    }, e.prototype.reshapeAs = function (e) {
      return this.throwIfDisposed(), this.reshape(e.shape);
    }, e.prototype.expandDims = function (e) {
      return void 0 === e && (e = 0), opHandler.expandDims(this, e);
    }, e.prototype.cumsum = function (e, t, r) {
      return void 0 === e && (e = 0), void 0 === t && (t = !1), void 0 === r && (r = !1), opHandler.cumsum(this, e, t, r);
    }, e.prototype.squeeze = function (e) {
      return this.throwIfDisposed(), opHandler.squeeze(this, e);
    }, e.prototype.clone = function () {
      return this.throwIfDisposed(), opHandler.clone(this);
    }, e.prototype.oneHot = function (e, t, r) {
      return this.throwIfDisposed(), opHandler.oneHot(this, e, t, r);
    }, e.prototype.toString = function (e) {
      return void 0 === e && (e = !1), tensorToString(this.dataSync(), this.shape, this.dtype, e);
    }, e.prototype.tile = function (e) {
      return this.throwIfDisposed(), opHandler.tile(this, e);
    }, e.prototype.gather = function (e, t) {
      return void 0 === t && (t = 0), this.throwIfDisposed(), opHandler.gather(this, e, t);
    }, e.prototype.matMul = function (e, t, r) {
      return void 0 === t && (t = !1), void 0 === r && (r = !1), this.throwIfDisposed(), opHandler.matMul(this, e, t, r);
    }, e.prototype.dot = function (e) {
      return this.throwIfDisposed(), opHandler.dot(this, e);
    }, e.prototype.norm = function (e, t, r) {
      return void 0 === e && (e = "euclidean"), void 0 === t && (t = null), void 0 === r && (r = !1), this.throwIfDisposed(), opHandler.norm(this, e, t, r);
    }, e.prototype.slice = function (e, t) {
      return this.throwIfDisposed(), opHandler.slice(this, e, t);
    }, e.prototype.reverse = function (e) {
      return this.throwIfDisposed(), opHandler.reverse(this, e);
    }, e.prototype.concat = function (t, r) {
      return void 0 === r && (r = 0), this.throwIfDisposed(), t instanceof e && (t = [t]), opHandler.concat([this].concat(t), r);
    }, e.prototype.split = function (e, t) {
      return void 0 === t && (t = 0), this.throwIfDisposed(), opHandler.split(this, e, t);
    }, e.prototype.stack = function (e, t) {
      return void 0 === t && (t = 0), opHandler.stack([this, e], t);
    }, e.prototype.unstack = function (e) {
      return void 0 === e && (e = 0), opHandler.unstack(this, e);
    }, e.prototype.pad = function (e, t) {
      return void 0 === t && (t = 0), opHandler.pad(this, e, t);
    }, e.prototype.batchNormalization = function (e, t, r, n, a) {
      return void 0 === r && (r = .001), deprecationWarningFn("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon"), this.batchNorm(e, t, a, n, r);
    }, e.prototype.batchNorm = function (e, t, r, n, a) {
      return void 0 === a && (a = .001), this.throwIfDisposed(), opHandler.batchNorm(this, e, t, r, n, a);
    }, e.prototype.all = function (e, t) {
      return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), opHandler.all(this, e, t);
    }, e.prototype.any = function (e, t) {
      return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), opHandler.any(this, e, t);
    }, e.prototype.logSumExp = function (e, t) {
      return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), opHandler.logSumExp(this, e, t);
    }, e.prototype.sum = function (e, t) {
      return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), opHandler.sum(this, e, t);
    }, e.prototype.prod = function (e, t) {
      return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), opHandler.prod(this, e, t);
    }, e.prototype.mean = function (e, t) {
      return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), opHandler.mean(this, e, t);
    }, e.prototype.min = function (e, t) {
      return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), opHandler.min(this, e, t);
    }, e.prototype.max = function (e, t) {
      return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), opHandler.max(this, e, t);
    }, e.prototype.argMin = function (e) {
      return void 0 === e && (e = null), this.throwIfDisposed(), opHandler.argMin(this, e);
    }, e.prototype.argMax = function (e) {
      return void 0 === e && (e = null), this.throwIfDisposed(), opHandler.argMax(this, e);
    }, e.prototype.cast = function (e) {
      return this.throwIfDisposed(), opHandler.cast(this, e);
    }, e.prototype.add = function (e) {
      return this.throwIfDisposed(), opHandler.add(this, e);
    }, e.prototype.addStrict = function (e) {
      return this.throwIfDisposed(), opHandler.addStrict(this, e);
    }, e.prototype.atan2 = function (e) {
      return this.throwIfDisposed(), opHandler.atan2(this, e);
    }, e.prototype.sub = function (e) {
      return this.throwIfDisposed(), opHandler.sub(this, e);
    }, e.prototype.subStrict = function (e) {
      return this.throwIfDisposed(), opHandler.subStrict(this, e);
    }, e.prototype.pow = function (e) {
      return this.throwIfDisposed(), opHandler.pow(this, e);
    }, e.prototype.powStrict = function (e) {
      return this.throwIfDisposed(), opHandler.powStrict(this, e);
    }, e.prototype.mul = function (e) {
      return this.throwIfDisposed(), opHandler.mul(this, e);
    }, e.prototype.mulStrict = function (e) {
      return this.throwIfDisposed(), opHandler.mulStrict(this, e);
    }, e.prototype.div = function (e) {
      return this.throwIfDisposed(), opHandler.div(this, e);
    }, e.prototype.floorDiv = function (e) {
      return this.throwIfDisposed(), opHandler.floorDiv(this, e);
    }, e.prototype.divStrict = function (e) {
      return this.throwIfDisposed(), opHandler.divStrict(this, e);
    }, e.prototype.minimum = function (e) {
      return this.throwIfDisposed(), opHandler.minimum(this, e);
    }, e.prototype.minimumStrict = function (e) {
      return this.throwIfDisposed(), opHandler.minimumStrict(this, e);
    }, e.prototype.maximum = function (e) {
      return this.throwIfDisposed(), opHandler.maximum(this, e);
    }, e.prototype.maximumStrict = function (e) {
      return this.throwIfDisposed(), opHandler.maximumStrict(this, e);
    }, e.prototype.mod = function (e) {
      return this.throwIfDisposed(), opHandler.mod(this, e);
    }, e.prototype.modStrict = function (e) {
      return this.throwIfDisposed(), opHandler.modStrict(this, e);
    }, e.prototype.squaredDifference = function (e) {
      return this.throwIfDisposed(), opHandler.squaredDifference(this, e);
    }, e.prototype.squaredDifferenceStrict = function (e) {
      return this.throwIfDisposed(), opHandler.squaredDifferenceStrict(this, e);
    }, e.prototype.transpose = function (e) {
      return this.throwIfDisposed(), opHandler.transpose(this, e);
    }, e.prototype.notEqual = function (e) {
      return this.throwIfDisposed(), opHandler.notEqual(this, e);
    }, e.prototype.notEqualStrict = function (e) {
      return this.throwIfDisposed(), opHandler.notEqualStrict(this, e);
    }, e.prototype.less = function (e) {
      return this.throwIfDisposed(), opHandler.less(this, e);
    }, e.prototype.lessStrict = function (e) {
      return this.throwIfDisposed(), opHandler.lessStrict(this, e);
    }, e.prototype.equal = function (e) {
      return this.throwIfDisposed(), opHandler.equal(this, e);
    }, e.prototype.equalStrict = function (e) {
      return this.throwIfDisposed(), opHandler.equalStrict(this, e);
    }, e.prototype.lessEqual = function (e) {
      return this.throwIfDisposed(), opHandler.lessEqual(this, e);
    }, e.prototype.lessEqualStrict = function (e) {
      return this.throwIfDisposed(), opHandler.lessEqualStrict(this, e);
    }, e.prototype.greater = function (e) {
      return this.throwIfDisposed(), opHandler.greater(this, e);
    }, e.prototype.greaterStrict = function (e) {
      return this.throwIfDisposed(), opHandler.greaterStrict(this, e);
    }, e.prototype.greaterEqual = function (e) {
      return this.throwIfDisposed(), opHandler.greaterEqual(this, e);
    }, e.prototype.greaterEqualStrict = function (e) {
      return this.throwIfDisposed(), opHandler.greaterEqualStrict(this, e);
    }, e.prototype.logicalAnd = function (e) {
      return this.throwIfDisposed(), opHandler.logicalAnd(this, e);
    }, e.prototype.logicalOr = function (e) {
      return this.throwIfDisposed(), opHandler.logicalOr(this, e);
    }, e.prototype.logicalNot = function () {
      return this.throwIfDisposed(), opHandler.logicalNot(this);
    }, e.prototype.logicalXor = function (e) {
      return this.throwIfDisposed(), opHandler.logicalXor(this, e);
    }, e.prototype.where = function (e, t) {
      return this.throwIfDisposed(), opHandler.where(e, this, t);
    }, e.prototype.neg = function () {
      return this.throwIfDisposed(), opHandler.neg(this);
    }, e.prototype.ceil = function () {
      return this.throwIfDisposed(), opHandler.ceil(this);
    }, e.prototype.floor = function () {
      return this.throwIfDisposed(), opHandler.floor(this);
    }, e.prototype.sign = function () {
      return this.throwIfDisposed(), opHandler.sign(this);
    }, e.prototype.exp = function () {
      return this.throwIfDisposed(), opHandler.exp(this);
    }, e.prototype.expm1 = function () {
      return this.throwIfDisposed(), opHandler.expm1(this);
    }, e.prototype.log = function () {
      return this.throwIfDisposed(), opHandler.log(this);
    }, e.prototype.log1p = function () {
      return this.throwIfDisposed(), opHandler.log1p(this);
    }, e.prototype.sqrt = function () {
      return this.throwIfDisposed(), opHandler.sqrt(this);
    }, e.prototype.rsqrt = function () {
      return this.throwIfDisposed(), opHandler.rsqrt(this);
    }, e.prototype.square = function () {
      return this.throwIfDisposed(), opHandler.square(this);
    }, e.prototype.reciprocal = function () {
      return this.throwIfDisposed(), opHandler.reciprocal(this);
    }, e.prototype.abs = function () {
      return this.throwIfDisposed(), opHandler.abs(this);
    }, e.prototype.clipByValue = function (e, t) {
      return this.throwIfDisposed(), opHandler.clipByValue(this, e, t);
    }, e.prototype.relu = function () {
      return this.throwIfDisposed(), opHandler.relu(this);
    }, e.prototype.elu = function () {
      return this.throwIfDisposed(), opHandler.elu(this);
    }, e.prototype.selu = function () {
      return this.throwIfDisposed(), opHandler.selu(this);
    }, e.prototype.leakyRelu = function (e) {
      return void 0 === e && (e = .2), this.throwIfDisposed(), opHandler.leakyRelu(this, e);
    }, e.prototype.prelu = function (e) {
      return this.throwIfDisposed(), opHandler.prelu(this, e);
    }, e.prototype.sigmoid = function () {
      return this.throwIfDisposed(), opHandler.sigmoid(this);
    }, e.prototype.logSigmoid = function () {
      return this.throwIfDisposed(), opHandler.logSigmoid(this);
    }, e.prototype.softplus = function () {
      return this.throwIfDisposed(), opHandler.softplus(this);
    }, e.prototype.zerosLike = function () {
      return this.throwIfDisposed(), opHandler.zerosLike(this);
    }, e.prototype.onesLike = function () {
      return this.throwIfDisposed(), opHandler.onesLike(this);
    }, e.prototype.sin = function () {
      return this.throwIfDisposed(), opHandler.sin(this);
    }, e.prototype.cos = function () {
      return this.throwIfDisposed(), opHandler.cos(this);
    }, e.prototype.tan = function () {
      return this.throwIfDisposed(), opHandler.tan(this);
    }, e.prototype.asin = function () {
      return this.throwIfDisposed(), opHandler.asin(this);
    }, e.prototype.acos = function () {
      return this.throwIfDisposed(), opHandler.acos(this);
    }, e.prototype.atan = function () {
      return this.throwIfDisposed(), opHandler.atan(this);
    }, e.prototype.sinh = function () {
      return this.throwIfDisposed(), opHandler.sinh(this);
    }, e.prototype.cosh = function () {
      return this.throwIfDisposed(), opHandler.cosh(this);
    }, e.prototype.tanh = function () {
      return this.throwIfDisposed(), opHandler.tanh(this);
    }, e.prototype.asinh = function () {
      return this.throwIfDisposed(), opHandler.asinh(this);
    }, e.prototype.acosh = function () {
      return this.throwIfDisposed(), opHandler.acosh(this);
    }, e.prototype.atanh = function () {
      return this.throwIfDisposed(), opHandler.atanh(this);
    }, e.prototype.erf = function () {
      return this.throwIfDisposed(), opHandler.erf(this);
    }, e.prototype.round = function () {
      return this.throwIfDisposed(), opHandler.round(this);
    }, e.prototype.step = function (e) {
      return void 0 === e && (e = 0), this.throwIfDisposed(), opHandler.step(this, e);
    }, e.prototype.softmax = function (e) {
      return void 0 === e && (e = -1), this.throwIfDisposed(), opHandler.softmax(this, e);
    }, e.prototype.logSoftmax = function (e) {
      return void 0 === e && (e = -1), this.throwIfDisposed(), opHandler.logSoftmax(this, e);
    }, e.prototype.resizeBilinear = function (e, t) {
      return void 0 === t && (t = !1), this.throwIfDisposed(), opHandler.image.resizeBilinear(this, e, t);
    }, e.prototype.resizeNearestNeighbor = function (e, t) {
      return void 0 === t && (t = !1), this.throwIfDisposed(), opHandler.image.resizeNearestNeighbor(this, e, t);
    }, e.prototype.conv1d = function (e, t, r, n, a, o) {
      return void 0 === n && (n = "NWC"), void 0 === a && (a = 1), this.throwIfDisposed(), opHandler.conv1d(this, e, t, r, n, a, o);
    }, e.prototype.conv2d = function (e, t, r, n, a, o) {
      return void 0 === n && (n = "NHWC"), void 0 === a && (a = [1, 1]), this.throwIfDisposed(), opHandler.conv2d(this, e, t, r, n, a, o);
    }, e.prototype.conv2dTranspose = function (e, t, r, n, a) {
      return this.throwIfDisposed(), opHandler.conv2dTranspose(this, e, t, r, n, a);
    }, e.prototype.depthwiseConv2D = function (e, t, r, n, a, o) {
      return void 0 === n && (n = "NHWC"), void 0 === a && (a = [1, 1]), this.throwIfDisposed(), opHandler.depthwiseConv2d(this, e, t, r, n, a, o);
    }, e.prototype.separableConv2d = function (e, t, r, n, a, o) {
      return void 0 === a && (a = [1, 1]), void 0 === o && (o = "NHWC"), this.throwIfDisposed(), opHandler.separableConv2d(this, e, t, r, n, a, o);
    }, e.prototype.avgPool = function (e, t, r, n) {
      return this.throwIfDisposed(), opHandler.avgPool(this, e, t, r, n);
    }, e.prototype.maxPool = function (e, t, r, n) {
      return this.throwIfDisposed(), opHandler.maxPool(this, e, t, r, n);
    }, e.prototype.localResponseNormalization = function (e, t, r, n) {
      return void 0 === e && (e = 5), void 0 === t && (t = 1), void 0 === r && (r = 1), void 0 === n && (n = .5), opHandler.localResponseNormalization(this, e, t, r, n);
    }, e.prototype.pool = function (e, t, r, n, a) {
      return this.throwIfDisposed(), opHandler.pool(this, e, t, r, n, a);
    }, e.prototype.variable = function (e, t, r) {
      return void 0 === e && (e = !0), this.throwIfDisposed(), Variable.variable(this, e, t, r);
    }, e.prototype.unsortedSegmentSum = function (e, t) {
      return this.throwIfDisposed(), opHandler.unsortedSegmentSum(this, e, t);
    }, e.prototype.batchToSpaceND = function (e, t) {
      return this.throwIfDisposed(), opHandler.batchToSpaceND(this, e, t);
    }, e.prototype.spaceToBatchND = function (e, t) {
      return this.throwIfDisposed(), opHandler.spaceToBatchND(this, e, t);
    }, e.prototype.topk = function (e, t) {
      return void 0 === e && (e = 1), void 0 === t && (t = !0), this.throwIfDisposed(), opHandler.topk(this, e, t);
    }, e.prototype.stridedSlice = function (e, t, r, n, a, o, i, s) {
      return void 0 === n && (n = 0), void 0 === a && (a = 0), void 0 === o && (o = 0), void 0 === i && (i = 0), void 0 === s && (s = 0), this.throwIfDisposed(), opHandler.stridedSlice(this, e, t, r, n, a, o, i, s);
    }, e.prototype.depthToSpace = function (e, t) {
      return this.throwIfDisposed(), opHandler.depthToSpace(this, e, t);
    }, e.prototype.fft = function () {
      return this.throwIfDisposed(), opHandler.spectral.fft(this);
    }, e.prototype.ifft = function () {
      return this.throwIfDisposed(), opHandler.spectral.ifft(this);
    }, e.prototype.rfft = function () {
      return this.throwIfDisposed(), opHandler.spectral.rfft(this);
    }, e.prototype.irfft = function () {
      return this.throwIfDisposed(), opHandler.spectral.irfft(this);
    }, e;
  }();

  Object.defineProperty(Tensor, Symbol.hasInstance, {
    value: function value(e) {
      return !!e && null != e.dataId && null != e.shape && null != e.dtype;
    }
  });

  var Variable = function (e) {
    function t(t, r, n) {
      void 0 === r && (r = !0);
      var a = e.call(this, t.shape, t.dtype, null, t.dataId) || this;
      a.trainable = r, a.name = n, null == a.name && (a.name = trackerFn().nextVariableId().toString());

      try {
        trackerFn().registerVariable(a);
      } catch (e) {
        throw trackerFn().disposeTensor(a), e;
      }

      return a;
    }

    return __extends(t, e), t.variable = function (e, r, n, a) {
      return void 0 === r && (r = !0), null != a && a !== e.dtype && (e = e.asType(a)), new t(e, r, n);
    }, t.prototype.assign = function (e) {
      if (e.dtype !== this.dtype) throw new Error("dtype of the new value (" + e.dtype + ") and previous value (" + this.dtype + ") must match");
      if (!arraysEqual(e.shape, this.shape)) throw new Error("shape of the new value (" + e.shape + ") and previous value (" + this.shape + ") must match");
      trackerFn().disposeTensor(this), this.dataId = e.dataId, trackerFn().registerTensor(this);
    }, t;
  }(Tensor);

  Object.defineProperty(Variable, Symbol.hasInstance, {
    value: function value(e) {
      return e instanceof Tensor && null != e.assign && e.assign instanceof Function;
    }
  });
  var UpcastInt32AndMap,
      UpcastBoolAndMap,
      UpcastFloat32AndMap,
      UpcastComplex64AndMap,
      variable = Variable.variable,
      e;

  function getFilteredNodesXToY(e, t, r) {
    for (var n = {}, a = {}, o = 0; o < t.length; o++) {
      n[t[o].id] = !0;
    }

    for (o = 0; o < e.length; o++) {
      var i = (f = e[o]).inputs;

      for (var s in i) {
        for (var u = i[s], l = !1, p = 0; p < t.length; p++) {
          if (n[u.id]) {
            f.outputs.forEach(function (e) {
              return n[e.id] = !0;
            }), l = !0, a[f.id] = !0;
            break;
          }
        }

        if (l) break;
      }
    }

    var c = {};
    c[r.id] = !0;
    var h = {};

    for (o = e.length - 1; o >= 0; o--) {
      for (i = (f = e[o]).inputs, p = 0; p < f.outputs.length; p++) {
        if (c[f.outputs[p].id]) {
          for (var s in i) {
            c[i[s].id] = !0, h[f.id] = !0;
          }

          break;
        }
      }
    }

    var d = [];

    for (o = 0; o < e.length; o++) {
      var f;

      if (a[(f = e[o]).id] && h[f.id]) {
        var m = {};

        for (var s in f.inputs) {
          var g = f.inputs[s];
          n[g.id] && (m[s] = g);
        }

        var y = Object.assign({}, f);
        y.inputs = m, y.outputs = f.outputs, d.push(y);
      }
    }

    return d;
  }

  function backpropagateGradients(e, t) {
    for (var r = function r(_r) {
      var n = t[_r],
          a = [];
      if (n.outputs.forEach(function (t) {
        var r = e[t.id];
        if (null != r) a.push(r);else {
          var n = Tensor.make(t.shape, {
            values: makeZerosTypedArray(t.size, t.dtype)
          }, t.dtype);
          a.push(n);
        }
      }), null == n.gradient) throw new Error("Cannot compute gradient: gradient function not found for " + n.name + ".");
      var o = n.gradient(1 === n.outputs.length ? a[0] : a);

      for (var i in n.inputs) {
        if (!(i in o)) throw new Error("Cannot backprop through input " + i + ". Available gradients found: " + Object.keys(o) + ".");
        var s = o[i]();
        if ("float32" !== s.dtype) throw new Error("Error in gradient for op " + n.name + ". The gradient of input " + i + " must have 'float32' dtype, but has '" + s.dtype + "'");
        var u = n.inputs[i];
        if (!arraysEqual(s.shape, u.shape)) throw new Error("Error in gradient for op " + n.name + ". The gradient of input '" + i + "' has shape '" + s.shape + "', which does not match the shape of the input '" + u.shape + "'");
        if (null == e[u.id]) e[u.id] = s;else {
          var l = e[u.id];
          e[u.id] = l.add(s), l.dispose();
        }
      }
    }, n = t.length - 1; n >= 0; n--) {
      r(n);
    }
  }

  e = exports.Rank || (exports.Rank = {}), e.R0 = "R0", e.R1 = "R1", e.R2 = "R2", e.R3 = "R3", e.R4 = "R4", e.R5 = "R5", e.R6 = "R6", function (e) {
    e.float32 = "float32", e.int32 = "int32", e.bool = "int32", e.complex64 = "complex64";
  }(UpcastInt32AndMap || (UpcastInt32AndMap = {})), function (e) {
    e.float32 = "float32", e.int32 = "int32", e.bool = "bool", e.complex64 = "complex64";
  }(UpcastBoolAndMap || (UpcastBoolAndMap = {})), function (e) {
    e.float32 = "float32", e.int32 = "float32", e.bool = "float32", e.complex64 = "complex64";
  }(UpcastFloat32AndMap || (UpcastFloat32AndMap = {})), function (e) {
    e.float32 = "complex64", e.int32 = "complex64", e.bool = "complex64", e.complex64 = "complex64";
  }(UpcastComplex64AndMap || (UpcastComplex64AndMap = {}));
  var upcastTypeMap = {
    float32: UpcastFloat32AndMap,
    int32: UpcastInt32AndMap,
    bool: UpcastBoolAndMap,
    complex64: UpcastComplex64AndMap
  };

  function upcastType(e, t) {
    if ("string" === e || "string" === t) {
      if ("string" === e && "string" === t) return "string";
      throw new Error("Can not upcast " + e + " with " + t);
    }

    return upcastTypeMap[e][t];
  }

  function sumOutType(e) {
    return upcastType(e, "int32");
  }

  function makeTypesMatch(e, t) {
    if (e.dtype === t.dtype) return [e, t];
    var r = upcastType(e.dtype, t.dtype);
    return [e.cast(r), t.cast(r)];
  }

  function assertTypesMatch(e, t) {
    assert(e.dtype === t.dtype, "The dtypes of the first(" + e.dtype + ") and second(" + t.dtype + ") input must match");
  }

  function isTensorInList(e, t) {
    for (var r = 0; r < t.length; r++) {
      if (t[r].id === e.id) return !0;
    }

    return !1;
  }

  function getTensorsInContainer(e) {
    var t = [];
    return walkTensorContainer(e, t, new Set()), t;
  }

  function walkTensorContainer(e, t, r) {
    if (null != e) if (e instanceof Tensor) t.push(e);else if (isIterable(e)) {
      var n = e;

      for (var a in n) {
        var o = n[a];
        r.has(o) || (r.add(o), walkTensorContainer(o, t, r));
      }
    }
  }

  function isIterable(e) {
    return Array.isArray(e) || "object" == _typeof(e);
  }

  var Type,
      Engine = function () {
    function e(e, t, r) {
      this.backend = e, this.safeMode = t, this.debugMode = r, this.registeredVariables = {}, this.nextTapeNodeId = 0, this.numBytes = 0, this.numTensors = 0, this.numStringTensors = 0, this.numDataBuffers = 0, this.profiling = !1, this.gradientScopeCount = 0, this.customGradientDepth = 0, this.scopeStack = [], this.keepTensors = new Set(), this.tensorInfo = new WeakMap(), this.profiler = new Profiler(e), this.activeProfile = {
        newBytes: 0,
        newTensors: 0,
        peakBytes: 0,
        kernels: [],
        result: null
      };
    }

    return e.prototype.moveData = function (e) {
      this.write(e, this.readSync(e));
    }, e.prototype.tidy = function (e, t, r) {
      var n = this;
      void 0 === r && (r = !1);
      var a,
          o = null;

      if (null == t) {
        if ("function" != typeof e) throw new Error("Please provide a function to tidy()");
        t = e;
      } else {
        if ("string" != typeof e && !(e instanceof String)) throw new Error("When calling with two arguments, the first argument to tidy() must be a string");
        if ("function" != typeof t) throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");
        o = e;
      }

      return this.scopedRun(function () {
        return n.startScope(o, r);
      }, function () {
        return n.endScope(a, r);
      }, function () {
        return (a = t()) instanceof Promise && console.error("Cannot return a Promise inside of tidy."), a;
      });
    }, e.prototype.scopedRun = function (e, t, r) {
      e();

      try {
        var n = r();
        return t(), n;
      } catch (e) {
        throw t(), e;
      }
    }, e.prototype.nextTensorId = function () {
      return e.nextTensorId++;
    }, e.prototype.nextVariableId = function () {
      return e.nextVariableId++;
    }, e.prototype.runKernel = function (e, t, r) {
      var n,
          a = this,
          o = [],
          i = function i(e) {
        return o.push(e), e;
      },
          s = null != this.activeScope ? this.activeScope.name : "",
          u = this.numBytes,
          l = this.numTensors;

      if (this.scopedRun(function () {
        return a.customGradientDepth++;
      }, function () {
        return a.customGradientDepth--;
      }, function () {
        n = a.debugMode() ? a.profiler.profileKernel(s, function () {
          return e(a.backend, i);
        }) : e(a.backend, i);
      }), this.shouldRecord()) {
        var p = {
          id: this.nextTapeNodeId++,
          name: s,
          inputs: t,
          outputs: Array.isArray(n) ? n : [n]
        };
        null != r && (p.gradient = function (e) {
          return r(e, o);
        }), this.activeTape.push(p);
      }

      return this.profiling && this.activeProfile.kernels.push({
        name: s,
        bytesAdded: this.numBytes - u,
        totalBytesSnapshot: this.numBytes,
        tensorsAdded: this.numTensors - l,
        totalTensorsSnapshot: this.numTensors,
        inputShapes: Object.keys(t).map(function (e) {
          return t[e].shape;
        }),
        outputShape: Array.isArray(n) ? n.map(function (e) {
          return e.shape;
        }) : n.shape
      }), n;
    }, e.prototype.registerTensor = function (e) {
      var t = this.tensorInfo.has(e.dataId) ? this.tensorInfo.get(e.dataId).refCount : 0;

      if (this.numTensors++, "string" === e.dtype && this.numStringTensors++, 0 === t) {
        this.numDataBuffers++;
        var r = 0;
        "complex64" !== e.dtype && "string" !== e.dtype && (r = sizeFromShape(e.shape) * bytesPerElement(e.dtype)), this.tensorInfo.set(e.dataId, {
          backend: this.backend,
          dtype: e.dtype,
          shape: e.shape,
          bytes: r,
          refCount: 0
        }), this.numBytes += r, this.backend.register(e.dataId, e.shape, e.dtype);
      }

      this.tensorInfo.get(e.dataId).refCount++, e instanceof Variable || this.track(e);
    }, e.prototype.registerVariable = function (e) {
      if (null != this.registeredVariables[e.name]) throw new Error("Variable with name " + e.name + " was already registered");
      this.registeredVariables[e.name] = e;
    }, e.prototype.disposeTensor = function (e) {
      if (this.tensorInfo.has(e.dataId)) {
        this.keepTensors.has(e.id) && this.keepTensors.delete(e.id), this.numTensors--, "string" === e.dtype && this.numStringTensors--;
        var t = this.tensorInfo.get(e.dataId);
        t.refCount <= 1 ? ("complex64" !== e.dtype && (this.numBytes -= t.bytes), this.numDataBuffers--, t.backend.disposeData(e.dataId), this.tensorInfo.delete(e.dataId)) : this.tensorInfo.get(e.dataId).refCount--;
      }
    }, e.prototype.disposeVariables = function () {
      for (var e in this.registeredVariables) {
        var t = this.registeredVariables[e];
        this.disposeTensor(t), delete this.registeredVariables[e];
      }
    }, e.prototype.memory = function () {
      var e = this.backend.memory();
      return e.numTensors = this.numTensors, e.numDataBuffers = this.numDataBuffers, e.numBytes = this.numBytes, this.numStringTensors > 0 && (e.unreliable = !0, null == e.reasons && (e.reasons = []), e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")), e;
    }, e.prototype.profile = function (e) {
      return __awaiter(this, void 0, void 0, function () {
        var t, r;
        return __generator(this, function (n) {
          return this.profiling = !0, t = this.numBytes, r = this.numTensors, this.activeProfile.kernels = [], this.activeProfile.result = e(), this.profiling = !1, this.activeProfile.peakBytes = Math.max.apply(Math, this.activeProfile.kernels.map(function (e) {
            return e.totalBytesSnapshot;
          })), this.activeProfile.newBytes = this.numBytes - t, this.activeProfile.newTensors = this.numTensors - r, [2, this.activeProfile];
        });
      });
    }, e.prototype.shouldRecord = function () {
      return null != this.activeTape && 0 === this.customGradientDepth;
    }, e.prototype.addTapeNode = function (e, t, r) {
      var n = {};
      e.forEach(function (e, t) {
        n[t] = e;
      });
      var a = {
        id: this.nextTapeNodeId++,
        name: this.activeScope.name,
        inputs: n,
        outputs: [t],
        gradient: function gradient(e) {
          var t = {};
          return r(e).forEach(function (e, r) {
            t[r] = function () {
              return e;
            };
          }), t;
        }
      };
      this.activeTape.push(a);
    }, e.prototype.keep = function (e) {
      if (1 === this.scopeStack.length && this.safeMode) throw new Error("Safe mode is ON. Enclose all tensor operations inside tf.tidy(): tf.tidy(() => {...}) to avoid memory leaks.");
      return this.keepTensors.add(e.id), e;
    }, e.prototype.startScope = function (e, t) {
      void 0 === t && (t = !1), t && 0 === this.gradientScopeCount && (this.activeTape = []), t && this.gradientScopeCount++;
      var r = {
        track: [],
        name: "unnamed scope"
      };
      e && (r.name = e), this.scopeStack.push(r), this.activeScope = r;
    }, e.prototype.endScope = function (e, t) {
      var r = this;
      void 0 === t && (t = !1), t && (this.gradientScopeCount--, 0 === this.gradientScopeCount && (this.activeTape = null));
      var n = new Set(this.keepTensors),
          a = getTensorsInContainer(e);
      a.forEach(function (e) {
        return n.add(e.id);
      });

      for (var o = 0; o < this.activeScope.track.length; o++) {
        var i = this.activeScope.track[o];
        n.has(i.id) || (null != this.activeTape ? a.push(i) : i.dispose());
      }

      var s = this.scopeStack.pop();
      this.activeScope = 0 === this.scopeStack.length ? null : this.scopeStack[this.scopeStack.length - 1], a.forEach(function (e) {
        !r.keepTensors.has(e.id) && isTensorInList(e, s.track) && r.track(e);
      });
    }, e.prototype.gradients = function (e, t, r, n) {
      var a = this;
      if (void 0 === n && (n = !1), assert(t.length > 0, "gradients() received an empty list of xs."), null != r && "float32" !== r.dtype) throw new Error("dy must have 'float32' dtype, but has '" + r.dtype + "'");
      return this.tidy("gradients", function () {
        var o = e();
        assert(o instanceof Tensor, "The result y returned by f() must be a tensor.");
        var i = getFilteredNodesXToY(a.activeTape, t, o);
        if (!n && 0 === i.length && t.length > 0) throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");
        var s = {};
        return s[o.id] = null == r ? ones(o.shape) : r, backpropagateGradients(s, i), {
          value: o,
          grads: t.map(function (e) {
            return s[e.id];
          })
        };
      }, !0);
    }, e.prototype.customGrad = function (e) {
      var t = this;
      return assert(isFunction(e), "The f passed in customGrad(f) must be a function."), function () {
        for (var r, n, a = [], o = 0; o < arguments.length; o++) {
          a[o] = arguments[o];
        }

        return assert(a.every(function (e) {
          return e instanceof Tensor;
        }), "The args passed in customGrad(f)(x1, x2,...) must all be tensors"), t.scopedRun(function () {
          return t.customGradientDepth++;
        }, function () {
          return t.customGradientDepth--;
        }, function () {
          n = t.tidy(e.name, function () {
            var t = e.apply(void 0, a),
                n = t.value,
                o = t.gradFunc;
            return assert(n instanceof Tensor, "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"), assert(isFunction(o), "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."), r = o, n;
          }, !0);
        }), t.shouldRecord() && t.addTapeNode(a, n, function (e) {
          var t = r(e),
              n = Array.isArray(t) ? t : [t];
          return assert(n.length === a.length, "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."), assert(n.every(function (e) {
            return e instanceof Tensor;
          }), "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."), n;
        }), n;
      };
    }, e.prototype.write = function (e, t) {
      var r = this.tensorInfo.get(e);

      if ("string" === r.dtype) {
        var n = bytesFromStringArray(t);
        this.numBytes += n - r.bytes, r.bytes = n;
      }

      this.backend !== r.backend && (r.backend.disposeData(e), r.backend = this.backend, this.backend.register(e, r.shape, r.dtype)), this.backend.write(e, t);
    }, e.prototype.readSync = function (e) {
      return this.tensorInfo.get(e).backend.readSync(e);
    }, e.prototype.read = function (e) {
      return this.tensorInfo.get(e).backend.read(e);
    }, e.prototype.fromPixels = function (e, t) {
      return this.backend.fromPixels(e, t);
    }, e.prototype.time = function (e) {
      return __awaiter(this, void 0, void 0, function () {
        var t, r;
        return __generator(this, function (n) {
          switch (n.label) {
            case 0:
              return t = now(), [4, this.backend.time(e)];

            case 1:
              return (r = n.sent()).wallMs = now() - t, [2, r];
          }
        });
      });
    }, e.prototype.track = function (e) {
      if (1 === this.scopeStack.length && this.safeMode) throw new Error("Safe mode is ON. Enclose all tensor operations inside tf.tidy(): tf.tidy(() => {op();...}); to avoid memory leaks.");
      return null != this.activeScope && this.activeScope.track.push(e), e;
    }, e.nextTensorId = 0, e.nextVariableId = 0, e;
  }();

  function ones(e) {
    var t = makeOnesTypedArray(sizeFromShape(e), "float32");
    return Tensor.make(e, {
      values: t
    });
  }

  !function (e) {
    e[e.NUMBER = 0] = "NUMBER", e[e.BOOLEAN = 1] = "BOOLEAN", e[e.STRING = 2] = "STRING";
  }(Type || (Type = {}));
  var MAX_TEXTURE_SIZE,
      MAX_TEXTURES_IN_SHADER,
      URL_PROPERTIES = [{
    name: "DEBUG",
    type: Type.BOOLEAN
  }, {
    name: "IS_BROWSER",
    type: Type.BOOLEAN
  }, {
    name: "WEBGL_LAZILY_UNPACK",
    type: Type.BOOLEAN
  }, {
    name: "WEBGL_CPU_FORWARD",
    type: Type.BOOLEAN
  }, {
    name: "WEBGL_PACK",
    type: Type.BOOLEAN
  }, {
    name: "WEBGL_PACK_BATCHNORMALIZATION",
    type: Type.BOOLEAN
  }, {
    name: "WEBGL_PACK_CLIP",
    type: Type.BOOLEAN
  }, {
    name: "WEBGL_PACK_DEPTHWISECONV",
    type: Type.BOOLEAN
  }, {
    name: "WEBGL_PACK_BINARY_OPERATIONS",
    type: Type.BOOLEAN
  }, {
    name: "WEBGL_PACK_ARRAY_OPERATIONS",
    type: Type.BOOLEAN
  }, {
    name: "WEBGL_CONV_IM2COL",
    type: Type.BOOLEAN
  }, {
    name: "WEBGL_MAX_TEXTURE_SIZE",
    type: Type.NUMBER
  }, {
    name: "WEBGL_NUM_MB_BEFORE_PAGING",
    type: Type.NUMBER
  }, {
    name: "WEBGL_MAX_TEXTURES_IN_SHADER",
    type: Type.NUMBER
  }, {
    name: "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",
    type: Type.NUMBER
  }, {
    name: "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",
    type: Type.BOOLEAN
  }, {
    name: "WEBGL_VERSION",
    type: Type.NUMBER
  }, {
    name: "WEBGL_RENDER_FLOAT32_ENABLED",
    type: Type.BOOLEAN
  }, {
    name: "WEBGL_DOWNLOAD_FLOAT_ENABLED",
    type: Type.BOOLEAN
  }, {
    name: "WEBGL_FENCE_API_ENABLED",
    type: Type.BOOLEAN
  }, {
    name: "WEBGL_SIZE_UPLOAD_UNIFORM",
    type: Type.NUMBER
  }, {
    name: "BACKEND",
    type: Type.STRING
  }, {
    name: "EPSILON",
    type: Type.NUMBER
  }, {
    name: "PROD",
    type: Type.BOOLEAN
  }, {
    name: "TENSORLIKE_CHECK_SHAPE_CONSISTENCY",
    type: Type.BOOLEAN
  }, {
    name: "DEPRECATION_WARNINGS_ENABLED",
    type: Type.BOOLEAN
  }];

  function isWebGLVersionEnabled(e) {
    try {
      if (null != getWebGLContext(e)) return !0;
    } catch (e) {
      return !1;
    }

    return !1;
  }

  function getWebGLMaxTextureSize(e) {
    if (null == MAX_TEXTURE_SIZE) {
      var t = getWebGLContext(e);
      MAX_TEXTURE_SIZE = t.getParameter(t.MAX_TEXTURE_SIZE);
    }

    return MAX_TEXTURE_SIZE;
  }

  function getMaxTexturesInShader(e) {
    if (null == MAX_TEXTURES_IN_SHADER) {
      var t = getWebGLContext(e);
      MAX_TEXTURES_IN_SHADER = t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS);
    }

    return Math.min(16, MAX_TEXTURES_IN_SHADER);
  }

  function getWebGLDisjointQueryTimerVersion(e) {
    if (0 === e) return 0;
    var t = getWebGLContext(e);
    return hasExtension(t, "EXT_disjoint_timer_query_webgl2") && 2 === e ? 2 : hasExtension(t, "EXT_disjoint_timer_query") ? 1 : 0;
  }

  function isRenderToFloatTextureEnabled(e) {
    if (0 === e) return !1;
    var t = getWebGLContext(e);

    if (1 === e) {
      if (!hasExtension(t, "OES_texture_float")) return !1;
    } else if (!hasExtension(t, "EXT_color_buffer_float")) return !1;

    return createFloatTextureAndBindToFramebuffer(t, e);
  }

  function isDownloadFloatTextureEnabled(e) {
    if (0 === e) return !1;
    var t = getWebGLContext(e);

    if (1 === e) {
      if (!hasExtension(t, "OES_texture_float")) return !1;
      if (!hasExtension(t, "WEBGL_color_buffer_float")) return !1;
    } else if (!hasExtension(t, "EXT_color_buffer_float")) return !1;

    return createFloatTextureAndBindToFramebuffer(t, e);
  }

  function isWebGLFenceEnabled(e) {
    return 2 === e && null != getWebGLContext(e).fenceSync;
  }

  function isChrome() {
    return "undefined" != typeof navigator && null != navigator && null != navigator.userAgent && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
  }

  var TENSORFLOWJS_FLAGS_PREFIX = "tfjsflags";

  function getFeaturesFromURL() {
    var e = {};
    if ("undefined" == typeof window || void 0 === window.location || void 0 === window.location.search) return e;
    var t = getQueryParams(window.location.search);

    if (TENSORFLOWJS_FLAGS_PREFIX in t) {
      var r = {};
      t[TENSORFLOWJS_FLAGS_PREFIX].split(",").forEach(function (e) {
        var t = e.split(":"),
            n = t[0],
            a = t[1];
        r[n] = a;
      }), URL_PROPERTIES.forEach(function (t) {
        t.name in r && (console.log("Setting feature override from URL " + t.name + ": " + r[t.name]), t.type === Type.NUMBER ? e[t.name] = +r[t.name] : t.type === Type.BOOLEAN ? e[t.name] = "true" === r[t.name] : t.type === Type.STRING ? e[t.name] = r[t.name] : console.warn("Unknown URL param: " + t.name + "."));
      });
    }

    return e;
  }

  function hasExtension(e, t) {
    return null != e.getExtension(t);
  }

  function createFloatTextureAndBindToFramebuffer(e, t) {
    var r = e.createFramebuffer(),
        n = e.createTexture();
    e.bindTexture(e.TEXTURE_2D, n);
    var a = 2 === t ? e.RGBA32F : e.RGBA;
    e.texImage2D(e.TEXTURE_2D, 0, a, 1, 1, 0, e.RGBA, e.FLOAT, null), e.bindFramebuffer(e.FRAMEBUFFER, r), e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, n, 0);
    var o = e.checkFramebufferStatus(e.FRAMEBUFFER) === e.FRAMEBUFFER_COMPLETE;
    return e.bindTexture(e.TEXTURE_2D, null), e.bindFramebuffer(e.FRAMEBUFFER, null), e.deleteTexture(n), e.deleteFramebuffer(r), o;
  }

  function getQueryParams(e) {
    var t = {};
    return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, function (e) {
      for (var r = [], n = 1; n < arguments.length; n++) {
        r[n - 1] = arguments[n];
      }

      return decodeParam(t, r[0], r[1]), r.join("=");
    }), t;
  }

  function decodeParam(e, t, r) {
    e[decodeURIComponent(t)] = decodeURIComponent(r || "");
  }

  var BEFORE_PAGING_CONSTANT = 600;

  function getNumMBBeforePaging() {
    return window.screen.height * window.screen.width * window.devicePixelRatio * BEFORE_PAGING_CONSTANT / 1024;
  }

  var EPSILON_FLOAT16 = 1e-4,
      TEST_EPSILON_FLOAT16 = .1,
      EPSILON_FLOAT32 = 1e-7,
      TEST_EPSILON_FLOAT32 = .001,
      Environment = function () {
    function e(e) {
      this.features = {}, this.registry = {}, null != e && (this.features = e), this.get("DEBUG") && console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");
    }

    return e.setBackend = function (e, t) {
      if (void 0 === t && (t = !1), !(e in ENV.registry)) throw new Error("Backend name '" + e + "' not found in registry");
      ENV.engine.backend = ENV.findBackend(e), ENV.backendName = e;
    }, e.getBackend = function () {
      return ENV.initEngine(), ENV.backendName;
    }, e.disposeVariables = function () {
      ENV.engine.disposeVariables();
    }, e.memory = function () {
      return ENV.engine.memory();
    }, e.profile = function (e) {
      return ENV.engine.profile(e);
    }, e.tidy = function (e, t) {
      return ENV.engine.tidy(e, t);
    }, e.dispose = function (e) {
      getTensorsInContainer(e).forEach(function (e) {
        return e.dispose();
      });
    }, e.keep = function (e) {
      return ENV.engine.keep(e);
    }, e.time = function (e) {
      return ENV.engine.time(e);
    }, e.prototype.get = function (e) {
      return e in this.features ? this.features[e] : (this.features[e] = this.evaluateFeature(e), this.features[e]);
    }, e.prototype.getFeatures = function () {
      return this.features;
    }, e.prototype.set = function (e, t) {
      this.features[e] = t;
    }, e.prototype.getBestBackendName = function () {
      var e = this;
      if (0 === Object.keys(this.registry).length) throw new Error("No backend found in registry.");
      return Object.keys(this.registry).map(function (t) {
        return {
          name: t,
          entry: e.registry[t]
        };
      }).sort(function (e, t) {
        return t.entry.priority - e.entry.priority;
      })[0].name;
    }, e.prototype.evaluateFeature = function (e) {
      if ("DEBUG" === e) return !1;
      if ("IS_BROWSER" === e) return "undefined" != typeof window;
      if ("IS_NODE" === e) return "undefined" != typeof process && void 0 !== process.versions && void 0 !== process.versions.node;
      if ("IS_CHROME" === e) return isChrome();
      if ("WEBGL_CPU_FORWARD" === e) return !0;
      if ("WEBGL_PACK" === e) return !1;
      if ("WEBGL_PACK_BATCHNORMALIZATION" === e) return this.get("WEBGL_PACK");
      if ("WEBGL_PACK_CLIP" === e) return this.get("WEBGL_PACK");
      if ("WEBGL_PACK_DEPTHWISECONV" === e) return this.get("WEBGL_PACK");
      if ("WEBGL_PACK_BINARY_OPERATIONS" === e) return this.get("WEBGL_PACK");
      if ("WEBGL_PACK_ARRAY_OPERATIONS" === e) return this.get("WEBGL_PACK");
      if ("WEBGL_LAZILY_UNPACK" === e) return this.get("WEBGL_PACK");
      if ("WEBGL_CONV_IM2COL" === e) return this.get("WEBGL_PACK");
      if ("WEBGL_NUM_MB_BEFORE_PAGING" === e) return this.get("PROD") || !this.get("IS_BROWSER") ? Number.POSITIVE_INFINITY : getNumMBBeforePaging();
      if ("WEBGL_MAX_TEXTURE_SIZE" === e) return getWebGLMaxTextureSize(this.get("WEBGL_VERSION"));
      if ("WEBGL_MAX_TEXTURES_IN_SHADER" === e) return getMaxTexturesInShader(this.get("WEBGL_VERSION"));
      if ("IS_TEST" === e) return !1;
      if ("BACKEND" === e) return this.getBestBackendName();

      if ("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION" === e) {
        var t = this.get("WEBGL_VERSION");
        return 0 === t ? 0 : getWebGLDisjointQueryTimerVersion(t);
      }

      if ("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE" === e) return this.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 && !isMobile();
      if ("HAS_WEBGL" === e) return this.get("WEBGL_VERSION") > 0;
      if ("WEBGL_VERSION" === e) return isWebGLVersionEnabled(2) ? 2 : isWebGLVersionEnabled(1) ? 1 : 0;
      if ("WEBGL_RENDER_FLOAT32_ENABLED" === e) return isRenderToFloatTextureEnabled(this.get("WEBGL_VERSION"));
      if ("WEBGL_DOWNLOAD_FLOAT_ENABLED" === e) return isDownloadFloatTextureEnabled(this.get("WEBGL_VERSION"));
      if ("WEBGL_FENCE_API_ENABLED" === e) return isWebGLFenceEnabled(this.get("WEBGL_VERSION"));
      if ("WEBGL_SIZE_UPLOAD_UNIFORM" === e) return this.get("WEBGL_RENDER_FLOAT32_ENABLED") ? 4 : 0;
      if ("TEST_EPSILON" === e) return 32 === this.backend.floatPrecision() ? TEST_EPSILON_FLOAT32 : TEST_EPSILON_FLOAT16;
      if ("EPSILON" === e) return 32 === this.backend.floatPrecision() ? EPSILON_FLOAT32 : EPSILON_FLOAT16;
      if ("PROD" === e) return !1;
      if ("TENSORLIKE_CHECK_SHAPE_CONSISTENCY" === e) return !this.get("PROD");
      if ("DEPRECATION_WARNINGS_ENABLED" === e) return !0;
      throw new Error("Unknown feature " + e + ".");
    }, e.prototype.setFeatures = function (e) {
      this.features = Object.assign({}, e);
    }, e.prototype.reset = function () {
      this.features = getFeaturesFromURL(), null != this.globalEngine && (this.globalEngine = null);
    }, Object.defineProperty(e.prototype, "backend", {
      get: function get() {
        return this.engine.backend;
      },
      enumerable: !0,
      configurable: !0
    }), e.prototype.findBackend = function (e) {
      return e in this.registry ? this.registry[e].backend : null;
    }, e.prototype.registerBackend = function (e, t, r, n) {
      var a = this;
      if (void 0 === r && (r = 1), e in this.registry) return console.warn(e + " backend was already registered. Reusing existing backend"), null != n && n(function () {
        return a.engine;
      }), !1;

      try {
        var o = t();
        return o.setDataMover({
          moveData: function moveData(e) {
            return a.engine.moveData(e);
          }
        }), this.registry[e] = {
          backend: o,
          priority: r
        }, !0;
      } catch (t) {
        return console.warn("Registration of backend " + e + " failed"), console.warn(t.stack || t.message), !1;
      }
    }, e.prototype.removeBackend = function (e) {
      if (!(e in this.registry)) throw new Error(e + " backend not found in registry");
      this.registry[e].backend.dispose(), delete this.registry[e];
    }, Object.defineProperty(e.prototype, "engine", {
      get: function get() {
        return this.initEngine(), this.globalEngine;
      },
      enumerable: !0,
      configurable: !0
    }), e.prototype.initEngine = function () {
      var e = this;

      if (null == this.globalEngine) {
        this.backendName = this.get("BACKEND");
        var t = this.findBackend(this.backendName);
        this.globalEngine = new Engine(t, !1, function () {
          return e.get("DEBUG");
        });
      }
    }, e;
  }();

  function getGlobalNamespace() {
    var e;
    if ("undefined" != typeof window) e = window;else {
      if ("undefined" == typeof process) throw new Error("Could not find a global object");
      e = process;
    }
    return e;
  }

  function getOrMakeEnvironment() {
    var e = getGlobalNamespace();
    return null == e.ENV && (e.ENV = new Environment(getFeaturesFromURL()), setTensorTracker(function () {
      return e.ENV.engine;
    })), e.ENV;
  }

  function enableProdMode() {
    ENV.set("PROD", !0);
  }

  function disableDeprecationWarnings() {
    ENV.set("DEPRECATION_WARNINGS_ENABLED", !1), console.warn("TensorFlow.js deprecation warnings have been disabled.");
  }

  function deprecationWarn(e) {
    ENV.get("DEPRECATION_WARNINGS_ENABLED") && console.warn(e + " You can disable deprecation warnings with tf.disableDeprecationWarnings().");
  }

  setDeprecationWarningFn(deprecationWarn);
  var ENV = getOrMakeEnvironment(),
      environment = Object.freeze({
    EPSILON_FLOAT16: EPSILON_FLOAT16,
    EPSILON_FLOAT32: EPSILON_FLOAT32,
    Environment: Environment,
    enableProdMode: enableProdMode,
    disableDeprecationWarnings: disableDeprecationWarnings,
    deprecationWarn: deprecationWarn,
    ENV: ENV
  });

  function grad(e) {
    return assert(isFunction(e), "The f passed in grad(f) must be a function"), function (t, r) {
      return assert(t instanceof Tensor, "The x passed in grad(f)(x) must be a tensor"), assert(null == r || r instanceof Tensor, "The dy passed in grad(f)(x, dy) must be a tensor"), ENV.engine.tidy(function () {
        var n = ENV.engine.gradients(function () {
          return e(t);
        }, [t], r),
            a = n.value,
            o = n.grads;
        return null != r && assertShapesMatch(a.shape, r.shape, "The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"), checkGrads(o), o[0];
      });
    };
  }

  function grads(e) {
    return assert(isFunction(e), "The f passed in grads(f) must be a function"), function (t, r) {
      return assert(Array.isArray(t) && t.every(function (e) {
        return e instanceof Tensor;
      }), "The args passed in grads(f)(args) must be an array of tensors"), assert(null == r || r instanceof Tensor, "The dy passed in grads(f)(args, dy) must be a tensor"), ENV.engine.tidy(function () {
        var n = ENV.engine.gradients(function () {
          return e.apply(void 0, t);
        }, t, r),
            a = n.value,
            o = n.grads;
        return null != r && assertShapesMatch(a.shape, r.shape, "The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), checkGrads(o), o;
      });
    };
  }

  function valueAndGrad(e) {
    return assert(isFunction(e), "The f passed in valueAndGrad(f) must be a function"), function (t, r) {
      assert(t instanceof Tensor, "The x passed in valueAndGrad(f)(x) must be a tensor"), assert(null == r || r instanceof Tensor, "The dy passed in valueAndGrad(f)(x, dy) must be a tensor");
      var n = ENV.engine.gradients(function () {
        return e(t);
      }, [t], r),
          a = n.grads,
          o = n.value;
      return checkGrads(a), {
        grad: a[0],
        value: o
      };
    };
  }

  function valueAndGrads(e) {
    return assert(isFunction(e), "The f passed in valueAndGrads(f) must be a function"), function (t, r) {
      assert(Array.isArray(t) && t.every(function (e) {
        return e instanceof Tensor;
      }), "The args passed in valueAndGrads(f)(args) must be array of tensors"), assert(null == r || r instanceof Tensor, "The dy passed in valueAndGrads(f)(args, dy) must be a tensor");
      var n = ENV.engine.gradients(function () {
        return e.apply(void 0, t);
      }, t, r);
      return null != r && assertShapesMatch(n.value.shape, r.shape, "The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), checkGrads(n.grads), n;
    };
  }

  function variableGrads(e, t) {
    if (assert(isFunction(e), "The f passed in variableGrads(f) must be a function"), assert(null == t || Array.isArray(t) && t.every(function (e) {
      return e instanceof Variable;
    }), "The varList passed in variableGrads(f, varList) must be an array of variables"), null == t) for (var r in t = [], ENV.engine.registeredVariables) {
      t.push(ENV.engine.registeredVariables[r]);
    }
    var n = t.length;
    assert((t = t.filter(function (e) {
      return e.trainable;
    })).length > 0, "variableGrads() expects at least one of the input variables to be trainable, but none of the " + n + " variables is trainable.");
    var a = ENV.engine.gradients(e, t, null, !0),
        o = a.value,
        i = a.grads;
    assert(i.some(function (e) {
      return null != e;
    }), "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."), assert(0 === o.rank, "The f passed in variableGrads(f) must return a scalar, but it returned a rank-" + o.rank + " tensor");
    var s = {};
    return t.forEach(function (e, t) {
      null != i[t] && (s[e.name] = i[t]);
    }), {
      value: o,
      grads: s
    };
  }

  function customGrad(e) {
    return ENV.engine.customGrad(e);
  }

  function checkGrads(e) {
    if (e.filter(function (e) {
      return null == e;
    }).length > 0) throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.");
  }

  var tidy = Environment.tidy,
      keep = Environment.keep,
      dispose = Environment.dispose,
      time = Environment.time,
      profile = Environment.profile;

  function warn() {
    for (var e = [], t = 0; t < arguments.length; t++) {
      e[t] = arguments[t];
    }

    ENV.get("IS_TEST") || console.warn.apply(console, e);
  }

  function getReshaped(e, t, r, n) {
    void 0 === n && (n = !0);
    var a = [];
    if (n) (a = a.concat(t.slice(0))).push(e[0] / r), a = a.concat(e.slice(1));else {
      a = a.concat(e[0]);

      for (var o = t.length, i = 0; i < o; ++i) {
        a = a.concat([e[i + 1] / t[i], t[i]]);
      }

      a = a.concat(e.slice(o + 1));
    }
    return a;
  }

  function getPermuted(e, t, r) {
    void 0 === r && (r = !0);
    var n = [];

    if (r) {
      n.push(t);

      for (var a = t + 1; a < e; ++a) {
        a <= 2 * t ? (n.push(a), n.push(a - (t + 1))) : n.push(a);
      }
    } else {
      var o = [],
          i = [];

      for (a = 1; a < e; ++a) {
        a >= 2 * t + 1 || a % 2 == 1 ? i.push(a) : o.push(a);
      }

      n.push.apply(n, o), n.push(0), n.push.apply(n, i);
    }

    return n;
  }

  function getReshapedPermuted(e, t, r, n) {
    void 0 === n && (n = !0);
    var a = [];
    n ? a.push(e[0] / r) : a.push(e[0] * r);

    for (var o = 1; o < e.length; ++o) {
      o <= t.length ? n ? a.push(t[o - 1] * e[o]) : a.push(e[o] / t[o - 1]) : a.push(e[o]);
    }

    return a;
  }

  function getSliceBeginCoords(e, t) {
    for (var r = [0], n = 0; n < t; ++n) {
      r.push(e[n][0]);
    }

    return r;
  }

  function getSliceSize(e, t, r) {
    for (var n = e.slice(0, 1), a = 0; a < r; ++a) {
      n.push(e[a + 1] - t[a][0] - t[a][1]);
    }

    return n;
  }

  function axesAreInnerMostDims(e, t) {
    for (var r = 0; r < e.length; ++r) {
      if (e[e.length - r - 1] !== t - 1 - r) return !1;
    }

    return !0;
  }

  function combineLocations(e, t, r) {
    for (var n = e.length + t.length, a = [], o = 0, i = 0, s = 0; s < n; s++) {
      -1 === r.indexOf(s) ? a.push(e[o++]) : a.push(t[i++]);
    }

    return a;
  }

  function computeOutAndReduceShapes(e, t) {
    for (var r = [], n = e.length, a = 0; a < n; a++) {
      -1 === t.indexOf(a) && r.push(e[a]);
    }

    return [r, t.map(function (t) {
      return e[t];
    })];
  }

  function expandShapeToKeepDim(e, t) {
    return combineLocations(e, t.map(function (e) {
      return 1;
    }), t);
  }

  function assertAxesAreInnerMostDims(e, t, r) {
    assert(axesAreInnerMostDims(t, r), e + " supports only inner-most axes for now. Got axes " + t + " and rank-" + r + " input.");
  }

  function getAxesPermutation(e, t) {
    if (axesAreInnerMostDims(e, t)) return null;

    for (var r = [], n = 0; n < t; ++n) {
      -1 === e.indexOf(n) && r.push(n);
    }

    return e.forEach(function (e) {
      return r.push(e);
    }), r;
  }

  function getUndoAxesPermutation(e) {
    return e.map(function (e, t) {
      return [t, e];
    }).sort(function (e, t) {
      return e[1] - t[1];
    }).map(function (e) {
      return e[0];
    });
  }

  function getInnerMostAxes(e, t) {
    for (var r = [], n = t - e; n < t; ++n) {
      r.push(n);
    }

    return r;
  }

  function assertParamsConsistent(e, t) {
    var r = e[0].length;
    e.forEach(function (e, t) {
      assert(e.length === r, "Error in concat" + r + "D: rank of tensors[" + t + "] must be the same as the rank of the rest (" + r + ")");
    }), assert(t >= 0 && t < r, "Error in concat" + r + "D: axis must be between 0 and " + (r - 1) + ".");
    var n = e[0];
    e.forEach(function (e, a) {
      for (var o = 0; o < r; o++) {
        assert(o === t || e[o] === n[o], "Error in concat" + r + "D: Shape of tensors[" + a + "] (" + e + ") does not match the shape of the rest (" + n + ") along the non-concatenated axis " + a + ".");
      }
    });
  }

  function computeOutShape(e, t) {
    for (var r = e[0].slice(), n = 1; n < e.length; n++) {
      r[t] += e[n][t];
    }

    return r;
  }

  function prepareAndValidate(e, t) {
    if (e.rank < 1) throw new Error("tf.gatherND() expects the input to be rank 1 or higher, but the rank was " + e.rank + ".");
    if (t.rank < 1) throw new Error("tf.gatherND() expects the indices to be rank 1 or higher, but the rank was " + t.rank + ".");
    if ("int32" !== t.dtype) throw new Error("tf.gatherND() expects the indices to be int32 type, but the dtype was " + t.dtype + ".");
    if (t.shape[t.rank - 1] > e.rank) throw new Error("index innermost dimension length must be <= tensor rank; saw: " + t.shape[t.rank - 1] + " vs. " + e.rank);
    if (0 === e.size) throw new Error("Requested more than 0 entries, but input is empty. Input shape: " + e.shape + ".");

    for (var r = t.shape, n = r[r.length - 1], a = 1, o = 0; o < r.length - 1; ++o) {
      a *= r[o];
    }

    var i = e.shape,
        s = r.slice();
    s.pop();
    var u = 1;

    for (o = n; o < e.rank; ++o) {
      u *= i[o], s.push(i[o]);
    }

    var l = computeStrides(e.shape).map(function (e) {
      return e / u;
    }).concat([1]).slice(0, n);
    return [s, a, u, l];
  }

  var PARALLELIZE_THRESHOLD = 30;

  function computeOptimalWindowSize(e) {
    return e <= PARALLELIZE_THRESHOLD ? e : nearestDivisor(e, Math.floor(Math.sqrt(e)));
  }

  function validateUpdateShape(e, t, r) {
    var n = t.rank > 1 ? t.shape[t.rank - 1] : 1,
        a = t.rank > 1 ? t.rank - 1 : 1,
        o = "Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: " + r.shape + ", indices.shape: " + t.shape + ", shape: " + e + ", sliceDim: " + n + ", and batchDim: " + a + ".";
    if (r.rank < a) throw new Error(o + " update.rank < " + a + ". ");
    if (e.length < n + (r.rank - a)) throw new Error(o + " Output shape length < " + (n + (r.rank - a)));
    if (r.rank !== a + e.length - n) throw new Error(o + " update.rank != " + (a + e.length - n));

    for (var i = 0; i < a; ++i) {
      if (r.shape[i] !== t.shape[i]) throw new Error(o + " updates.shape[" + i + "] (" + r.shape[i] + ") != indices.shape[" + i + "] (" + t.shape[i] + ").");
    }

    for (i = 0; i < r.rank - a; ++i) {
      if (r.shape[i + a] !== e[i + n]) throw new Error(o + " updates.shape[" + (i + a) + "] (" + r.shape[i + a] + ") != shape[" + (i + a) + "] (" + e[i + a] + ")");
    }
  }

  function validateInput(e, t, r) {
    if (t.rank < 1) throw new Error("tf.scatterND() expects the indices to be rank 1 or higher, but the rank was " + t.rank + ".");
    if (e.rank < 1) throw new Error("tf.scatterND() expects the updates to be rank 1 or higher, but the rank was " + e.rank + ".");
    if ("int32" !== t.dtype) throw new Error("The dtype of 'indices' should be int32, but got dtype: " + t.dtype);
    if (r.length < 1) throw new Error("Output rank must be greater or equal to 1, but got shape: " + r);

    if (0 === r.length) {
      if (0 === t.size) throw new Error("Indices specified for empty output. indices shape: " + t.shape);
      if (0 === e.size) throw new Error("Updates specified for empty output. updates shape: " + e.shape);
    }

    validateUpdateShape(r, t, e);
  }

  function calculateShapes(e, t, r) {
    for (var n = t.rank > 1 ? t.shape[t.rank - 1] : 1, a = r.length, o = 1, i = n; i < a; ++i) {
      o *= r[i];
    }

    var s = n < 1 ? 1 : n;
    return {
      sliceRank: n,
      numUpdates: t.size / s,
      sliceSize: o,
      strides: computeStrides(r.slice(0, n)).concat([1]),
      outputSize: sizeFromShape(r)
    };
  }

  function segOpComputeOptimalWindowSize(e, t) {
    var r,
        n = !1;

    for (e <= PARALLELIZE_THRESHOLD ? (r = e, n = !0) : r = nearestDivisor(e, Math.floor(Math.sqrt(e))); !n;) {
      if (r > t || r === e) {
        n = !0;
        break;
      }

      r = nearestDivisor(e, r + 1);
    }

    return r;
  }

  function computeOutShape$1(e, t, r) {
    for (var n = [], a = e.length, o = 0; o < a; o++) {
      o !== t ? n.push(e[o]) : n.push(r);
    }

    return n;
  }

  function collectGatherOpShapeInfo(e, t, r) {
    for (var n = e.shape[r], a = [], o = 1, i = 1, s = 0; s < r; s++) {
      a.push(e.shape[s]), o *= e.shape[s];
    }

    for (s = 0; s < t.rank; s++) {
      a.push(t.shape[s]);
    }

    for (s = r + 1; s < e.rank; s++) {
      a.push(e.shape[s]), i *= e.shape[s];
    }

    return {
      batchSize: o,
      sliceSize: i,
      dimSize: n,
      outputShape: a
    };
  }

  function assertParamsValid(e, t, r) {
    assert(e.rank === t.length, "Error in slice" + e.rank + "D: Length of begin " + t + " must match the rank of the array (" + e.rank + ")."), assert(e.rank === r.length, "Error in slice" + e.rank + "D: Length of size " + r + " must match the rank of the array (" + e.rank + ").");

    for (var n = 0; n < e.rank; ++n) {
      assert(t[n] + r[n] <= e.shape[n], "Error in slice" + e.rank + "D: begin[" + n + "] + size[" + n + "] (" + (t[n] + r[n]) + ") would overflow input.shape[" + n + "] (" + e.shape[n] + ")");
    }
  }

  function getStridedSlicedInfo(e, t, r, n, a, o, i, s, u) {
    if (void 0 === a && (a = 0), void 0 === o && (o = 0), void 0 === i && (i = 0), void 0 === s && (s = 0), void 0 === u && (u = 0), 0 !== i) throw new Error("ellipsis mask is not yet supported");
    if (0 !== s) throw new Error("new axis mask is not yet supported");

    for (var l = [], p = [], c = [], h = 0; h < e.length; h++) {
      l[h] = startForAxis(a, t, n, e, h), p[h] = stopForAxis(o, r, n, e, h), u & 1 << h && (p[h] = l[h] + 1, c.push(h));
    }

    var d = new Array(e.length).fill(0);
    return d = d.map(function (e, t) {
      for (var r = 0, a = l[t]; !(n[t] > 0 ? a >= p[t] : a <= p[t]); a += n[t]) {
        r += 1;
      }

      return r;
    }), [l, d, c];
  }

  function startForAxis(e, t, r, n, a) {
    var o = t[a];
    e & 1 << a && (o = r[a] > 0 ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER);
    var i = n[a];
    return o < 0 && (o += i), clamp(0, o, i - 1);
  }

  function stopForAxis(e, t, r, n, a) {
    var o = t[a];
    e & 1 << a && (o = r[a] > 0 ? Number.MAX_SAFE_INTEGER : Number.MIN_SAFE_INTEGER);
    var i = n[a];
    return o < 0 && (o += i), r[a] > 0 ? clamp(0, o, i) : clamp(-1, o, i - 1);
  }

  function isSliceContinous(e, t, r) {
    for (var n = r.length, a = 0; a < r.length; a++) {
      if (r[a] > 1) {
        n = a;
        break;
      }
    }

    for (a = n + 1; a < r.length; a++) {
      if (t[a] > 0 || r[a] !== e[a]) return !1;
    }

    return !0;
  }

  function computeFlatOffset(e, t) {
    for (var r = e.length > 0 ? e[e.length - 1] : 1, n = 0; n < e.length - 1; n++) {
      r += e[n] * t[n];
    }

    return r;
  }

  function inferShape(e) {
    var t = e;
    if (isTypedArray(e)) return [e.length];
    if (!Array.isArray(e)) return [];

    for (var r = []; Array.isArray(t) || isTypedArray(t);) {
      r.push(t.length), t = t[0];
    }

    return Array.isArray(e) && ENV.get("TENSORLIKE_CHECK_SHAPE_CONSISTENCY") && deepAssertShapeConsistency(e, r, []), r;
  }

  function deepAssertShapeConsistency(e, t, r) {
    if (r = r || [], Array.isArray(e) || isTypedArray(e)) {
      assert(t.length > 0, function () {
        return "Element arr[" + r.join("][") + "] should be a primitive, but is an array of " + e.length + " elements";
      }), assert(e.length === t[0], function () {
        return "Element arr[" + r.join("][") + "] should have " + t[0] + " elements, but has " + e.length + " elements";
      });

      for (var n = t.slice(1), a = 0; a < e.length; ++a) {
        deepAssertShapeConsistency(e[a], n, r.concat(a));
      }
    } else assert(0 === t.length, function () {
      return "Element arr[" + r.join("][") + "] is a primitive, but should be an array/TypedArray of " + t[0] + " elements";
    });
  }

  function assertDtype(e, t, r, n) {
    if (null != e && ("numeric" !== e && e !== t || "numeric" === e && "string" === t)) throw new Error("Argument '" + r + "' passed to '" + n + "' must be " + e + " tensor, but got " + t + " tensor");
  }

  function convertToTensor(e, t, r, n) {
    if (void 0 === n && (n = "numeric"), e instanceof Tensor) return assertDtype(n, e.dtype, t, r), e;
    var a = inferDtype(e);
    if ("string" !== a && ["bool", "int32", "float32"].indexOf(n) >= 0 && (a = n), assertDtype(n, a, t, r), !isTypedArray(e) && !Array.isArray(e) && "number" != typeof e && "boolean" != typeof e && "string" != typeof e) throw new Error("Argument '" + t + "' passed to '" + r + "' must be a Tensor or TensorLike, but got '" + e.constructor.name + "'");
    var o = inferShape(e);
    isTypedArray(e) || Array.isArray(e) || (e = [e]);
    var i = "string" !== a ? toTypedArray(e, a, ENV.get("DEBUG")) : flatten(e);
    return Tensor.make(o, {
      values: i
    }, a);
  }

  function convertToTensorArray(e, t, r) {
    if (!Array.isArray(e)) throw new Error("Argument " + t + " passed to " + r + " must be a `Tensor[]` or `TensorLike[]`");
    return e.map(function (e, n) {
      return convertToTensor(e, t + "[" + n + "]", r);
    });
  }

  function op(e) {
    var t = Object.keys(e);
    if (1 !== t.length) throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with " + t.length + " keys.");
    var r = t[0],
        n = e[r];
    r.endsWith("_") && (r = r.substring(0, r.length - 1));

    var a = function a() {
      for (var e = [], t = 0; t < arguments.length; t++) {
        e[t] = arguments[t];
      }

      ENV.engine.startScope(r);

      try {
        var a = n.apply(void 0, e);
        return a instanceof Promise && console.error("Cannot return a Promise inside of tidy."), ENV.engine.endScope(a), a;
      } catch (e) {
        throw ENV.engine.endScope(null), e;
      }
    };

    return Object.defineProperty(a, "name", {
      value: r,
      configurable: !0
    }), a;
  }

  function softmax_(e, t) {
    void 0 === t && (t = -1);
    var r = convertToTensor(e, "logits", "softmax");
    if (-1 === t && (t = r.rank - 1), t !== r.rank - 1) throw Error("Softmax along a non-last dimension is not yet supported. Logits was rank " + r.rank + " and dim was " + t);
    return customGrad(function (e) {
      var r = e.logSumExp([t], !0),
          n = e.toFloat().sub(r).exp();
      return {
        value: n,
        gradFunc: function gradFunc(e) {
          var r = e.mul(n);
          return r.sub(r.sum([t], !0).mul(n));
        }
      };
    })(r);
  }

  function logSoftmax_(e, t) {
    void 0 === t && (t = -1);
    var r = convertToTensor(e, "logits", "logSoftmax");
    if (-1 === t && (t = r.rank - 1), t !== r.rank - 1) throw Error("Log Softmax along a non-last dimension is not yet supported. Logits was rank " + r.rank + " and axis was " + t);
    return customGrad(function (e) {
      var r = e.max(t, !0),
          n = e.sub(r),
          a = n.toFloat().sub(n.exp().sum(t, !0).log());
      return {
        value: a,
        gradFunc: function gradFunc(e) {
          var r = a.exp();
          return e.sub(e.sum(t, !0).mul(r));
        }
      };
    })(r);
  }

  var softmax = op({
    softmax_: softmax_
  }),
      logSoftmax = op({
    logSoftmax_: logSoftmax_
  });

  function complex_(e, t) {
    var r = convertToTensor(e, "real", "complex"),
        n = convertToTensor(t, "imag", "complex");
    return assertShapesMatch(r.shape, n.shape, "real and imag shapes, " + r.shape + " and " + n.shape + ", must match in call to tf.complex()."), ENV.engine.runKernel(function (e) {
      return e.complex(r, n);
    }, {
      $real: r,
      $imag: n
    });
  }

  function real_(e) {
    var t = convertToTensor(e, "input", "real");
    return ENV.engine.runKernel(function (e) {
      return e.real(t);
    }, {
      $input: t
    });
  }

  function imag_(e) {
    var t = convertToTensor(e, "input", "imag");
    return ENV.engine.runKernel(function (e) {
      return e.imag(t);
    }, {
      $input: t
    });
  }

  var complex = op({
    complex_: complex_
  }),
      real = op({
    real_: real_
  }),
      imag = op({
    imag_: imag_
  });

  function tensor(e, t, r) {
    if (null == r && (r = inferDtype(e)), "complex64" === r) throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");
    if (!isTypedArray(e) && !Array.isArray(e) && "number" != typeof e && "boolean" != typeof e && "string" != typeof e) throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");
    var n = inferShape(e);

    if (null != t) {
      var a = sizeFromShape(t),
          o = sizeFromShape(n);
      assert(a === o, function () {
        return "Based on the provided shape, [" + t + "], the tensor should have " + a + " values but has " + o;
      });

      for (var i = 0; i < n.length; ++i) {
        var s = n[i],
            u = i !== n.length - 1 || s !== sizeFromShape(t.slice(i));
        assert(n[i] === t[i] || !u, function () {
          return "Error creating a new Tensor. Inferred shape (" + n + ") does not match the provided shape (" + t + "). ";
        });
      }
    }

    return isTypedArray(e) || Array.isArray(e) || (e = [e]), t = t || n, e = "string" !== r ? toTypedArray(e, r, ENV.get("DEBUG")) : flatten(e), Tensor.make(t, {
      values: e
    }, r);
  }

  function scalar(e, t) {
    if ((isTypedArray(e) || Array.isArray(e)) && "complex64" !== t) throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");
    return tensor(e, [], t);
  }

  function tensor1d(e, t) {
    assertNonNull(e);
    var r = inferShape(e);
    if (1 !== r.length) throw new Error("tensor1d() requires values to be a flat/TypedArray");
    return tensor(e, r, t);
  }

  function tensor2d(e, t, r) {
    if (assertNonNull(e), null != t && 2 !== t.length) throw new Error("tensor2d() requires shape to have two numbers");
    var n = inferShape(e);
    if (2 !== n.length && 1 !== n.length) throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");
    if (1 === n.length && null == t) throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");
    return tensor(e, t = t || n, r);
  }

  function tensor3d(e, t, r) {
    if (assertNonNull(e), null != t && 3 !== t.length) throw new Error("tensor3d() requires shape to have three numbers");
    var n = inferShape(e);
    if (3 !== n.length && 1 !== n.length) throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");
    if (1 === n.length && null == t) throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");
    return tensor(e, t = t || n, r);
  }

  function tensor4d(e, t, r) {
    if (assertNonNull(e), null != t && 4 !== t.length) throw new Error("tensor4d() requires shape to have four numbers");
    var n = inferShape(e);
    if (4 !== n.length && 1 !== n.length) throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");
    if (1 === n.length && null == t) throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");
    return tensor(e, t = t || n, r);
  }

  function tensor5d(e, t, r) {
    if (assertNonNull(e), null != t && 5 !== t.length) throw new Error("tensor5d() requires shape to have five numbers");
    var n = inferShape(e);
    if (5 !== n.length && 1 !== n.length) throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");
    if (1 === n.length && null == t) throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");
    return tensor(e, t = t || n, r);
  }

  function tensor6d(e, t, r) {
    if (assertNonNull(e), null != t && 6 !== t.length) throw new Error("tensor6d() requires shape to have six numbers");
    var n = inferShape(e);
    if (6 !== n.length && 1 !== n.length) throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");
    if (1 === n.length && null == t) throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");
    return tensor(e, t = t || n, r);
  }

  function ones$1(e, t) {
    if (void 0 === t && (t = "float32"), "complex64" === t) {
      var r = ones$1(e, "float32"),
          n = ones$1(e, "float32");
      return complex(r, n);
    }

    var a = makeOnesTypedArray(sizeFromShape(e), t);
    return Tensor.make(e, {
      values: a
    }, t);
  }

  function zeros(e, t) {
    if (void 0 === t && (t = "float32"), "complex64" === t) {
      var r = zeros(e, "float32"),
          n = zeros(e, "float32");
      return complex(r, n);
    }

    var a = makeZerosTypedArray(sizeFromShape(e), t);
    return Tensor.make(e, {
      values: a
    }, t);
  }

  function fill(e, t, r) {
    var n = getArrayFromDType(r = r || inferDtype(t), sizeFromShape(e));
    return n.fill(t), Tensor.make(e, {
      values: n
    }, r);
  }

  function onesLike_(e) {
    var t = convertToTensor(e, "x", "onesLike");
    return ones$1(t.shape, t.dtype);
  }

  function zerosLike_(e) {
    var t = convertToTensor(e, "x", "zerosLike");
    return zeros(t.shape, t.dtype);
  }

  function linspace(e, t, r) {
    if (0 === r) throw new Error("Cannot request zero samples");
    var n = (t - e) / (r - 1),
        a = makeZerosTypedArray(r, "float32");
    a[0] = e;

    for (var o = 1; o < a.length; o++) {
      a[o] = a[o - 1] + n;
    }

    return tensor1d(a, "float32");
  }

  function range(e, t, r, n) {
    if (void 0 === r && (r = 1), void 0 === n && (n = "float32"), 0 === r) throw new Error("Cannot have a step of zero");
    if (e === t || e < t && r < 0 || t < e && r > 1) return zeros([0], n);
    var a = makeZerosTypedArray(Math.abs(Math.ceil((t - e) / r)), n);
    t < e && 1 === r && (r = -1), a[0] = e;

    for (var o = 1; o < a.length; o++) {
      a[o] = a[o - 1] + r;
    }

    return tensor1d(a, n);
  }

  var onesLike = op({
    onesLike_: onesLike_
  }),
      zerosLike = op({
    zerosLike_: zerosLike_
  }),
      DataStorage = function () {
    function e(e) {
      this.dataMover = e, this.data = new WeakMap();
    }

    return e.prototype.get = function (e) {
      return this.data.has(e) || this.dataMover.moveData(e), this.data.get(e);
    }, e.prototype.set = function (e, t) {
      this.data.set(e, t);
    }, e.prototype.has = function (e) {
      return this.data.has(e);
    }, e.prototype.delete = function (e) {
      return this.data.delete(e);
    }, e;
  }(),
      KernelBackend = function () {
    function e() {}

    return e.prototype.time = function (e) {
      throw new Error("Not yet implemented.");
    }, e.prototype.read = function (e) {
      throw new Error("Not yet implemented.");
    }, e.prototype.readSync = function (e) {
      throw new Error("Not yet implemented.");
    }, e.prototype.disposeData = function (e) {
      throw new Error("Not yet implemented.");
    }, e.prototype.write = function (e, t) {
      throw new Error("Not yet implemented.");
    }, e.prototype.fromPixels = function (e, t) {
      throw new Error("Not yet implemented.");
    }, e.prototype.register = function (e, t, r) {
      throw new Error("Not yet implemented.");
    }, e.prototype.memory = function () {
      throw new Error("Not yet implemented.");
    }, e.prototype.floatPrecision = function () {
      throw new Error("Not yet implemented");
    }, e.prototype.batchMatMul = function (e, t, r, n) {
      throw new Error("Not yet implemented");
    }, e.prototype.fusedBatchMatMul = function (e, t, r, n, a, o) {
      throw new Error("Not yet implemented");
    }, e.prototype.slice = function (e, t, r) {
      throw new Error("Not yet implemented");
    }, e.prototype.stridedSlice = function (e, t, r, n, a, o, i, s, u) {
      throw new Error("Not yet implemented");
    }, e.prototype.unstack = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.reverse = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.concat = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.neg = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.add = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.addN = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.subtract = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.multiply = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.realDivide = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.floorDiv = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.sum = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.prod = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.unsortedSegmentSum = function (e, t, r) {
      throw new Error("Not yet implemented");
    }, e.prototype.argMin = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.argMax = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.equal = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.notEqual = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.less = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.lessEqual = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.greater = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.greaterEqual = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.logicalNot = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.logicalAnd = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.logicalOr = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.where = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.select = function (e, t, r) {
      throw new Error("Not yet implemented");
    }, e.prototype.topk = function (e, t, r) {
      throw new Error("Not yet implemented");
    }, e.prototype.min = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.minimum = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.mod = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.max = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.maximum = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.all = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.any = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.squaredDifference = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.ceil = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.floor = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.round = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.sign = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.pow = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.exp = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.expm1 = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.log = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.log1p = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.sqrt = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.rsqrt = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.square = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.reciprocal = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.relu = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.prelu = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.elu = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.eluDer = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.selu = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.int = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.clip = function (e, t, r) {
      throw new Error("Not yet implemented");
    }, e.prototype.abs = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.complexAbs = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.sigmoid = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.softplus = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.sin = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.cos = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.tan = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.asin = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.acos = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.atan = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.atan2 = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.sinh = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.cosh = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.tanh = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.asinh = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.acosh = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.atanh = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.erf = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.step = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.conv2d = function (e, t, r) {
      throw new Error("Not yet implemented");
    }, e.prototype.conv2dDerInput = function (e, t, r) {
      throw new Error("Not yet implemented");
    }, e.prototype.conv2dDerFilter = function (e, t, r) {
      throw new Error("Not yet implemented");
    }, e.prototype.depthwiseConv2D = function (e, t, r) {
      throw new Error("Not yet implemented");
    }, e.prototype.depthwiseConv2DDerInput = function (e, t, r) {
      throw new Error("Not yet implemented");
    }, e.prototype.depthwiseConv2DDerFilter = function (e, t, r) {
      throw new Error("Not yet implemented");
    }, e.prototype.conv3d = function (e, t, r) {
      throw new Error("Not yet implemented");
    }, e.prototype.conv3dDerInput = function (e, t, r) {
      throw new Error("Not yet implemented");
    }, e.prototype.conv3dDerFilter = function (e, t, r) {
      throw new Error("Not yet implemented");
    }, e.prototype.maxPool = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.maxPoolBackprop = function (e, t, r, n) {
      throw new Error("Not yet implemented");
    }, e.prototype.avgPool = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.avgPoolBackprop = function (e, t, r) {
      throw new Error("Not yet implemented");
    }, e.prototype.reshape = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.cast = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.tile = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.pad = function (e, t, r) {
      throw new Error("Not yet implemented");
    }, e.prototype.transpose = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.gather = function (e, t, r) {
      throw new Error("Not yet implemented");
    }, e.prototype.gatherND = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.scatterND = function (e, t, r) {
      throw new Error("Not yet implemented");
    }, e.prototype.batchToSpaceND = function (e, t, r) {
      throw new Error("Not yet implemented");
    }, e.prototype.spaceToBatchND = function (e, t, r) {
      throw new Error("Not yet implemented");
    }, e.prototype.resizeBilinear = function (e, t, r, n) {
      throw new Error("Not yet implemented");
    }, e.prototype.resizeBilinearBackprop = function (e, t, r) {
      throw new Error("Not yet implemented");
    }, e.prototype.resizeNearestNeighbor = function (e, t, r, n) {
      throw new Error("Not yet implemented");
    }, e.prototype.resizeNearestNeighborBackprop = function (e, t, r) {
      throw new Error("Not yet implemented");
    }, e.prototype.batchNormalization = function (e, t, r, n, a, o) {
      throw new Error("Not yet implemented");
    }, e.prototype.localResponseNormalization4D = function (e, t, r, n, a) {
      throw new Error("Not yet implemented");
    }, e.prototype.LRNGrad = function (e, t, r, n, a, o, i) {
      throw new Error("Not yet implemented");
    }, e.prototype.multinomial = function (e, t, r, n) {
      throw new Error("Not yet implemented");
    }, e.prototype.oneHot = function (e, t, r, n) {
      throw new Error("Not yet implemented");
    }, e.prototype.cumsum = function (e, t, r, n) {
      throw new Error("Not yet implemented");
    }, e.prototype.nonMaxSuppression = function (e, t, r, n, a) {
      throw new Error("Not yet implemented");
    }, e.prototype.fft = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.ifft = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.complex = function (e, t) {
      throw new Error("Not yet implemented");
    }, e.prototype.real = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.imag = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.cropAndResize = function (e, t, r, n, a, o) {
      throw new Error("Not yet implemented");
    }, e.prototype.depthToSpace = function (e, t, r) {
      throw new Error("Not yet implemented");
    }, e.prototype.split = function (e, t, r) {
      throw new Error("Not yet implemented");
    }, e.prototype.sparseToDense = function (e, t, r, n) {
      throw new Error("Not yet implemented");
    }, e.prototype.setDataMover = function (e) {
      throw new Error("Not yet implemented");
    }, e.prototype.dispose = function () {
      throw new Error("Not yet implemented");
    }, e;
  }();

  function castTensor(e, t, r) {
    if ("complex64" === t) {
      if ("complex64" === e.dtype) return e.clone();
      var n = zeros(e.shape),
          a = e.toFloat(),
          o = r.complex(a, n);
      return n.dispose(), a.dispose(), o;
    }

    if (!hasEncodingLoss(e.dtype, t)) return Tensor.make(e.shape, {
      dataId: e.dataId
    }, t);

    if ("complex64" === e.dtype) {
      var i = r.real(e);
      return o = i.cast(t), i.dispose(), o;
    }

    if ("int32" === t) return r.int(e);

    if ("bool" === t) {
      var s = scalar(0, e.dtype);
      return o = r.notEqual(e, s), s.dispose(), o;
    }

    throw new Error("Error in Cast: unknown dtype argument (" + t + ")");
  }

  function reshapeTensor(e, t) {
    return Tensor.make(t, {
      dataId: e.dataId
    }, e.dtype);
  }

  function mergeRealAndImagArrays(e, t) {
    if (e.length !== t.length) throw new Error("Cannot merge real and imag arrays of different lengths. real:" + e.length + ", imag: " + t.length + ".");

    for (var r = new Float32Array(2 * e.length), n = 0; n < r.length; n += 2) {
      r[n] = e[n / 2], r[n + 1] = t[n / 2];
    }

    return r;
  }

  function splitRealAndImagArrays(e) {
    for (var t = new Float32Array(e.length / 2), r = new Float32Array(e.length / 2), n = 0; n < e.length; n += 2) {
      t[n / 2] = e[n], r[n / 2] = e[n + 1];
    }

    return {
      real: t,
      imag: r
    };
  }

  function complexWithEvenIndex(e) {
    for (var t = Math.ceil(e.length / 4), r = new Float32Array(t), n = new Float32Array(t), a = 0; a < e.length; a += 4) {
      r[Math.floor(a / 4)] = e[a], n[Math.floor(a / 4)] = e[a + 1];
    }

    return {
      real: r,
      imag: n
    };
  }

  function complexWithOddIndex(e) {
    for (var t = Math.floor(e.length / 4), r = new Float32Array(t), n = new Float32Array(t), a = 2; a < e.length; a += 4) {
      r[Math.floor(a / 4)] = e[a], n[Math.floor(a / 4)] = e[a + 1];
    }

    return {
      real: r,
      imag: n
    };
  }

  function getComplexWithIndex(e, t) {
    return {
      real: e[2 * t],
      imag: e[2 * t + 1]
    };
  }

  function assignToTypedArray(e, t, r, n) {
    e[2 * n] = t, e[2 * n + 1] = r;
  }

  function exponents(e, t) {
    for (var r = new Float32Array(e / 2), n = new Float32Array(e / 2), a = 0; a < Math.ceil(e / 2); a++) {
      var o = (t ? 2 : -2) * Math.PI * (a / e);
      r[a] = Math.cos(o), n[a] = Math.sin(o);
    }

    return {
      real: r,
      imag: n
    };
  }

  function exponent(e, t, r) {
    var n = (r ? 2 : -2) * Math.PI * (e / t);
    return {
      real: Math.cos(n),
      imag: Math.sin(n)
    };
  }

  function nonMaxSuppressionImpl(e, t, r, n, a) {
    for (var o = Array.from(t).map(function (e, t) {
      return {
        score: e,
        boxIndex: t
      };
    }).filter(function (e) {
      return e.score > a;
    }).sort(function (e, t) {
      return t.score - e.score;
    }), i = [], s = 0; s < o.length; s++) {
      var u = o[s],
          l = u.score,
          p = u.boxIndex;
      if (l < a) break;

      for (var c = !1, h = i.length - 1; h >= 0; --h) {
        if (intersectionOverUnion(e, p, i[h]) >= n) {
          c = !0;
          break;
        }
      }

      if (!c && (i.push(p), i.length >= r)) break;
    }

    return tensor1d(i, "int32");
  }

  function intersectionOverUnion(e, t, r) {
    var n = e.subarray(4 * t, 4 * t + 4),
        a = e.subarray(4 * r, 4 * r + 4),
        o = Math.min(n[0], n[2]),
        i = Math.min(n[1], n[3]),
        s = Math.max(n[0], n[2]),
        u = Math.max(n[1], n[3]),
        l = Math.min(a[0], a[2]),
        p = Math.min(a[1], a[3]),
        c = Math.max(a[0], a[2]),
        h = Math.max(a[1], a[3]),
        d = (s - o) * (u - i),
        f = (c - l) * (h - p);
    if (d <= 0 || f <= 0) return 0;
    var m = Math.max(o, l),
        g = Math.max(i, p),
        y = Math.min(s, c),
        v = Math.min(u, h),
        x = Math.max(y - m, 0) * Math.max(v - g, 0);
    return x / (d + f - x);
  }

  function split(e, t, r) {
    var n = new Array(e.rank).fill(0),
        a = e.shape.slice();
    return t.map(function (t) {
      a[r] = t;
      var o = e.slice(n, a);
      return n[r] += t, o;
    });
  }

  function topkImpl(e, t, r, n, a) {
    for (var o = t[t.length - 1], i = [e.length / o, o], s = i[0], u = i[1], l = getTypedArrayFromDType(r, s * n), p = getTypedArrayFromDType("int32", s * n), c = 0; c < s; c++) {
      for (var h = c * u, d = e.subarray(h, h + u), f = [], m = 0; m < d.length; m++) {
        f.push({
          value: d[m],
          index: m
        });
      }

      f.sort(function (e, t) {
        return t.value - e.value;
      });
      var g = c * n,
          y = l.subarray(g, g + n),
          v = p.subarray(g, g + n);

      for (m = 0; m < n; m++) {
        y[m] = f[m].value, v[m] = f[m].index;
      }
    }

    var x = t.slice();
    return x[x.length - 1] = n, [tensor(l, x, r), tensor(p, x, "int32")];
  }

  var ArgMinMaxProgram = function ArgMinMaxProgram(e, t, r) {
    this.variableNames = ["A"];
    var n = e.windowSize,
        a = e.batchSize,
        o = e.inSize,
        i = Math.ceil(o / n);
    r || this.variableNames.push("bestIndicesA"), this.outputShape = [a, i];
    var s = "max" === t ? ">" : "<",
        u = r ? "inOffset + i;" : "round(getBestIndicesA(batch, inOffset + i));";
    this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " + n + ";\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < " + n + "; i++) {\n          int inIdx = " + u + ";\n          float candidate = getA(batch, inIdx);\n          if (candidate " + s + " bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    ";
  },
      AvgPool2DBackpropProgram = function AvgPool2DBackpropProgram(e) {
    this.variableNames = ["dy"], this.outputShape = e.inShape;
    var t = e.filterHeight,
        r = e.filterWidth,
        n = e.strideHeight,
        a = e.strideWidth,
        o = e.dilationHeight,
        i = e.dilationWidth,
        s = e.effectiveFilterHeight,
        u = e.effectiveFilterWidth,
        l = s - 1 - e.padInfo.top,
        p = u - 1 - e.padInfo.left,
        c = 1 / (t * r);
    this.userCode = "\n      const ivec2 pads = ivec2(" + l + ", " + p + ");\n      const float avgMultiplier = float(" + c + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + s + ";\n            wR += " + o + ") {\n          float dyR = float(dyRCorner + wR) / " + n + ".0;\n\n          if (dyR < 0.0 || dyR >= " + e.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " + u + ";\n            wC+= " + i + ") {\n            float dyC = float(dyCCorner + wC) / " + a + ".0;\n\n            if (dyC < 0.0 || dyC >= " + e.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
  };

  function getBroadcastDims(e, t) {
    for (var r = e.length, n = [], a = 0; a < r; a++) {
      var o = r - 1 - a,
          i = e[o] || 1;
      (t[t.length - 1 - a] || 1) > 1 && 1 === i && n.unshift(o);
    }

    return n;
  }

  function getReductionAxes(e, t) {
    for (var r = [], n = 0; n < t.length; n++) {
      var a = e[e.length - n - 1],
          o = t.length - n - 1,
          i = t[o];
      (null == a || 1 === a && i > 1) && r.unshift(o);
    }

    return r;
  }

  function assertAndGetBroadcastShape(e, t) {
    for (var r = [], n = Math.max(e.length, t.length), a = 0; a < n; a++) {
      var o = e[e.length - a - 1];
      null == o && (o = 1);
      var i = t[t.length - a - 1];
      if (null == i && (i = 1), 1 === o) r.unshift(i);else if (1 === i) r.unshift(o);else {
        if (o !== i) throw Error("Operands could not be broadcast together with shapes " + e + " and " + t + ".");
        r.unshift(o);
      }
    }

    return r;
  }

  var BatchNormProgram = function BatchNormProgram(e, t, r, n, a, o) {
    this.outputShape = [], this.variableNames = ["x", "mean", "variance"], assertAndGetBroadcastShape(e, t), assertAndGetBroadcastShape(e, r);
    var i = "0.0";
    null != n && (assertAndGetBroadcastShape(e, n), this.variableNames.push("offset"), i = "getOffsetAtOutCoords()");
    var s = "1.0";
    null != a && (assertAndGetBroadcastShape(e, a), this.variableNames.push("scale"), s = "getScaleAtOutCoords()"), this.outputShape = e, this.userCode = "\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = " + i + ";\n        float scale = " + s + ";\n        float inv = scale * inversesqrt(variance + float(" + o + "));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    ";
  },
      BatchNormPackedProgram = function BatchNormPackedProgram(e, t, r, n, a, o) {
    this.usesPackedTextures = !0, this.variableNames = ["x", "mean", "variance"], assertAndGetBroadcastShape(e, t), assertAndGetBroadcastShape(e, r);
    var i = "vec4(0.0)";
    null != n && (assertAndGetBroadcastShape(e, n), this.variableNames.push("offset"), i = "getOffsetAtOutCoords()");
    var s = "vec4(1.0)";
    null != a && (assertAndGetBroadcastShape(e, a), this.variableNames.push("scale"), s = "getScaleAtOutCoords()"), this.outputShape = e, this.userCode = "\n      void main() {\n        vec4 offset = " + i + ";\n        vec4 scale = " + s + ";\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(" + o + "));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    ";
  },
      COMPLEX_MULTIPLY = {
    REAL: "return areal * breal - aimag * bimag;",
    IMAG: "return areal * bimag + aimag * breal;"
  },
      BinaryOpComplexProgram = function BinaryOpComplexProgram(e, t, r) {
    this.variableNames = ["AReal", "AImag", "BReal", "BImag"], this.outputShape = assertAndGetBroadcastShape(t, r), this.userCode = "\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        " + e + "\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    ";
  },
      CHECK_NAN_SNIPPET = "\n  if (isNaN(a)) return a;\n  if (isNaN(b)) return b;\n",
      ADD = "return a + b;",
      SUB = "return a - b;",
      MUL = "return a * b;",
      DIV = "if (a == b) return 1.0;\n  return a / b;",
      INT_DIV = "\n  float resultSign = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  int result = ia / ib;\n  int amodb = ia - ib * result;\n\n  if (resultSign < 0.0 && amodb != 0) {\n    result -= 1;\n  }\n  return float(result);\n",
      POW = "\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",
      SQUARED_DIFFERENCE = "return (a - b) * (a - b);",
      EQUAL = "return float(a == b);",
      NOT_EQUAL = "return float(a != b);",
      LESS = "return float(a < b);",
      LESS_EQUAL = "return float(a <= b);",
      GREATER = "return float(a > b);",
      GREATER_EQUAL = "return float(a >= b);",
      LOGICAL_AND = "return float(a >= 1.0 && b >= 1.0);",
      LOGICAL_OR = "return float(a >= 1.0 || b >= 1.0);",
      MAX = CHECK_NAN_SNIPPET + "\n  return max(a, b);\n",
      MIN = CHECK_NAN_SNIPPET + "\n  return min(a, b);\n",
      MOD = "if (b == 0.0) return NAN;\n  return mod(a, b);",
      ATAN2 = CHECK_NAN_SNIPPET + "\n  return atan(a, b);\n",
      ELU_DER = "return (b >= 1.0) ? a : a * (b + 1.0);",
      PRELU = "return (a < 0.) ? b * a : a;",
      BinaryOpProgram = function () {
    function e(e, t, r) {
      this.variableNames = ["A", "B"], this.outputShape = assertAndGetBroadcastShape(t, r), this.userCode = "\n      uniform float NAN;\n      float binaryOperation(float a, float b) {\n        " + e + "\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    ";
    }

    return e.prototype.getCustomSetupFunc = function () {
      var e = this;
      return function (t, r) {
        null == e.startLoc && (e.startLoc = t.getUniformLocationNoThrow(r, "NAN"), null == e.startLoc) || t.gl.uniform1f(e.startLoc, NaN);
      };
    }, e;
  }(),
      PACKED_DIV = "\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  result.x = a.x == b.x ? 1. : result.x;\n  result.y = a.y == b.y ? 1. : result.y;\n  result.z = a.z == b.z ? 1. : result.z;\n  result.w = a.w == b.w ? 1. : result.w;\n  return result;\n",
      PACKED_INT_DIV = "\n  vec4 resultSign = sign(a) * sign(b);\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  ivec4 result = ia / ib;\n  ivec4 amodb = ia - ib * result;\n\n  // Vectorize INT_DIV\n  // if (resultSign < 0.0 && amodb != 0) result -= 1;\n  // return float(result);\n  return vec4(result -\n     ivec4(lessThan(resultSign, vec4(0.0))) * ivec4(notEqual(amodb, ivec4(0))));\n",
      PACKED_POW = "\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",
      BinaryOpPackedProgram = function () {
    function e(e, t, r) {
      this.variableNames = ["A", "B"], this.supportsBroadcasting = !0, this.usesPackedTextures = !0, this.outputShape = assertAndGetBroadcastShape(t, r), this.userCode = "\n      uniform float NAN;\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        " + e + "\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    ";
    }

    return e.prototype.getCustomSetupFunc = function () {
      var e = this;
      return function (t, r) {
        null == e.startLoc && (e.startLoc = t.getUniformLocationNoThrow(r, "NAN"), null == e.startLoc) || t.gl.uniform1f(e.startLoc, NaN);
      };
    }, e;
  }(),
      ClipProgram = function () {
    function e(e) {
      this.variableNames = ["A"], this.outputShape = e, this.userCode = "\n      uniform float min;\n      uniform float max;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isNaN(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, min, max));\n      }\n    ";
    }

    return e.prototype.getCustomSetupFunc = function (e, t) {
      var r = this;
      return function (n, a) {
        null == r.minLoc && (r.minLoc = n.getUniformLocationNoThrow(a, "min"), r.maxLoc = n.getUniformLocationNoThrow(a, "max")), n.gl.uniform1f(r.minLoc, e), n.gl.uniform1f(r.maxLoc, t);
      };
    }, e;
  }(),
      ClipPackedProgram = function () {
    function e(e) {
      this.variableNames = ["A"], this.usesPackedTextures = !0, this.outputShape = e, this.userCode = "\n      uniform float min;\n      uniform float max;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (hasNaN(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(min), vec4(max)));\n      }\n    ";
    }

    return e.prototype.getCustomSetupFunc = function (e, t) {
      var r = this;
      return function (n, a) {
        null == r.minLoc && (r.minLoc = n.getUniformLocationNoThrow(a, "min"), r.maxLoc = n.getUniformLocationNoThrow(a, "max")), n.gl.uniform1f(r.minLoc, e), n.gl.uniform1f(r.maxLoc, t);
      };
    }, e;
  }(),
      ComplexAbsProgram = function ComplexAbsProgram(e) {
    this.variableNames = ["real", "imag"], this.outputShape = e, this.userCode = "\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    ";
  },
      ConcatProgram = function ConcatProgram(e) {
    this.outputShape = [], this.outputShape = computeOutShape(e, 1), this.variableNames = e.map(function (e, t) {
      return "T" + t;
    });
    var t = new Array(e.length - 1);
    t[0] = e[0][1];

    for (var r = 1; r < t.length; r++) {
      t[r] = t[r - 1] + e[r][1];
    }

    var n = ["if (yC < " + t[0] + ") setOutput(getT0(yR, yC));"];

    for (r = 1; r < t.length; r++) {
      var a = t[r - 1];
      n.push("else if (yC < " + t[r] + ") setOutput(getT" + r + "(yR, yC-" + a + "));");
    }

    var o = t.length,
        i = t[t.length - 1];
    n.push("else setOutput(getT" + o + "(yR, yC-" + i + "));"), this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        " + n.join("\n        ") + "\n      }\n    ";
  },
      Conv2DDerFilterProgram = function Conv2DDerFilterProgram(e) {
    this.variableNames = ["x", "dy"], this.outputShape = e.filterShape;
    var t = e.strideHeight,
        r = e.strideWidth,
        n = e.padInfo.top,
        a = e.padInfo.left;
    this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < " + e.batchSize + "; b++) {\n          for (int yR = 0; yR < " + e.outHeight + "; yR++) {\n            int xR = wR + yR * " + t + " - " + n + ";\n\n            if (xR < 0 || xR >= " + e.inHeight + ") {\n              continue;\n            }\n\n            for (int yC = 0; yC < " + e.outWidth + "; yC++) {\n              int xC = wC + yC * " + r + " - " + a + ";\n\n              if (xC < 0 || xC >= " + e.inWidth + ") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
  },
      Conv2DDerInputProgram = function Conv2DDerInputProgram(e) {
    this.variableNames = ["dy", "W"], this.outputShape = e.inShape;
    var t = e.filterHeight,
        r = e.filterWidth,
        n = e.strideHeight,
        a = e.strideWidth,
        o = t - 1 - e.padInfo.top,
        i = r - 1 - e.padInfo.left;
    this.userCode = "\n      const ivec2 pads = ivec2(" + o + ", " + i + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + t + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + n + ".0;\n\n          if (dyR < 0.0 || dyR >= " + e.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = " + t + " - 1 - wR;\n\n          for (int wC = 0; wC < " + r + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + a + ".0;\n\n            if (dyC < 0.0 || dyC >= " + e.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = " + r + " - 1 - wC;\n\n            for (int d2 = 0; d2 < " + e.outChannels + "; d2++) {\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, d2);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
  },
      Conv3DDerFilterProgram = function Conv3DDerFilterProgram(e) {
    this.variableNames = ["x", "dy"], this.outputShape = e.filterShape;
    var t = e.strideDepth,
        r = e.strideHeight,
        n = e.strideWidth,
        a = e.padInfo.front,
        o = e.padInfo.top,
        i = e.padInfo.left;
    this.userCode = "\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < " + e.batchSize + "; b++) {\n          for (int yF = 0; yF < " + e.outDepth + "; yF++) {\n            int xF = wF + yF * " + t + " - " + a + ";\n\n            if (xF < 0 || xF >= " + e.inDepth + ") {\n              continue;\n            }\n\n            for (int yR = 0; yR < " + e.outHeight + "; yR++) {\n              int xR = wR + yR * " + r + " - " + o + ";\n\n              if (xR < 0 || xR >= " + e.inHeight + ") {\n                continue;\n              }\n\n              for (int yC = 0; yC < " + e.outWidth + "; yC++) {\n                int xC = wC + yC * " + n + " - " + i + ";\n\n                if (xC < 0 || xC >= " + e.inWidth + ") {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
  },
      Conv3DDerInputProgram = function Conv3DDerInputProgram(e) {
    this.variableNames = ["dy", "W"], this.outputShape = e.inShape;
    var t = e.filterDepth,
        r = e.filterHeight,
        n = e.filterWidth,
        a = e.strideDepth,
        o = e.strideHeight,
        i = e.strideWidth,
        s = t - 1 - e.padInfo.front,
        u = r - 1 - e.padInfo.top,
        l = n - 1 - e.padInfo.left;
    this.userCode = "\n      const ivec3 pads = ivec3(" + s + ", " + u + ", " + l + ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < " + t + "; wF++) {\n          float dyF = float(dyFCorner + wF) / " + a + ".0;\n\n          if (dyF < 0.0 || dyF >= " + e.outDepth + ".0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = " + t + " - 1 - wF;\n\n          for (int wR = 0; wR < " + r + "; wR++) {\n            float dyR = float(dyRCorner + wR) / " + o + ".0;\n\n            if (dyR < 0.0 || dyR >= " + e.outHeight + ".0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = " + r + " - 1 - wR;\n\n            for (int wC = 0; wC < " + n + "; wC++) {\n              float dyC = float(dyCCorner + wC) / " + i + ".0;\n\n              if (dyC < 0.0 || dyC >= " + e.outWidth + ".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = " + n + " - 1 - wC;\n\n              for (int d2 = 0; d2 < " + e.outChannels + "; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
  },
      DepthwiseConv2DDerFilterProgram = function DepthwiseConv2DDerFilterProgram(e) {
    this.variableNames = ["x", "dy"], this.outputShape = e.filterShape;
    var t = e.strideHeight,
        r = e.strideWidth,
        n = e.padInfo.top,
        a = e.padInfo.left,
        o = e.outChannels / e.inChannels;
    this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * " + o + " + dm;\n\n        float dotProd = 0.0;\n\n        // TODO: Vec4 over the batch size\n        for (int b = 0; b < " + e.batchSize + "; b++) {\n          for (int yR = 0; yR < " + e.outHeight + "; yR++) {\n            int xR = wR + yR * " + t + " - " + n + ";\n\n            if (xR < 0 || xR >= " + e.inHeight + ") {\n              continue;\n            }\n\n            for (int yC = 0; yC < " + e.outWidth + "; yC++) {\n              int xC = wC + yC * " + r + " - " + a + ";\n\n              if (xC < 0 || xC >= " + e.inWidth + ") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
  },
      DepthwiseConv2DDerInputProgram = function DepthwiseConv2DDerInputProgram(e) {
    this.variableNames = ["dy", "W"], this.outputShape = e.inShape;
    var t = e.filterHeight,
        r = e.filterWidth,
        n = e.strideHeight,
        a = e.strideWidth,
        o = t - 1 - e.padInfo.top,
        i = r - 1 - e.padInfo.left,
        s = e.outChannels / e.inChannels;
    this.userCode = "\n      const ivec2 pads = ivec2(" + o + ", " + i + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < " + t + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + n + ".0;\n\n          if (dyR < 0.0 || dyR >= " + e.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = " + t + " - 1 - wR;\n\n          for (int wC = 0; wC < " + r + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + a + ".0;\n\n            if (dyC < 0.0 || dyC >= " + e.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = " + r + " - 1 - wC;\n\n            // TODO: Vec4 over the channelMul\n            for (int dm = 0; dm < " + s + "; dm++) {\n              int d2 = d1 * " + s + " + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
  },
      Conv2DProgram = function Conv2DProgram(e) {
    this.variableNames = ["x", "W"], this.outputShape = e.outShape;
    var t = e.padInfo.top,
        r = e.padInfo.left,
        n = e.strideHeight,
        a = e.strideWidth,
        o = e.dilationHeight,
        i = e.dilationWidth,
        s = e.filterHeight,
        u = e.filterWidth,
        l = 4 * Math.floor(e.inChannels / 4),
        p = e.inChannels % 4;
    this.userCode = "\n      const ivec2 strides = ivec2(" + n + ", " + a + ");\n      const ivec2 pads = ivec2(" + t + ", " + r + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + s + "; wR++) {\n          int xR = xRCorner + wR * " + o + ";\n\n          if (xR < 0 || xR >= " + e.inHeight + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + u + "; wC++) {\n            int xC = xCCorner + wC * " + i + ";\n\n            if (xC < 0 || xC >= " + e.inWidth + ") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < " + l + "; d1 += 4) {\n              vec4 xValues = vec4(\n                getX(batch, xR, xC, d1),\n                getX(batch, xR, xC, d1 + 1),\n                getX(batch, xR, xC, d1 + 2),\n                getX(batch, xR, xC, d1 + 3)\n              );\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              dotProd += dot(xValues, wValues);\n            }\n\n            if (" + (1 === p) + ") {\n              dotProd +=\n                getX(batch, xR, xC, " + l + ") *\n                getW(wR, wC, " + l + ", d2);\n            } else if (" + (2 === p) + ") {\n              vec2 xValues = vec2(\n                getX(batch, xR, xC, " + l + "),\n                getX(batch, xR, xC, " + l + " + 1)\n              );\n              vec2 wValues = vec2(\n                getW(wR, wC, " + l + ", d2),\n                getW(wR, wC, " + l + " + 1, d2)\n              );\n              dotProd += dot(xValues, wValues);\n            } else if (" + (3 === p) + ") {\n              vec3 xValues = vec3(\n                getX(batch, xR, xC, " + l + "),\n                getX(batch, xR, xC, " + l + " + 1),\n                getX(batch, xR, xC, " + l + " + 2)\n              );\n              vec3 wValues = vec3(\n                getW(wR, wC, " + l + ", d2),\n                getW(wR, wC, " + l + " + 1, d2),\n                getW(wR, wC, " + l + " + 2, d2)\n              );\n              dotProd += dot(xValues, wValues);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
  },
      Conv3DProgram = function Conv3DProgram(e) {
    this.variableNames = ["x", "W"], this.outputShape = e.outShape;
    var t = e.padInfo.front,
        r = e.padInfo.top,
        n = e.padInfo.left,
        a = e.strideDepth,
        o = e.strideHeight,
        i = e.strideWidth,
        s = e.dilationDepth,
        u = e.dilationHeight,
        l = e.dilationWidth,
        p = e.filterDepth,
        c = e.filterHeight,
        h = e.filterWidth,
        d = 4 * Math.floor(e.inChannels / 4),
        f = e.inChannels % 4;
    this.userCode = "\n      const ivec3 strides = ivec3(" + a + ", " + o + ", " + i + ");\n      const ivec3 pads = ivec3(" + t + ", " + r + ", " + n + ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < " + p + "; wF++) {\n          int xF = xFCorner + wF * " + s + ";\n\n          if (xF < 0 || xF >= " + e.inDepth + ") {\n            continue;\n          }\n\n          for (int wR = 0; wR < " + c + "; wR++) {\n            int xR = xRCorner + wR * " + u + ";\n\n            if (xR < 0 || xR >= " + e.inHeight + ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " + h + "; wC++) {\n              int xC = xCCorner + wC * " + l + ";\n\n              if (xC < 0 || xC >= " + e.inWidth + ") {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < " + d + "; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (" + (1 === f) + ") {\n                dotProd +=\n                  getX(batch, xF, xR, xC, " + d + ") *\n                  getW(wF, wR, wC, " + d + ", d2);\n              } else if (" + (2 === f) + ") {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, " + d + "),\n                  getX(batch, xF, xR, xC, " + d + " + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, " + d + ", d2),\n                  getW(wF, wR, wC, " + d + " + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (" + (3 === f) + ") {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, " + d + "),\n                  getX(batch, xF, xR, xC, " + d + " + 1),\n                  getX(batch, xF, xR, xC, " + d + " + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, " + d + ", d2),\n                  getW(wF, wR, wC, " + d + " + 1, d2),\n                  getW(wF, wR, wC, " + d + " + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
  },
      DepthwiseConv2DProgram = function DepthwiseConv2DProgram(e) {
    this.variableNames = ["x", "W"], this.outputShape = e.outShape;
    var t = e.inHeight,
        r = e.inWidth,
        n = e.padInfo.top,
        a = e.padInfo.left,
        o = e.strideHeight,
        i = e.strideWidth,
        s = e.dilationHeight,
        u = e.dilationWidth,
        l = e.filterHeight,
        p = e.filterWidth,
        c = e.outChannels / e.inChannels;
    this.userCode = "\n      const ivec2 strides = ivec2(" + o + ", " + i + ");\n      const ivec2 pads = ivec2(" + n + ", " + a + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / " + c + ";\n        int q = d2 - d1 * " + c + ";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TODO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < " + l + "; wR++) {\n          int xR = xRCorner + wR * " + s + ";\n\n          if (xR < 0 || xR >= " + t + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + p + "; wC++) {\n            int xC = xCCorner + wC * " + u + ";\n\n            if (xC < 0 || xC >= " + r + ") {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
  },
      DepthwiseConvPacked2DProgram = function DepthwiseConvPacked2DProgram(e) {
    this.variableNames = ["x", "W"], this.usesPackedTextures = !0, this.outputShape = e.outShape;

    for (var t = e.inHeight, r = e.inWidth, n = e.padInfo.top, a = e.padInfo.left, o = e.strideHeight, i = e.strideWidth, s = e.dilationHeight, u = e.dilationWidth, l = e.filterHeight, p = e.filterWidth, c = p, h = "int xR; int xC; int xCOffset;", d = 0; d < l; d++) {
      for (var f = 0; f < p; f++) {
        h += "\n          vec4 xTexelR" + d + "C" + 2 * f + " = vec4(0.);\n          vec4 wR" + d + "C" + f + " = vec4(0.);\n          vec4 xR" + d + "C" + f + " = vec4(0.);";
      }
    }

    for (d = 0; d < l; d++) {
      for (var m = 0; m < c; m++) {
        if (h += "\n          xR = xRCorner + " + d * s + ";\n          xC = xCCorner + " + (f = 2 * m) * u + ";\n        ", 1 === i) {
          if (f < p && (h += a % 2 == 1 ? "\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < " + t + " && xCOffset >= 0 && xCOffset < " + r + ") {\n                  xTexelR" + d + "C" + f + " = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR" + d + "C" + f + " = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < " + t + " && xCOffset >= 0 && xCOffset < " + r + ") {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n                  xR" + d + "C" + f + " = vec4(previous.zw, xTexelR" + d + "C" + f + ".xy);\n                } else {\n                  xR" + d + "C" + f + " = vec4(0, 0, xTexelR" + d + "C" + f + ".xy);\n                }\n              " : "\n                if(xR >= 0 && xR < " + t + " && xC >= 0 && xC < " + r + ") {\n                  xTexelR" + d + "C" + f + " = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR" + d + "C" + f + " = vec4(0.);\n                }\n\n                xR" + d + "C" + f + " = xTexelR" + d + "C" + f + ";\n              ", f + 1 < p)) {
            var g = a % 2 == 0 ? nearestLargerEven(u) : u;
            u % 2 == 0 && a % 2 == 1 || u % 2 != 0 && a % 2 != 1 ? (h += "\n                  xCOffset = xC + " + a % 2 + " + " + g + ";\n\n                  if(xR >= 0 && xR < " + t + " &&\n                    xCOffset >= 0 && xCOffset < " + r + ") {\n                    xTexelR" + d + "C" + (f + 2) + " = getX(batch, xR, xCOffset, d1);\n                  }\n                ", u > 1 && (h += "\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < " + t + " &&\n                      xCOffset >= 0 && xCOffset < " + r + ") {\n                      xTexelR" + d + "C" + f + " = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR" + d + "C" + f + " = vec4(0.);\n                    }\n                  "), h += "\n                  xR" + d + "C" + (f + 1) + " = vec4(\n                    xTexelR" + d + "C" + f + ".zw, xTexelR" + d + "C" + (f + 2) + ".xy);\n                ") : h += "\n                  xCOffset = xC + " + g + ";\n\n                  if(xR >= 0 && xR < " + t + " &&\n                    xCOffset >= 0 && xCOffset < " + r + ") {\n                    xTexelR" + d + "C" + (f + 2) + " = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR" + d + "C" + (f + 1) + " = xTexelR" + d + "C" + (f + 2) + ";\n                ";
          }
        } else f < p && (h += "\n              if(xR >= 0 && xR < " + t + ") {\n            ", a % 2 == 1 ? (h += "\n                xCOffset = xC + 1 - " + i + ";\n                if(xCOffset >= 0 && xCOffset < " + r + ") {\n                  xTexelR" + d + "C" + f + " = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR" + d + "C" + f + " = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < " + r + ") {\n                  xTexelR" + d + "C" + (f + 2) + " = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR" + d + "C" + (f + 2) + " = vec4(0.);\n                }\n\n                xR" + d + "C" + f + " = vec4(\n                  xTexelR" + d + "C" + f + ".zw, xTexelR" + d + "C" + (f + 2) + ".zw);\n              ", f + 1 < p && (h += "\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + " + i + ";\n                  if(xCOffset >= 0 && xCOffset < " + r + ") {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR" + d + "C" + (f + 1) + " = vec4(xTexelR" + d + "C" + (f + 2) + ".xy, final.xy);\n                ")) : (h += "\n                if(xC >= 0 && xC < " + r + ") {\n                  xTexelR" + d + "C" + f + " = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR" + d + "C" + f + " = vec4(0.);\n                }\n\n                xCOffset = xC + " + i + ";\n                if(xCOffset >= 0 && xCOffset < " + r + ") {\n                  xTexelR" + d + "C" + (f + 2) + " = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR" + d + "C" + (f + 2) + " = vec4(0.);\n                }\n\n                xR" + d + "C" + f + " = vec4(\n                  xTexelR" + d + "C" + f + ".xy, xTexelR" + d + "C" + (f + 2) + ".xy);\n              ", f + 1 < p && (h += "\n                  xR" + d + "C" + (f + 1) + " = vec4(\n                    xTexelR" + d + "C" + f + ".zw, xTexelR" + d + "C" + (f + 2) + ".zw);\n                ")), h += "}");

        f < p && (h += "\n            vec4 wTexelR" + d + "C" + f + " = getW(" + d + ", " + f + ", d1, q);\n            wR" + d + "C" + f + " = vec4(wTexelR" + d + "C" + f + ".xz, wTexelR" + d + "C" + f + ".xz);\n          ", f + 1 < p && (h += "\n              vec4 wTexelR" + d + "C" + (f + 1) + " = getW(" + d + ", " + (f + 1) + ", d1, q);\n              wR" + d + "C" + (f + 1) + " =\n                vec4(wTexelR" + d + "C" + (f + 1) + ".xz, wTexelR" + d + "C" + (f + 1) + ".xz);"));
      }
    }

    for (d = 0; d < l; d++) {
      for (f = 0; f < p; f++) {
        h += "result += xR" + d + "C" + f + " * wR" + d + "C" + f + ";";
      }
    }

    this.userCode = "\n      const ivec2 strides = ivec2(" + o + ", " + i + ");\n      const ivec2 pads = ivec2(" + n + ", " + a + ");\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 result = vec4(0.);\n\n        " + h + "\n\n        setOutput(result);\n      }\n    ";
  },
      CropAndResizeProgram = function CropAndResizeProgram(e, t, r, n, a) {
    this.variableNames = ["Image", "Boxes", "BoxInd"], this.outputShape = [];
    var o = e[0],
        i = e[1],
        s = e[2],
        u = e[3],
        l = t[0],
        p = r[0],
        c = r[1];
    this.outputShape = [l, p, c, u];
    var h = "bilinear" === n ? 1 : 0,
        d = [i - 1 + ".0", s - 1 + ".0"],
        f = d[0],
        m = d[1],
        g = p > 1 ? ["" + (i - 1) / (p - 1), "(y2-y1) * height_ratio", "y1*" + f + " + float(y)*(height_scale)"] : ["0.0", "0.0", "0.5 * (y1+y2) * " + f],
        y = g[0],
        v = g[1],
        x = g[2],
        b = c > 1 ? ["" + (s - 1) / (c - 1), "(x2-x1) * width_ratio", "x1*" + m + " + float(x)*(width_scale)"] : ["0.0", "0.0", "0.5 * (x1+x2) * " + m],
        w = b[0],
        N = b[1],
        S = b[2];
    this.userCode = "\n      const float height_ratio = float(" + y + ");\n      const float width_ratio = float(" + w + ");\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= " + o + ") {\n          return;\n        }\n\n        float height_scale = " + v + ";\n        float width_scale = " + N + ";\n\n        float in_y = " + x + ";\n        if( in_y < 0.0 || in_y > " + f + " ) {\n          setOutput(float(" + a + "));\n          return;\n        }\n        float in_x = " + S + ";\n        if( in_x < 0.0 || in_x > " + m + " ) {\n          setOutput(float(" + a + "));\n          return;\n        }\n\n        vec2 sourceFracIndexRC = vec2(in_y,in_x);\n        if(" + h + " == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n          ivec2 sourceCeilRC = ivec2(ceil(sourceFracIndexRC));\n\n          float topLeft = getImage(b, sourceFloorRC.x, sourceFloorRC.y, d);\n          float bottomLeft = getImage(b, sourceCeilRC.x, sourceFloorRC.y, d);\n          float topRight = getImage(b, sourceFloorRC.x, sourceCeilRC.y, d);\n          float bottomRight = getImage(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n          vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n          float top = topLeft + (topRight - topLeft) * fracRC.y;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n          float newValue = top + (bottom - top) * fracRC.x;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestRC = ivec2(floor(\n            sourceFracIndexRC + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestRC.x, sourceNearestRC.y, d);\n          setOutput(newValue);\n        }\n      }\n    ";
  };

  function getGlslDifferences() {
    var e, t, r, n, a, o, i, s;
    return 2 === ENV.get("WEBGL_VERSION") ? (e = "#version 300 es", t = "in", r = "out", n = "in", a = "texture", o = "outputColor", i = "out vec4 outputColor;", s = "\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    ") : (e = "", t = "attribute", r = "varying", n = "varying", a = "texture2D", o = "gl_FragColor", i = "", s = "\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "), {
      version: e,
      attribute: t,
      varyingVs: r,
      varyingFs: n,
      texture2D: a,
      output: o,
      defineOutput: i,
      defineRound: s
    };
  }

  function getLogicalCoordinatesFromFlatIndex(e, t, r) {
    void 0 === r && (r = "index");
    var n = computeStrides(t);
    return n.map(function (t, a) {
      return "int " + e[a] + " = " + r + " / " + t + "; " + (a === n.length - 1 ? "int " + e[a + 1] + " = " + r + " - " + e[a] + " * " + t : "index -= " + e[a] + " * " + t) + ";";
    }).join("");
  }

  function buildVec(e) {
    return 1 === e.length ? "" + e[0] : "vec" + e.length + "(" + e.join(",") + ")";
  }

  function dotify(e, t) {
    if (e.length !== t.length) throw new Error("Vectors to be dotted must be of the same length -got " + e.length + " and " + t.length);

    for (var r = [], n = Math.floor(e.length / 4), a = e.length % 4, o = 0; o < n; o++) {
      var i = e.slice(4 * o, 4 * o + 4),
          s = t.slice(4 * o, 4 * o + 4);
      r.push(buildVec(i) + ", " + buildVec(s));
    }

    return 0 !== a && (i = e.slice(4 * n), s = t.slice(4 * n), 1 === i.length && (i = i.map(function (e) {
      return "float(" + e + ")";
    }), s = s.map(function (e) {
      return "float(" + e + ")";
    })), r.push(buildVec(i) + ", " + buildVec(s))), r.map(function (e, t) {
      return "dot(" + e + ")";
    }).join("+");
  }

  function makeShader(e, t, r, n) {
    var a = [];
    e.forEach(function (e) {
      var t = sizeFromShape(e.shapeInfo.logicalShape);
      e.shapeInfo.isUniform ? a.push("uniform float " + e.name + (t > 1 ? "[" + t + "]" : "") + ";") : (a.push("uniform sampler2D " + e.name + ";"), a.push("uniform int offset" + e.name + ";"));
    });
    var o,
        i,
        s = a.join("\n"),
        u = e.map(function (e) {
      return getInputSamplingSnippet(e, t, n);
    }).join("\n"),
        l = t.texShape,
        p = getGlslDifferences(),
        c = getFloatTextureSampleSnippet(p),
        h = getShaderPrefix(p);
    return t.isPacked ? (o = getPackedOutputSamplingSnippet(t.logicalShape, l), i = getFloatTextureSetRGBASnippet(p)) : (o = getOutputSamplingSnippet(t.logicalShape, l), i = getFloatTextureSetRSnippet(p)), n && (h += SHADER_PACKED_PREFIX), [h, c, i, s, o, u, r].join("\n");
  }

  function getSamplerFromInInfo(e) {
    var t = e.shapeInfo.logicalShape;

    switch (t.length) {
      case 0:
        return getSamplerScalar(e);

      case 1:
        return getSampler1D(e);

      case 2:
        return getSampler2D(e);

      case 3:
        return getSampler3D(e);

      case 4:
        return getSampler4D(e);

      case 5:
        return getSampler5D(e);

      case 6:
        return getSampler6D(e);

      default:
        throw new Error(t.length + "-D input sampling is not yet supported");
    }
  }

  function getPackedSamplerFromInInfo(e) {
    switch (e.shapeInfo.logicalShape.length) {
      case 0:
        return getPackedSamplerScalar(e);

      case 1:
        return getPackedSampler1D(e);

      case 2:
        return getPackedSampler2D(e);

      case 3:
        return getPackedSampler3D(e);

      default:
        return getPackedSamplerND(e);
    }
  }

  function getInputSamplingSnippet(e, t, r) {
    void 0 === r && (r = !1);
    var n = "";
    n += r ? getPackedSamplerFromInInfo(e) : getSamplerFromInInfo(e);
    var a = e.shapeInfo.logicalShape,
        o = t.logicalShape;
    return a.length <= o.length && (n += r ? getPackedSamplerAtOutputCoords(e, t) : getSamplerAtOutputCoords(e, t)), n;
  }

  function getPackedOutputSamplingSnippet(e, t) {
    switch (e.length) {
      case 0:
        return getOutputScalarCoords();

      case 1:
        return getOutputPacked1DCoords(e, t);

      case 2:
        return getOutputPacked2DCoords(e, t);

      case 3:
        return getOutputPacked3DCoords(e, t);

      default:
        return getOutputPackedNDCoords(e, t);
    }
  }

  function getOutputSamplingSnippet(e, t) {
    switch (e.length) {
      case 0:
        return getOutputScalarCoords();

      case 1:
        return getOutput1DCoords(e, t);

      case 2:
        return getOutput2DCoords(e, t);

      case 3:
        return getOutput3DCoords(e, t);

      case 4:
        return getOutput4DCoords(e, t);

      case 5:
        return getOutput5DCoords(e, t);

      case 6:
        return getOutput6DCoords(e, t);

      default:
        throw new Error(e.length + "-D output sampling is not yet supported");
    }
  }

  function getFloatTextureSampleSnippet(e) {
    return "\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return " + e.texture2D + "(textureSampler, uv).r;\n    }\n  ";
  }

  function getFloatTextureSetRSnippet(e) {
    return "\n    void setOutput(float val) {\n      " + e.output + " = vec4(val, 0, 0, 0);\n    }\n  ";
  }

  function getFloatTextureSetRGBASnippet(e) {
    return "\n    void setOutput(vec4 val) {\n      " + e.output + " = val;\n    }\n  ";
  }

  function getShaderPrefix(e) {
    var t;
    return t = ENV.get("PROD") ? "\n      bool isNaN(float val) {\n        return false;\n      }\n\n      bool hasNaN(vec4 values) {\n        return false;\n      }\n    " : "\n      bool isNaN(float val) {\n        return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n      }\n\n      bool hasNaN(vec4 values) {\n        return any(bvec4(\n          isNaN(values.x),\n          isNaN(values.y),\n          isNaN(values.z),\n          isNaN(values.w)\n        ));\n      }\n    ", e.version + "\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    " + e.varyingFs + " vec2 resultUV;\n    " + e.defineOutput + "\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    " + t + "\n\n    float getNaN(vec4 values) {\n      return dot(vec4(1), values);\n    }\n\n    " + e.defineRound + "\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    " + SAMPLE_1D_SNIPPET + "\n    " + SAMPLE_2D_SNIPPET + "\n    " + SAMPLE_3D_SNIPPET + "\n    " + SAMPLE_5D_SNIPPET + "\n    " + SAMPLE_6D_SNIPPET + "\n  ";
  }

  var SAMPLE_1D_SNIPPET = "\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",
      SAMPLE_2D_SNIPPET = "\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",
      SAMPLE_3D_SNIPPET = "\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",
      SAMPLE_5D_SNIPPET = "\nvec2 UVfrom5D(int texNumR, int texNumC, int stride0,\n    int stride1, int stride2, int stride3, int row, int col, int depth,\n    int depth2, int depth3) {\n  // Explicitly use integer operations as dot() only works on floats.\n  int index = row * stride0 + col * stride1 +\n              depth * stride2 + depth2 * stride3 + depth3;\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",
      SAMPLE_6D_SNIPPET = "\nvec2 UVfrom6D(int texNumR, int texNumC, int stride0,\n    int stride1, int stride2, int stride3, int stride4,\n    int row, int col, int depth, int depth2, int depth3, int depth4) {\n  // Explicitly use integer operations as dot() only works on floats.\n  int index = row * stride0 + col * stride1 + depth * stride2 + depth2 *\n    stride3 + depth3 * stride4 + depth4;\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",
      SHADER_PACKED_PREFIX = "\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";

  function getOutputScalarCoords() {
    return "\n    int getOutputCoords() {\n      return 0;\n    }\n  ";
  }

  function getOutputPacked1DCoords(e, t) {
    var r = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)];
    return 1 === r[0] ? "\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * " + r[1] + ".0);\n      }\n    " : 1 === r[1] ? "\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * " + r[0] + ".0);\n      }\n    " : "\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + r[0] + ", " + r[1] + "));\n      return resTexRC.x * " + r[1] + " + resTexRC.y;\n    }\n  ";
  }

  function getOutput1DCoords(e, t) {
    return 1 === t[0] ? "\n      int getOutputCoords() {\n        return int(resultUV.x * " + t[1] + ".0);\n      }\n    " : 1 === t[1] ? "\n      int getOutputCoords() {\n        return int(resultUV.y * " + t[0] + ".0);\n      }\n    " : "\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + t[0] + ", " + t[1] + "));\n      return resTexRC.x * " + t[1] + " + resTexRC.y;\n    }\n  ";
  }

  function getOutputPacked3DCoords(e, t) {
    var r = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)],
        n = Math.ceil(e[2] / 2),
        a = n * Math.ceil(e[1] / 2);
    return "\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + r[0] + ", " + r[1] + "));\n      int index = resTexRC.x * " + r[1] + " + resTexRC.y;\n\n      int b = index / " + a + ";\n      index -= b * " + a + ";\n\n      int r = 2 * (index / " + n + ");\n      int c = imod(index, " + n + ") * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";
  }

  function getOutput3DCoords(e, t) {
    var r = getLogicalCoordinatesFromFlatIndex(["r", "c", "d"], e);
    return "\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + t[0] + ", " + t[1] + "));\n      int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n      " + r + "\n      return ivec3(r, c, d);\n    }\n  ";
  }

  function getOutputPackedNDCoords(e, t) {
    for (var r = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)], n = Math.ceil(e[e.length - 1] / 2), a = n * Math.ceil(e[e.length - 2] / 2), o = a, i = "", s = "b, r, c", u = 2; u < e.length - 1; u++) {
      i = "\n      int b" + u + " = index / " + (o *= e[e.length - u - 1]) + ";\n      index -= b" + u + " * " + o + ";\n    " + i, s = "b" + u + ", " + s;
    }

    return "\n    ivec" + e.length + " getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + r[0] + ", " + r[1] + "));\n      int index = resTexRC.x * " + r[1] + " + resTexRC.y;\n\n      " + i + "\n\n      int b = index / " + a + ";\n      index -= b * " + a + ";\n\n      int r = 2 * (index / " + n + ");\n      int c = imod(index, " + n + ") * 2;\n\n      return ivec" + e.length + "(" + s + ");\n    }\n  ";
  }

  function getOutput4DCoords(e, t) {
    var r = getLogicalCoordinatesFromFlatIndex(["r", "c", "d", "d2"], e);
    return "\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(" + t[0] + ", " + t[1] + "));\n      int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n      " + r + "\n      return ivec4(r, c, d, d2);\n    }\n  ";
  }

  function getOutput5DCoords(e, t) {
    var r = getLogicalCoordinatesFromFlatIndex(["r", "c", "d", "d2", "d3"], e);
    return "\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(" + t[0] + ",\n                             " + t[1] + "));\n\n      int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n\n      " + r + "\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  ";
  }

  function getOutput6DCoords(e, t) {
    var r = getLogicalCoordinatesFromFlatIndex(["r", "c", "d", "d2", "d3", "d4"], e);
    return "\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(" + t[0] + ", " + t[1] + "));\n      int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n\n      " + r + "\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  ";
  }

  function getOutputPacked2DCoords(e, t) {
    var r = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)];
    if (arraysEqual(e, t)) return "\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(" + r[0] + ", " + r[1] + "));\n      }\n    ";
    var n = Math.ceil(e[1] / 2);
    return "\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + r[0] + ", " + r[1] + "));\n\n      int index = resTexRC.x * " + r[1] + " + resTexRC.y;\n      int r = 2 * (index / " + n + ");\n      int c = imod(index, " + n + ") * 2;\n\n      return ivec2(r, c);\n    }\n  ";
  }

  function getOutput2DCoords(e, t) {
    return arraysEqual(e, t) ? "\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(" + t[0] + ", " + t[1] + "));\n      }\n    " : 1 === e[1] ? "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" + t[0] + ", " + t[1] + "));\n        int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    " : 1 === e[0] ? "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" + t[0] + ", " + t[1] + "));\n        int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n        return ivec2(0, index);\n      }\n    " : "\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + t[0] + ", " + t[1] + "));\n      int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n      int r = index / " + e[1] + ";\n      int c = index - r * " + e[1] + ";\n      return ivec2(r, c);\n    }\n  ";
  }

  function getFlatOffsetUniformName(e) {
    return "offset" + e;
  }

  function getPackedSamplerScalar(e) {
    var t = e.name;
    return "\n    vec4 get" + t.charAt(0).toUpperCase() + t.slice(1) + "() {\n      return " + getGlslDifferences().texture2D + "(" + t + ", halfCR);\n    }\n  ";
  }

  function getSamplerScalar(e) {
    var t = e.name,
        r = "get" + t.charAt(0).toUpperCase() + t.slice(1);
    if (e.shapeInfo.isUniform) return "float " + r + "() {return " + t + ";}";
    var n = e.shapeInfo.texShape,
        a = n[0],
        o = n[1];
    if (1 === a && 1 === o) return "\n      float " + r + "() {\n        return sampleTexture(" + t + ", halfCR);\n      }\n    ";
    var i = e.shapeInfo.texShape;
    return "\n    float " + r + "() {\n      vec2 uv = uvFromFlat(" + i[0] + ", " + i[1] + ", " + getFlatOffsetUniformName(t) + ");\n      return sampleTexture(" + t + ", uv);\n    }\n  ";
  }

  function getPackedSampler1D(e) {
    var t = e.name,
        r = "get" + t.charAt(0).toUpperCase() + t.slice(1),
        n = e.shapeInfo.texShape,
        a = [Math.ceil(n[0] / 2), Math.ceil(n[1] / 2)],
        o = getGlslDifferences();
    return "\n    vec4 " + r + "(int index) {\n      vec2 uv = packedUVfrom1D(\n        " + a[0] + ", " + a[1] + ", index);\n      return " + o.texture2D + "(" + t + ", uv);\n    }\n  ";
  }

  function getSampler1D(e) {
    var t = e.name,
        r = "get" + t.charAt(0).toUpperCase() + t.slice(1);
    if (e.shapeInfo.isUniform) return "\n      float " + r + "(int index) {\n        " + getUniformSampler(e) + "\n      }\n    ";
    var n = e.shapeInfo.texShape,
        a = n[0],
        o = n[1];
    if (1 === o && 1 === a) return "\n      float " + r + "(int index) {\n        return sampleTexture(" + t + ", halfCR);\n      }\n    ";
    var i = getFlatOffsetUniformName(t);
    return 1 === o ? "\n      float " + r + "(int index) {\n        vec2 uv = vec2(0.5, (float(index + " + i + ") + 0.5) / " + a + ".0);\n        return sampleTexture(" + t + ", uv);\n      }\n    " : 1 === a ? "\n      float " + r + "(int index) {\n        vec2 uv = vec2((float(index + " + i + ") + 0.5) / " + o + ".0, 0.5);\n        return sampleTexture(" + t + ", uv);\n      }\n    " : "\n    float " + r + "(int index) {\n      vec2 uv = uvFromFlat(" + a + ", " + o + ", index + " + i + ");\n      return sampleTexture(" + t + ", uv);\n    }\n  ";
  }

  function getPackedSampler2D(e) {
    var t = e.shapeInfo.logicalShape,
        r = e.name,
        n = "get" + r.charAt(0).toUpperCase() + r.slice(1),
        a = e.shapeInfo.texShape,
        o = a[0],
        i = a[1],
        s = getGlslDifferences();
    if (null != a && arraysEqual(t, a)) return "\n      vec4 " + n + "(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(" + i + ".0, " + o + ".0);\n\n        return " + s.texture2D + "(" + r + ", uv);\n      }\n    ";
    var u = [Math.ceil(a[0] / 2), Math.ceil(a[1] / 2)];
    return "\n    vec4 " + n + "(int row, int col) {\n      vec2 uv = packedUVfrom2D(" + Math.ceil(t[1] / 2) + ", " + u[0] + ", " + u[1] + ", row, col);\n      return " + s.texture2D + "(" + r + ", uv);\n    }\n  ";
  }

  function getSampler2D(e) {
    var t = e.shapeInfo.logicalShape,
        r = e.name,
        n = "get" + r.charAt(0).toUpperCase() + r.slice(1),
        a = e.shapeInfo.texShape;

    if (null != a && arraysEqual(t, a)) {
      var o = a[0];
      return "\n    float " + n + "(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(" + a[1] + ".0, " + o + ".0);\n      return sampleTexture(" + r + ", uv);\n    }\n  ";
    }

    var i = squeezeShape(t),
        s = i.newShape,
        u = i.keptDims,
        l = s;
    if (l.length < t.length) return "\n      " + getSamplerFromInInfo(squeezeInputInfo(e, l)) + "\n      float " + n + "(int row, int col) {\n        return " + n + "(" + getSqueezedParams(["row", "col"], u) + ");\n      }\n    ";
    if (e.shapeInfo.isUniform) return "\n      float " + n + "(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(" + t[1] + ", 1)));\n        " + getUniformSampler(e) + "\n      }\n    ";
    var p = a[0],
        c = a[1],
        h = getFlatOffsetUniformName(r);
    return 1 === c ? "\n    float " + n + "(int row, int col) {\n      float index = dot(vec3(row, col, " + h + "), vec3(" + t[1] + ", 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / " + p + ".0);\n      return sampleTexture(" + r + ", uv);\n    }\n  " : 1 === p ? "\n    float " + n + "(int row, int col) {\n      float index = dot(vec3(row, col, " + h + "), vec3(" + t[1] + ", 1, 1));\n      vec2 uv = vec2((index + 0.5) / " + c + ".0, 0.5);\n      return sampleTexture(" + r + ", uv);\n    }\n  " : "\n  float " + n + "(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * " + t[1] + " + col + " + h + ";\n    vec2 uv = uvFromFlat(" + p + ", " + c + ", index);\n    return sampleTexture(" + r + ", uv);\n  }\n";
  }

  function getPackedSampler3D(e) {
    var t = e.shapeInfo.logicalShape,
        r = e.name,
        n = "get" + r.charAt(0).toUpperCase() + r.slice(1),
        a = e.shapeInfo.texShape,
        o = [Math.ceil(a[0] / 2), Math.ceil(a[1] / 2)];
    if (1 === t[0]) return "\n        " + getPackedSamplerFromInInfo(squeezeInputInfo(e, t.slice(1))) + "\n        vec4 " + n + "(int b, int row, int col) {\n          return " + n + "(" + getSqueezedParams(["b", "row", "col"], [1, 2]) + ");\n        }\n      ";
    var i = o[0],
        s = o[1],
        u = Math.ceil(t[2] / 2);
    return "\n    vec4 " + n + "(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        " + i + ", " + s + ", " + u * Math.ceil(t[1] / 2) + ", " + u + ", b, row, col);\n      return " + getGlslDifferences().texture2D + "(" + r + ", uv);\n    }\n  ";
  }

  function getSampler3D(e) {
    var t = e.shapeInfo.logicalShape,
        r = e.name,
        n = "get" + r.charAt(0).toUpperCase() + r.slice(1),
        a = t[1] * t[2],
        o = t[2],
        i = squeezeShape(t),
        s = i.newShape,
        u = i.keptDims,
        l = s;
    if (l.length < t.length) return "\n        " + getSamplerFromInInfo(squeezeInputInfo(e, l)) + "\n        float " + n + "(int row, int col, int depth) {\n          return " + n + "(" + getSqueezedParams(["row", "col", "depth"], u) + ");\n        }\n      ";
    if (e.shapeInfo.isUniform) return "\n      float " + n + "(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(" + a + ", " + o + ", 1)));\n        " + getUniformSampler(e) + "\n      }\n    ";
    var p = e.shapeInfo.texShape,
        c = p[0],
        h = p[1],
        d = e.shapeInfo.flatOffset;
    return h === a && null == d ? "\n        float " + n + "(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(" + o + ", 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(" + h + ".0, " + c + ".0);\n          return sampleTexture(" + r + ", uv);\n        }\n      " : h === o && null == d ? "\n    float " + n + "(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(" + t[1] + ", 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + h + ".0, " + c + ".0);\n      return sampleTexture(" + r + ", uv);\n    }\n  " : "\n      float " + n + "(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * " + a + " + col * " + o + " + depth + " + getFlatOffsetUniformName(r) + ";\n        vec2 uv = uvFromFlat(" + c + ", " + h + ", index);\n        return sampleTexture(" + r + ", uv);\n      }\n  ";
  }

  function getPackedSamplerND(e) {
    for (var t = e.shapeInfo.logicalShape, r = t.length, n = e.name, a = "get" + n.charAt(0).toUpperCase() + n.slice(1), o = e.shapeInfo.texShape, i = [Math.ceil(o[0] / 2), Math.ceil(o[1] / 2)], s = i[0], u = i[1], l = Math.ceil(t[r - 1] / 2), p = l * Math.ceil(t[r - 2] / 2), c = "int b, int row, int col", h = "b * " + p + " + (row / 2) * " + l + " + (col / 2)", d = 2; d < r - 1; d++) {
      c = "int b" + d + ", " + c, h = "b" + d + " * " + (p *= t[r - d - 1]) + " + " + h;
    }

    return "\n    vec4 " + a + "(" + c + ") {\n      int index = " + h + ";\n      int texR = index / " + u + ";\n      int texC = index - texR * " + u + ";\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + u + ", " + s + ");\n      return " + getGlslDifferences().texture2D + "(" + n + ", uv);\n    }\n  ";
  }

  function getSampler4D(e) {
    var t = e.shapeInfo.logicalShape,
        r = e.name,
        n = "get" + r.charAt(0).toUpperCase() + r.slice(1),
        a = t[3],
        o = t[2] * a,
        i = t[1] * o,
        s = squeezeShape(t),
        u = s.newShape,
        l = s.keptDims;
    if (u.length < t.length) return "\n      " + getSamplerFromInInfo(squeezeInputInfo(e, u)) + "\n      float " + n + "(int row, int col, int depth, int depth2) {\n        return " + n + "(" + getSqueezedParams(["row", "col", "depth", "depth2"], l) + ");\n      }\n    ";
    if (e.shapeInfo.isUniform) return "\n      float " + n + "(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(" + i + ", " + o + ", " + a + ", 1)));\n        " + getUniformSampler(e) + "\n      }\n    ";
    var p = e.shapeInfo.flatOffset,
        c = e.shapeInfo.texShape,
        h = c[0],
        d = c[1];
    return d === i && null == p ? "\n      float " + n + "(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(" + o + ", " + a + ", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + d + ".0, " + h + ".0);\n        return sampleTexture(" + r + ", uv);\n      }\n    " : d === a && null == p ? "\n      float " + n + "(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(" + t[1] * t[2] + ", " + t[2] + ", 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + d + ".0, " + h + ".0);\n        return sampleTexture(" + r + ", uv);\n      }\n    " : "\n    float " + n + "(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " + i + " + col * " + o + " +\n          depth * " + a + " + depth2;\n      vec2 uv = uvFromFlat(" + h + ", " + d + ", index + " + getFlatOffsetUniformName(r) + ");\n      return sampleTexture(" + r + ", uv);\n    }\n  ";
  }

  function getSampler5D(e) {
    var t = e.shapeInfo.logicalShape,
        r = e.name,
        n = "get" + r.charAt(0).toUpperCase() + r.slice(1),
        a = t[4],
        o = t[3] * a,
        i = t[2] * o,
        s = t[1] * i,
        u = squeezeShape(t),
        l = u.newShape,
        p = u.keptDims;
    if (l.length < t.length) return "\n      " + getSamplerFromInInfo(squeezeInputInfo(e, l)) + "\n      float " + n + "(int row, int col, int depth, int depth2, int depth3) {\n        return " + n + "(" + getSqueezedParams(["row", "col", "depth", "depth2", "depth3"], p) + ");\n      }\n    ";
    if (e.shapeInfo.isUniform) return "\n      float " + n + "(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(" + s + ", " + i + ", " + o + ", " + a + ")) +\n          depth3;\n        " + getUniformSampler(e) + "\n      }\n    ";
    var c = e.shapeInfo.flatOffset,
        h = e.shapeInfo.texShape,
        d = h[0],
        f = h[1];
    return f === s && null == c ? "\n      float " + n + "(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(" + i + ", " + o + ", " + a + ", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + f + ".0, " + d + ".0);\n        return sampleTexture(" + r + ", uv);\n      }\n    " : f === a && null == c ? "\n      float " + n + "(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(" + t[1] * t[2] * t[3] + ",\n               " + t[2] * t[3] + ", " + t[3] + ", 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + f + ".0, " + d + ".0);\n        return sampleTexture(" + r + ", uv);\n      }\n    " : "\n    float " + n + "(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " + s + " + col * " + i + " + depth * " + o + " +\n          depth2 * " + a + " + depth3 + " + getFlatOffsetUniformName(r) + ";\n      vec2 uv = uvFromFlat(" + d + ", " + f + ", index);\n      return sampleTexture(" + r + ", uv);\n    }\n  ";
  }

  function getSampler6D(e) {
    var t = e.shapeInfo.logicalShape,
        r = e.name,
        n = "get" + r.charAt(0).toUpperCase() + r.slice(1),
        a = squeezeShape(t),
        o = a.newShape,
        i = a.keptDims;
    if (o.length < t.length) return "\n      " + getSamplerFromInInfo(squeezeInputInfo(e, o)) + "\n      float " + n + "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return " + n + "(" + getSqueezedParams(["row", "col", "depth", "depth2", "depth3", "depth4"], i) + ");\n      }\n    ";
    var s = t[5],
        u = t[4] * s,
        l = t[3] * u,
        p = t[2] * l,
        c = t[1] * p;
    if (e.shapeInfo.isUniform) return "\n      float " + n + "(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(" + c + ", " + p + ", " + l + ", " + u + ")) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(" + s + ", 1)));\n        " + getUniformSampler(e) + "\n      }\n    ";
    var h = e.shapeInfo.flatOffset,
        d = e.shapeInfo.texShape,
        f = d[0],
        m = d[1];
    return m === c && null == h ? "\n      float " + n + "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(" + p + ", " + l + ", " + u + ", " + s + ")) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + m + ".0, " + f + ".0);\n        return sampleTexture(" + r + ", uv);\n      }\n    " : m === s && null == h ? "\n      float " + n + "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(" + t[1] * t[2] * t[3] * t[4] + ",\n               " + t[2] * t[3] * t[4] + ",\n               " + t[3] * t[4] + ",\n               " + t[4] + ")) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + m + ".0, " + f + ".0);\n        return sampleTexture(" + r + ", uv);\n      }\n    " : "\n    float " + n + "(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " + c + " + col * " + p + " + depth * " + l + " +\n          depth2 * " + u + " + depth3 * " + s + " + depth4 + " + getFlatOffsetUniformName(r) + ";\n      vec2 uv = uvFromFlat(" + f + ", " + m + ", index);\n      return sampleTexture(" + r + ", uv);\n    }\n  ";
  }

  function getUniformSampler(e) {
    var t = e.name,
        r = sizeFromShape(e.shapeInfo.logicalShape);
    return 1 === r ? "return " + t + ";" : "\n    for (int i = 0; i < " + r + "; i++) {\n      if (i == index) {\n        return " + t + "[i];\n      }\n    }\n  ";
  }

  function getPackedSamplerAtOutputCoords(e, t) {
    var r,
        n = e.name,
        a = n.charAt(0).toUpperCase() + n.slice(1),
        o = "get" + a + "AtOutCoords",
        i = e.shapeInfo.logicalShape.length,
        s = t.logicalShape.length,
        u = getBroadcastDims(e.shapeInfo.logicalShape, t.logicalShape),
        l = getCoordsDataType(s),
        p = s - i,
        c = ["x", "y", "z", "w", "u", "v"];
    r = 0 === i ? "" : s < 2 && u.length >= 1 ? "coords = 0;" : u.map(function (e) {
      return "coords." + c[e + p] + " = 0;";
    }).join("\n");
    var h;
    h = s < 2 && i > 0 ? "coords" : e.shapeInfo.logicalShape.map(function (e, t) {
      return "coords." + c[t + p];
    }).join(", ");
    var d = "return outputValue;";
    if (1 === i && s > 1) d = "\n      return vec4(outputValue.xy, outputValue.xy);\n    ";else if (0 === i && s > 0) d = 1 === s ? "\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      " : "\n        return vec4(outputValue.x);\n      ";else if (u.length) {
      var f = i - 2,
          m = i - 1;
      u.indexOf(f) > -1 && u.indexOf(m) > -1 ? d = "return vec4(outputValue.x);" : u.indexOf(f) > -1 ? d = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);" : u.indexOf(m) > -1 && (d = "return vec4(outputValue.xx, outputValue.zz);");
    }
    return "\n    vec4 " + o + "() {\n      " + l + " coords = getOutputCoords();\n      " + r + "\n      vec4 outputValue = get" + a + "(" + h + ");\n      " + d + "\n    }\n  ";
  }

  function getSamplerAtOutputCoords(e, t) {
    var r = e.name,
        n = r.charAt(0).toUpperCase() + r.slice(1),
        a = "get" + n + "AtOutCoords",
        o = t.texShape,
        i = e.shapeInfo.texShape,
        s = e.shapeInfo.logicalShape.length,
        u = t.logicalShape.length;
    if (!e.shapeInfo.isUniform && s === u && null == e.shapeInfo.flatOffset && arraysEqual(i, o)) return "\n      float " + a + "() {\n        return sampleTexture(" + r + ", resultUV);\n      }\n    ";
    var l = getCoordsDataType(u),
        p = getBroadcastDims(e.shapeInfo.logicalShape, t.logicalShape),
        c = u - s,
        h = ["x", "y", "z", "w", "u", "v"];
    return "\n    float " + a + "() {\n      " + l + " coords = getOutputCoords();\n      " + (0 === s ? "" : u < 2 && p.length >= 1 ? "coords = 0;" : p.map(function (e) {
      return "coords." + h[e + c] + " = 0;";
    }).join("\n")) + "\n      return get" + n + "(" + (u < 2 && s > 0 ? "coords" : e.shapeInfo.logicalShape.map(function (e, t) {
      return "coords." + h[t + c];
    }).join(", ")) + ");\n    }\n  ";
  }

  function getCoordsDataType(e) {
    if (e <= 1) return "int";
    if (2 === e) return "ivec2";
    if (3 === e) return "ivec3";
    if (4 === e) return "ivec4";
    if (5 === e) return "ivec5";
    if (6 === e) return "ivec6";
    throw Error("GPU for rank " + e + " is not yet supported");
  }

  function squeezeInputInfo(e, t) {
    var r = JSON.parse(JSON.stringify(e));
    return r.shapeInfo.logicalShape = t, r;
  }

  function getSqueezedParams(e, t) {
    return t.map(function (t) {
      return e[t];
    }).join(", ");
  }

  var CumSumProgram = function CumSumProgram(e, t, r) {
    this.variableNames = ["x"], this.outputShape = e;
    var n = e.length,
        a = e[e.length - 1],
        o = r ? "<" : ">";
    this.userCode = "\n      int getIndex(int i) {\n        " + (r ? "return " + a + " -i - 1;" : "return i;") + "\n      }\n\n      void main() {\n        " + getCoordsDataType(n) + " coords = getOutputCoords();\n        int end = " + getFinalCoord(n, "coords") + ";\n        float val = 0.0;\n        for (int i = " + a + " - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx " + o + " end) {\n            continue;\n          }\n          if (idx == end && " + t + ") {\n            continue;\n          }\n          " + getFinalCoord(n, "coords") + " = idx;\n          val += getX(" + getCoords(n, "coords") + ");\n        }\n        setOutput(val);\n      }\n    ";
  };

  function getCoords(e, t) {
    if (1 === e) return "" + t;
    if (2 === e) return t + ".x, " + t + ".y";
    if (3 === e) return t + ".x, " + t + ".y, " + t + ".z";
    if (4 === e) return t + ".x, " + t + ".y, " + t + ".z, " + t + ".w";
    throw Error("Cumulative sum for rank " + e + " is not yet supported");
  }

  function getFinalCoord(e, t) {
    if (1 === e) return "" + t;
    if (2 === e) return t + ".y";
    if (3 === e) return t + ".z";
    if (4 === e) return t + ".w";
    throw Error("Cumulative sum for rank " + e + " is not yet supported");
  }

  var DepthToSpaceProgram = function () {
    function e(e, t, r) {
      this.variableNames = ["x"], this.outputShape = [], this.outputShape = e, this.blockSize = t, this.dataFormat = r, this.userCode = "\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = " + this.getHeightCoordString() + ";\n      int w = " + this.getWidthCoordString() + ";\n      int d = " + this.getDepthCoordString() + ";\n\n      int in_h = h / " + t + ";\n      int offset_h = imod(h, " + t + ");\n      int in_w = w / " + t + ";\n      int offset_w = imod(w, " + t + ");\n      int offset_d = (offset_h * " + t + " + offset_w) *\n        " + this.getOutputDepthSize() + ";\n      int in_d = d + offset_d;\n\n      float result = " + this.getInputSamplingString() + ";\n      setOutput(result);\n    }\n  ";
    }

    return e.prototype.getHeightCoordString = function () {
      return "NHWC" === this.dataFormat ? "coords[1]" : "coords[2]";
    }, e.prototype.getWidthCoordString = function () {
      return "NHWC" === this.dataFormat ? "coords[2]" : "coords[3]";
    }, e.prototype.getDepthCoordString = function () {
      return "NHWC" === this.dataFormat ? "coords[3]" : "coords[1]";
    }, e.prototype.getOutputDepthSize = function () {
      return "NHWC" === this.dataFormat ? this.outputShape[3] : this.outputShape[1];
    }, e.prototype.getInputSamplingString = function () {
      return "NHWC" === this.dataFormat ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)";
    }, e;
  }(),
      EncodeFloatProgram = function EncodeFloatProgram(e) {
    this.variableNames = ["A"];
    var t = getGlslDifferences();
    this.outputShape = e, this.userCode = "\n      const float FLOAT_MAX = 1.70141184e38;\n      const float FLOAT_MIN = 1.17549435e-38;\n\n      lowp vec4 encode_float(highp float v) {\n        if (isNaN(v)) {\n          return vec4(255, 255, 255, 255);\n        }\n\n        highp float av = abs(v);\n\n        if(av < FLOAT_MIN) {\n          return vec4(0.0, 0.0, 0.0, 0.0);\n        } else if(v > FLOAT_MAX) {\n          return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n        } else if(v < -FLOAT_MAX) {\n          return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n        }\n\n        highp vec4 c = vec4(0,0,0,0);\n\n        highp float e = floor(log2(av));\n        highp float m = exp2(fract(log2(av))) - 1.0;\n\n        c[2] = floor(128.0 * m);\n        m -= c[2] / 128.0;\n        c[1] = floor(32768.0 * m);\n        m -= c[1] / 32768.0;\n        c[0] = floor(8388608.0 * m);\n\n        highp float ebias = e + 127.0;\n        c[3] = floor(ebias / 2.0);\n        ebias -= c[3] * 2.0;\n        c[2] += floor(ebias) * 128.0;\n\n        c[3] += 128.0 * step(0.0, -v);\n\n        return c / 255.0;\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        " + t.output + " = encode_float(x);\n      }\n    ";
  },
      COMPLEX_FFT = {
    REAL: "return real * expR - imag * expI;",
    IMAG: "return real * expI + imag * expR;"
  },
      FFTProgram = function FFTProgram(e, t, r) {
    this.variableNames = ["real", "imag"];
    var n = t[1];
    this.outputShape = t;
    var a = r ? "2.0 * " + Math.PI : "-2.0 * " + Math.PI,
        o = r ? n + ".0" : "1.0";
    this.userCode = "\n      const float exponentMultiplier = " + a + ";\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        " + e + "\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(" + n + ");\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < " + n + "; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / " + o + ";\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    ";
  },
      FromPixelsProgram = function FromPixelsProgram(e) {
    this.variableNames = ["A"];
    var t = getGlslDifferences(),
        r = e[0],
        n = e[1];
    this.outputShape = e, this.userCode = "\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + n + ".0, " + r + ".0);\n\n        vec4 values = " + t.texture2D + "(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    ";
  },
      GatherProgram = function GatherProgram(e, t, r) {
    this.variableNames = ["A", "indices"];
    var n = e.slice();
    n[r] = t, this.outputShape = n, this.rank = n.length;
    var a = getCoordsDataType(this.rank),
        o = getSourceCoords(e, r);
    this.userCode = "\n      void main() {\n        " + a + " resRC = getOutputCoords();\n        setOutput(getA(" + o + "));\n      }\n    ";
  };

  function getSourceCoords(e, t) {
    var r = e.length;
    if (r > 4) throw Error("Gather for rank " + r + " is not yet supported");
    if (1 === r) return "int(getIndices(resRC))";

    for (var n = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], a = [], o = 0; o < e.length; o++) {
      o === t ? a.push("int(getIndices(" + n[o] + "))") : a.push("" + n[o]);
    }

    return a.join();
  }

  var TextureUsage,
      PhysicalTextureType,
      GatherNDProgram = function GatherNDProgram(e, t, r) {
    this.sliceDim = e, this.strides = t, this.variableNames = ["x", "indices"], this.outputShape = r;
    var n = getCoordsDataType(t.length),
        a = getCoordsDataType(r.length),
        o = this.sliceDim > 1 ? "strides[j]" : "strides";
    this.userCode = "\n        " + n + " strides = " + n + "(" + this.strides + ");\n         void main() {\n          " + a + " coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < " + this.sliceDim + "; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * " + o + ";\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      ";
  };

  function getUnpackedMatrixTextureShapeWidthHeight(e, t) {
    return [t, e];
  }

  function getUnpackedArraySizeFromMatrixSize(e, t) {
    return e * t;
  }

  function getMatrixSizeFromUnpackedArraySize(e, t) {
    if (e % t != 0) throw new Error("unpackedSize (" + e + ") must be a multiple of " + t);
    return e / t;
  }

  function encodeMatrixToUnpackedArray(e, t, r) {
    var n = getUnpackedArraySizeFromMatrixSize(e.length, r);
    if (t.length < n) throw new Error("unpackedArray length (" + t.length + ") must be >= " + n);

    for (var a = 0, o = 0; o < e.length; ++o) {
      t[a] = e[o], a += r;
    }
  }

  function decodeMatrixFromUnpackedArray(e, t, r) {
    var n = getMatrixSizeFromUnpackedArraySize(e.length, r);
    if (t.length < n) throw new Error("matrix length (" + t.length + ") must be >= " + n);

    for (var a = 0, o = 0; o < e.length; o += r) {
      t[a++] = e[o];
    }
  }

  function getPackedMatrixTextureShapeWidthHeight(e, t) {
    return [Math.max(1, Math.ceil(t / 2)), Math.max(1, Math.ceil(e / 2))];
  }

  function getPackedRGBAArraySizeFromMatrixShape(e, t) {
    var r = getPackedMatrixTextureShapeWidthHeight(e, t);
    return r[0] * r[1] * 4;
  }

  function encodeMatrixToPackedRGBA(e, t, r, n, a) {
    for (var o = n % 2 == 1, i = r % 2 == 1, s = Math.floor(n / 2), u = Math.floor(r / 2), l = Math.ceil(n / 2), p = l * Math.ceil(r / 2), c = nearestLargerEven(r) * nearestLargerEven(n), h = 0; h < t; h++) {
      for (var d = h * r * n, f = h * c, m = o ? 4 : 0, g = n, y = f, v = 0; v < u; ++v) {
        for (var x = 2 * v * n, b = 0; b < s; ++b) {
          var w = d + x + 2 * b;
          a[y] = e[w], a[y + 1] = e[w + 1], a[y + 2] = e[w + g], a[y + 3] = e[w + g + 1], y += 4;
        }

        y += m;
      }

      if (o) {
        w = d + n - 1, y = f + 4 * (l - 1);
        var N = 2 * n;

        for (m = 4 * l, v = 0; v < u; ++v) {
          a[y] = e[w], a[y + 2] = e[w + n], w += N, y += m;
        }
      }

      if (i) {
        for (w = d + (r - 1) * n, y = f + 4 * (p - l), b = 0; b < s; ++b) {
          a[y++] = e[w++], a[y++] = e[w++], y += 2;
        }

        o && i && (a[f + c - 4] = e[w]);
      }
    }

    return a;
  }

  function decodeMatrixFromPackedRGBA(e, t, r, n, a) {
    var o = r * n;
    if (a.length < o) throw new Error("matrix length (" + a.length + ") must be >= " + o);

    for (var i = n % 2 == 1, s = r % 2 == 1, u = Math.floor(n / 2), l = Math.floor(r / 2), p = Math.ceil(n / 2), c = p * Math.ceil(r / 2), h = nearestLargerEven(r) * nearestLargerEven(n), d = 0; d < t; d++) {
      for (var f = d * r * n, m = d * h, g = i ? 4 : 0, y = n + (i ? 1 : 0), v = m, x = f, b = f + n, w = 0; w < l; ++w) {
        for (var N = 0; N < u; ++N) {
          a[x++] = e[v++], a[x++] = e[v++], a[b++] = e[v++], a[b++] = e[v++];
        }

        v += g, x += y, b += y;
      }

      if (i) {
        v = m + 4 * (p - 1);
        var S = f + n - 1;

        for (g = 4 * p, y = 2 * n, w = 0; w < l; ++w) {
          a[S] = e[v], a[S + n] = e[v + 2], v += g, S += y;
        }
      }

      if (s) {
        for (v = m + 4 * (c - p), S = f + (r - 1) * n, N = 0; N < u; ++N) {
          a[S++] = e[v++], a[S++] = e[v++], v += 2;
        }

        i && (a[f + r * n - 1] = e[v]);
      }
    }

    return a;
  }

  function callAndCheck(e, t) {
    var r = t();
    return checkWebGLError(e), r;
  }

  !function (e) {
    e[e.RENDER = 0] = "RENDER", e[e.UPLOAD = 1] = "UPLOAD", e[e.PIXELS = 2] = "PIXELS", e[e.DOWNLOAD = 3] = "DOWNLOAD";
  }(TextureUsage || (TextureUsage = {})), function (e) {
    e[e.UNPACKED_FLOAT16 = 0] = "UNPACKED_FLOAT16", e[e.UNPACKED_FLOAT32 = 1] = "UNPACKED_FLOAT32", e[e.PACKED_4X1_UNSIGNED_BYTE = 2] = "PACKED_4X1_UNSIGNED_BYTE", e[e.PACKED_2X2_FLOAT32 = 3] = "PACKED_2X2_FLOAT32", e[e.PACKED_2X2_FLOAT16 = 4] = "PACKED_2X2_FLOAT16";
  }(PhysicalTextureType || (PhysicalTextureType = {}));
  var webGLDebugErrorCheckingEnabled = !1;

  function enableDebugWebGLErrorChecking(e) {
    webGLDebugErrorCheckingEnabled = e;
  }

  function checkWebGLError(e) {
    if (webGLDebugErrorCheckingEnabled) {
      var t = e.getError();
      if (t !== e.NO_ERROR) throw new Error("WebGL Error: " + getWebGLErrorMessage(e, t));
    }
  }

  var MIN_FLOAT16 = 5.96e-8,
      MAX_FLOAT16 = 65504;

  function canBeRepresented(e) {
    return !!(ENV.get("WEBGL_RENDER_FLOAT32_ENABLED") || 0 === e || MIN_FLOAT16 < Math.abs(e) && Math.abs(e) < MAX_FLOAT16);
  }

  function getWebGLErrorMessage(e, t) {
    switch (t) {
      case e.NO_ERROR:
        return "NO_ERROR";

      case e.INVALID_ENUM:
        return "INVALID_ENUM";

      case e.INVALID_VALUE:
        return "INVALID_VALUE";

      case e.INVALID_OPERATION:
        return "INVALID_OPERATION";

      case e.INVALID_FRAMEBUFFER_OPERATION:
        return "INVALID_FRAMEBUFFER_OPERATION";

      case e.OUT_OF_MEMORY:
        return "OUT_OF_MEMORY";

      case e.CONTEXT_LOST_WEBGL:
        return "CONTEXT_LOST_WEBGL";

      default:
        return "Unknown error code " + t;
    }
  }

  function getExtensionOrThrow(e, t) {
    return throwIfNull(e, function () {
      return e.getExtension(t);
    }, 'Extension "' + t + '" not supported on this browser.');
  }

  function createVertexShader(e, t) {
    var r = throwIfNull(e, function () {
      return e.createShader(e.VERTEX_SHADER);
    }, "Unable to create vertex WebGLShader.");
    if (callAndCheck(e, function () {
      return e.shaderSource(r, t);
    }), callAndCheck(e, function () {
      return e.compileShader(r);
    }), !1 === e.getShaderParameter(r, e.COMPILE_STATUS)) throw console.log(e.getShaderInfoLog(r)), new Error("Failed to compile vertex shader.");
    return r;
  }

  function createFragmentShader(e, t) {
    var r = throwIfNull(e, function () {
      return e.createShader(e.FRAGMENT_SHADER);
    }, "Unable to create fragment WebGLShader.");
    if (callAndCheck(e, function () {
      return e.shaderSource(r, t);
    }), callAndCheck(e, function () {
      return e.compileShader(r);
    }), !1 === e.getShaderParameter(r, e.COMPILE_STATUS)) throw logShaderSourceAndInfoLog(t, e.getShaderInfoLog(r)), new Error("Failed to compile fragment shader.");
    return r;
  }

  var lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;

  function logShaderSourceAndInfoLog(e, t) {
    var r = lineNumberRegex.exec(t);
    if (null == r) return console.log("Couldn't parse line number in error: " + t), void console.log(e);

    for (var n = +r[1], a = e.split("\n"), o = a.length.toString().length + 2, i = a.map(function (e, t) {
      return rightPad((t + 1).toString(), o) + e;
    }), s = 0, u = 0; u < i.length; u++) {
      s = Math.max(i[u].length, s);
    }

    var l = i.slice(0, n - 1),
        p = i.slice(n - 1, n),
        c = i.slice(n);
    console.log(l.join("\n")), console.log(t.split("\n")[0]), console.log("%c " + rightPad(p[0], s), "border:1px solid red; background-color:#e3d2d2; color:#a61717"), console.log(c.join("\n"));
  }

  function createProgram(e) {
    return throwIfNull(e, function () {
      return e.createProgram();
    }, "Unable to create WebGLProgram.");
  }

  function linkProgram(e, t) {
    if (callAndCheck(e, function () {
      return e.linkProgram(t);
    }), !1 === e.getProgramParameter(t, e.LINK_STATUS)) throw console.log(e.getProgramInfoLog(t)), new Error("Failed to link vertex and fragment shaders.");
  }

  function validateProgram(e, t) {
    if (callAndCheck(e, function () {
      return e.validateProgram(t);
    }), !1 === e.getProgramParameter(t, e.VALIDATE_STATUS)) throw console.log(e.getProgramInfoLog(t)), new Error("Shader program validation failed.");
  }

  function createStaticVertexBuffer(e, t) {
    var r = throwIfNull(e, function () {
      return e.createBuffer();
    }, "Unable to create WebGLBuffer");
    return callAndCheck(e, function () {
      return e.bindBuffer(e.ARRAY_BUFFER, r);
    }), callAndCheck(e, function () {
      return e.bufferData(e.ARRAY_BUFFER, t, e.STATIC_DRAW);
    }), r;
  }

  function createStaticIndexBuffer(e, t) {
    var r = throwIfNull(e, function () {
      return e.createBuffer();
    }, "Unable to create WebGLBuffer");
    return callAndCheck(e, function () {
      return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, r);
    }), callAndCheck(e, function () {
      return e.bufferData(e.ELEMENT_ARRAY_BUFFER, t, e.STATIC_DRAW);
    }), r;
  }

  function getNumChannels() {
    return 2 === ENV.get("WEBGL_VERSION") ? 1 : 4;
  }

  function createTexture(e) {
    return throwIfNull(e, function () {
      return e.createTexture();
    }, "Unable to create WebGLTexture.");
  }

  function validateTextureSize(e, t) {
    var r = ENV.get("WEBGL_MAX_TEXTURE_SIZE");

    if (e <= 0 || t <= 0) {
      var n = "[" + e + "x" + t + "]";
      throw new Error("Requested texture size " + n + " is invalid.");
    }

    if (e > r || t > r) throw n = "[" + e + "x" + t + "]", new Error("Requested texture size " + n + " greater than WebGL maximum on this browser / GPU [" + r + "x" + r + "].");
  }

  function createFramebuffer(e) {
    return throwIfNull(e, function () {
      return e.createFramebuffer();
    }, "Unable to create WebGLFramebuffer.");
  }

  function bindVertexBufferToProgramAttribute(e, t, r, n, a, o, i) {
    var s = e.getAttribLocation(t, r);
    return -1 !== s && (callAndCheck(e, function () {
      return e.bindBuffer(e.ARRAY_BUFFER, n);
    }), callAndCheck(e, function () {
      return e.vertexAttribPointer(s, a, e.FLOAT, !1, o, i);
    }), callAndCheck(e, function () {
      return e.enableVertexAttribArray(s);
    }), !0);
  }

  function bindTextureUnit(e, t, r) {
    validateTextureUnit(e, r), callAndCheck(e, function () {
      return e.activeTexture(e.TEXTURE0 + r);
    }), callAndCheck(e, function () {
      return e.bindTexture(e.TEXTURE_2D, t);
    });
  }

  function unbindTextureUnit(e, t) {
    validateTextureUnit(e, t), callAndCheck(e, function () {
      return e.activeTexture(e.TEXTURE0 + t);
    }), callAndCheck(e, function () {
      return e.bindTexture(e.TEXTURE_2D, null);
    });
  }

  function getProgramUniformLocationOrThrow(e, t, r) {
    return throwIfNull(e, function () {
      return e.getUniformLocation(t, r);
    }, 'uniform "' + r + '" not present in program.');
  }

  function getProgramUniformLocation(e, t, r) {
    return e.getUniformLocation(t, r);
  }

  function bindTextureToProgramUniformSampler(e, t, r, n, a) {
    callAndCheck(e, function () {
      return bindTextureUnit(e, r, a);
    }), callAndCheck(e, function () {
      return e.uniform1i(n, a);
    });
  }

  function bindCanvasToFramebuffer(e) {
    callAndCheck(e, function () {
      return e.bindFramebuffer(e.FRAMEBUFFER, null);
    }), callAndCheck(e, function () {
      return e.viewport(0, 0, e.canvas.width, e.canvas.height);
    }), callAndCheck(e, function () {
      return e.scissor(0, 0, e.canvas.width, e.canvas.height);
    });
  }

  function bindColorTextureToFramebuffer(e, t, r) {
    callAndCheck(e, function () {
      return e.bindFramebuffer(e.FRAMEBUFFER, r);
    }), callAndCheck(e, function () {
      return e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, t, 0);
    });
  }

  function unbindColorTextureFromFramebuffer(e, t) {
    callAndCheck(e, function () {
      return e.bindFramebuffer(e.FRAMEBUFFER, t);
    }), callAndCheck(e, function () {
      return e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, null, 0);
    });
  }

  function validateFramebuffer(e) {
    var t = e.checkFramebufferStatus(e.FRAMEBUFFER);
    if (t !== e.FRAMEBUFFER_COMPLETE) throw new Error("Error binding framebuffer: " + getFramebufferErrorMessage(e, t));
  }

  function getFramebufferErrorMessage(e, t) {
    switch (t) {
      case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
        return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";

      case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
        return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";

      case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
        return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";

      case e.FRAMEBUFFER_UNSUPPORTED:
        return "FRAMEBUFFER_UNSUPPORTED";

      default:
        return "unknown error " + t;
    }
  }

  function throwIfNull(e, t, r) {
    var n = callAndCheck(e, function () {
      return t();
    });
    if (null == n) throw new Error(r);
    return n;
  }

  function validateTextureUnit(e, t) {
    var r = e.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1,
        n = t + e.TEXTURE0;
    if (n < e.TEXTURE0 || n > r) throw new Error("textureUnit must be in [gl.TEXTURE0, gl.TEXTURE" + r + "].");
  }

  function getBatchDim(e, t) {
    return void 0 === t && (t = 2), sizeFromShape(e.slice(0, e.length - t));
  }

  function getRowsCols(e) {
    if (0 === e.length) throw Error("Cannot get rows and columns of an empty shape array.");
    return [e.length > 1 ? e[e.length - 2] : 1, e[e.length - 1]];
  }

  function getTextureShapeFromLogicalShape(e, t) {
    var r;
    void 0 === t && (t = !1);
    var n = ENV.get("WEBGL_MAX_TEXTURE_SIZE");

    if (t && (n *= 2, 1 === (e = e.map(function (t, r) {
      return r >= e.length - 2 ? nearestLargerEven(e[r]) : e[r];
    })).length && (e = [2, e[0]])), 2 !== e.length) {
      var a = squeezeShape(e);
      e = a.newShape;
    }

    var o = sizeFromShape(e);
    if (e.length <= 1 && o <= n) return [1, o];
    if (2 === e.length && e[0] <= n && e[1] <= n) return e;
    if (3 === e.length && e[0] * e[1] <= n && e[2] <= n) return [e[0] * e[1], e[2]];
    if (3 === e.length && e[0] <= n && e[1] * e[2] <= n) return [e[0], e[1] * e[2]];
    if (4 === e.length && e[0] * e[1] * e[2] <= n && e[3] <= n) return [e[0] * e[1] * e[2], e[3]];
    if (4 === e.length && e[0] <= n && e[1] * e[2] * e[3] <= n) return [e[0], e[1] * e[2] * e[3]];

    if (t) {
      var i = getBatchDim(e),
          s = 2,
          u = 2;
      return e.length && (s = (r = getRowsCols(e))[0], u = r[1]), sizeToSquarishShape(o = i * (s / 2) * (u / 2)).map(function (e) {
        return 2 * e;
      });
    }

    return sizeToSquarishShape(o);
  }

  function isEven(e) {
    return e % 2 == 0;
  }

  function isReshapeFree(e, t) {
    if (arraysEqual(e = e.slice(-2), t = t.slice(-2))) return !0;
    if (!e.length || !t.length) return !0;
    if (0 === e[0] || 0 === e[1] || 0 === t[0] || 0 === t[1]) return !0;

    if (e.length !== t.length) {
      var r = e.slice(-1)[0],
          n = t.slice(-1)[0];
      if (r === n) return !0;
      if (isEven(r) && isEven(n) && (1 === e[0] || 1 === t[0])) return !0;
    }

    return e[1] === t[1] && isEven(e[0]) && isEven(t[0]);
  }

  var webgl_util = Object.freeze({
    callAndCheck: callAndCheck,
    enableDebugWebGLErrorChecking: enableDebugWebGLErrorChecking,
    checkWebGLError: checkWebGLError,
    canBeRepresented: canBeRepresented,
    getWebGLErrorMessage: getWebGLErrorMessage,
    getExtensionOrThrow: getExtensionOrThrow,
    createVertexShader: createVertexShader,
    createFragmentShader: createFragmentShader,
    createProgram: createProgram,
    linkProgram: linkProgram,
    validateProgram: validateProgram,
    createStaticVertexBuffer: createStaticVertexBuffer,
    createStaticIndexBuffer: createStaticIndexBuffer,
    getNumChannels: getNumChannels,
    createTexture: createTexture,
    validateTextureSize: validateTextureSize,
    createFramebuffer: createFramebuffer,
    bindVertexBufferToProgramAttribute: bindVertexBufferToProgramAttribute,
    bindTextureUnit: bindTextureUnit,
    unbindTextureUnit: unbindTextureUnit,
    getProgramUniformLocationOrThrow: getProgramUniformLocationOrThrow,
    getProgramUniformLocation: getProgramUniformLocation,
    bindTextureToProgramUniformSampler: bindTextureToProgramUniformSampler,
    bindCanvasToFramebuffer: bindCanvasToFramebuffer,
    bindColorTextureToFramebuffer: bindColorTextureToFramebuffer,
    unbindColorTextureFromFramebuffer: unbindColorTextureFromFramebuffer,
    validateFramebuffer: validateFramebuffer,
    getFramebufferErrorMessage: getFramebufferErrorMessage,
    getBatchDim: getBatchDim,
    getRowsCols: getRowsCols,
    getTextureShapeFromLogicalShape: getTextureShapeFromLogicalShape,
    isReshapeFree: isReshapeFree
  });

  function createVertexShader$1(e) {
    var t = getGlslDifferences();
    return createVertexShader(e, t.version + "\n    precision highp float;\n    " + t.attribute + " vec3 clipSpacePos;\n    " + t.attribute + " vec2 uv;\n    " + t.varyingVs + " vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }");
  }

  function createVertexBuffer(e) {
    return createStaticVertexBuffer(e, new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]));
  }

  function createIndexBuffer(e) {
    return createStaticIndexBuffer(e, new Uint16Array([0, 1, 2, 2, 1, 3]));
  }

  function getTextureConfig(e, t) {
    var r,
        n,
        a,
        o,
        i,
        s,
        u,
        l = e;
    return 2 === ENV.get("WEBGL_VERSION") ? (r = l.R32F, n = l.R16F, a = l.RGBA32F, o = l.RED, i = 4, s = 1, u = l.HALF_FLOAT) : (r = e.RGBA, n = e.RGBA, a = l.RGBA, o = e.RGBA, i = 4, s = 4, u = null != t ? t.HALF_FLOAT_OES : null), {
      internalFormatFloat: r,
      internalFormatHalfFloat: n,
      internalFormatPackedFloat: a,
      textureFormatFloat: o,
      downloadTextureFormat: e.RGBA,
      downloadUnpackNumChannels: i,
      defaultNumChannels: s,
      textureTypeHalfFloat: u
    };
  }

  function createAndConfigureTexture(e, t, r, n, a, o) {
    validateTextureSize(t, r);
    var i = createTexture(e),
        s = e.TEXTURE_2D;
    return callAndCheck(e, function () {
      return e.bindTexture(s, i);
    }), callAndCheck(e, function () {
      return e.texParameteri(s, e.TEXTURE_WRAP_S, e.CLAMP_TO_EDGE);
    }), callAndCheck(e, function () {
      return e.texParameteri(s, e.TEXTURE_WRAP_T, e.CLAMP_TO_EDGE);
    }), callAndCheck(e, function () {
      return e.texParameteri(s, e.TEXTURE_MIN_FILTER, e.NEAREST);
    }), callAndCheck(e, function () {
      return e.texParameteri(s, e.TEXTURE_MAG_FILTER, e.NEAREST);
    }), callAndCheck(e, function () {
      return e.texImage2D(s, 0, n, t, r, 0, a, o, null);
    }), callAndCheck(e, function () {
      return e.bindTexture(e.TEXTURE_2D, null);
    }), i;
  }

  function createFloat32MatrixTexture(e, t, r, n) {
    var a = getUnpackedMatrixTextureShapeWidthHeight(t, r);
    return createAndConfigureTexture(e, a[0], a[1], n.internalFormatFloat, n.textureFormatFloat, e.FLOAT);
  }

  function createFloat16MatrixTexture(e, t, r, n) {
    var a = getUnpackedMatrixTextureShapeWidthHeight(t, r);
    return createAndConfigureTexture(e, a[0], a[1], n.internalFormatFloat, n.textureFormatFloat, n.textureTypeHalfFloat);
  }

  function createUnsignedBytesMatrixTexture(e, t, r, n) {
    var a = getUnpackedMatrixTextureShapeWidthHeight(t, r);
    return createAndConfigureTexture(e, a[0], a[1], e.RGBA, e.RGBA, e.UNSIGNED_BYTE);
  }

  function createPackedMatrixTexture(e, t, r, n) {
    var a = getPackedMatrixTextureShapeWidthHeight(t, r);
    return createAndConfigureTexture(e, a[0], a[1], n.internalFormatPackedFloat, e.RGBA, e.FLOAT);
  }

  function createFloat16PackedMatrixTexture(e, t, r, n) {
    var a = getPackedMatrixTextureShapeWidthHeight(t, r);
    return createAndConfigureTexture(e, a[0], a[1], n.internalFormatHalfFloat, e.RGBA, n.textureTypeHalfFloat);
  }

  function bindVertexProgramAttributeStreams(e, t, r) {
    return callAndCheck(e, function () {
      return e.bindBuffer(e.ARRAY_BUFFER, r);
    }), bindVertexBufferToProgramAttribute(e, t, "clipSpacePos", r, 3, 20, 0) && bindVertexBufferToProgramAttribute(e, t, "uv", r, 2, 20, 12);
  }

  function uploadPixelDataToTexture(e, t, r) {
    callAndCheck(e, function () {
      return e.bindTexture(e.TEXTURE_2D, t);
    }), callAndCheck(e, function () {
      return e.texImage2D(e.TEXTURE_2D, 0, e.RGBA, e.RGBA, e.UNSIGNED_BYTE, r);
    }), callAndCheck(e, function () {
      return e.bindTexture(e.TEXTURE_2D, null);
    });
  }

  function uploadDataToTexture(e, t, r, n, a, o) {
    validateTextureSize(r, n), callAndCheck(e, function () {
      return e.bindTexture(e.TEXTURE_2D, t);
    }), callAndCheck(e, function () {
      return e.texSubImage2D(e.TEXTURE_2D, 0, 0, 0, r, n, o, e.FLOAT, a);
    }), callAndCheck(e, function () {
      return e.bindTexture(e.TEXTURE_2D, null);
    });
  }

  function uploadMatrixToTexture(e, t, r, n, a, o, i) {
    var s,
        u = getUnpackedMatrixTextureShapeWidthHeight(r, n),
        l = u[0],
        p = u[1],
        c = r * n;
    1 === i.defaultNumChannels && c === a.length ? s = a : encodeMatrixToUnpackedArray(a, s = new Float32Array(c * o), o), uploadDataToTexture(e, t, l, p, s, i.textureFormatFloat);
  }

  function uploadMatrixToPackedTexture(e, t, r, n, a, o, i, s, u) {
    var l = getPackedMatrixTextureShapeWidthHeight(o, i),
        p = l[0],
        c = l[1],
        h = new Float32Array(getPackedRGBAArraySizeFromMatrixShape(o, i));
    encodeMatrixToPackedRGBA(s, r, n, a, h), uploadDataToTexture(e, t, p, c, h, e.RGBA);
  }

  function maybeCreateBufferFromOutputTexture(e, t, r, n, a) {
    var o = t;

    if (2 === ENV.get("WEBGL_VERSION")) {
      var i = e,
          s = i.createBuffer();
      callAndCheck(e, function () {
        return e.bindBuffer(i.PIXEL_PACK_BUFFER, s);
      });
      var u = 4 * getUnpackedArraySizeFromMatrixSize(r * n, a.downloadUnpackNumChannels);
      callAndCheck(e, function () {
        return e.bufferData(i.PIXEL_PACK_BUFFER, u, i.STREAM_READ);
      }), callAndCheck(e, function () {
        return i.readPixels(0, 0, n, r, e.RGBA, e.FLOAT, 0);
      }), callAndCheck(e, function () {
        return e.bindBuffer(i.PIXEL_PACK_BUFFER, null);
      }), o = s;
    }

    return o;
  }

  function downloadFloat32MatrixFromBuffer(e, t, r, n, a) {
    var o = e,
        i = new Float32Array(getUnpackedArraySizeFromMatrixSize(r * n, a.downloadUnpackNumChannels));
    o.bindBuffer(o.PIXEL_PACK_BUFFER, t), o.getBufferSubData(o.PIXEL_PACK_BUFFER, 0, i), o.bindBuffer(o.PIXEL_PACK_BUFFER, null);
    var s = new Float32Array(r * n);
    return decodeMatrixFromUnpackedArray(i, s, a.downloadUnpackNumChannels), s;
  }

  function downloadFloat32MatrixFromOutputTexture(e, t, r, n) {
    var a = getUnpackedMatrixTextureShapeWidthHeight(t, r),
        o = a[0],
        i = a[1],
        s = new Float32Array(getUnpackedArraySizeFromMatrixSize(t * r, n.downloadUnpackNumChannels));
    callAndCheck(e, function () {
      return e.readPixels(0, 0, o, i, n.downloadTextureFormat, e.FLOAT, s);
    });
    var u = new Float32Array(t * r);
    return decodeMatrixFromUnpackedArray(s, u, n.downloadUnpackNumChannels), u;
  }

  function downloadByteEncodedFloatMatrixFromOutputTexture(e, t, r, n) {
    var a = getUnpackedMatrixTextureShapeWidthHeight(t, r),
        o = a[0],
        i = a[1],
        s = new Uint8Array(getUnpackedArraySizeFromMatrixSize(t * r, 4));
    return callAndCheck(e, function () {
      return e.readPixels(0, 0, o, i, n.downloadTextureFormat, e.UNSIGNED_BYTE, s);
    }), new Float32Array(s.buffer);
  }

  function downloadPackedMatrixFromBuffer(e, t, r, n, a, o, i, s) {
    var u = e,
        l = new Float32Array(getPackedRGBAArraySizeFromMatrixShape(o, i));
    u.bindBuffer(u.PIXEL_PACK_BUFFER, t), u.getBufferSubData(u.PIXEL_PACK_BUFFER, 0, l), u.bindBuffer(u.PIXEL_PACK_BUFFER, null);
    var p = new Float32Array(sizeFromShape([r, n, a]));
    return decodeMatrixFromPackedRGBA(l, r, n, a, p), p;
  }

  function downloadMatrixFromPackedOutputTexture(e, t, r, n, a, o, i) {
    var s = getPackedMatrixTextureShapeWidthHeight(a, o),
        u = s[0],
        l = s[1],
        p = new Float32Array(getPackedRGBAArraySizeFromMatrixShape(a, o));
    callAndCheck(e, function () {
      return e.readPixels(0, 0, u, l, e.RGBA, e.FLOAT, p);
    });
    var c = new Float32Array(sizeFromShape([t, r, n]));
    return decodeMatrixFromPackedRGBA(p, t, r, n, c);
  }

  var gpgpu_util = Object.freeze({
    createVertexShader: createVertexShader$1,
    createVertexBuffer: createVertexBuffer,
    createIndexBuffer: createIndexBuffer,
    getTextureConfig: getTextureConfig,
    createFloat32MatrixTexture: createFloat32MatrixTexture,
    createFloat16MatrixTexture: createFloat16MatrixTexture,
    createUnsignedBytesMatrixTexture: createUnsignedBytesMatrixTexture,
    createPackedMatrixTexture: createPackedMatrixTexture,
    createFloat16PackedMatrixTexture: createFloat16PackedMatrixTexture,
    bindVertexProgramAttributeStreams: bindVertexProgramAttributeStreams,
    uploadPixelDataToTexture: uploadPixelDataToTexture,
    uploadMatrixToTexture: uploadMatrixToTexture,
    uploadMatrixToPackedTexture: uploadMatrixToPackedTexture,
    maybeCreateBufferFromOutputTexture: maybeCreateBufferFromOutputTexture,
    downloadFloat32MatrixFromBuffer: downloadFloat32MatrixFromBuffer,
    downloadFloat32MatrixFromOutputTexture: downloadFloat32MatrixFromOutputTexture,
    downloadByteEncodedFloatMatrixFromOutputTexture: downloadByteEncodedFloatMatrixFromOutputTexture,
    downloadPackedMatrixFromBuffer: downloadPackedMatrixFromBuffer,
    downloadMatrixFromPackedOutputTexture: downloadMatrixFromPackedOutputTexture
  }),
      GPGPUContext = function () {
    function e(e) {
      this.outputTexture = null, this.program = null, this.disposed = !1, this.autoDebugValidate = !1, this.vertexAttrsAreBound = !1, this.itemsToPoll = [], this.gl = null != e ? e : getWebGLContext(ENV.get("WEBGL_VERSION")), 1 === ENV.get("WEBGL_VERSION") ? (this.textureFloatExtension = getExtensionOrThrow(this.gl, "OES_texture_float"), this.colorBufferFloatExtension = this.gl.getExtension("WEBGL_color_buffer_float"), ENV.get("WEBGL_RENDER_FLOAT32_ENABLED") || (this.textureHalfFloatExtension = getExtensionOrThrow(this.gl, "OES_texture_half_float"), this.colorBufferHalfFloatExtension = this.gl.getExtension("EXT_color_buffer_half_float"))) : this.colorBufferFloatExtension = getExtensionOrThrow(this.gl, "EXT_color_buffer_float"), this.vertexBuffer = createVertexBuffer(this.gl), this.indexBuffer = createIndexBuffer(this.gl), this.framebuffer = createFramebuffer(this.gl), this.textureConfig = getTextureConfig(this.gl, this.textureHalfFloatExtension);
    }

    return e.prototype.dispose = function () {
      var e = this;

      if (!this.disposed) {
        null != this.program && console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."), null != this.outputTexture && console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");
        var t = this.gl;
        callAndCheck(t, function () {
          return t.finish();
        }), callAndCheck(t, function () {
          return t.bindFramebuffer(t.FRAMEBUFFER, null);
        }), callAndCheck(t, function () {
          return t.deleteFramebuffer(e.framebuffer);
        }), callAndCheck(t, function () {
          return t.bindBuffer(t.ARRAY_BUFFER, null);
        }), callAndCheck(t, function () {
          return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, null);
        }), callAndCheck(t, function () {
          return t.deleteBuffer(e.indexBuffer);
        }), this.disposed = !0;
      }
    }, e.prototype.enableAutomaticDebugValidation = function (e) {
      this.autoDebugValidate = e, enableDebugWebGLErrorChecking(e);
    }, e.prototype.createFloat32MatrixTexture = function (e, t) {
      return this.throwIfDisposed(), createFloat32MatrixTexture(this.gl, e, t, this.textureConfig);
    }, e.prototype.createFloat16MatrixTexture = function (e, t) {
      return this.throwIfDisposed(), createFloat16MatrixTexture(this.gl, e, t, this.textureConfig);
    }, e.prototype.createUnsignedBytesMatrixTexture = function (e, t) {
      return this.throwIfDisposed(), createUnsignedBytesMatrixTexture(this.gl, e, t, this.textureConfig);
    }, e.prototype.uploadPixelDataToTexture = function (e, t) {
      this.throwIfDisposed(), uploadPixelDataToTexture(this.gl, e, t);
    }, e.prototype.createFloat16PackedMatrixTexture = function (e, t) {
      return this.throwIfDisposed(), createFloat16PackedMatrixTexture(this.gl, e, t, this.textureConfig);
    }, e.prototype.createPackedMatrixTexture = function (e, t) {
      return this.throwIfDisposed(), createPackedMatrixTexture(this.gl, e, t, this.textureConfig);
    }, e.prototype.deleteMatrixTexture = function (e) {
      var t = this;
      this.throwIfDisposed(), this.outputTexture === e && (unbindColorTextureFromFramebuffer(this.gl, this.framebuffer), this.outputTexture = null), callAndCheck(this.gl, function () {
        return t.gl.deleteTexture(e);
      });
    }, e.prototype.uploadMatrixToTexture = function (e, t, r, n) {
      this.throwIfDisposed();
      var a = getNumChannels();
      return uploadMatrixToTexture(this.gl, e, t, r, n, a, this.textureConfig);
    }, e.prototype.uploadMatrixToPackedTexture = function (e, t, r, n, a, o, i) {
      return this.throwIfDisposed(), uploadMatrixToPackedTexture(this.gl, e, t, r, n, a, o, i, this.textureConfig);
    }, e.prototype.downloadFloat32MatrixFromOutputTexture = function (e, t, r) {
      var n = this;
      return this.downloadMatrixDriver(e, function () {
        return downloadFloat32MatrixFromOutputTexture(n.gl, t, r, n.textureConfig);
      });
    }, e.prototype.downloadByteEncodedFloatMatrixFromOutputTexture = function (e, t, r) {
      var n = this;
      return this.downloadMatrixDriver(e, function () {
        return downloadByteEncodedFloatMatrixFromOutputTexture(n.gl, t, r, n.textureConfig);
      });
    }, e.prototype.downloadPackedMatrixFromBuffer = function (e, t, r, n, a, o) {
      return downloadPackedMatrixFromBuffer(this.gl, e, t, r, n, a, o, this.textureConfig);
    }, e.prototype.downloadFloat32MatrixFromBuffer = function (e, t, r) {
      return downloadFloat32MatrixFromBuffer(this.gl, e, t, r, this.textureConfig);
    }, e.prototype.maybeCreateBufferFromTexture = function (e, t, r) {
      this.bindTextureToFrameBuffer(e);
      var n = maybeCreateBufferFromOutputTexture(this.gl, e, t, r, this.textureConfig);
      return this.unbindTextureToFrameBuffer(), n;
    }, e.prototype.createAndWaitForFence = function () {
      var e = this.createFence(this.gl);
      return this.pollFence(e);
    }, e.prototype.createFence = function (e) {
      var t,
          r,
          n = this;

      if (ENV.get("WEBGL_FENCE_API_ENABLED")) {
        var a = e,
            o = a.fenceSync(a.SYNC_GPU_COMMANDS_COMPLETE, 0);
        e.flush(), r = function r() {
          var e = a.clientWaitSync(o, 0, 0);
          return e === a.ALREADY_SIGNALED || e === a.CONDITION_SATISFIED;
        }, t = o;
      } else ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (t = this.beginQuery(), this.endQuery(), r = function r() {
        return n.isQueryAvailable(t, ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
      }) : r = function r() {
        return !0;
      };

      return {
        query: t,
        isFencePassed: r
      };
    }, e.prototype.downloadMatrixFromPackedTexture = function (e, t, r, n, a, o) {
      var i = this;
      return this.downloadMatrixDriver(e, function () {
        return downloadMatrixFromPackedOutputTexture(i.gl, t, r, n, a, o, i.textureConfig);
      });
    }, e.prototype.createProgram = function (e) {
      this.throwIfDisposed();
      var t = this.gl,
          r = createFragmentShader(t, e),
          n = createVertexShader$1(t),
          a = createProgram(t);
      return callAndCheck(t, function () {
        return t.attachShader(a, n);
      }), callAndCheck(t, function () {
        return t.attachShader(a, r);
      }), linkProgram(t, a), this.autoDebugValidate && validateProgram(t, a), this.vertexAttrsAreBound || (this.setProgram(a), this.vertexAttrsAreBound = bindVertexProgramAttributeStreams(t, this.program, this.vertexBuffer)), a;
    }, e.prototype.deleteProgram = function (e) {
      var t = this;
      this.throwIfDisposed(), e === this.program && (this.program = null), null != e && callAndCheck(this.gl, function () {
        return t.gl.deleteProgram(e);
      });
    }, e.prototype.setProgram = function (e) {
      var t = this;
      this.throwIfDisposed(), this.program = e, null != this.program && this.autoDebugValidate && validateProgram(this.gl, this.program), callAndCheck(this.gl, function () {
        return t.gl.useProgram(e);
      });
    }, e.prototype.getUniformLocation = function (e, t, r) {
      return void 0 === r && (r = !0), this.throwIfDisposed(), r ? getProgramUniformLocationOrThrow(this.gl, e, t) : getProgramUniformLocation(this.gl, e, t);
    }, e.prototype.getAttributeLocation = function (e, t) {
      var r = this;
      return this.throwIfDisposed(), callAndCheck(this.gl, function () {
        return r.gl.getAttribLocation(e, t);
      });
    }, e.prototype.getUniformLocationNoThrow = function (e, t) {
      return this.throwIfDisposed(), this.gl.getUniformLocation(e, t);
    }, e.prototype.setInputMatrixTexture = function (e, t, r) {
      this.throwIfDisposed(), this.throwIfNoProgram(), bindTextureToProgramUniformSampler(this.gl, this.program, e, t, r);
    }, e.prototype.setOutputMatrixTexture = function (e, t, r) {
      this.setOutputMatrixTextureDriver(e, r, t);
    }, e.prototype.setOutputPackedMatrixTexture = function (e, t, r) {
      this.throwIfDisposed();
      var n = getPackedMatrixTextureShapeWidthHeight(t, r),
          a = n[0],
          o = n[1];
      this.setOutputMatrixTextureDriver(e, a, o);
    }, e.prototype.setOutputMatrixWriteRegion = function (e, t, r, n) {
      this.setOutputMatrixWriteRegionDriver(r, e, n, t);
    }, e.prototype.setOutputPackedMatrixWriteRegion = function (e, t, r, n) {
      throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
    }, e.prototype.debugValidate = function () {
      null != this.program && validateProgram(this.gl, this.program), validateFramebuffer(this.gl);
    }, e.prototype.executeProgram = function () {
      this.throwIfDisposed(), this.throwIfNoProgram();
      var e = this.gl;
      this.autoDebugValidate && this.debugValidate(), callAndCheck(e, function () {
        return e.drawElements(e.TRIANGLES, 6, e.UNSIGNED_SHORT, 0);
      });
    }, e.prototype.blockUntilAllProgramsCompleted = function () {
      var e = this;
      this.throwIfDisposed(), callAndCheck(this.gl, function () {
        return e.gl.finish();
      });
    }, e.prototype.getQueryTimerExtension = function () {
      return null == this.disjointQueryTimerExtension && (this.disjointQueryTimerExtension = getExtensionOrThrow(this.gl, 2 === ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") ? "EXT_disjoint_timer_query_webgl2" : "EXT_disjoint_timer_query")), this.disjointQueryTimerExtension;
    }, e.prototype.getQueryTimerExtensionWebGL2 = function () {
      return this.getQueryTimerExtension();
    }, e.prototype.getQueryTimerExtensionWebGL1 = function () {
      return this.getQueryTimerExtension();
    }, e.prototype.beginQuery = function () {
      if (2 === ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")) {
        var e = this.gl,
            t = this.getQueryTimerExtensionWebGL2(),
            r = e.createQuery();
        return e.beginQuery(t.TIME_ELAPSED_EXT, r), r;
      }

      var n = this.getQueryTimerExtensionWebGL1(),
          a = n.createQueryEXT();
      return n.beginQueryEXT(n.TIME_ELAPSED_EXT, a), a;
    }, e.prototype.endQuery = function () {
      if (2 !== ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")) {
        var e = this.getQueryTimerExtensionWebGL1();
        e.endQueryEXT(e.TIME_ELAPSED_EXT);
      } else {
        var t = this.gl,
            r = this.getQueryTimerExtensionWebGL2();
        t.endQuery(r.TIME_ELAPSED_EXT);
      }
    }, e.prototype.waitForQueryAndGetTime = function (e) {
      return __awaiter(this, void 0, void 0, function () {
        var t = this;
        return __generator(this, function (r) {
          switch (r.label) {
            case 0:
              return [4, repeatedTry(function () {
                return t.disposed || t.isQueryAvailable(e, ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
              })];

            case 1:
              return r.sent(), [2, this.getQueryTime(e, ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))];
          }
        });
      });
    }, e.prototype.getQueryTime = function (e, t) {
      if (0 === t) return null;

      if (2 === t) {
        var r = this.gl;
        return r.getQueryParameter(e, r.QUERY_RESULT) / 1e6;
      }

      var n = this.getQueryTimerExtensionWebGL1();
      return n.getQueryObjectEXT(e, n.QUERY_RESULT_EXT) / 1e6;
    }, e.prototype.isQueryAvailable = function (e, t) {
      if (0 === t) return !0;

      if (2 === t) {
        var r = this.gl,
            n = this.getQueryTimerExtensionWebGL2(),
            a = r.getQueryParameter(e, r.QUERY_RESULT_AVAILABLE);
        return null == this.disjoint && (this.disjoint = this.gl.getParameter(n.GPU_DISJOINT_EXT)), a && !this.disjoint;
      }

      return a = (n = this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(e, n.QUERY_RESULT_AVAILABLE_EXT), null == this.disjoint && (this.disjoint = this.gl.getParameter(n.GPU_DISJOINT_EXT)), a && !this.disjoint;
    }, e.prototype.pollFence = function (e) {
      var t = this;
      return new Promise(function (r) {
        t.addItemToPoll(function () {
          return e.isFencePassed();
        }, function () {
          return r();
        });
      });
    }, e.prototype.pollItems = function () {
      for (var e = linearSearchLastTrue(this.itemsToPoll.map(function (e) {
        return e.isDoneFn;
      })), t = 0; t <= e; ++t) {
        (0, this.itemsToPoll[t].resolveFn)();
      }

      this.itemsToPoll = this.itemsToPoll.slice(e + 1);
    }, e.prototype.addItemToPoll = function (e, t) {
      var r = this;
      this.itemsToPoll.push({
        isDoneFn: e,
        resolveFn: t
      }), this.itemsToPoll.length > 1 || repeatedTry(function () {
        return r.pollItems(), 0 === r.itemsToPoll.length;
      });
    }, e.prototype.bindTextureToFrameBuffer = function (e) {
      this.throwIfDisposed(), bindColorTextureToFramebuffer(this.gl, e, this.framebuffer), this.autoDebugValidate && validateFramebuffer(this.gl);
    }, e.prototype.unbindTextureToFrameBuffer = function () {
      null != this.outputTexture ? (bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer), this.autoDebugValidate && validateFramebuffer(this.gl)) : unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);
    }, e.prototype.downloadMatrixDriver = function (e, t) {
      this.bindTextureToFrameBuffer(e);
      var r = t();
      return this.unbindTextureToFrameBuffer(), r;
    }, e.prototype.setOutputMatrixTextureDriver = function (e, t, r) {
      this.throwIfDisposed();
      var n = this.gl;
      bindColorTextureToFramebuffer(n, e, this.framebuffer), this.autoDebugValidate && validateFramebuffer(n), this.outputTexture = e, callAndCheck(n, function () {
        return n.viewport(0, 0, t, r);
      }), callAndCheck(n, function () {
        return n.scissor(0, 0, t, r);
      });
    }, e.prototype.setOutputMatrixWriteRegionDriver = function (e, t, r, n) {
      var a = this;
      this.throwIfDisposed(), callAndCheck(this.gl, function () {
        return a.gl.scissor(e, t, r, n);
      });
    }, e.prototype.throwIfDisposed = function () {
      if (this.disposed) throw new Error("Attempted to use disposed GPGPUContext.");
    }, e.prototype.throwIfNoProgram = function () {
      if (null == this.program) throw new Error("No GPU program is currently set.");
    }, e;
  }();

  function linearSearchLastTrue(e) {
    for (var t = 0; t < e.length && e[t](); ++t) {
      ;
    }

    return t - 1;
  }

  function compileProgram(e, t, r, n) {
    for (var a = t.userCode, o = r.map(function (e, r) {
      var n = {
        logicalShape: e.shape,
        texShape: e.isUniform ? null : e.texData.texShape,
        isUniform: e.isUniform,
        isPacked: !e.isUniform && e.texData.isPacked,
        flatOffset: null
      };
      return null != e.texData && null != e.texData.slice && e.texData.slice.flatOffset > 0 && (n.flatOffset = e.texData.slice.flatOffset), {
        name: t.variableNames[r],
        shapeInfo: n
      };
    }), i = o.map(function (e) {
      return e.shapeInfo;
    }), s = {
      logicalShape: n.shape,
      texShape: n.texData.texShape,
      isUniform: !1,
      isPacked: n.texData.isPacked,
      flatOffset: null
    }, u = makeShader(o, s, a, t.usesPackedTextures), l = e.createProgram(u), p = {}, c = 0; c < t.variableNames.length; c++) {
      var h = t.variableNames[c];
      p[h] = e.getUniformLocation(l, h, !1), p["offset" + h] = e.getUniformLocation(l, "offset" + h, !1);
    }

    return {
      program: t,
      source: u,
      webGLProgram: l,
      uniformLocations: p,
      gpgpu: e,
      inShapeInfos: i,
      outShapeInfo: s
    };
  }

  function validateBinaryAndProgram(e, t) {
    if (e.length !== t.length) throw Error("Binary was compiled with " + e.length + " inputs, but was executed with " + t.length + " inputs");
    e.forEach(function (e, r) {
      var n = e.logicalShape,
          a = t[r],
          o = a.shape;
      if (!arraysEqual(n, o)) throw Error("Binary was compiled with different shapes than the current args. Shapes " + n + " and " + o + " must match");

      if (!e.isUniform || !a.isUniform) {
        var i = e.texShape,
            s = a.isUniform ? null : a.texData.texShape;
        if (!arraysEqual(i, s)) throw Error("Binary was compiled with different texture shapes than the current args. Shape " + i + " and " + s + " must match");
      }
    });
  }

  function runProgram(e, t, r, n) {
    validateBinaryAndProgram(e.inShapeInfos, t), validateBinaryAndProgram([e.outShapeInfo], [r]);
    var a = r.texData.texture,
        o = r.texData.texShape,
        i = e.gpgpu;
    r.texData.isPacked ? i.setOutputPackedMatrixTexture(a, o[0], o[1]) : i.setOutputMatrixTexture(a, o[0], o[1]), i.setProgram(e.webGLProgram), t.forEach(function (t, r) {
      var n = e.program.variableNames[r],
          a = e.uniformLocations[n],
          o = e.uniformLocations["offset" + n];
      if (null != a) if (t.isUniform) {
        if (1 === sizeFromShape(t.shape)) i.gl.uniform1f(a, t.uniformValues[0]);else {
          var s = t.uniformValues;
          s instanceof Float32Array || (s = new Float32Array(s)), i.gl.uniform1fv(a, s);
        }
      } else null != t.texData.slice && null != o && i.gl.uniform1i(o, t.texData.slice.flatOffset), i.setInputMatrixTexture(t.texData.texture, a, r);
    }), null != n && n(i, e.webGLProgram), i.executeProgram();
  }

  function makeShaderKey(e, t, r) {
    var n = "";
    t.concat(r).forEach(function (e) {
      var t = null != e.texData && null != e.texData.slice && e.texData.slice.flatOffset > 0,
          r = e.isUniform ? "uniform" : e.texData.texShape;
      n += e.shape + "_" + r + "_" + t;
    });
    var a = e.userCode;
    return e.constructor.name + "_" + n + "_" + a;
  }

  var Im2ColProgram = function Im2ColProgram(e, t, r) {
    this.variableNames = ["A"], this.outputShape = e;
    var n = r.filterWidth,
        a = r.inChannels,
        o = r.strideWidth,
        i = r.strideHeight,
        s = r.padInfo,
        u = r.outWidth,
        l = r.dilationWidth,
        p = r.dilationHeight,
        c = s.left,
        h = s.top,
        d = a * n,
        f = getGlslDifferences();
    this.userCode = "\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            int blockIndex = rc.y + col;\n            int pos = rc.x + row;\n\n            if(blockIndex >= " + e[1] + " || pos >= " + e[0] + ") continue;\n\n            int offsetY = int(blockIndex / (" + u + ")) * " + i + " - " + h + ";\n            int d0 = offsetY + " + p + " * (pos / " + d + ");\n\n            if(d0 >= " + t[0] + " || d0 < 0) continue;\n\n            int offsetX = int(mod(float(blockIndex), " + u + ".) * " + o + ". - " + c + ".);\n            int d1 = offsetX + " + l + " * (int(mod(float(pos), " + d + ".) / " + a + ".));\n\n            if(d1 >= " + t[1] + " || d1 < 0) continue;\n\n            result[row * 2 + col] = getA(d0, d1, int(mod(float(pos), " + a + ".)));\n          }\n        }\n\n        " + f.output + " = result;\n      }\n    ";
  },
      LRNProgram = function LRNProgram(e, t, r, n, a) {
    this.variableNames = ["x"], this.outputShape = [];
    var o,
        i = t,
        s = e[3] - 1;
    this.outputShape = e;
    var u = "float(" + r + ") + float(" + n + ") * sum";
    o = .5 === a ? "inversesqrt(" + u + ")" : 1 === a ? "1.0/(" + u + ")" : "exp(log(" + u + ") * float(-" + a + "));", this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -" + i + "; j <= " + i + "; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  " + s + ") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * " + o + ";\n        setOutput(val);\n      }\n    ";
  },
      LRNGradProgram = function LRNGradProgram(e, t, r, n, a) {
    this.variableNames = ["inputImage", "outputImage", "dy"], this.outputShape = [], this.outputShape = e, this.depth = e[3], this.depthRadius = t, this.bias = r, this.alpha = n, this.beta = a, this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < " + this.depth + "; ++d) {\n          int depthBegin = int(max(0.0, float(d - " + t + ")));\n          int depthEnd = int(min(float(" + this.depth + "),\n              float(d + " + t + " + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = " + this.depth + ";\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(" + n + ") * norm + float(" + r + ");\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(" + n + ")\n                * float(" + a + ")\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * " + a + ");\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    ";
  },
      MaxPool2DBackpropProgram = function MaxPool2DBackpropProgram(e) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = e.inShape;
    var t = e.strideHeight,
        r = e.strideWidth,
        n = e.dilationHeight,
        a = e.effectiveFilterHeight,
        o = e.effectiveFilterWidth,
        i = a - 1 - e.padInfo.top,
        s = o - 1 - e.padInfo.left,
        u = a * o - 1;
    this.userCode = "\n      const ivec2 pads = ivec2(" + i + ", " + s + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + a + ";\n          wR += " + n + ") {\n          float dyR = float(dyRCorner + wR) / " + t + ".0;\n\n          if (dyR < 0.0 || dyR >= " + e.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " + o + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + r + ".0;\n\n            if (dyC < 0.0 || dyC >= " + e.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = " + u + " - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * " + o + " + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
  },
      MatMulProgram = function MatMulProgram(e, t, r, n, a, o) {
    void 0 === r && (r = !1), void 0 === n && (n = !1), void 0 === a && (a = !1), void 0 === o && (o = null), this.variableNames = ["matrixA", "matrixB"];
    var i = e[0],
        s = r ? e[2] : e[1],
        u = n ? t[1] : t[2],
        l = r ? e[1] : e[2];
    this.outputShape = [i, s, u];

    var p = function p(e, t) {
      return r ? "batch, " + t + " + " + e + ", aRow" : "batch, aRow, " + t + " + " + e;
    },
        c = function c(e, t) {
      return n ? "batch, bCol, " + t + " + " + e : "batch, " + t + " + " + e + ", bCol";
    },
        h = 4 * Math.floor(l / 4),
        d = l % 4,
        f = "",
        m = "";

    o && (f = "float activation(float x) {\n        " + o + "\n      }", m = "result = activation(result);");
    var g = a ? "result += getBiasAtOutCoords();" : "";
    a && this.variableNames.push("bias"), this.userCode = "\n      " + f + "\n\n      float dotARowBCol(int batch, int aRow, int bCol) {\n        float result = 0.0;\n        for (int i = 0; i < " + h + "; i += 4) {\n          vec4 a = vec4(\n            getMatrixA(" + p(0, "i") + "),\n            getMatrixA(" + p(1, "i") + "),\n            getMatrixA(" + p(2, "i") + "),\n            getMatrixA(" + p(3, "i") + ")\n          );\n          vec4 b = vec4(\n            getMatrixB(" + c(0, "i") + "),\n            getMatrixB(" + c(1, "i") + "),\n            getMatrixB(" + c(2, "i") + "),\n            getMatrixB(" + c(3, "i") + ")\n          );\n\n          result += dot(a, b);\n        }\n\n        if (" + (1 === d) + ") {\n          result += getMatrixA(" + p(0, h) + ") *\n            getMatrixB(" + c(0, h) + ");\n        } else if (" + (2 === d) + ") {\n          vec2 a = vec2(\n            getMatrixA(" + p(0, h) + "),\n            getMatrixA(" + p(1, h) + ")\n          );\n          vec2 b = vec2(\n            getMatrixB(" + c(0, h) + "),\n            getMatrixB(" + c(1, h) + ")\n          );\n          result += dot(a, b);\n        } else if (" + (3 === d) + ") {\n          vec3 a = vec3(\n            getMatrixA(" + p(0, h) + "),\n            getMatrixA(" + p(1, h) + "),\n            getMatrixA(" + p(2, h) + ")\n          );\n          vec3 b = vec3(\n            getMatrixB(" + c(0, h) + "),\n            getMatrixB(" + c(1, h) + "),\n            getMatrixB(" + c(2, h) + ")\n          );\n          result += dot(a, b);\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec3 resBRC = getOutputCoords();\n        float result = dotARowBCol(resBRC.x, resBRC.y, resBRC.z);\n\n        " + g + "\n\n        " + m + "\n\n        setOutput(result);\n      }\n    ";
  },
      MatMulPackedProgram = function MatMulPackedProgram(e, t, r, n, a, o, i) {
    void 0 === n && (n = !1), void 0 === a && (a = !1), void 0 === o && (o = !1), void 0 === i && (i = null), this.variableNames = ["matrixA", "matrixB"], this.usesPackedTextures = !0, this.outputShape = r;
    var s = n ? e[0] : e[1],
        u = Math.ceil(s / 2),
        l = n ? "i * 2, rc.x" : "rc.x, i * 2",
        p = a ? "rc.y, i * 2" : "i * 2, rc.y",
        c = n ? ["a.xxyy", "a.zzww"] : ["a.xxzz", "a.yyww"],
        h = a ? ["b.xzxz", "b.ywyw"] : ["b.xyxy", "b.zwzw"],
        d = "",
        f = "";
    i && (d = "vec4 activation(vec4 x) {\n        " + i + "\n      }", f = "result = activation(result);");
    var m = o ? "result += getBiasAtOutCoords();" : "";
    o && this.variableNames.push("bias"), this.userCode = "\n      " + d + "\n\n      const float sharedDimension = " + u + ".0;\n\n      vec4 dot2x2ARowBCol(ivec2 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < " + u + "; i++) {\n          vec4 a = getMatrixA(" + l + ");\n          vec4 b = getMatrixB(" + p + ");\n\n          result += (" + c[0] + " * " + h[0] + ") + (" + c[1] + " * " + h[1] + ");\n        }\n        return result;\n      }\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        " + m + "\n\n        " + f + "\n\n        setOutput(result);\n      }\n    ";
  },
      MultinomialProgram = function () {
    function e(e, t, r) {
      this.variableNames = ["probs"], this.outputShape = [e, r], this.userCode = "\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < " + (t - 1) + "; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(" + (t - 1) + "));\n      }\n    ";
    }

    return e.prototype.getCustomSetupFunc = function (e) {
      var t = this;
      return function (r, n) {
        null == t.seedLoc && (t.seedLoc = r.getUniformLocation(n, "seed")), r.gl.uniform1f(t.seedLoc, e);
      };
    }, e;
  }(),
      OneHotProgram = function OneHotProgram(e, t, r, n) {
    this.variableNames = ["indices"], this.outputShape = [e, t], this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(" + n + "), float(" + r + "),\n                      float(index == coords.y)));\n      }\n    ";
  };

  function getVecChannels(e, t) {
    return ["x", "y", "z", "w", "u", "v"].slice(0, t).map(function (t) {
      return e + "." + t;
    });
  }

  function getChannels(e, t) {
    return 1 === t ? [e] : getVecChannels(e, t);
  }

  function getSourceCoords$1(e, t) {
    if (1 === e) return "rc";

    for (var r = "", n = 0; n < e; n++) {
      r += t[n], n < e - 1 && (r += ",");
    }

    return r;
  }

  var PackProgram = function PackProgram(e) {
    this.variableNames = ["A"], this.isPackShader = !0, this.outputShape = e;
    var t = e.length;
    if (0 === t) this.userCode = "\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else {
      var r = getChannels("rc", t),
          n = getCoordsDataType(t),
          a = getOutOfBoundsCondition(t, e, r),
          o = getSetup(t, e[e.length - 1], e[e.length - 2], r),
          i = getOutput(e, r);
      this.userCode = "\n        void main() {\n          " + n + " rc = getOutputCoords();\n\n          if(" + a + ") {\n            setOutput(vec4(0));\n          } else {\n            " + o + "\n\n            setOutput(vec4(" + i + "));\n          }\n        }\n      ";
    }
  };

  function getSourceCoordsArr(e, t) {
    for (var r = [], n = 0; n <= 1; n++) {
      for (var a = 0; a <= 1; a++) {
        for (var o = (0 === n ? "r" : "rp1") + ", " + (0 === a ? "c" : "cp1"), i = 2; i < e; i++) {
          o = t[t.length - 1 - i] + "," + o;
        }

        r.push(o);
      }
    }

    return r;
  }

  function getOutOfBoundsCondition(e, t, r) {
    if (1 === e) return "rc > " + t[0];

    for (var n = "", a = e - 2; a < e; a++) {
      n += r[a] + " >= " + t[a], a < e - 1 && (n += "||");
    }

    return n;
  }

  function getSetup(e, t, r, n) {
    if (1 === e) return "";
    var a = n.slice(-2);
    return "\n    int r = " + a[0] + ";\n    int c = " + a[1] + ";\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= " + t + ";\n    bool rEdge = rp1 >= " + r + ";\n  ";
  }

  function getOutput(e, t) {
    var r = e.length,
        n = getSourceCoordsArr(r, t);
    return 1 === r ? "getA(rc),\n            rc + 1 >= " + e[0] + " ? 0. : getA(rc + 1),\n            0, 0" : "getA(" + n[0] + "),\n          cEdge ? 0. : getA(" + n[1] + "),\n          rEdge ? 0. : getA(" + n[2] + "),\n          rEdge || cEdge ? 0. : getA(" + n[3] + ")";
  }

  var PadProgram = function PadProgram(e, t, r) {
    this.variableNames = ["x"], this.outputShape = t.map(function (t, r) {
      return t[0] + e[r] + t[1];
    });
    var n = e.length,
        a = getCoordsDataType(n),
        o = t.map(function (e) {
      return e[0];
    }).join(","),
        i = t.map(function (t, r) {
      return t[0] + e[r];
    }).join(","),
        s = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, n);
    this.userCode = 1 !== n ? "\n      " + a + " start = " + a + "(" + o + ");\n      " + a + " end = " + a + "(" + i + ");\n\n      void main() {\n        " + a + " outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(" + r + "));\n        } else {\n          " + a + " coords = outC - start;\n          setOutput(getX(" + s + "));\n        }\n      }\n    " : "\n        int start = " + o + ";\n        int end = " + i + ";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(" + r + "));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      ";
  },
      PadPackedProgram = function PadPackedProgram(e, t, r) {
    this.variableNames = ["x"], this.usesPackedTextures = !0, this.outputShape = t.map(function (t, r) {
      return t[0] + e[r] + t[1];
    });

    for (var n = e.length, a = getCoordsDataType(n), o = t.map(function (e) {
      return e[0];
    }).join(","), i = t.map(function (t, r) {
      return t[0] + e[r];
    }).join(","), s = getChannels("rc", n), u = getChannels("source", n), l = s[n - 1] + " < " + this.outputShape[n - 1], p = 1 === n ? "source" : "vec2(" + u.slice(-2).join() + ")", c = [a + " rc = outputLoc;", s[n - 1] + " += 1;\n       if(" + l + ") {\n      ", 1 === n ? "" : "}\n       rc = outputLoc;\n       " + s[n - 2] + " += 1;\n       if(" + s[n - 2] + " < " + this.outputShape[n - 2] + ") {", 1 === n ? "" : "  " + s[n - 1] + " += 1;\n         if(" + l + ") {"], h = 1 === n ? "rc < start || rc >= end" : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))", d = "", f = 0, m = 1 === n ? 2 : 4; f < m; f++) {
      d += "\n        " + c[f] + "\n        if (" + h + ") {\n          result[" + f + "] = float(" + r + ");\n        } else {\n          " + a + " source = rc - start;\n          result[" + f + "] = getChannel(getX(" + u.join() + "), " + p + ");\n        }\n      ";
    }

    d += 1 === n ? "} " : "}}", this.userCode = "\n      const " + a + " start = " + a + "(" + o + ");\n      const " + a + " end = " + a + "(" + i + ");\n\n      void main() {\n        " + a + " outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        " + d + "\n        setOutput(result);\n      }\n    ";
  },
      Pool2DProgram = function Pool2DProgram(e, t, r) {
    if (this.variableNames = ["x"], "avg" === t && r) throw new Error("Cannot compute positions for average pool.");
    var n = e.filterWidth,
        a = e.strideHeight,
        o = e.strideWidth,
        i = e.dilationHeight,
        s = e.dilationWidth,
        u = e.effectiveFilterHeight,
        l = e.effectiveFilterWidth,
        p = e.padInfo.top,
        c = e.padInfo.left;
    this.outputShape = e.outShape;
    var h = "avg" === t,
        d = "0.0";
    if (h || (d = "-1.0 / 1e-20"), r) this.userCode = "\n        const ivec2 strides = ivec2(" + a + ", " + o + ");\n        const ivec2 pads = ivec2(" + p + ", " + c + ");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < " + u + ";\n              wR += " + i + ") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= " + e.inHeight + ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " + l + ";\n                wC += " + s + ") {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= " + e.inWidth + ") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = wR * " + l + " + wC;\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";else {
      var f = t + "(" + t + "(" + t + "(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";
      "avg" === t && (f = "avgValue / count");
      var m = 4 * Math.floor(n / 4),
          g = n % 4,
          y = "\n      if (" + h + ") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";
      this.userCode = "\n      const ivec2 strides = ivec2(" + a + ", " + o + ");\n      const ivec2 pads = ivec2(" + p + ", " + c + ");\n      const float initializationValue = " + d + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= " + e.inWidth + ") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(" + d + ");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < " + u + ";\n            wR += " + i + ") {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= " + e.inHeight + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + m + "; wC += 4) {\n            int xC = xCCorner + wC * " + s + ";\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " + s + ", d),\n              getValue(batch, xR, xC + 2 * " + s + ", d),\n              getValue(batch, xR, xC + 3 * " + s + ", d)\n            );\n\n            " + y + "\n          }\n\n          int xC = xCCorner + " + m + ";\n          if (" + (1 === g) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            " + y + "\n          } else if (" + (2 === g) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " + s + ", d),\n              initializationValue,\n              initializationValue\n            );\n\n            " + y + "\n          } else if (" + (3 === g) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " + s + ", d),\n              getValue(batch, xR, xC + 2 * " + s + ", d),\n              initializationValue\n            );\n\n            " + y + "\n          }\n        }\n        setOutput(" + f + ");\n      }\n    ";
    }
  },
      ReduceProgram = function ReduceProgram(e, t) {
    this.variableNames = ["x"];
    var r = e.windowSize,
        n = e.batchSize,
        a = e.inSize,
        o = Math.ceil(a / r);
    this.outputShape = [n, o];
    var i = "0.0",
        s = "";
    "prod" === t ? i = "1.0" : "min" === t ? (i = "1.0 / 1e-20", s = "min") : "max" === t && (i = "-1.0 / 1e-20", s = "max");
    var u = t + "(" + t + "(" + t + "(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";
    "sum" === t ? u = "sumValue" : "prod" === t ? u = "prodValue" : "all" === t ? u = "allValue" : "any" === t && (u = "anyValue");
    var l = 4 * Math.floor(r / 4),
        p = r % 4,
        c = "\n      if (" + ("sum" === t) + ") {\n        sumValue += dot(values, ones);\n      } else if (" + ("prod" === t) + ") {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = " + s + "(values, minMaxValue);\n      }\n    ",
        h = "vec4";
    "all" === t ? (i = "1.0", c = "\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ", h = "bvec4") : "any" === t && (i = "0.0", c = "\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ", h = "bvec4");
    var d = "";
    a % r > 0 && (d = "\n        if (inIdx < 0 || inIdx >= " + a + ") {\n          return initializationValue;\n        }\n      "), this.userCode = "\n      const float initializationValue = " + i + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        " + d + "\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " + r + ";\n\n        vec4 minMaxValue = vec4(" + i + ");\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < " + l + "; i += 4) {\n          int inIdx = inOffset + i;\n          " + h + " values = " + h + "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          " + c + "\n        }\n\n        int inIdx = inOffset + " + l + ";\n        if (" + (1 === p) + ") {\n          " + h + " values = " + h + "(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          " + c + "\n        } else if (" + (2 === p) + ") {\n          " + h + " values = " + h + "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          " + c + "\n        } else if (" + (3 === p) + ") {\n          " + h + " values = " + h + "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          " + c + "\n        }\n        setOutput(" + u + ");\n      }\n    ";
  },
      ReshapePackedProgram = function ReshapePackedProgram(e, t) {
    this.variableNames = ["A"], this.usesPackedTextures = !0, this.outputShape = e;

    for (var r = "", n = 0; n < 4; n++) {
      var a = "thisRC = rc;";
      n % 2 == 1 && (a += "thisRC.z += 1;"), n > 1 && (a += "thisRC.y += 1;"), r += "\n        " + a + "\n        " + (n > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : "") + "\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[" + n + "] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        " + (n > 0 ? "}" : "") + "\n      ";
    }

    this.userCode = "\n      " + getReshapedInputCoords(t) + "\n      " + getFlatIndex(e) + "\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = " + e[1] + ";\n        int cols = " + e[2] + ";\n\n        " + r + "\n\n        setOutput(result);\n      }\n    ";
  };

  function getFlatIndex(e) {
    return "\n    int getFlatIndex(ivec3 coords) {\n      return round(" + dotify(["coords.x", "coords.y", "coords.z"], computeStrides(e).map(function (e) {
      return e.toString();
    }).concat(["1."])) + ");\n    }\n  ";
  }

  function getReshapedInputCoords(e) {
    return "\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      " + getLogicalCoordinatesFromFlatIndex(["r", "c", "d"], e) + "\n      return ivec3(r, c, d);\n    }\n  ";
  }

  var ResizeBilinearBackpropProgram = function ResizeBilinearBackpropProgram(e, t, r) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = t.shape;
    var n = t.shape,
        a = n[1],
        o = n[2],
        i = e.shape,
        s = i[1],
        u = i[2],
        l = [r && s > 1 ? a - 1 : a, r && u > 1 ? o - 1 : o],
        p = [r && s > 1 ? s - 1 : s, r && u > 1 ? u - 1 : u],
        c = l[0] / p[0],
        h = l[1] / p[1],
        d = 1 / c,
        f = 1 / h,
        m = 2 * Math.ceil(d) + 2,
        g = 2 * Math.ceil(f) + 2;
    this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(" + c + ");\n        const float widthScale = float(" + h + ");\n\n        const float invHeightScale = float(" + d + ");\n        const float invWidthScale = float(" + f + ");\n\n        const int winHeight = int(" + m + ");\n        const int winWidth = int(" + g + ");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= " + s + ") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= " + u + ") {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), " + (a - 1) + ".0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), " + (o - 1) + ".0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ";
  },
      ResizeBilinearProgram = function ResizeBilinearProgram(e, t, r, n) {
    this.variableNames = ["A"], this.outputShape = [];
    var a = e[0],
        o = e[1],
        i = e[2],
        s = e[3];
    this.outputShape = [a, t, r, s];
    var u = [n && t > 1 ? o - 1 : o, n && r > 1 ? i - 1 : i],
        l = [n && t > 1 ? t - 1 : t, n && r > 1 ? r - 1 : r];
    this.userCode = "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " + u[0] / l[0] + ",\n          " + u[1] / l[1] + ");\n      const vec2 inputShapeRC = vec2(" + o + ".0, " + i + ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    ";
  },
      ResizeNearestNeigborBackpropProgram = function ResizeNearestNeigborBackpropProgram(e, t, r) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = t.shape;
    var n = t.shape,
        a = n[1],
        o = n[2],
        i = e.shape,
        s = i[1],
        u = i[2],
        l = [r && s > 1 ? a - 1 : a, r && u > 1 ? o - 1 : o],
        p = [r && s > 1 ? s - 1 : s, r && u > 1 ? u - 1 : u],
        c = l[0] / p[0],
        h = l[1] / p[1],
        d = 1 / c,
        f = 1 / h,
        m = 2 * Math.ceil(d) + 2,
        g = 2 * Math.ceil(f) + 2;
    this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(" + c + ");\n        const float widthScale = float(" + h + ");\n\n        const float invHeightScale = float(" + d + ");\n        const float invWidthScale = float(" + f + ");\n\n        const int winHeight = int(" + m + ");\n        const int winWidth = int(" + g + ");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= " + s + ") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= " + u + ") {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(" + l[0] + ") *\n                (float(dyR) / float(" + p[0] + "));\n\n            float sourceFracCol =\n                float(" + l[1] + ") *\n                  (float(dyC) / float(" + p[1] + "));\n\n            int sourceNearestRow = int(min(\n                float(int(" + a + ") - 1),\n                " + r + " ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(" + o + ") - 1),\n                " + r + " ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ";
  },
      ResizeNearestNeighborProgram = function ResizeNearestNeighborProgram(e, t, r, n) {
    this.variableNames = ["A"], this.outputShape = [];
    var a = e[0],
        o = e[1],
        i = e[2],
        s = e[3];
    this.outputShape = [a, t, r, s];
    var u = [n && t > 1 ? o - 1 : o, n && r > 1 ? i - 1 : i],
        l = [n && t > 1 ? t - 1 : t, n && r > 1 ? r - 1 : r],
        p = n ? "0.5" : "0.0";
    this.userCode = "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " + u[0] / l[0] + ",\n          " + u[1] / l[1] + ");\n      const vec2 inputShapeRC = vec2(" + o + ".0, " + i + ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + " + p + ")));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    ";
  },
      ReverseProgram = function ReverseProgram(e, t) {
    this.variableNames = ["x"];
    var r = e.length;
    if (r > 4) throw new Error("WebGL backend: Reverse of rank-" + r + " tensor is not yet supported");

    if (this.outputShape = e, 1 !== r) {
      var n = e.map(function (r, n) {
        return function (r) {
          return -1 !== t.indexOf(r) && 1 !== e[r] ? e[r] + " - coords[" + r + "] - 1" : "coords[" + r + "]";
        }(n);
      }).join(","),
          a = getCoordsDataType(r);
      this.userCode = "\n      void main() {\n        " + a + " coords = getOutputCoords();\n        setOutput(getX(" + n + "));\n      }\n    ";
    } else this.userCode = "\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(" + e[0] + " - coord - 1));\n        }\n      ";
  },
      ScatterProgram = function ScatterProgram(e, t, r, n, a, o, i) {
    void 0 === i && (i = !0), this.variableNames = ["updates", "indices", "defaultValue"], this.outputShape = o;
    var s = getCoordsDataType(a.length),
        u = getCoordsDataType(o.length),
        l = "";
    1 === r ? l = "i" : 2 === r && (l = "i, j");
    var p = "getIndices(" + l + ")",
        c = "";
    1 === n ? c = "i" : 2 === n && (c = "i, coords[1]");
    var h = "getUpdates(" + c + ")",
        d = t > 1 ? "strides[j]" : "strides";
    this.userCode = "\n        " + s + " strides = " + s + "(" + a + ");\n\n        void main() {\n          " + u + " coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < " + e + "; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < " + t + "; j++) {\n              int index = round(" + p + ");\n              flattenedIndex += index * " + d + ";\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += " + h + ";\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      ";
  },
      SegmentOpProgram = function SegmentOpProgram(e, t) {
    this.variableNames = ["x", "segmentIds"];
    var r = e.windowSize,
        n = e.batchSize,
        a = e.inSize,
        o = e.numSegments,
        i = o * Math.ceil(a / r);
    this.outputShape = [n, i];
    var s = 4 * Math.floor(r / 4),
        u = r % 4,
        l = "\n        sumValue += dot(values, segFilter);\n    ",
        p = "";
    a % r > 0 && (p = "\n        if (inIdx < 0 || inIdx >= " + a + ") {\n          return initializationValue;\n        }\n      ");
    var c = "";
    a % r > 0 && (c = "\n        if (inIdx < 0 || inIdx >= " + a + ") {\n          return -1.0;\n        }\n      "), this.userCode = "\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        " + p + "\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        " + c + "\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          " + o + ")) * float(" + r + "));\n        int currentSeg = int(mod(float(outIdx), float(" + o + ")));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < " + s + "; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          " + l + "\n        }\n\n        int inIdx = inOffset + " + s + ";\n        if (" + (1 === u) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          " + l + "\n        } else if (" + (2 === u) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          " + l + "\n        } else if (" + (3 === u) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          " + l + "\n        }\n        setOutput(sumValue);\n      }\n    ";
  },
      SelectProgram = function SelectProgram(e, t, r) {
    var n, a;
    if (this.variableNames = ["c", "a", "b"], this.outputShape = t, r > 4) throw Error("Where for rank " + r + " is not yet supported");
    if (1 === r) a = "resRC", n = "resRC";else {
      for (var o = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], i = [], s = [], u = 0; u < t.length; u++) {
        s.push("" + o[u]), u < e && i.push("" + o[u]);
      }

      n = i.join(), a = s.join();
    }
    var l = getCoordsDataType(r);
    this.userCode = "\n      void main() {\n        " + l + " resRC = getOutputCoords();\n        float cVal = getC(" + n + ");\n        if (cVal >= 1.0) {\n          setOutput(getA(" + a + "));\n        } else {\n          setOutput(getB(" + a + "));\n        }\n      }\n    ";
  },
      SliceProgram = function () {
    function e(e) {
      this.variableNames = ["source"], this.outputShape = e, this.rank = e.length;
      var t,
          r = getCoordsDataType(this.rank),
          n = "uniform int start[" + this.rank + "];",
          a = getCoords$1(this.rank);
      t = "\n        " + r + " sourceLoc;\n        " + r + " coords = getOutputCoords();\n        " + e.map(function (e, t) {
        return "sourceLoc." + coords[t] + " = start[" + t + "] + coords." + coords[t] + ";";
      }).join("\n") + "\n      ", this.userCode = "\n      " + n + "\n      void main() {\n        " + t + "\n        setOutput(getSource(" + a + "));\n      }\n    ";
    }

    return e.prototype.getCustomSetupFunc = function (e) {
      var t = this;
      if (e.length !== this.rank) throw Error("The rank (" + this.rank + ") of the program must match the length of start (" + e.length + ")");
      return function (r, n) {
        null == t.startLoc && (t.startLoc = r.getUniformLocationNoThrow(n, "start"), null == t.startLoc) || r.gl.uniform1iv(t.startLoc, e);
      };
    }, e;
  }(),
      coords = ["x", "y", "z", "w", "u", "v"];

  function getCoords$1(e) {
    if (1 === e) return "sourceLoc";
    if (e <= 6) return coords.slice(0, e).map(function (e) {
      return "sourceLoc." + e;
    }).join(",");
    throw Error("Slicing for rank " + e + " is not yet supported");
  }

  var StridedSliceProgram = function StridedSliceProgram(e, t, r, n) {
    this.variableNames = ["x"];
    var a = r.filter(function (e, t) {
      return -1 === n.indexOf(t);
    });
    this.outputShape = a;
    var o = r.length,
        i = getCoordsDataType(r.length),
        s = getCoordsDataType(a.length),
        u = "";
    if (1 === o) u = "coords * strides + begin";else {
      var l = 0;
      u = r.map(function (e, t) {
        return -1 === n.indexOf(t) ? (l++, 1 === a.length ? "coords * strides[" + t + "] + begin[" + t + "]" : "coords[" + (l - 1) + "] * strides[" + t + "] + begin[" + t + "]") : "begin[" + t + "]";
      }).join(",");
    }
    this.userCode = "\n      " + i + " begin = " + i + "(" + e + ");\n      " + i + " strides = " + i + "(" + t + ");\n\n      void main() {\n        " + s + " coords = getOutputCoords();\n        setOutput(getX(" + u + "));\n      }\n    ";
  },
      TextureManager = function () {
    function e(e) {
      this.gpgpu = e, this.numUsedTextures = 0, this.numFreeTextures = 0, this.freeTextures = {}, this.logEnabled = !1, this.usedTextures = {};
    }

    return e.prototype.acquireTexture = function (e, t, r) {
      var n,
          a = getPhysicalFromLogicalTextureType(t, r),
          o = getKeyFromTextureShape(e, a, r);

      if (o in this.freeTextures || (this.freeTextures[o] = []), o in this.usedTextures || (this.usedTextures[o] = []), this.freeTextures[o].length > 0) {
        this.numFreeTextures--, this.numUsedTextures++, this.log();
        var i = this.freeTextures[o].shift();
        return this.usedTextures[o].push(i), i;
      }

      return this.numUsedTextures++, this.log(), a === PhysicalTextureType.PACKED_2X2_FLOAT32 ? n = this.gpgpu.createPackedMatrixTexture(e[0], e[1]) : a === PhysicalTextureType.PACKED_2X2_FLOAT16 ? n = this.gpgpu.createFloat16PackedMatrixTexture(e[0], e[1]) : a === PhysicalTextureType.UNPACKED_FLOAT32 ? n = this.gpgpu.createFloat32MatrixTexture(e[0], e[1]) : a === PhysicalTextureType.UNPACKED_FLOAT16 ? n = this.gpgpu.createFloat16MatrixTexture(e[0], e[1]) : a === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE && (n = this.gpgpu.createUnsignedBytesMatrixTexture(e[0], e[1])), this.usedTextures[o].push(n), n;
    }, e.prototype.releaseTexture = function (e, t, r, n) {
      if (null != this.freeTextures) {
        var a = getKeyFromTextureShape(t, getPhysicalFromLogicalTextureType(r, n), n);
        a in this.freeTextures || (this.freeTextures[a] = []), this.freeTextures[a].push(e), this.numFreeTextures++, this.numUsedTextures--;
        var o = this.usedTextures[a],
            i = o.indexOf(e);
        if (i < 0) throw new Error("Cannot release a texture that was never provided by this texture manager");
        o.splice(i, 1), this.log();
      }
    }, e.prototype.log = function () {
      if (this.logEnabled) {
        var e = this.numFreeTextures + this.numUsedTextures;
        console.log("Free/Used", this.numFreeTextures + " / " + this.numUsedTextures, "(" + e + ")");
      }
    }, e.prototype.getNumUsedTextures = function () {
      return this.numUsedTextures;
    }, e.prototype.getNumFreeTextures = function () {
      return this.numFreeTextures;
    }, e.prototype.dispose = function () {
      var e = this;

      if (null != this.freeTextures) {
        for (var t in this.freeTextures) {
          this.freeTextures[t].forEach(function (t) {
            e.gpgpu.deleteMatrixTexture(t);
          });
        }

        for (var t in this.usedTextures) {
          this.usedTextures[t].forEach(function (t) {
            e.gpgpu.deleteMatrixTexture(t);
          });
        }

        this.freeTextures = null, this.usedTextures = null, this.numUsedTextures = 0, this.numFreeTextures = 0;
      }
    }, e;
  }();

  function getPhysicalFromLogicalTextureType(e, t) {
    if (e === TextureUsage.UPLOAD) return t ? PhysicalTextureType.PACKED_2X2_FLOAT32 : PhysicalTextureType.UNPACKED_FLOAT32;
    if (e === TextureUsage.RENDER || null == e) return t ? ENV.get("WEBGL_RENDER_FLOAT32_ENABLED") ? PhysicalTextureType.PACKED_2X2_FLOAT32 : PhysicalTextureType.PACKED_2X2_FLOAT16 : ENV.get("WEBGL_RENDER_FLOAT32_ENABLED") ? PhysicalTextureType.UNPACKED_FLOAT32 : PhysicalTextureType.UNPACKED_FLOAT16;
    if (e === TextureUsage.DOWNLOAD || e === TextureUsage.PIXELS) return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;
    throw new Error("Unknown logical texture type " + e);
  }

  function getKeyFromTextureShape(e, t, r) {
    return e[0] + "_" + e[1] + "_" + t + "_" + r;
  }

  var TileProgram = function TileProgram(e, t) {
    this.variableNames = ["A"];

    for (var r = new Array(e.length), n = 0; n < r.length; n++) {
      r[n] = e[n] * t[n];
    }

    this.outputShape = r, this.rank = r.length;
    var a = getCoordsDataType(this.rank),
        o = getSourceCoords$2(e);
    this.userCode = "\n      void main() {\n        " + a + " resRC = getOutputCoords();\n        setOutput(getA(" + o + "));\n      }\n    ";
  };

  function getSourceCoords$2(e) {
    var t = e.length;
    if (t > 5) throw Error("Tile for rank " + t + " is not yet supported");
    if (1 === t) return "imod(resRC, " + e[0] + ")";

    for (var r = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u"], n = [], a = 0; a < e.length; a++) {
      n.push("imod(" + r[a] + ", " + e[a] + ")");
    }

    return n.join();
  }

  var TransposeProgram = function TransposeProgram(e, t) {
    this.variableNames = ["A"];

    for (var r = new Array(e.length), n = 0; n < r.length; n++) {
      r[n] = e[t[n]];
    }

    this.outputShape = r, this.rank = r.length;
    var a = getCoordsDataType(this.rank),
        o = getSwitchedCoords(t);
    this.userCode = "\n    void main() {\n      " + a + " resRC = getOutputCoords();\n      setOutput(getA(" + o + "));\n    }\n    ";
  };

  function getSwitchedCoords(e) {
    var t = e.length;
    if (t > 6) throw Error("Transpose for rank " + t + " is not yet supported");

    for (var r = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u", "resRC.v"], n = new Array(t), a = 0; a < e.length; a++) {
      n[e[a]] = r[a];
    }

    return n.join();
  }

  var ERF_P = .3275911,
      ERF_A1 = .254829592,
      ERF_A2 = -.284496736,
      ERF_A3 = 1.421413741,
      ERF_A4 = -1.453152027,
      ERF_A5 = 1.061405429,
      SELU_SCALEALPHA = 1.7580993408473768,
      SELU_SCALE = 1.0507009873554805,
      UnaryOpProgram = function () {
    function e(e, t) {
      this.variableNames = ["A"], this.outputShape = e, this.userCode = "\n      uniform float NAN;\n      float unaryOperation(float x) {\n        " + t + "\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ";
    }

    return e.prototype.getCustomSetupFunc = function () {
      var e = this;
      return function (t, r) {
        null == e.startLoc && (e.startLoc = t.getUniformLocationNoThrow(r, "NAN"), null == e.startLoc) || t.gl.uniform1f(e.startLoc, NaN);
      };
    }, e;
  }(),
      CHECK_NAN_SNIPPET$1 = "if (isNaN(x)) return x;",
      LINEAR = "return x;",
      ABS = "return abs(x);",
      RELU = CHECK_NAN_SNIPPET$1 + "\n  return (x < 0.0) ? 0.0 : x;\n",
      ELU = "return (x >= 0.0) ? x : (exp(x) - 1.0);",
      SELU = "\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = " + SELU_SCALEALPHA + ";\n  float scale = " + SELU_SCALE + ";\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n";

  function STEP(e) {
    return void 0 === e && (e = 0), CHECK_NAN_SNIPPET$1 + "\n    return x > 0.0 ? 1.0 : float(" + e + ");\n  ";
  }

  var NEG = "return -x;",
      CEIL = "return ceil(x);",
      FLOOR = "return floor(x);",
      SIGN = "\n  if (isNaN(x)) { return 0.0; }\n  return sign(x);\n",
      ROUND = "\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n",
      EXP = "return exp(x);",
      EXPM1 = "return exp(x) - 1.0;",
      LOG = "if (x < 0.0) return NAN;\n  return log(x);",
      LOG1P = "return log(1.0 + x);",
      SQRT = "return sqrt(x);",
      RSQRT = "return inversesqrt(x);",
      SIGMOID = "return 1.0 / (1.0 + exp(-1.0 * x));",
      SOFTPLUS = "\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n",
      SIN = CHECK_NAN_SNIPPET$1 + "\n  return sin(x);\n",
      COS = CHECK_NAN_SNIPPET$1 + "\n  return cos(x);\n",
      TAN = "return tan(x);",
      ASIN = "return asin(x);",
      ACOS = "return acos(x);",
      ATAN = CHECK_NAN_SNIPPET$1 + "\n  return atan(x);\n",
      SINH = "\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n",
      COSH = "\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n",
      TANH = "\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n",
      ASINH = "return log(x + sqrt(x * x + 1.0));",
      ACOSH = CHECK_NAN_SNIPPET$1 + "\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));",
      ATANH = CHECK_NAN_SNIPPET$1 + "\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;",
      ERF = '\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ' + ERF_P + ";\n  float a1 = " + ERF_A1 + ";\n  float a2 = " + ERF_A2 + ";\n  float a3 = " + ERF_A3 + ";\n  float a4 = " + ERF_A4 + ";\n  float a5 = " + ERF_A5 + ";\n\n  float t = 1.0 / (1.0 + p * x);\n  return 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x);\n",
      SQUARE = "return x * x;",
      RECIPROCAL = "return 1.0 / x;",
      LOGICAL_NOT = "return float(!(x >= 1.0));",
      TO_INT = "return float(int(x));",
      CLONE = "return x;",
      LINEAR$1 = "return x;",
      LOG$1 = "\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",
      RELU$1 = "\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n\n  result.r = isNaN(x.r) ? x.r : result.r;\n  result.g = isNaN(x.g) ? x.g : result.g;\n  result.b = isNaN(x.b) ? x.b : result.b;\n  result.a = isNaN(x.a) ? x.a : result.a;\n\n  return result;\n",
      UnaryOpPackedProgram = function () {
    function e(e, t) {
      this.variableNames = ["A"], this.usesPackedTextures = !0, this.outputShape = e, this.userCode = "\n      uniform float NAN;\n      vec4 unaryOperation(vec4 x) {\n        " + t + "\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ";
    }

    return e.prototype.getCustomSetupFunc = function () {
      var e = this;
      return function (t, r) {
        null == e.startLoc && (e.startLoc = t.getUniformLocationNoThrow(r, "NAN"), null == e.startLoc) || t.gl.uniform1f(e.startLoc, NaN);
      };
    }, e;
  }(),
      UnpackProgram = function UnpackProgram(e) {
    this.variableNames = ["A"], this.usesPackedTextures = !0, this.outputShape = e;
    var t = e.length,
        r = getChannels("rc", t),
        n = getCoordsDataType(t),
        a = getSourceCoords$1(t, r),
        o = r.slice(-2),
        i = t <= 1 ? "rc" : "vec2(" + o.join(",") + ")";
    this.userCode = "\n      void main() {\n        " + n + " rc = getOutputCoords();\n        vec4 packedInput = getA(" + a + ");\n\n        setOutput(getChannel(packedInput, " + i + "));\n      }\n    ";
  };

  function fromPixels_(e, t) {
    if (void 0 === t && (t = 3), t > 4) throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");
    return ENV.engine.fromPixels(e, t);
  }

  function toPixels(e, t) {
    return __awaiter(this, void 0, void 0, function () {
      var r, n, a, o, i, s, u, l, p, c, h, d, f, m, g, y, v, x, b, w;
      return __generator(this, function (N) {
        switch (N.label) {
          case 0:
            if (r = convertToTensor(e, "img", "toPixels"), e instanceof Tensor || (r = r.toInt()), 2 !== r.rank && 3 !== r.rank) throw new Error("toPixels only supports rank 2 or 3 tensors, got rank " + r.rank + ".");
            if (n = r.shape.slice(0, 2), a = n[0], o = n[1], (i = 2 === r.rank ? 1 : r.shape[2]) > 4 || 2 === i) throw new Error("toPixels only supports depth of size 1, 3 or 4 but got " + i);
            return s = r.min(), u = r.max(), [4, s.data()];

          case 1:
            return l = N.sent()[0], [4, u.data()];

          case 2:
            if (p = N.sent()[0], s.dispose(), u.dispose(), "float32" === r.dtype) {
              if (l < 0 || p > 1) throw new Error("Tensor values for a float32 Tensor must be in the range [0 - 1] but got range [" + l + " - " + p + "].");
            } else {
              if ("int32" !== r.dtype) throw new Error("Unsupported type for toPixels: " + r.dtype + ". Please use float32 or int32 tensors.");
              if (l < 0 || p > 255) throw new Error("Tensor values for a int32 Tensor must be in the range [0 - 255] but got range [" + l + " - " + p + "].");
            }

            return [4, r.data()];

          case 3:
            for (c = N.sent(), h = "float32" === r.dtype ? 255 : 1, d = new Uint8ClampedArray(o * a * 4), f = 0; f < a * o; ++f) {
              m = void 0, g = void 0, y = void 0, v = void 0, 1 === i ? (m = c[f] * h, g = c[f] * h, y = c[f] * h, v = 255) : 3 === i ? (m = c[3 * f] * h, g = c[3 * f + 1] * h, y = c[3 * f + 2] * h, v = 255) : 4 === i && (m = c[4 * f] * h, g = c[4 * f + 1] * h, y = c[4 * f + 2] * h, v = c[4 * f + 3] * h), d[0 + (x = 4 * f)] = Math.round(m), d[x + 1] = Math.round(g), d[x + 2] = Math.round(y), d[x + 3] = Math.round(v);
            }

            return null != t && (t.width = o, t.height = a, b = t.getContext("2d"), w = new ImageData(d, o, a), b.putImageData(w, 0, 0)), r !== e && r.dispose(), [2, d];
        }
      });
    });
  }

  var fromPixels = op({
    fromPixels_: fromPixels_
  }),
      browser = Object.freeze({
    toPixels: toPixels,
    fromPixels: fromPixels
  });

  function concat1d_(e) {
    return concat(e, 0);
  }

  function concat2d_(e, t) {
    return concat(e, t);
  }

  function concat3d_(e, t) {
    return concat(e, t);
  }

  function concat4d_(e, t) {
    return concat(e, t);
  }

  function concat_(e, t) {
    void 0 === t && (t = 0), assert(e.length >= 1, "Pass at least one tensor to concat");
    var r = convertToTensorArray(e, "tensors", "concat");
    t = parseAxisParam(t, r[0].shape)[0];
    var n = computeOutShape(r.map(function (e) {
      return e.shape;
    }), t);
    if (0 === sizeFromShape(n)) return tensor([], n);
    if (1 === (r = r.filter(function (e) {
      return e.size > 0;
    })).length) return r[0];
    var a = r.map(function (e) {
      return e.shape;
    });
    assertParamsConsistent(a, t);
    var o = r;
    return ENV.engine.runKernel(function (e) {
      return e.concat(r, t);
    }, o, function (e) {
      var r = a.map(function (e) {
        return e[t];
      });
      return split$1(e, r, t).map(function (e) {
        return function () {
          return e;
        };
      });
    });
  }

  function split_(e, t, r) {
    void 0 === r && (r = 0);
    var n,
        a = convertToTensor(e, "x", "split");
    return r = parseAxisParam(r, a.shape)[0], "number" == typeof t ? (assert(a.shape[r] % t == 0, "Number of splits must evenly divide the axis."), n = new Array(t).fill(a.shape[r] / t)) : (assert(a.shape[r] === t.reduce(function (e, t) {
      return e + t;
    }), "The sum of sizes must match the size of the axis dimension."), n = t), ENV.engine.runKernel(function (e) {
      return e.split(a, n, r);
    }, {
      $x: a
    }, function (e) {
      return {
        $x: function $x() {
          return concat(e, r);
        }
      };
    });
  }

  var concat = op({
    concat_: concat_
  }),
      concat1d = op({
    concat1d_: concat1d_
  }),
      concat2d = op({
    concat2d_: concat2d_
  }),
      concat3d = op({
    concat3d_: concat3d_
  }),
      concat4d = op({
    concat4d_: concat4d_
  }),
      split$1 = op({
    split_: split_
  });

  function createCommonjsModule(e, t) {
    return e(t = {
      exports: {}
    }, t.exports), t.exports;
  }

  var alea = createCommonjsModule(function (e) {
    !function (e, t, r) {
      function n(e, t) {
        return t.c = e.c, t.s0 = e.s0, t.s1 = e.s1, t.s2 = e.s2, t;
      }

      function a(e, t) {
        var r = new function (e) {
          var t,
              r = this,
              n = (t = 4022871197, function (e) {
            e = e.toString();

            for (var r = 0; r < e.length; r++) {
              var n = .02519603282416938 * (t += e.charCodeAt(r));
              n -= t = n >>> 0, t = (n *= t) >>> 0, t += 4294967296 * (n -= t);
            }

            return 2.3283064365386963e-10 * (t >>> 0);
          });
          r.next = function () {
            var e = 2091639 * r.s0 + 2.3283064365386963e-10 * r.c;
            return r.s0 = r.s1, r.s1 = r.s2, r.s2 = e - (r.c = 0 | e);
          }, r.c = 1, r.s0 = n(" "), r.s1 = n(" "), r.s2 = n(" "), r.s0 -= n(e), r.s0 < 0 && (r.s0 += 1), r.s1 -= n(e), r.s1 < 0 && (r.s1 += 1), r.s2 -= n(e), r.s2 < 0 && (r.s2 += 1), n = null;
        }(e),
            a = t && t.state,
            o = r.next;
        return o.int32 = function () {
          return 4294967296 * r.next() | 0;
        }, o.double = function () {
          return o() + 1.1102230246251565e-16 * (2097152 * o() | 0);
        }, o.quick = o, a && ("object" == _typeof(a) && n(a, r), o.state = function () {
          return n(r, {});
        }), o;
      }

      t && t.exports ? t.exports = a : this.alea = a;
    }(0, e);
  }),
      xor128 = createCommonjsModule(function (e) {
    !function (e, t, r) {
      function n(e, t) {
        return t.x = e.x, t.y = e.y, t.z = e.z, t.w = e.w, t;
      }

      function a(e, t) {
        var r = new function (e) {
          var t = this,
              r = "";
          t.x = 0, t.y = 0, t.z = 0, t.w = 0, t.next = function () {
            var e = t.x ^ t.x << 11;
            return t.x = t.y, t.y = t.z, t.z = t.w, t.w ^= t.w >>> 19 ^ e ^ e >>> 8;
          }, e === (0 | e) ? t.x = e : r += e;

          for (var n = 0; n < r.length + 64; n++) {
            t.x ^= 0 | r.charCodeAt(n), t.next();
          }
        }(e),
            a = t && t.state,
            o = function o() {
          return (r.next() >>> 0) / 4294967296;
        };

        return o.double = function () {
          do {
            var e = ((r.next() >>> 11) + (r.next() >>> 0) / 4294967296) / (1 << 21);
          } while (0 === e);

          return e;
        }, o.int32 = r.next, o.quick = o, a && ("object" == _typeof(a) && n(a, r), o.state = function () {
          return n(r, {});
        }), o;
      }

      t && t.exports ? t.exports = a : this.xor128 = a;
    }(0, e);
  }),
      xorwow = createCommonjsModule(function (e) {
    !function (e, t, r) {
      function n(e, t) {
        return t.x = e.x, t.y = e.y, t.z = e.z, t.w = e.w, t.v = e.v, t.d = e.d, t;
      }

      function a(e, t) {
        var r = new function (e) {
          var t = this,
              r = "";
          t.next = function () {
            var e = t.x ^ t.x >>> 2;
            return t.x = t.y, t.y = t.z, t.z = t.w, t.w = t.v, (t.d = t.d + 362437 | 0) + (t.v = t.v ^ t.v << 4 ^ e ^ e << 1) | 0;
          }, t.x = 0, t.y = 0, t.z = 0, t.w = 0, t.v = 0, e === (0 | e) ? t.x = e : r += e;

          for (var n = 0; n < r.length + 64; n++) {
            t.x ^= 0 | r.charCodeAt(n), n == r.length && (t.d = t.x << 10 ^ t.x >>> 4), t.next();
          }
        }(e),
            a = t && t.state,
            o = function o() {
          return (r.next() >>> 0) / 4294967296;
        };

        return o.double = function () {
          do {
            var e = ((r.next() >>> 11) + (r.next() >>> 0) / 4294967296) / (1 << 21);
          } while (0 === e);

          return e;
        }, o.int32 = r.next, o.quick = o, a && ("object" == _typeof(a) && n(a, r), o.state = function () {
          return n(r, {});
        }), o;
      }

      t && t.exports ? t.exports = a : this.xorwow = a;
    }(0, e);
  }),
      xorshift7 = createCommonjsModule(function (e) {
    !function (e, t, r) {
      function n(e, t) {
        return t.x = e.x.slice(), t.i = e.i, t;
      }

      function a(e, t) {
        null == e && (e = +new Date());

        var r = new function (e) {
          var t = this;
          t.next = function () {
            var e,
                r,
                n = t.x,
                a = t.i;
            return e = n[a], r = (e ^= e >>> 7) ^ e << 24, r ^= (e = n[a + 1 & 7]) ^ e >>> 10, r ^= (e = n[a + 3 & 7]) ^ e >>> 3, r ^= (e = n[a + 4 & 7]) ^ e << 7, e = n[a + 7 & 7], r ^= (e ^= e << 13) ^ e << 9, n[a] = r, t.i = a + 1 & 7, r;
          }, function (e, t) {
            var r,
                n = [];
            if (t === (0 | t)) n[0] = t;else for (t = "" + t, r = 0; r < t.length; ++r) {
              n[7 & r] = n[7 & r] << 15 ^ t.charCodeAt(r) + n[r + 1 & 7] << 13;
            }

            for (; n.length < 8;) {
              n.push(0);
            }

            for (r = 0; r < 8 && 0 === n[r]; ++r) {
              ;
            }

            for (8 == r ? n[7] = -1 : n[r], e.x = n, e.i = 0, r = 256; r > 0; --r) {
              e.next();
            }
          }(t, e);
        }(e),
            a = t && t.state,
            o = function o() {
          return (r.next() >>> 0) / 4294967296;
        };

        return o.double = function () {
          do {
            var e = ((r.next() >>> 11) + (r.next() >>> 0) / 4294967296) / (1 << 21);
          } while (0 === e);

          return e;
        }, o.int32 = r.next, o.quick = o, a && (a.x && n(a, r), o.state = function () {
          return n(r, {});
        }), o;
      }

      t && t.exports ? t.exports = a : this.xorshift7 = a;
    }(0, e);
  }),
      xor4096 = createCommonjsModule(function (e) {
    !function (e, t, r) {
      function n(e, t) {
        return t.i = e.i, t.w = e.w, t.X = e.X.slice(), t;
      }

      function a(e, t) {
        null == e && (e = +new Date());

        var r = new function (e) {
          var t = this;
          t.next = function () {
            var e,
                r,
                n = t.w,
                a = t.X,
                o = t.i;
            return t.w = n = n + 1640531527 | 0, r = a[o + 34 & 127], e = a[o = o + 1 & 127], r ^= r << 13, e ^= e << 17, r ^= r >>> 15, e ^= e >>> 12, r = a[o] = r ^ e, t.i = o, r + (n ^ n >>> 16) | 0;
          }, function (e, t) {
            var r,
                n,
                a,
                o,
                i,
                s = [],
                u = 128;

            for (t === (0 | t) ? (n = t, t = null) : (t += "\0", n = 0, u = Math.max(u, t.length)), a = 0, o = -32; o < u; ++o) {
              t && (n ^= t.charCodeAt((o + 32) % t.length)), 0 === o && (i = n), n ^= n << 10, n ^= n >>> 15, n ^= n << 4, n ^= n >>> 13, o >= 0 && (i = i + 1640531527 | 0, a = 0 == (r = s[127 & o] ^= n + i) ? a + 1 : 0);
            }

            for (a >= 128 && (s[127 & (t && t.length || 0)] = -1), a = 127, o = 512; o > 0; --o) {
              n = s[a + 34 & 127], r = s[a = a + 1 & 127], n ^= n << 13, r ^= r << 17, n ^= n >>> 15, r ^= r >>> 12, s[a] = n ^ r;
            }

            e.w = i, e.X = s, e.i = a;
          }(t, e);
        }(e),
            a = t && t.state,
            o = function o() {
          return (r.next() >>> 0) / 4294967296;
        };

        return o.double = function () {
          do {
            var e = ((r.next() >>> 11) + (r.next() >>> 0) / 4294967296) / (1 << 21);
          } while (0 === e);

          return e;
        }, o.int32 = r.next, o.quick = o, a && (a.X && n(a, r), o.state = function () {
          return n(r, {});
        }), o;
      }

      t && t.exports ? t.exports = a : this.xor4096 = a;
    }(0, e);
  }),
      tychei = createCommonjsModule(function (e) {
    !function (e, t, r) {
      function n(e, t) {
        return t.a = e.a, t.b = e.b, t.c = e.c, t.d = e.d, t;
      }

      function a(e, t) {
        var r = new function (e) {
          var t = this,
              r = "";
          t.next = function () {
            var e = t.b,
                r = t.c,
                n = t.d,
                a = t.a;
            return e = e << 25 ^ e >>> 7 ^ r, r = r - n | 0, n = n << 24 ^ n >>> 8 ^ a, a = a - e | 0, t.b = e = e << 20 ^ e >>> 12 ^ r, t.c = r = r - n | 0, t.d = n << 16 ^ r >>> 16 ^ a, t.a = a - e | 0;
          }, t.a = 0, t.b = 0, t.c = -1640531527, t.d = 1367130551, e === Math.floor(e) ? (t.a = e / 4294967296 | 0, t.b = 0 | e) : r += e;

          for (var n = 0; n < r.length + 20; n++) {
            t.b ^= 0 | r.charCodeAt(n), t.next();
          }
        }(e),
            a = t && t.state,
            o = function o() {
          return (r.next() >>> 0) / 4294967296;
        };

        return o.double = function () {
          do {
            var e = ((r.next() >>> 11) + (r.next() >>> 0) / 4294967296) / (1 << 21);
          } while (0 === e);

          return e;
        }, o.int32 = r.next, o.quick = o, a && ("object" == _typeof(a) && n(a, r), o.state = function () {
          return n(r, {});
        }), o;
      }

      t && t.exports ? t.exports = a : this.tychei = a;
    }(0, e);
  }),
      seedrandom = createCommonjsModule(function (e) {
    !function (t, r) {
      var n,
          a = this,
          o = 256,
          i = 6,
          s = "random",
          u = r.pow(o, i),
          l = r.pow(2, 52),
          p = 2 * l,
          c = o - 1;

      function h(e, h, g) {
        var y = [],
            v = f(function e(t, r) {
          var n,
              a = [],
              o = _typeof(t);

          if (r && "object" == o) for (n in t) {
            try {
              a.push(e(t[n], r - 1));
            } catch (e) {}
          }
          return a.length ? a : "string" == o ? t : t + "\0";
        }((h = 1 == h ? {
          entropy: !0
        } : h || {}).entropy ? [e, m(t)] : null == e ? function () {
          try {
            var e;
            return n && (e = n.randomBytes) ? e = e(o) : (e = new Uint8Array(o), (a.crypto || a.msCrypto).getRandomValues(e)), m(e);
          } catch (e) {
            var r = a.navigator,
                i = r && r.plugins;
            return [+new Date(), a, i, a.screen, m(t)];
          }
        }() : e, 3), y),
            x = new function (e) {
          var t,
              r = e.length,
              n = this,
              a = 0,
              i = n.i = n.j = 0,
              s = n.S = [];

          for (r || (e = [r++]); a < o;) {
            s[a] = a++;
          }

          for (a = 0; a < o; a++) {
            s[a] = s[i = c & i + e[a % r] + (t = s[a])], s[i] = t;
          }

          (n.g = function (e) {
            for (var t, r = 0, a = n.i, i = n.j, s = n.S; e--;) {
              t = s[a = c & a + 1], r = r * o + s[c & (s[a] = s[i = c & i + t]) + (s[i] = t)];
            }

            return n.i = a, n.j = i, r;
          })(o);
        }(y),
            b = function b() {
          for (var e = x.g(i), t = u, r = 0; e < l;) {
            e = (e + r) * o, t *= o, r = x.g(1);
          }

          for (; e >= p;) {
            e /= 2, t /= 2, r >>>= 1;
          }

          return (e + r) / t;
        };

        return b.int32 = function () {
          return 0 | x.g(4);
        }, b.quick = function () {
          return x.g(4) / 4294967296;
        }, b.double = b, f(m(x.S), t), (h.pass || g || function (e, t, n, a) {
          return a && (a.S && d(a, x), e.state = function () {
            return d(x, {});
          }), n ? (r[s] = e, t) : e;
        })(b, v, "global" in h ? h.global : this == r, h.state);
      }

      function d(e, t) {
        return t.i = e.i, t.j = e.j, t.S = e.S.slice(), t;
      }

      function f(e, t) {
        for (var r, n = e + "", a = 0; a < n.length;) {
          t[c & a] = c & (r ^= 19 * t[c & a]) + n.charCodeAt(a++);
        }

        return m(t);
      }

      function m(e) {
        return String.fromCharCode.apply(0, e);
      }

      if (r["seed" + s] = h, f(r.random(), t), e.exports) {
        e.exports = h;

        try {
          n = require("crypto");
        } catch (e) {}
      }
    }([], Math);
  });
  seedrandom.alea = alea, seedrandom.xor128 = xor128, seedrandom.xorwow = xorwow, seedrandom.xorshift7 = xorshift7, seedrandom.xor4096 = xor4096, seedrandom.tychei = tychei;

  var seedrandom$1 = seedrandom,
      seedrandom_1 = seedrandom$1.alea,
      MPRandGauss = function () {
    function e(e, t, r, n, a) {
      this.mean = e, this.stdDev = t, this.dtype = r, this.nextVal = NaN, this.truncated = n, this.truncated && (this.upper = this.mean + 2 * this.stdDev, this.lower = this.mean - 2 * this.stdDev);
      var o = a || Math.random();
      this.random = seedrandom_1(o.toString());
    }

    return e.prototype.nextValue = function () {
      if (!isNaN(this.nextVal)) {
        var e = this.nextVal;
        return this.nextVal = NaN, e;
      }

      for (var t, r, n = !1; !n;) {
        var a = void 0,
            o = void 0,
            i = void 0;

        do {
          i = (a = 2 * this.random() - 1) * a + (o = 2 * this.random() - 1) * o;
        } while (i >= 1 || 0 === i);

        var s = Math.sqrt(-2 * Math.log(i) / i);
        t = this.mean + this.stdDev * a * s, r = this.mean + this.stdDev * o * s, this.truncated && !this.isValidTruncated(t) || (n = !0);
      }

      return this.truncated && !this.isValidTruncated(r) || (this.nextVal = this.convertValue(r)), this.convertValue(t);
    }, e.prototype.convertValue = function (e) {
      return null == this.dtype || "float32" === this.dtype ? e : Math.round(e);
    }, e.prototype.isValidTruncated = function (e) {
      return e <= this.upper && e >= this.lower;
    }, e;
  }();

  function clone_(e) {
    var t = convertToTensor(e, "x", "clone", null);
    return ENV.engine.runKernel(function (e) {
      return Tensor.make(t.shape, {
        dataId: t.dataId
      }, t.dtype);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return e.toFloat();
        }
      };
    });
  }

  function eye_(e, t, r, n) {
    void 0 === n && (n = "float32"), null == t && (t = e);

    for (var a = buffer([e, t], n), o = e <= t ? e : t, i = 0; i < o; ++i) {
      a.set(1, i, i);
    }

    var s = a.toTensor().as2D(e, t);
    if (null == r) return s;
    if (1 === r.length) return tile(expandDims(s, 0), [r[0], 1, 1]);
    if (2 === r.length) return tile(expandDims(expandDims(s, 0), 0), [r[0], r[1], 1, 1]);
    if (3 === r.length) return tile(expandDims(expandDims(expandDims(s, 0), 0), 0), [r[0], r[1], r[2], 1, 1]);
    throw new Error("eye() currently supports only 1D and 2D batchShapes, but received " + r.length + "D.");
  }

  function randomNormal_(e, t, r, n, a) {
    if (void 0 === t && (t = 0), void 0 === r && (r = 1), null != n && "bool" === n) throw new Error("Unsupported data type " + n);

    for (var o = new MPRandGauss(t, r, n, !1, a), i = buffer(e, n), s = 0; s < i.values.length; s++) {
      i.values[s] = o.nextValue();
    }

    return i.toTensor();
  }

  function truncatedNormal_(e, t, r, n, a) {
    if (void 0 === t && (t = 0), void 0 === r && (r = 1), null != n && "bool" === n) throw new Error("Unsupported data type " + n);

    for (var o = new MPRandGauss(t, r, n, !0, a), i = buffer(e, n), s = 0; s < i.values.length; s++) {
      i.values[s] = o.nextValue();
    }

    return i.toTensor();
  }

  function randomUniform_(e, t, r, n) {
    void 0 === t && (t = 0), void 0 === r && (r = 1), void 0 === n && (n = "float32");

    for (var a = buffer(e, n), o = 0; o < a.values.length; o++) {
      a.values[o] = randUniform(t, r);
    }

    return a.toTensor();
  }

  function rand_(e, t, r) {
    var n = sizeFromShape(e),
        a = null;
    if (null == r || "float32" === r) a = new Float32Array(n);else if ("int32" === r) a = new Int32Array(n);else {
      if ("bool" !== r) throw new Error("Unknown data type " + r);
      a = new Uint8Array(n);
    }

    for (var o = 0; o < n; o++) {
      a[o] = t();
    }

    return Tensor.make(e, {
      values: a
    }, r);
  }

  function multinomial_(e, t, r, n) {
    void 0 === n && (n = !1);
    var a = convertToTensor(e, "logits", "multinomial"),
        o = a.size,
        i = a.rank;
    if (o < 2) throw new Error("Error in multinomial: you need at least 2 outcomes, but got " + o + ".");
    if (i > 2) throw new Error("Rank of probabilities must be 1 or 2, but is " + i);
    r = r || Math.random();
    var s = 1 === i ? a.as2D(1, -1) : a,
        u = ENV.engine.runKernel(function (e) {
      return e.multinomial(s, n, t, r);
    }, {
      logits2D: s
    });
    return 1 === i ? u.as1D() : u;
  }

  function oneHot_(e, t, r, n) {
    if (void 0 === r && (r = 1), void 0 === n && (n = 0), t < 2) throw new Error("Error in oneHot: depth must be >=2, but it is " + t);
    var a = convertToTensor(e, "indices", "oneHot", "int32"),
        o = a.shape.concat([t]);
    return a = a.flatten(), ENV.engine.runKernel(function (e) {
      return e.oneHot(a, t, r, n);
    }, {
      $indices: a
    }, function (e) {
      return {
        $indices: function $indices() {
          return zeros(a.shape, "float32");
        }
      };
    }).reshape(o);
  }

  function fromPixels_$1(e, t) {
    return void 0 === t && (t = 3), deprecationWarn("tf.fromPixels() is renamed to tf.browser.fromPixels(), please switch to the new method as the old method will be removed in TensorFlow.js 1.0."), fromPixels(e, t);
  }

  function toPixels$1(e, t) {
    return __awaiter(this, void 0, void 0, function () {
      return __generator(this, function (r) {
        return deprecationWarn("tf.toPixels() is renamed to tf.browser.toPixels(), please switch to the new method as the old method will be removed in TensorFlow.js 1.0."), [2, toPixels(e, t)];
      });
    });
  }

  function reshape_(e, t) {
    var r = convertToTensor(e, "x", "reshape", null);
    return t = inferFromImplicitShape(t, r.size), assert(r.size === sizeFromShape(t), "new shape and old shape must have the same number of elements."), ENV.engine.runKernel(function (e) {
      return e.reshape(r, t);
    }, {
      $x: r
    }, function (e) {
      return {
        $x: function $x() {
          return e.reshape(r.shape);
        }
      };
    });
  }

  function squeeze_(e, t) {
    var r = convertToTensor(e, "x", "squeeze");
    return reshape(r, squeezeShape(r.shape, t).newShape);
  }

  function cast_(e, t) {
    var r = convertToTensor(e, "x", "cast");
    return ENV.engine.runKernel(function (e) {
      return e.cast(r, t);
    }, {
      $x: r
    }, function (e) {
      return {
        $x: function $x() {
          return e.clone();
        }
      };
    });
  }

  function tile_(e, t) {
    var r = convertToTensor(e, "x", "tile");
    return assert(r.rank === t.length, "Error in transpose: rank of input " + r.rank + " must match length of reps " + t + "."), ENV.engine.runKernel(function (e) {
      return e.tile(r, t);
    }, {
      $x: r
    }, function (e) {
      return {
        $x: function $x() {
          var n = zerosLike(r);
          if (1 === r.rank) for (var a = 0; a < t[0]; ++a) {
            n = n.add(e.slice([a * r.shape[0]], [r.shape[0]]));
          } else if (2 === r.rank) for (a = 0; a < t[0]; ++a) {
            for (var o = 0; o < t[1]; ++o) {
              n = n.add(e.slice([a * r.shape[0], o * r.shape[1]], [r.shape[0], r.shape[1]]));
            }
          } else if (3 === r.rank) for (a = 0; a < t[0]; ++a) {
            for (o = 0; o < t[1]; ++o) {
              for (var i = 0; i < t[2]; ++i) {
                n = n.add(e.slice([a * r.shape[0], o * r.shape[1], i * r.shape[2]], [r.shape[0], r.shape[1], r.shape[2]]));
              }
            }
          } else {
            if (4 !== r.rank) throw new Error("Gradient for tile operation is not implemented for rank-" + r.rank + " tensors yet.");

            for (a = 0; a < t[0]; ++a) {
              for (o = 0; o < t[1]; ++o) {
                for (i = 0; i < t[2]; ++i) {
                  for (var s = 0; s < t[3]; ++s) {
                    n = n.add(e.slice([a * r.shape[0], o * r.shape[1], i * r.shape[2], s * r.shape[3]], [r.shape[0], r.shape[1], r.shape[2], r.shape[3]]));
                  }
                }
              }
            }
          }
          return n;
        }
      };
    });
  }

  function pad1d_(e, t, r) {
    return void 0 === r && (r = 0), assert(2 === t.length, "Invalid number of paddings. Must be length of 2."), pad(e, [t], r);
  }

  function pad2d_(e, t, r) {
    return void 0 === r && (r = 0), assert(2 === t.length && 2 === t[0].length && 2 === t[1].length, "Invalid number of paddings. Must be length of 2 each."), pad(e, t, r);
  }

  function pad3d_(e, t, r) {
    return void 0 === r && (r = 0), assert(3 === t.length && 2 === t[0].length && 2 === t[1].length && 2 === t[2].length, "Invalid number of paddings. Must be length of 2 each."), pad(e, t, r);
  }

  function pad4d_(e, t, r) {
    return void 0 === r && (r = 0), assert(4 === t.length && 2 === t[0].length && 2 === t[1].length && 2 === t[2].length && 2 === t[3].length, "Invalid number of paddings. Must be length of 2 each."), pad(e, t, r);
  }

  function pad_(e, t, r) {
    void 0 === r && (r = 0);
    var n = convertToTensor(e, "x", "pad");
    if (0 === n.rank) throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");
    var a = t.map(function (e) {
      return e[0];
    });
    return ENV.engine.runKernel(function (e) {
      return e.pad(n, t, r);
    }, {
      $x: n
    }, function (e) {
      return {
        $x: function $x() {
          return e.slice(a, n.shape);
        }
      };
    });
  }

  function stack_(e, t) {
    void 0 === t && (t = 0);
    var r = convertToTensorArray(e, "tensors", "stack");
    if (assert(r.length >= 1, "Pass at least one tensor to tf.stack"), 1 === r.length) return r[0].expandDims(t);
    var n = r[0].rank,
        a = r[0].shape,
        o = r[0].dtype;
    assert(t <= n, "Axis must be <= rank of the tensor"), r.forEach(function (e) {
      assertShapesMatch(a, e.shape, "All tensors passed to stack must have matching shapes");
    }), r.forEach(function (e) {
      assert(o === e.dtype, "All tensors passed to stack must have matching dtypes");
    });
    var i = r.map(function (e) {
      return e.expandDims(t);
    });
    return concat(i, t);
  }

  function batchToSpaceND_(e, t, r) {
    var n = convertToTensor(e, "x", "batchToSpaceND"),
        a = t.reduce(function (e, t) {
      return e * t;
    });
    return assert(n.rank >= 1 + t.length, "input rank is " + n.rank + " but should be > than blockShape.length " + t.length), assert(r.length === t.length, "crops.length is " + r.length + " but should be equal to blockShape.length  " + t.length), assert(n.shape[0] % a == 0, "input tensor batch is " + n.shape[0] + " but is not divisible by the product of the elements of blockShape " + t.join(" * ") + " === " + a), ENV.engine.runKernel(function (e) {
      return e.batchToSpaceND(n, t, r);
    }, {
      $x: n
    }, function (e) {
      return {
        $x: function $x() {
          return e.spaceToBatchND(t, r);
        }
      };
    });
  }

  function spaceToBatchND_(e, t, r) {
    var n = convertToTensor(e, "x", "spaceToBatchND");
    return assert(n.rank >= 1 + t.length, "input rank " + n.rank + " should be > than [blockShape] " + t.length), assert(r.length === t.length, "paddings.shape[0] " + r.length + " must be equal to [blockShape] " + t.length), assert(n.shape.reduce(function (e, n, a) {
      return a > 0 && a <= t.length ? e && (n + r[a - 1][0] + r[a - 1][1]) % t[a - 1] == 0 : e;
    }, !0), "input spatial dimensions " + n.shape.slice(1) + " with paddings " + r.toString() + " must be divisible by blockShapes " + t.toString()), ENV.engine.runKernel(function (e) {
      return e.spaceToBatchND(n, t, r);
    }, {
      $x: n
    }, function (e) {
      return {
        $x: function $x() {
          return e.batchToSpaceND(t, r);
        }
      };
    });
  }

  function unstack_(e, t) {
    void 0 === t && (t = 0), t = t || 0;
    var r = convertToTensor(e, "x", "unstack");
    return assert(t < r.shape.length, "Axis " + t + " is >= to tensor shape length " + r.shape.length), ENV.engine.runKernel(function (e) {
      return e.unstack(r, t);
    }, {
      $x: r
    }, function (e) {
      return {
        $x: function $x() {
          return stack(e, t);
        }
      };
    });
  }

  function cumsum_(e, t, r, n) {
    void 0 === t && (t = 0), void 0 === r && (r = !1), void 0 === n && (n = !1);
    var a = convertToTensor(e, "x", "cumsum"),
        o = getAxesPermutation([t |= 0], a.rank),
        i = a;
    null != o && (i = a.transpose(o));
    var s = getInnerMostAxes(1, a.rank)[0],
        u = ENV.engine.runKernel(function (e) {
      return e.cumsum(i, s, r, n);
    }, {
      permutedX: i
    }, function (e) {
      return {
        permutedX: function permutedX() {
          return e.cumsum(t, r, !n);
        }
      };
    });
    return null != o && (u = u.transpose(o)), u;
  }

  function expandDims_(e, t) {
    void 0 === t && (t = 0);
    var r = convertToTensor(e, "x", "expandDims");
    assert(t <= r.rank, "Axis must be <= rank of the tensor");
    var n = r.shape.slice();
    return t < 0 && (assert(-(r.rank + 1) <= t, "Axis must be in the interval [" + -(r.rank + 1) + ", " + r.rank + "]"), t = r.rank + t + 1), n.splice(t, 0, 1), reshape(r, n);
  }

  function depthToSpace_(e, t, r) {
    void 0 === r && (r = "NHWC");
    var n = convertToTensor(e, "x", "depthToSpace"),
        a = "NHWC" === r ? n.shape[1] : n.shape[2],
        o = "NHWC" === r ? n.shape[2] : n.shape[3],
        i = "NHWC" === r ? n.shape[3] : n.shape[1];
    return assert(a * t >= 0, "Negative dimension size caused by overflow when multiplying\n      " + a + " and " + t + "  for depthToSpace with input shape\n      " + n.shape), assert(o * t >= 0, "Negative dimension size caused by overflow when multiplying\n      " + o + " and " + t + " for depthToSpace with input shape\n          " + n.shape), assert(i % (t * t) == 0, "Dimension size must be evenly divisible by " + t * t + " but is " + i + " for depthToSpace with input shape " + n.shape), ENV.engine.runKernel(function (e) {
      return e.depthToSpace(n, t, r);
    }, {
      $x: n
    });
  }

  function setdiff1dAsync_(e, t) {
    return __awaiter(this, void 0, void 0, function () {
      var r, n, a, o, i, s, u, l, p, c;
      return __generator(this, function (h) {
        switch (h.label) {
          case 0:
            return r = convertToTensor(e, "x", "setdiff1d"), n = convertToTensor(t, "y", "setdiff1d"), assert(r.dtype === n.dtype, "x and y should have the same dtype, but got x (" + r.dtype + ") and y (" + n.dtype + ")."), assert(1 === r.rank, "x should be 1D tensor, but got x (" + r.shape + ")."), assert(1 === n.rank, "y should be 1D tensor, but got y (" + n.shape + ")."), [4, r.data()];

          case 1:
            return a = h.sent(), [4, n.data()];

          case 2:
            for (o = h.sent(), i = new Set(o), s = 0, p = 0; p < a.length; p++) {
              i.has(a[p]) || s++;
            }

            for (u = new TensorBuffer([s], r.dtype), l = new TensorBuffer([s], "int32"), p = 0, c = 0; p < a.length; p++) {
              i.has(a[p]) || (u.values[c] = a[p], l.values[c] = p, c++);
            }

            return [2, [u.toTensor(), l.toTensor()]];
        }
      });
    });
  }

  function buffer(e, t, r) {
    return void 0 === t && (t = "float32"), new TensorBuffer(e, t = t || "float32", r);
  }

  function print(e, t) {
    void 0 === t && (t = !1), console.log(e.toString(t));
  }

  var batchToSpaceND = op({
    batchToSpaceND_: batchToSpaceND_
  }),
      cast = op({
    cast_: cast_
  }),
      clone = op({
    clone_: clone_
  }),
      cumsum = op({
    cumsum_: cumsum_
  }),
      depthToSpace = op({
    depthToSpace_: depthToSpace_
  }),
      expandDims = op({
    expandDims_: expandDims_
  }),
      eye = op({
    eye_: eye_
  }),
      fromPixels$1 = fromPixels_$1,
      multinomial = op({
    multinomial_: multinomial_
  }),
      oneHot = op({
    oneHot_: oneHot_
  }),
      pad = op({
    pad_: pad_
  }),
      pad1d = op({
    pad1d_: pad1d_
  }),
      pad2d = op({
    pad2d_: pad2d_
  }),
      pad3d = op({
    pad3d_: pad3d_
  }),
      pad4d = op({
    pad4d_: pad4d_
  }),
      rand = op({
    rand_: rand_
  }),
      randomNormal = op({
    randomNormal_: randomNormal_
  }),
      randomUniform = op({
    randomUniform_: randomUniform_
  }),
      reshape = op({
    reshape_: reshape_
  }),
      spaceToBatchND = op({
    spaceToBatchND_: spaceToBatchND_
  }),
      squeeze = op({
    squeeze_: squeeze_
  }),
      stack = op({
    stack_: stack_
  }),
      tile = op({
    tile_: tile_
  }),
      truncatedNormal = op({
    truncatedNormal_: truncatedNormal_
  }),
      unstack = op({
    unstack_: unstack_
  }),
      setdiff1dAsync = setdiff1dAsync_;

  function whereImpl(e, t) {
    for (var r = [], n = 0; n < t.length; n++) {
      t[n] && r.push(n);
    }

    var a = buffer(e, "int32"),
        o = buffer([r.length, e.length], "int32");

    for (n = 0; n < r.length; n++) {
      var i = a.indexToLoc(r[n]),
          s = n * e.length;
      o.values.set(i, s);
    }

    return o.toTensor();
  }

  function mapActivationToShaderProgram(e, t) {
    if (void 0 === t && (t = !1), "linear" === e) return t ? LINEAR$1 : LINEAR;
    if ("relu" === e) return t ? RELU$1 : RELU;
    throw new Error("Activation " + e + " has not been implemented for the WebGL backend.");
  }

  var CPU_HANDOFF_SIZE_THRESHOLD = 10,
      MATMUL_SHARED_DIM_THRESHOLD = 1e3,
      MathBackendWebGL = function () {
    function e(e, t) {
      if (void 0 === t && (t = !0), this.gpgpu = e, this.delayedStorage = t, this.pendingRead = new WeakMap(), this.pendingDisposal = new WeakSet(), this.dataRefCount = new WeakMap(), this.lruDataGPU = [], this.numBytesInGPU = 0, this.uploadWaitMs = 0, this.downloadWaitMs = 0, this.binaryCache = {}, this.disposed = !1, ENV.get("WEBGL_VERSION") < 1) throw new Error("WebGL is not supported on this device");

      if (null == e) {
        var r = getWebGLContext(ENV.get("WEBGL_VERSION"));
        this.gpgpu = new GPGPUContext(r), this.canvas = r.canvas, this.gpgpuCreatedLocally = !0;
      } else this.gpgpuCreatedLocally = !1, this.canvas = e.gl.canvas;

      this.textureManager = new TextureManager(this.gpgpu);
    }

    return e.prototype.register = function (e, t, r) {
      if (this.texData.has(e)) throw new Error("Data buffer is already registered");
      this.texData.set(e, {
        shape: t,
        dtype: r
      });
    }, e.prototype.setDataMover = function (e) {
      this.texData = new DataStorage(e);
    }, e.prototype.fromPixels = function (e, t) {
      if (null == e) throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
      var r = [e.height, e.width],
          n = [e.height, e.width, t];
      if (!(e instanceof HTMLVideoElement || e instanceof HTMLImageElement || e instanceof HTMLCanvasElement || e instanceof ImageData)) throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement or ImageData, but was " + e.constructor.name);

      if (e instanceof HTMLVideoElement) {
        if (null == this.fromPixels2DContext) {
          if (!ENV.get("IS_BROWSER")) throw new Error("Can't read pixels from HTMLImageElement outside the browser.");
          if ("complete" !== document.readyState) throw new Error("The DOM is not ready yet. Please call tf.fromPixels() once the DOM is ready. One way to do that is to add an event listener for `DOMContentLoaded` on the document object");
          this.fromPixels2DContext = document.createElement("canvas").getContext("2d");
        }

        this.fromPixels2DContext.canvas.width = e.width, this.fromPixels2DContext.canvas.height = e.height, this.fromPixels2DContext.drawImage(e, 0, 0, e.width, e.height), e = this.fromPixels2DContext.canvas;
      }

      var a = this.makeTensorHandle(r, "int32");
      this.texData.get(a.dataId).usage = TextureUsage.PIXELS, this.gpgpu.uploadPixelDataToTexture(this.getTexture(a.dataId), e);
      var o = new FromPixelsProgram(n),
          i = this.compileAndRun(o, [a]);
      return this.disposeData(a.dataId), i;
    }, e.prototype.makeTensorHandle = function (e, t) {
      var r = {};
      return this.register(r, e, t), {
        dataId: r,
        shape: e,
        dtype: t
      };
    }, e.prototype.write = function (e, t) {
      if (null == t) throw new Error("MathBackendWebGL.write(): values can not be null");
      if (ENV.get("DEBUG")) for (var r = 0; r < t.length; r++) {
        var n = t[r];
        if (!canBeRepresented(n)) throw Error("The value " + n + " cannot be represented on this device.");
      }
      var a = this.texData.get(e),
          o = a.texture,
          i = a.texShape,
          s = a.usage,
          u = a.dtype,
          l = a.isPacked;
      if ("complex64" === u) throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
      null != o && (this.releaseTexture(e, o, i, s, l), a.texture = null, a.texShape = null), a.usage = TextureUsage.UPLOAD, a.values = t, this.delayedStorage || this.uploadToGPU(e);
    }, e.prototype.readSync = function (e) {
      var t = this.texData.get(e),
          r = t.values,
          n = t.dtype,
          a = t.complexTensors,
          o = t.slice,
          i = t.shape;

      if (null != o) {
        var s = new UnaryOpProgram(i, CLONE),
            u = this.compileAndRun(s, [{
          dataId: e,
          shape: i,
          dtype: n
        }]),
            l = this.readSync(u.dataId);
        return u.dispose(), l;
      }

      if (null != r) return this.convertAndCacheOnCPU(e);
      if ("string" === n) return r;
      var p,
          c,
          h = null != this.activeTimers;
      return h && (p = performance.now()), c = "complex64" === n ? mergeRealAndImagArrays(a.real.dataSync(), a.imag.dataSync()) : this.getValuesFromTexture(e), h && (this.downloadWaitMs += performance.now() - p), this.convertAndCacheOnCPU(e, c);
    }, e.prototype.read = function (e) {
      return __awaiter(this, void 0, void 0, function () {
        var t, r, n, a, o, i, s, u, l, p, c, h, d, f, m, g, y, v, x, b, w, N, S, T;
        return __generator(this, function (E) {
          switch (E.label) {
            case 0:
              if (this.pendingRead.has(e)) return n = this.pendingRead.get(e), [2, new Promise(function (e) {
                return n.push(e);
              })];
              if (a = this.texData.get(e), o = a.texture, i = a.values, s = a.texShape, u = a.isPacked, l = a.shape, p = a.slice, c = a.dtype, null != p) return h = new UnaryOpProgram(l, CLONE), d = this.compileAndRun(h, [{
                dataId: e,
                shape: l,
                dtype: c
              }]), f = this.read(d.dataId), d.dispose(), [2, f];
              if (null != i) return [2, this.convertAndCacheOnCPU(e)];
              if (this.pendingRead.set(e, []), !ENV.get("WEBGL_DOWNLOAD_FLOAT_ENABLED") && 2 === ENV.get("WEBGL_VERSION")) throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");
              return m = s[1], g = s[0], u && (t = getPackedMatrixTextureShapeWidthHeight(s[0], s[1]), m = t[0], g = t[1]), y = this.gpgpu.maybeCreateBufferFromTexture(o, g, m), [4, this.gpgpu.createAndWaitForFence()];

            case 1:
              return E.sent(), y instanceof WebGLTexture ? v = this.getValuesFromTexture(e) : (x = sizeFromShape(l), u ? (b = getBatchDim(l), w = 1, N = 1, l.length && (r = getRowsCols(l), w = r[0], N = r[1]), v = this.gpgpu.downloadPackedMatrixFromBuffer(y, b, w, N, s[0], s[1]).subarray(0, x)) : v = this.gpgpu.downloadFloat32MatrixFromBuffer(y, s[0], s[1]).subarray(0, x)), S = this.convertAndCacheOnCPU(e, v), T = this.pendingRead.get(e), this.pendingRead.delete(e), T.forEach(function (e) {
                return e(S);
              }), this.pendingDisposal.has(e) && (this.pendingDisposal.delete(e), this.disposeData(e)), [2, S];
          }
        });
      });
    }, e.prototype.getValuesFromTexture = function (e) {
      var t,
          r = this.texData.get(e),
          n = r.shape,
          a = r.dtype,
          o = r.texture,
          i = r.texShape,
          s = sizeFromShape(n);

      if (ENV.get("WEBGL_DOWNLOAD_FLOAT_ENABLED")) {
        if (this.texData.get(e).isPacked) {
          var u = getBatchDim(n),
              l = 1,
              p = 1;
          return n.length && (l = (t = getRowsCols(n))[0], p = t[1]), this.gpgpu.downloadMatrixFromPackedTexture(o, u, l, p, i[0], i[1]).subarray(0, s);
        }

        return this.gpgpu.downloadFloat32MatrixFromOutputTexture(o, i[0], i[1]).subarray(0, s);
      }

      var c = this.makeTensorHandle(n, "float32");
      c.size = sizeFromShape(n), this.texData.get(c.dataId).usage = TextureUsage.DOWNLOAD;
      var h = new EncodeFloatProgram(n);
      this.compileAndRun(h, [{
        shape: n,
        dtype: a,
        dataId: e
      }], c, null, !1);
      var d = this.texData.get(c.dataId),
          f = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(d.texture, d.texShape[0], d.texShape[1]).subarray(0, s);
      return this.disposeData(c.dataId), f;
    }, e.prototype.time = function (e) {
      return __awaiter(this, void 0, void 0, function () {
        var t, r, n, a, o, i, s;
        return __generator(this, function (u) {
          switch (u.label) {
            case 0:
              return t = this.activeTimers, r = [], n = !1, null == this.programTimersStack ? (this.programTimersStack = r, n = !0) : this.activeTimers.push(r), this.activeTimers = r, e(), a = flatten(this.activeTimers.map(function (e) {
                return e.query;
              })).filter(function (e) {
                return null != e;
              }), o = flatten(this.activeTimers.map(function (e) {
                return e.name;
              })).filter(function (e) {
                return null != e;
              }), this.activeTimers = t, n && (this.programTimersStack = null), [4, Promise.all(a)];

            case 1:
              return i = u.sent(), s = {
                uploadWaitMs: this.uploadWaitMs,
                downloadWaitMs: this.downloadWaitMs,
                kernelMs: sum(i),
                getExtraProfileInfo: function getExtraProfileInfo() {
                  return i.map(function (e, t) {
                    return {
                      name: o[t],
                      ms: e
                    };
                  }).map(function (e) {
                    return e.name + ": " + e.ms;
                  }).join(", ");
                },
                wallMs: null
              }, this.uploadWaitMs = 0, this.downloadWaitMs = 0, [2, s];
          }
        });
      });
    }, e.prototype.memory = function () {
      return {
        unreliable: !1,
        numBytesInGPU: this.numBytesInGPU
      };
    }, e.prototype.startTimer = function () {
      return ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? this.gpgpu.beginQuery() : {
        startMs: performance.now(),
        endMs: null
      };
    }, e.prototype.endTimer = function (e) {
      return ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (this.gpgpu.endQuery(), e) : (e.endMs = performance.now(), e);
    }, e.prototype.getQueryTime = function (e) {
      return __awaiter(this, void 0, void 0, function () {
        var t;
        return __generator(this, function (r) {
          return ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? [2, this.gpgpu.waitForQueryAndGetTime(e)] : [2, (t = e).endMs - t.startMs];
        });
      });
    }, e.prototype.disposeData = function (e) {
      if (!this.pendingDisposal.has(e)) if (this.pendingRead.has(e)) this.pendingDisposal.add(e);else if (this.texData.has(e)) {
        var t = this.texData.get(e),
            r = t.texture,
            n = t.texShape,
            a = t.usage,
            o = t.complexTensors,
            i = t.isPacked,
            s = t.slice;

        if (null != r) {
          var u = s && s.origDataId || e,
              l = this.dataRefCount.get(u);
          l > 1 ? this.dataRefCount.set(u, l - 1) : (this.dataRefCount.delete(u), this.releaseTexture(e, r, n, a, i), this.texData.delete(e));
        }

        null != o && (o.real.dispose(), o.imag.dispose());
      }
    }, e.prototype.getTexture = function (e) {
      return this.uploadToGPU(e), this.texData.get(e).texture;
    }, e.prototype.getCPUBackend = function () {
      return ENV.get("WEBGL_CPU_FORWARD") ? (null == this.cpuBackend && (this.cpuBackend = ENV.findBackend("cpu")), this.cpuBackend) : null;
    }, e.prototype.shouldExecuteOnCPU = function (e, t) {
      var r = this;
      return void 0 === t && (t = CPU_HANDOFF_SIZE_THRESHOLD), null != this.getCPUBackend() && e.every(function (e) {
        return null == r.texData.get(e.dataId).texture && e.size < t;
      });
    }, e.prototype.getGPGPUContext = function () {
      return this.gpgpu;
    }, e.prototype.getCanvas = function () {
      return this.canvas;
    }, e.prototype.complex = function (e, t) {
      var r = this.makeOutputArray(e.shape, "complex64");
      return this.texData.get(r.dataId).complexTensors = {
        real: ENV.engine.keep(e.clone()),
        imag: ENV.engine.keep(t.clone())
      }, r;
    }, e.prototype.real = function (e) {
      return this.texData.get(e.dataId).complexTensors.real.clone();
    }, e.prototype.imag = function (e) {
      return this.texData.get(e.dataId).complexTensors.imag.clone();
    }, e.prototype.slice = function (e, t, r) {
      if (this.shouldExecuteOnCPU([e])) return this.cpuBackend.slice(e, t, r);
      var n = this.texData.get(e.dataId).isPacked,
          a = isSliceContinous(e.shape, t, r);

      if (n || !a) {
        var o = new SliceProgram(r),
            i = o.getCustomSetupFunc(t);
        return this.compileAndRun(o, [e], null, i);
      }

      return this.uploadToGPU(e.dataId), this.shallowSlice(e, t, r);
    }, e.prototype.shallowSlice = function (e, t, r) {
      var n = this.texData.get(e.dataId),
          a = Tensor.make(r, {}, e.dtype),
          o = this.texData.get(a.dataId);
      Object.assign(o, n), o.shape = r, o.dtype = e.dtype;
      var i = computeFlatOffset(t, e.strides);
      n.slice && (i += n.slice.flatOffset), o.slice = {
        flatOffset: i,
        origDataId: n.slice && n.slice.origDataId || e.dataId
      };
      var s = this.dataRefCount.get(o.slice.origDataId) || 1;
      return this.dataRefCount.set(o.slice.origDataId, s + 1), a;
    }, e.prototype.stridedSlice = function (e, t, r, n, a, o, i, s, u) {
      if (this.shouldExecuteOnCPU([e])) return this.cpuBackend.stridedSlice(e, t, r, n, a, o, i, s, u);
      var l = getStridedSlicedInfo(e.shape, t, r, n, a, o, i, s, u),
          p = l[0],
          c = l[1],
          h = l[2],
          d = c.filter(function (e, t) {
        return -1 === h.indexOf(t);
      });
      if (d.some(function (e) {
        return 0 === e;
      })) return tensor([], d);
      var f = new StridedSliceProgram(p, n, c, h);
      return this.compileAndRun(f, [e]);
    }, e.prototype.reverse = function (e, t) {
      var r = new ReverseProgram(e.shape, t);
      return this.compileAndRun(r, [e]);
    }, e.prototype.concat = function (e, t) {
      if (this.shouldExecuteOnCPU(e)) return this.cpuBackend.concat(e, t);
      if (1 === e.length) return e[0];

      if (e.length > ENV.get("WEBGL_MAX_TEXTURES_IN_SHADER")) {
        var r = Math.floor(e.length / 2),
            n = this.concat(e.slice(0, r), t),
            a = this.concat(e.slice(r), t);
        return this.concat([n, a], t);
      }

      var o = computeOutShape(e.map(function (e) {
        return e.shape;
      }), t),
          i = e.map(function (e) {
        return e.as2D(-1, sizeFromShape(e.shape.slice(t)));
      }),
          s = new ConcatProgram(i.map(function (e) {
        return e.shape;
      }));
      return this.compileAndRun(s, i).reshape(o);
    }, e.prototype.neg = function (e) {
      var t = new UnaryOpProgram(e.shape, NEG);
      return this.compileAndRun(t, [e]);
    }, e.prototype.batchMatMul = function (e, t, r, n) {
      var a = r ? e.shape[2] : e.shape[1],
          o = n ? t.shape[1] : t.shape[2],
          i = r ? e.shape[1] : e.shape[2],
          s = e.shape[0];

      if ((1 === a || 1 === o) && i > MATMUL_SHARED_DIM_THRESHOLD) {
        r && (e = e.transpose([0, 2, 1])), n && (t = t.transpose([0, 2, 1]));
        var u = 1 === o ? e : e.as3D(s, i, 1),
            l = 1 === o ? 2 : 1,
            p = 1 === o ? t.as3D(s, 1, i) : t;
        return this.multiply(u, p).sum(l, !0);
      }

      var c = upcastType(e.dtype, t.dtype);

      if (1 === s) {
        var h = e.as2D(e.shape[1], e.shape[2]),
            d = t.as2D(t.shape[1], t.shape[2]),
            f = new MatMulPackedProgram(h.shape, d.shape, [a, o], r, n),
            m = this.makePackedTensor(f.outputShape, c),
            g = this.compileAndRun(f, [h, d], m);
        return g.reshape([1, g.shape[0], g.shape[1]]);
      }

      return f = new MatMulProgram(e.shape, t.shape, r, n), m = this.makeOutputArray(f.outputShape, c), this.compileAndRun(f, [e, t], m);
    }, e.prototype.fusedBatchMatMul = function (e, t, r, n, a, o) {
      var i = r ? e.shape[2] : e.shape[1],
          s = n ? t.shape[1] : t.shape[2],
          u = e.shape[0],
          l = upcastType(e.dtype, t.dtype);

      if (1 === u) {
        var p = e.as2D(e.shape[1], e.shape[2]),
            c = t.as2D(t.shape[1], t.shape[2]),
            h = new MatMulPackedProgram(p.shape, c.shape, [i, s], r, n, !!a, o ? mapActivationToShaderProgram(o, !0) : null),
            d = this.makePackedTensor(h.outputShape, l),
            f = [p, c];
        a && f.push(a);
        var m = this.compileAndRun(h, f, d);
        return m.reshape([1, m.shape[0], m.shape[1]]);
      }

      return h = new MatMulProgram(e.shape, t.shape, r, n, !!a, o ? mapActivationToShaderProgram(o) : null), f = [e, t], a && f.push(a), d = this.makeOutputArray(h.outputShape, l), this.compileAndRun(h, f, d);
    }, e.prototype.multiply = function (e, t) {
      if ("complex64" === e.dtype) {
        var r = this.texData.get(e.dataId),
            n = this.texData.get(t.dataId),
            a = new BinaryOpComplexProgram(COMPLEX_MULTIPLY.REAL, e.shape, t.shape),
            o = new BinaryOpComplexProgram(COMPLEX_MULTIPLY.IMAG, e.shape, t.shape),
            i = [this.makeComplexComponentTensorHandle(e, r.complexTensors.real), this.makeComplexComponentTensorHandle(e, r.complexTensors.imag), this.makeComplexComponentTensorHandle(t, n.complexTensors.real), this.makeComplexComponentTensorHandle(t, n.complexTensors.imag)],
            s = this.compileAndRun(a, i),
            u = this.compileAndRun(o, i),
            l = this.complex(s, u);
        return s.dispose(), u.dispose(), l;
      }

      if (this.shouldExecuteOnCPU([e, t])) return this.cpuBackend.multiply(e, t);
      if (ENV.get("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(e, t, MUL, e.dtype);
      var p = new BinaryOpProgram(MUL, e.shape, t.shape),
          c = this.makeOutputArray(p.outputShape, e.dtype);
      return this.compileAndRun(p, [e, t], c);
    }, e.prototype.batchNormalization = function (e, t, r, n, a, o) {
      var i = [e, t, r],
          s = null;
      null != o && (s = o.shape, i.push(o));
      var u = null;

      if (null != a && (u = a.shape, i.push(a)), ENV.get("WEBGL_PACK_BATCHNORMALIZATION")) {
        var l = new BatchNormPackedProgram(e.shape, t.shape, r.shape, s, u, n);
        return this.compileAndRun(l, i);
      }

      var p = new BatchNormProgram(e.shape, t.shape, r.shape, s, u, n);
      return this.compileAndRun(p, i);
    }, e.prototype.localResponseNormalization4D = function (e, t, r, n, a) {
      var o = new LRNProgram(e.shape, t, r, n, a);
      return this.compileAndRun(o, [e]);
    }, e.prototype.LRNGrad = function (e, t, r, n, a, o, i) {
      var s = new LRNGradProgram(t.shape, n, a, o, i);
      return this.compileAndRun(s, [t, r, e]);
    }, e.prototype.tile = function (e, t) {
      var r = new TileProgram(e.shape, t);
      return this.compileAndRun(r, [e]);
    }, e.prototype.pad = function (e, t, r) {
      var n = ENV.get("WEBGL_PACK_ARRAY_OPERATIONS") ? new PadPackedProgram(e.shape, t, r) : new PadProgram(e.shape, t, r);
      return this.compileAndRun(n, [e]);
    }, e.prototype.transpose = function (e, t) {
      var r = new TransposeProgram(e.shape, t);
      return this.compileAndRun(r, [e]);
    }, e.prototype.gather = function (e, t, r) {
      var n = new GatherProgram(e.shape, t.size, r);
      return this.compileAndRun(n, [e, t]);
    }, e.prototype.batchToSpaceND = function (e, t, r) {
      assert(e.rank <= 4, "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");
      var n = t.reduce(function (e, t) {
        return e * t;
      }),
          a = getReshaped(e.shape, t, n),
          o = getPermuted(a.length, t.length),
          i = getReshapedPermuted(e.shape, t, n),
          s = getSliceBeginCoords(r, t.length),
          u = getSliceSize(i, r, t.length);
      return e.reshape(a).transpose(o).reshape(i).slice(s, u);
    }, e.prototype.spaceToBatchND = function (e, t, r) {
      assert(e.rank <= 4, "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");
      var n = t.reduce(function (e, t) {
        return e * t;
      }),
          a = [[0, 0]];
      a.push.apply(a, r);

      for (var o = 1 + t.length; o < e.shape.length; ++o) {
        a.push([0, 0]);
      }

      var i = e.pad(a),
          s = getReshaped(i.shape, t, n, !1),
          u = getPermuted(s.length, t.length, !1),
          l = getReshapedPermuted(i.shape, t, n, !1);
      return i.reshape(s).transpose(u).reshape(l);
    }, e.prototype.reduce = function (e, t, r) {
      var n = e.shape[0],
          a = e.shape[1],
          o = computeOptimalWindowSize(a),
          i = new ReduceProgram({
        windowSize: o,
        inSize: a,
        batchSize: n
      }, t),
          s = i.outputShape,
          u = s[0],
          l = s[1],
          p = this.makeOutputArray([u, l], r);
      return this.compileAndRun(i, [e], p), 1 === p.shape[1] ? p : this.reduce(p, t, r);
    }, e.prototype.argReduce = function (e, t, r) {
      void 0 === r && (r = null);
      var n = e.shape[0],
          a = e.shape[1];
      null != r && (n = r.shape[0], a = r.shape[1]);
      var o = computeOptimalWindowSize(a),
          i = new ArgMinMaxProgram({
        windowSize: o,
        inSize: a,
        batchSize: n
      }, t, null == r),
          s = i.outputShape,
          u = s[0],
          l = s[1],
          p = this.makeOutputArray([u, l], "int32"),
          c = [e];
      return null != r && c.push(r), this.compileAndRun(i, c, p), 1 === p.shape[1] ? p : this.argReduce(e, t, p);
    }, e.prototype.sum = function (e, t) {
      assertAxesAreInnerMostDims("sum", t, e.rank);
      var r = computeOutAndReduceShapes(e.shape, t),
          n = r[0],
          a = sizeFromShape(r[1]),
          o = e.as2D(-1, a),
          i = sumOutType(e.dtype);
      return this.reduce(o, "sum", i).reshape(n);
    }, e.prototype.prod = function (e, t) {
      var r = computeOutAndReduceShapes(e.shape, t),
          n = r[0],
          a = sizeFromShape(r[1]),
          o = e.as2D(-1, a),
          i = sumOutType(e.dtype);
      return this.reduce(o, "prod", i).reshape(n);
    }, e.prototype.unsortedSegmentSum = function (e, t, r) {
      var n = 0,
          a = getAxesPermutation([n], e.rank),
          o = e;
      null != a && (o = e.transpose(a), n = getInnerMostAxes(1, e.rank)[0]);
      var i = computeOutShape$1(o.shape, n, r),
          s = sizeFromShape([o.shape[n]]),
          u = o.as2D(-1, s),
          l = sumOutType(e.dtype),
          p = this.segOpCompute(u, "unsortedSegmentSum", t, l, r).reshape(i);
      return null != a && (p = p.transpose(getUndoAxesPermutation(a))), p;
    }, e.prototype.segOpCompute = function (e, t, r, n, a) {
      var o = e.shape[0],
          i = e.shape[1],
          s = segOpComputeOptimalWindowSize(i, a),
          u = new SegmentOpProgram({
        windowSize: s,
        inSize: i,
        batchSize: o,
        numSegments: a
      }, t),
          l = u.outputShape,
          p = l[0],
          c = l[1],
          h = this.makeOutputArray([p, c], n);
      return this.compileAndRun(u, [e, r], h), h.shape[1] === a ? h : (r = range(0, a).tile([i / s]), this.segOpCompute(h, t, r, n, a));
    }, e.prototype.argMin = function (e, t) {
      var r = [t];
      assertAxesAreInnerMostDims("argMin", r, e.rank);
      var n = computeOutAndReduceShapes(e.shape, r),
          a = n[0],
          o = sizeFromShape(n[1]),
          i = e.as2D(-1, o);
      return this.argReduce(i, "min").reshape(a);
    }, e.prototype.argMax = function (e, t) {
      var r = [t];
      assertAxesAreInnerMostDims("argMax", r, e.rank);
      var n = computeOutAndReduceShapes(e.shape, r),
          a = n[0],
          o = sizeFromShape(n[1]),
          i = e.as2D(-1, o);
      return this.argReduce(i, "max").reshape(a);
    }, e.prototype.cumsum = function (e, t, r, n) {
      if (t !== e.rank - 1) throw new Error("WebGL cumsum shader expects an inner-most axis=" + (e.rank - 1) + " but got axis=" + t);
      var a = new CumSumProgram(e.shape, r, n);
      return this.compileAndRun(a, [e]);
    }, e.prototype.equal = function (e, t) {
      var r = new BinaryOpProgram(EQUAL, e.shape, t.shape),
          n = this.makeOutputArray(r.outputShape, "bool");
      return this.compileAndRun(r, [e, t], n);
    }, e.prototype.notEqual = function (e, t) {
      var r = new BinaryOpProgram(NOT_EQUAL, e.shape, t.shape),
          n = this.makeOutputArray(r.outputShape, "bool");
      return this.compileAndRun(r, [e, t], n);
    }, e.prototype.less = function (e, t) {
      if (this.shouldExecuteOnCPU([e, t])) return this.cpuBackend.less(e, t);
      var r = new BinaryOpProgram(LESS, e.shape, t.shape),
          n = this.makeOutputArray(r.outputShape, "bool");
      return this.compileAndRun(r, [e, t], n);
    }, e.prototype.lessEqual = function (e, t) {
      var r = new BinaryOpProgram(LESS_EQUAL, e.shape, t.shape),
          n = this.makeOutputArray(r.outputShape, "bool");
      return this.compileAndRun(r, [e, t], n);
    }, e.prototype.greater = function (e, t) {
      if (this.shouldExecuteOnCPU([e, t])) return this.cpuBackend.greater(e, t);
      var r = new BinaryOpProgram(GREATER, e.shape, t.shape),
          n = this.makeOutputArray(r.outputShape, "bool");
      return this.compileAndRun(r, [e, t], n);
    }, e.prototype.greaterEqual = function (e, t) {
      var r = new BinaryOpProgram(GREATER_EQUAL, e.shape, t.shape),
          n = this.makeOutputArray(r.outputShape, "bool");
      return this.compileAndRun(r, [e, t], n);
    }, e.prototype.logicalNot = function (e) {
      var t = new UnaryOpProgram(e.shape, LOGICAL_NOT);
      return this.compileAndRun(t, [e]);
    }, e.prototype.logicalAnd = function (e, t) {
      var r = new BinaryOpProgram(LOGICAL_AND, e.shape, t.shape),
          n = this.makeOutputArray(r.outputShape, "bool");
      return this.compileAndRun(r, [e, t], n);
    }, e.prototype.logicalOr = function (e, t) {
      var r = new BinaryOpProgram(LOGICAL_OR, e.shape, t.shape),
          n = this.makeOutputArray(r.outputShape, "bool");
      return this.compileAndRun(r, [e, t], n);
    }, e.prototype.select = function (e, t, r) {
      var n = new SelectProgram(e.rank, t.shape, t.rank),
          a = this.makeOutputArray(n.outputShape, upcastType(t.dtype, r.dtype));
      return this.compileAndRun(n, [e, t, r], a);
    }, e.prototype.where = function (e) {
      warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");
      var t = e.dataSync();
      return whereImpl(e.shape, t);
    }, e.prototype.topk = function (e, t, r) {
      return topkImpl(e.dataSync(), e.shape, e.dtype, t, r);
    }, e.prototype.min = function (e, t) {
      assertAxesAreInnerMostDims("min", t, e.rank);
      var r = computeOutAndReduceShapes(e.shape, t),
          n = r[0],
          a = sizeFromShape(r[1]),
          o = e.as2D(-1, a);
      return this.reduce(o, "min", o.dtype).reshape(n);
    }, e.prototype.minimum = function (e, t) {
      if (this.shouldExecuteOnCPU([e, t])) return this.cpuBackend.minimum(e, t);
      var r = new BinaryOpProgram(MIN, e.shape, t.shape);
      return this.compileAndRun(r, [e, t]);
    }, e.prototype.mod = function (e, t) {
      var r = new BinaryOpProgram(MOD, e.shape, t.shape),
          n = r.getCustomSetupFunc();
      return this.compileAndRun(r, [e, t], null, n);
    }, e.prototype.max = function (e, t) {
      assertAxesAreInnerMostDims("max", t, e.rank);
      var r = computeOutAndReduceShapes(e.shape, t),
          n = r[0],
          a = sizeFromShape(r[1]),
          o = e.as2D(-1, a);
      return this.reduce(o, "max", o.dtype).reshape(n);
    }, e.prototype.maximum = function (e, t) {
      if (this.shouldExecuteOnCPU([e, t])) return this.cpuBackend.maximum(e, t);
      var r = new BinaryOpProgram(MAX, e.shape, t.shape);
      return this.compileAndRun(r, [e, t]);
    }, e.prototype.all = function (e, t) {
      assertAxesAreInnerMostDims("all", t, e.rank);
      var r = computeOutAndReduceShapes(e.shape, t),
          n = r[0],
          a = sizeFromShape(r[1]),
          o = e.as2D(-1, a);
      return this.reduce(o, "all", o.dtype).reshape(n);
    }, e.prototype.any = function (e, t) {
      assertAxesAreInnerMostDims("any", t, e.rank);
      var r = computeOutAndReduceShapes(e.shape, t),
          n = r[0],
          a = sizeFromShape(r[1]),
          o = e.as2D(-1, a);
      return this.reduce(o, "any", o.dtype).reshape(n);
    }, e.prototype.squaredDifference = function (e, t) {
      var r = new BinaryOpProgram(SQUARED_DIFFERENCE, e.shape, t.shape);
      return this.compileAndRun(r, [e, t]);
    }, e.prototype.realDivide = function (e, t) {
      var r = DIV;
      if (ENV.get("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(e, t, PACKED_DIV, "float32");
      var n = new BinaryOpProgram(r, e.shape, t.shape),
          a = this.makeOutputArray(n.outputShape, "float32");
      return this.compileAndRun(n, [e, t], a);
    }, e.prototype.floorDiv = function (e, t) {
      var r = INT_DIV;
      if (ENV.get("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(e, t, PACKED_INT_DIV, "int32");
      var n = new BinaryOpProgram(r, e.shape, t.shape),
          a = this.makeOutputArray(n.outputShape, "int32");
      return this.compileAndRun(n, [e, t], a);
    }, e.prototype.add = function (e, t) {
      if ("complex64" === e.dtype && "complex64" === t.dtype) return this.complexSeparableBinaryOp(e, t, ADD);
      var r = upcastType(e.dtype, t.dtype);
      if (ENV.get("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(e, t, ADD, r);
      var n = new BinaryOpProgram(ADD, e.shape, t.shape),
          a = this.makeOutputArray(n.outputShape, r);
      return this.compileAndRun(n, [e, t], a);
    }, e.prototype.packedBinaryOp = function (e, t, r, n) {
      var a = new BinaryOpPackedProgram(r, e.shape, t.shape),
          o = this.makePackedTensor(a.outputShape, n);
      return this.compileAndRun(a, [e, t], o);
    }, e.prototype.complexSeparableBinaryOp = function (e, t, r) {
      var n = this,
          a = this.texData.get(e.dataId),
          o = this.texData.get(t.dataId),
          i = [[a.complexTensors.real, o.complexTensors.real], [a.complexTensors.imag, o.complexTensors.imag]].map(function (a) {
        var o = a[0],
            i = a[1],
            s = new BinaryOpProgram(r, e.shape, t.shape),
            u = n.makeOutputArray(s.outputShape, upcastType(o.dtype, i.dtype)),
            l = n.makeComplexComponentTensorHandle(e, o),
            p = n.makeComplexComponentTensorHandle(t, i);
        return n.compileAndRun(s, [l, p], u);
      }),
          s = i[0],
          u = i[1],
          l = this.complex(s, u);
      return s.dispose(), u.dispose(), l;
    }, e.prototype.makeComplexComponentTensorHandle = function (e, t) {
      return {
        dataId: t.dataId,
        dtype: t.dtype,
        shape: e.shape
      };
    }, e.prototype.addN = function (e) {
      for (var t = e[0], r = 1; r < e.length; r++) {
        t = this.add(t, e[r]);
      }

      return t;
    }, e.prototype.subtract = function (e, t) {
      if ("complex64" === e.dtype && "complex64" === t.dtype) return this.complexSeparableBinaryOp(e, t, SUB);
      if (this.shouldExecuteOnCPU([e, t])) return this.cpuBackend.subtract(e, t);
      var r = upcastType(e.dtype, t.dtype);
      if (ENV.get("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(e, t, SUB, e.dtype);
      var n = new BinaryOpProgram(SUB, e.shape, t.shape),
          a = this.makeOutputArray(n.outputShape, r);
      return this.compileAndRun(n, [e, t], a);
    }, e.prototype.pow = function (e, t) {
      var r = ENV.get("WEBGL_PACK_BINARY_OPERATIONS"),
          n = r ? new BinaryOpPackedProgram(PACKED_POW, e.shape, t.shape) : new BinaryOpProgram(POW, e.shape, t.shape),
          a = upcastType(e.dtype, t.dtype),
          o = r ? this.makePackedTensor(n.outputShape, a) : this.makeOutputArray(n.outputShape, a),
          i = n.getCustomSetupFunc();
      return this.compileAndRun(n, [e, t], o, i);
    }, e.prototype.ceil = function (e) {
      var t = new UnaryOpProgram(e.shape, CEIL);
      return this.compileAndRun(t, [e]);
    }, e.prototype.floor = function (e) {
      var t = new UnaryOpProgram(e.shape, FLOOR);
      return this.compileAndRun(t, [e]);
    }, e.prototype.sign = function (e) {
      var t = new UnaryOpProgram(e.shape, SIGN);
      return this.compileAndRun(t, [e]);
    }, e.prototype.round = function (e) {
      var t = new UnaryOpProgram(e.shape, ROUND);
      return this.compileAndRun(t, [e]);
    }, e.prototype.exp = function (e) {
      var t;
      return t = ENV.get("WEBGL_PACK") ? new UnaryOpPackedProgram(e.shape, EXP) : new UnaryOpProgram(e.shape, EXP), this.compileAndRun(t, [e]);
    }, e.prototype.expm1 = function (e) {
      var t = new UnaryOpProgram(e.shape, EXPM1);
      return this.compileAndRun(t, [e]);
    }, e.prototype.log = function (e) {
      var t,
          r = (t = ENV.get("WEBGL_PACK") ? new UnaryOpPackedProgram(e.shape, LOG$1) : new UnaryOpProgram(e.shape, LOG)).getCustomSetupFunc();
      return this.compileAndRun(t, [e], null, r);
    }, e.prototype.log1p = function (e) {
      var t = new UnaryOpProgram(e.shape, LOG1P);
      return this.compileAndRun(t, [e]);
    }, e.prototype.sqrt = function (e) {
      var t = new UnaryOpProgram(e.shape, SQRT);
      return this.compileAndRun(t, [e]);
    }, e.prototype.rsqrt = function (e) {
      var t = new UnaryOpProgram(e.shape, RSQRT);
      return this.compileAndRun(t, [e]);
    }, e.prototype.square = function (e) {
      var t = new UnaryOpProgram(e.shape, SQUARE);
      return this.compileAndRun(t, [e]);
    }, e.prototype.reciprocal = function (e) {
      var t = new UnaryOpProgram(e.shape, RECIPROCAL);
      return this.compileAndRun(t, [e]);
    }, e.prototype.relu = function (e) {
      var t;
      return t = ENV.get("WEBGL_PACK") ? new UnaryOpPackedProgram(e.shape, RELU$1) : new UnaryOpProgram(e.shape, RELU), this.compileAndRun(t, [e]);
    }, e.prototype.prelu = function (e, t) {
      var r = new BinaryOpProgram(PRELU, e.shape, t.shape);
      return this.compileAndRun(r, [e, t]);
    }, e.prototype.elu = function (e) {
      var t = new UnaryOpProgram(e.shape, ELU);
      return this.compileAndRun(t, [e]);
    }, e.prototype.eluDer = function (e, t) {
      var r = new BinaryOpProgram(ELU_DER, e.shape, t.shape);
      return this.compileAndRun(r, [e, t]);
    }, e.prototype.selu = function (e) {
      var t = new UnaryOpProgram(e.shape, SELU);
      return this.compileAndRun(t, [e]);
    }, e.prototype.int = function (e) {
      var t = new UnaryOpProgram(e.shape, TO_INT),
          r = this.makeOutputArray(t.outputShape, "int32");
      return this.compileAndRun(t, [e], r);
    }, e.prototype.clip = function (e, t, r) {
      var n,
          a = (n = ENV.get("WEBGL_PACK_CLIP") ? new ClipPackedProgram(e.shape) : new ClipProgram(e.shape)).getCustomSetupFunc(t, r);
      return this.compileAndRun(n, [e], null, a);
    }, e.prototype.abs = function (e) {
      var t = new UnaryOpProgram(e.shape, ABS);
      return this.compileAndRun(t, [e]);
    }, e.prototype.complexAbs = function (e) {
      var t = this.texData.get(e.dataId),
          r = new ComplexAbsProgram(e.shape),
          n = [this.makeComplexComponentTensorHandle(e, t.complexTensors.real), this.makeComplexComponentTensorHandle(e, t.complexTensors.imag)];
      return this.compileAndRun(r, n);
    }, e.prototype.sigmoid = function (e) {
      var t = new UnaryOpProgram(e.shape, SIGMOID);
      return this.compileAndRun(t, [e]);
    }, e.prototype.softplus = function (e) {
      var t = new UnaryOpProgram(e.shape, SOFTPLUS);
      return this.compileAndRun(t, [e]);
    }, e.prototype.sin = function (e) {
      var t = new UnaryOpProgram(e.shape, SIN);
      return this.compileAndRun(t, [e]);
    }, e.prototype.cos = function (e) {
      var t = new UnaryOpProgram(e.shape, COS);
      return this.compileAndRun(t, [e]);
    }, e.prototype.tan = function (e) {
      var t = new UnaryOpProgram(e.shape, TAN);
      return this.compileAndRun(t, [e]);
    }, e.prototype.asin = function (e) {
      var t = new UnaryOpProgram(e.shape, ASIN);
      return this.compileAndRun(t, [e]);
    }, e.prototype.acos = function (e) {
      var t = new UnaryOpProgram(e.shape, ACOS);
      return this.compileAndRun(t, [e]);
    }, e.prototype.atan = function (e) {
      var t = new UnaryOpProgram(e.shape, ATAN);
      return this.compileAndRun(t, [e]);
    }, e.prototype.atan2 = function (e, t) {
      var r = new BinaryOpProgram(ATAN2, e.shape, t.shape);
      return this.compileAndRun(r, [e, t]);
    }, e.prototype.sinh = function (e) {
      var t = new UnaryOpProgram(e.shape, SINH);
      return this.compileAndRun(t, [e]);
    }, e.prototype.cosh = function (e) {
      var t = new UnaryOpProgram(e.shape, COSH);
      return this.compileAndRun(t, [e]);
    }, e.prototype.tanh = function (e) {
      var t = new UnaryOpProgram(e.shape, TANH);
      return this.compileAndRun(t, [e]);
    }, e.prototype.asinh = function (e) {
      var t = new UnaryOpProgram(e.shape, ASINH);
      return this.compileAndRun(t, [e]);
    }, e.prototype.acosh = function (e) {
      var t = new UnaryOpProgram(e.shape, ACOSH),
          r = t.getCustomSetupFunc();
      return this.compileAndRun(t, [e], null, r);
    }, e.prototype.atanh = function (e) {
      var t = new UnaryOpProgram(e.shape, ATANH),
          r = t.getCustomSetupFunc();
      return this.compileAndRun(t, [e], null, r);
    }, e.prototype.erf = function (e) {
      var t = new UnaryOpProgram(e.shape, ERF);
      return this.compileAndRun(t, [e]);
    }, e.prototype.step = function (e, t) {
      var r = new UnaryOpProgram(e.shape, STEP(t));
      return this.compileAndRun(r, [e]);
    }, e.prototype.conv2dWithIm2Row = function (e, t, r) {
      var n = r.filterWidth,
          a = r.filterHeight,
          o = r.inChannels,
          i = r.outWidth,
          s = r.outHeight,
          u = n * a * o,
          l = s * i,
          p = [u, l],
          c = e.squeeze([0]),
          h = t.reshape([u, -1]),
          d = new Im2ColProgram(p, c.shape, r),
          f = this.compileAndRun(d, [c]),
          m = new MatMulPackedProgram(f.shape, h.shape, [l, r.outChannels], !0, !1);
      return this.compileAndRun(m, [f, h]).reshape([1, s, i, r.outChannels]);
    }, e.prototype.conv2d = function (e, t, r) {
      if (ENV.get("WEBGL_CONV_IM2COL") && 1 === e.shape[0]) return this.conv2dWithIm2Row(e, t, r);
      var n = new Conv2DProgram(r);
      return this.compileAndRun(n, [e, t]);
    }, e.prototype.conv2dDerInput = function (e, t, r) {
      var n = new Conv2DDerInputProgram(r);
      return this.compileAndRun(n, [e, t]);
    }, e.prototype.conv2dDerFilter = function (e, t, r) {
      var n = new Conv2DDerFilterProgram(r);
      return this.compileAndRun(n, [e, t]);
    }, e.prototype.depthwiseConv2D = function (e, t, r) {
      var n;
      return ENV.get("WEBGL_PACK_DEPTHWISECONV") && r.strideWidth <= 2 && r.outChannels / r.inChannels == 1 ? (n = new DepthwiseConvPacked2DProgram(r), this.compileAndRun(n, [e, t], this.makePackedTensor(r.outShape, e.dtype))) : (n = new DepthwiseConv2DProgram(r), this.compileAndRun(n, [e, t]));
    }, e.prototype.depthwiseConv2DDerInput = function (e, t, r) {
      var n = new DepthwiseConv2DDerInputProgram(r);
      return this.compileAndRun(n, [e, t]);
    }, e.prototype.depthwiseConv2DDerFilter = function (e, t, r) {
      var n = new DepthwiseConv2DDerFilterProgram(r);
      return this.compileAndRun(n, [e, t]);
    }, e.prototype.conv3d = function (e, t, r) {
      var n = new Conv3DProgram(r);
      return this.compileAndRun(n, [e, t]);
    }, e.prototype.conv3dDerInput = function (e, t, r) {
      var n = new Conv3DDerInputProgram(r);
      return this.compileAndRun(n, [e, t]);
    }, e.prototype.conv3dDerFilter = function (e, t, r) {
      var n = new Conv3DDerFilterProgram(r);
      return this.compileAndRun(n, [e, t]);
    }, e.prototype.maxPool = function (e, t) {
      var r = new Pool2DProgram(t, "max", !1),
          n = this.makeOutputArray(r.outputShape, e.dtype);
      return this.compileAndRun(r, [e], n);
    }, e.prototype.avgPool = function (e, t) {
      var r = new Pool2DProgram(t, "avg", !1),
          n = this.makeOutputArray(r.outputShape, "float32");
      return this.compileAndRun(r, [e], n);
    }, e.prototype.maxPoolBackprop = function (e, t, r, n) {
      var a = new Pool2DProgram(n, "max", !0),
          o = this.compileAndRun(a, [t]),
          i = new MaxPool2DBackpropProgram(n),
          s = this.makeOutputArray(i.outputShape, t.dtype),
          u = this.compileAndRun(i, [e, o], s);
      return o.dispose(), u;
    }, e.prototype.avgPoolBackprop = function (e, t, r) {
      var n = new AvgPool2DBackpropProgram(r),
          a = this.makeOutputArray(n.outputShape, t.dtype);
      return this.compileAndRun(n, [e], a);
    }, e.prototype.cast = function (e, t) {
      return castTensor(e, t, this);
    }, e.prototype.unstack = function (e, t) {
      for (var r = e.shape[t], n = new Array(e.rank - 1), a = 0, o = 0; o < e.rank; o++) {
        o !== t && (n[a++] = e.shape[o]);
      }

      var i = new Array(e.rank).fill(0),
          s = e.shape.slice();
      s[t] = 1;
      var u = new Array(r);

      for (o = 0; o < u.length; o++) {
        i[t] = o, u[o] = this.slice(e, i, s).reshape(n);
      }

      return u;
    }, e.prototype.reshape = function (e, t) {
      return this.texData.get(e.dataId).isPacked && !isReshapeFree(e.shape, t) ? this.packedReshape(e, t) : reshapeTensor(e, t);
    }, e.prototype.resizeBilinear = function (e, t, r, n) {
      var a = new ResizeBilinearProgram(e.shape, t, r, n);
      return this.compileAndRun(a, [e]);
    }, e.prototype.resizeBilinearBackprop = function (e, t, r) {
      var n = new ResizeBilinearBackpropProgram(e, t, r);
      return this.compileAndRun(n, [e]);
    }, e.prototype.resizeNearestNeighbor = function (e, t, r, n) {
      var a = new ResizeNearestNeighborProgram(e.shape, t, r, n);
      return this.compileAndRun(a, [e]);
    }, e.prototype.resizeNearestNeighborBackprop = function (e, t, r) {
      var n = new ResizeNearestNeigborBackpropProgram(e, t, r);
      return this.compileAndRun(n, [e]);
    }, e.prototype.multinomial = function (e, t, r, n) {
      var a = t ? e : softmax(e),
          o = a.shape[0],
          i = a.shape[1],
          s = new MultinomialProgram(o, i, r),
          u = this.makeOutputArray(s.outputShape, "int32"),
          l = s.getCustomSetupFunc(n);
      return this.compileAndRun(s, [a], u, l);
    }, e.prototype.oneHot = function (e, t, r, n) {
      var a = new OneHotProgram(e.size, t, r, n);
      return this.compileAndRun(a, [e]);
    }, e.prototype.nonMaxSuppression = function (e, t, r, n, a) {
      return warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"), nonMaxSuppressionImpl(e.dataSync(), t.dataSync(), r, n, a);
    }, e.prototype.cropAndResize = function (e, t, r, n, a, o) {
      var i = new CropAndResizeProgram(e.shape, t.shape, n, a, o);
      return this.compileAndRun(i, [e, t, r]);
    }, e.prototype.depthToSpace = function (e, t, r) {
      assert(t > 1, "blockSize should be > 1 for depthToSpace, but was: " + t);
      var n = e.shape[0],
          a = ("NHWC" === r ? e.shape[1] : e.shape[2]) * t,
          o = ("NHWC" === r ? e.shape[2] : e.shape[3]) * t,
          i = ("NHWC" === r ? e.shape[3] : e.shape[1]) / (t * t),
          s = new DepthToSpaceProgram("NHWC" === r ? [n, a, o, i] : [n, i, a, o], t, r);
      return this.compileAndRun(s, [e]);
    }, e.prototype.split = function (e, t, r) {
      return split(e, t, r);
    }, e.prototype.scatterND = function (e, t, r) {
      var n = calculateShapes(t, e, r),
          a = n.sliceRank,
          o = n.numUpdates,
          i = n.sliceSize,
          s = n.strides,
          u = n.outputSize,
          l = [u / i, i],
          p = e.reshape([o, a]),
          c = t.reshape([o, i]);
      if (0 === u) return reshapeTensor(tensor([]), r);
      var h = scalar(0),
          d = new ScatterProgram(o, a, p.rank, c.rank, s, l);
      return this.compileAndRun(d, [c, p, h]).reshape(r);
    }, e.prototype.sparseToDense = function (e, t, r, n) {
      var a = calculateShapes(t, e, r),
          o = a.sliceRank,
          i = a.numUpdates,
          s = a.strides,
          u = a.outputSize,
          l = new ScatterProgram(i, o, e.rank, t.rank, s, [u, 1], !1);
      return this.compileAndRun(l, [t, e, n]).reshape(r);
    }, e.prototype.fft = function (e) {
      return this.fftImpl(e, !1);
    }, e.prototype.ifft = function (e) {
      return this.fftImpl(e, !0);
    }, e.prototype.fftImpl = function (e, t) {
      var r = this.texData.get(e.dataId),
          n = new FFTProgram(COMPLEX_FFT.REAL, e.shape, t),
          a = new FFTProgram(COMPLEX_FFT.IMAG, e.shape, t),
          o = [this.makeComplexComponentTensorHandle(e, r.complexTensors.real), this.makeComplexComponentTensorHandle(e, r.complexTensors.imag)],
          i = this.compileAndRun(n, o),
          s = this.compileAndRun(a, o),
          u = this.complex(i, s).as2D(e.shape[0], e.shape[1]);
      return i.dispose(), s.dispose(), u;
    }, e.prototype.gatherND = function (e, t) {
      var r = t.shape,
          n = r[r.length - 1],
          a = prepareAndValidate(e, t),
          o = a[0],
          i = a[1],
          s = a[2],
          u = a[3],
          l = t.reshape([i, n]),
          p = e.reshape([e.size / s, s]),
          c = new GatherNDProgram(n, u, [i, s]);
      return this.compileAndRun(c, [p, l]).reshape(o);
    }, e.prototype.makeOutputArray = function (e, t) {
      return Tensor.make(e, {}, t);
    }, e.prototype.makePackedTensor = function (e, t) {
      var r = Tensor.make(e, {}, t);
      return this.texData.get(r.dataId).isPacked = !0, r;
    }, e.prototype.unpackTensor = function (e) {
      var t = new UnpackProgram(e.shape);
      return this.compileAndRun(t, [e], Tensor.make(t.outputShape, {}, e.dtype));
    }, e.prototype.packedReshape = function (e, t) {
      var r = e.reshape([getBatchDim(e.shape)].concat(getRowsCols(e.shape))),
          n = [getBatchDim(t)].concat(getRowsCols(t)),
          a = new ReshapePackedProgram(n, r.shape);
      return this.compileAndRun(a, [r]).reshape(t);
    }, e.prototype.compileAndRun = function (e, t, r, n, a) {
      var o = this;
      if (void 0 === a && (a = !0), null == r && (r = e.usesPackedTextures ? this.makePackedTensor(e.outputShape, t[0].dtype) : this.makeOutputArray(e.outputShape, t[0].dtype)), 0 === r.size) return this.texData.get(r.dataId).values = getTypedArrayFromDType(r.dtype, 0), r;
      var i = t.map(function (t) {
        if ("complex64" === t.dtype) throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");
        var r = o.texData.get(t.dataId);

        if (null == r.texture) {
          if (!e.usesPackedTextures && sizeFromShape(t.shape) <= ENV.get("WEBGL_SIZE_UPLOAD_UNIFORM")) return {
            shape: t.shape,
            texData: null,
            isUniform: !0,
            uniformValues: o.readSync(t.dataId)
          };
          e.usesPackedTextures && (r.isPacked = !0, r.shape = t.shape);
        } else if (!!r.isPacked != !!e.usesPackedTextures) {
          var n = void 0,
              a = void 0;
          r.isPacked ? (n = new UnpackProgram(t.shape), a = o.compileAndRun(n, [t], Tensor.make(n.outputShape, {}, t.dtype))) : (n = new PackProgram(t.shape), a = o.compileAndRun(n, [t], o.makePackedTensor(t.shape, t.dtype))), r = o.texData.get(a.dataId), t = a;
        } else if (r.isPacked && !isReshapeFree(r.shape, t.shape)) {
          o.delayedStorage = !1;
          var i = t.dataSync();
          o.delayedStorage = !0, t = Tensor.make(t.shape, {
            values: i
          }, t.dtype), (r = o.texData.get(t.dataId)).isPacked = !0;
        }

        return o.uploadToGPU(t.dataId), {
          shape: t.shape,
          texData: r,
          isUniform: !1
        };
      });
      this.uploadToGPU(r.dataId);
      var s,
          u = {
        shape: r.shape,
        texData: this.texData.get(r.dataId),
        isUniform: !1
      },
          l = makeShaderKey(e, i, u),
          p = this.getAndSaveBinary(l, function () {
        return compileProgram(o.gpgpu, e, i, u);
      }),
          c = null != this.activeTimers;
      c && (s = this.startTimer()), runProgram(p, i, u, n);
      var h = 1024 * ENV.get("WEBGL_NUM_MB_BEFORE_PAGING");
      if (a && this.numBytesInGPU > h) for (var d = this.numBytesInGPU - h; d > 0 && this.lruDataGPU.length > 0;) {
        var f = this.lruDataGPU.shift(),
            m = this.texData.get(f),
            g = m.shape,
            y = m.dtype;
        d -= this.computeBytes(g, y), this.read(f);
      }
      return c && (s = this.endTimer(s), this.activeTimers.push({
        name: e.constructor.name,
        query: this.getQueryTime(s)
      })), ENV.get("WEBGL_LAZILY_UNPACK") || !this.texData.get(r.dataId).isPacked || e.isPackShader ? r : this.unpackTensor(r);
    }, e.prototype.getAndSaveBinary = function (e, t) {
      return e in this.binaryCache || (this.binaryCache[e] = t()), this.binaryCache[e];
    }, e.prototype.getTextureManager = function () {
      return this.textureManager;
    }, e.prototype.dispose = function () {
      if (!this.disposed) {
        for (var e in this.binaryCache) {
          this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram);
        }

        this.textureManager.dispose(), this.canvas.remove(), null != this.fromPixels2DContext && this.fromPixels2DContext.canvas.remove(), this.gpgpuCreatedLocally && this.gpgpu.dispose(), this.disposed = !0;
      }
    }, e.prototype.floatPrecision = function () {
      var e = this;
      return tidy(function () {
        var t = ENV.get("DEBUG");
        ENV.set("DEBUG", !1);
        var r = e.abs(scalar(1e-8)).dataSync()[0];
        return ENV.set("DEBUG", t), r > 0 ? 32 : 16;
      });
    }, e.prototype.uploadToGPU = function (e) {
      var t,
          r = this.texData.get(e),
          n = r.shape,
          a = r.values,
          o = r.texture,
          i = r.usage,
          s = r.isPacked;

      if (null == o) {
        var u,
            l = null != this.activeTimers;
        l && (u = performance.now());
        var p = getTextureShapeFromLogicalShape(n, s);
        r.texShape = p;
        var c = this.acquireTexture(e, p, i, s);

        if (r.texture = c, null != a) {
          if (s) {
            var h = getBatchDim(n),
                d = 1,
                f = 1;
            n.length && (d = (t = getRowsCols(n))[0], f = t[1]), this.gpgpu.uploadMatrixToPackedTexture(c, h, d, f, p[0], p[1], typedArrayToFloat32(a));
          } else this.gpgpu.uploadMatrixToTexture(c, p[0], p[1], typedArrayToFloat32(a));

          r.values = null, l && (this.uploadWaitMs += performance.now() - u);
        }
      } else ENV.get("WEBGL_NUM_MB_BEFORE_PAGING") < Number.POSITIVE_INFINITY && this.lruDataGPU.indexOf(e) >= 0 && (this.lruDataGPU.splice(this.lruDataGPU.indexOf(e), 1), this.lruDataGPU.push(e));
    }, e.prototype.convertAndCacheOnCPU = function (e, t) {
      var r = this.delayedStorage,
          n = this.texData.get(e),
          a = n.texture,
          o = n.texShape,
          i = n.dtype,
          s = n.usage,
          u = n.isPacked;
      return r && null != a && (this.releaseTexture(e, a, o, s, u), n.texture = null, n.texShape = null, n.isPacked = !1), n.usage = TextureUsage.UPLOAD, null != t && (n.values = float32ToTypedArray(t, i)), n.values;
    }, e.prototype.releaseTexture = function (e, t, r, n, a) {
      var o = this.texData.get(e),
          i = o.shape,
          s = o.dtype;

      if (ENV.get("WEBGL_NUM_MB_BEFORE_PAGING") < Number.POSITIVE_INFINITY) {
        var u = this.lruDataGPU.indexOf(e);
        u >= 0 && this.lruDataGPU.splice(u, 1);
      }

      this.numBytesInGPU -= this.computeBytes(i, s), this.textureManager.releaseTexture(t, r, n, a);
    }, e.prototype.acquireTexture = function (e, t, r, n) {
      var a = this.texData.get(e),
          o = a.shape,
          i = a.dtype;
      return ENV.get("WEBGL_NUM_MB_BEFORE_PAGING") < Number.POSITIVE_INFINITY && this.lruDataGPU.push(e), this.numBytesInGPU += this.computeBytes(o, i), this.textureManager.acquireTexture(t, r, n);
    }, e.prototype.computeBytes = function (e, t) {
      return sizeFromShape(e) * bytesPerElement(t);
    }, e;
  }();

  function float32ToTypedArray(e, t) {
    if ("float32" === t || "complex64" === t) return e;

    if ("int32" === t || "bool" === t) {
      for (var r = "int32" === t ? new Int32Array(e.length) : new Uint8Array(e.length), n = 0; n < r.length; ++n) {
        r[n] = Math.round(e[n]);
      }

      return r;
    }

    throw new Error("Unknown dtype " + t);
  }

  function typedArrayToFloat32(e) {
    return e instanceof Float32Array ? e : new Float32Array(e);
  }

  function neg_(e) {
    var t = convertToTensor(e, "x", "neg");
    return ENV.engine.runKernel(function (e) {
      return e.neg(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return e.neg();
        }
      };
    });
  }

  function ceil_(e) {
    var t = convertToTensor(e, "x", "ceil");
    return ENV.engine.runKernel(function (e) {
      return e.ceil(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return zerosLike(e);
        }
      };
    });
  }

  function floor_(e) {
    var t = convertToTensor(e, "x", "floor");
    return ENV.engine.runKernel(function (e) {
      return e.floor(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return zerosLike(e);
        }
      };
    });
  }

  function sign_(e) {
    var t = convertToTensor(e, "x", "sign");
    return ENV.engine.runKernel(function (e) {
      return e.sign(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return zerosLike(e);
        }
      };
    });
  }

  function round_(e) {
    var t = convertToTensor(e, "x", "round");
    return ENV.engine.runKernel(function (e) {
      return e.round(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return zerosLike(e);
        }
      };
    });
  }

  function exp_(e) {
    var t = convertToTensor(e, "x", "exp");
    return ENV.engine.runKernel(function (e, r) {
      return r(e.exp(t));
    }, {
      $x: t
    }, function (e, t) {
      var r = t[0];
      return {
        $x: function $x() {
          return e.mulStrict(r);
        }
      };
    });
  }

  function expm1_(e) {
    var t = convertToTensor(e, "x", "expm1");
    return ENV.engine.runKernel(function (e) {
      return e.expm1(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return e.mulStrict(t.exp());
        }
      };
    });
  }

  function log_(e) {
    var t = convertToTensor(e, "x", "log");
    return ENV.engine.runKernel(function (e) {
      return e.log(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return e.divStrict(t.toFloat());
        }
      };
    });
  }

  function log1p_(e) {
    var t = convertToTensor(e, "x", "log1p");
    return ENV.engine.runKernel(function (e) {
      return e.log1p(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return e.div(t.add(1));
        }
      };
    });
  }

  function sqrt_(e) {
    var t = convertToTensor(e, "x", "sqrt");
    return ENV.engine.runKernel(function (e) {
      return e.sqrt(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return e.div(t.toFloat().sqrt().mul(2));
        }
      };
    });
  }

  function rsqrt_(e) {
    var t = convertToTensor(e, "x", "rsqrt");
    return ENV.engine.runKernel(function (e) {
      return e.rsqrt(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return e.div(t.pow(1.5).mul(2)).neg();
        }
      };
    });
  }

  function square_(e) {
    var t = convertToTensor(e, "x", "square");
    return ENV.engine.runKernel(function (e) {
      return e.square(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return e.mul(t.toFloat().mul(2));
        }
      };
    });
  }

  function reciprocal_(e) {
    var t = convertToTensor(e, "x", "reciprocal");
    return ENV.engine.runKernel(function (e) {
      return e.reciprocal(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return e.divStrict(t.square().neg());
        }
      };
    });
  }

  function abs_(e) {
    var t = convertToTensor(e, "x", "abs");
    return "complex64" === t.dtype ? ENV.engine.runKernel(function (e) {
      return e.complexAbs(t);
    }, {
      $x: t
    }) : ENV.engine.runKernel(function (e) {
      return e.abs(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return e.mulStrict(t.toFloat().step(-1));
        }
      };
    });
  }

  function clipByValue_(e, t, r) {
    var n = convertToTensor(e, "x", "clipByValue");
    return assert(t <= r, "Error in clip: min (" + t + ") must be less than or equal to max (" + r + ")."), ENV.engine.runKernel(function (e) {
      return e.clip(n, t, r);
    }, {
      $x: n
    }, function (e) {
      return {
        $x: function $x() {
          return e.where(n.greaterEqual(t).logicalAnd(n.lessEqual(r)), zerosLike(e));
        }
      };
    });
  }

  function sigmoid_(e) {
    var t = convertToTensor(e, "x", "sigmoid");
    return ENV.engine.runKernel(function (e, r) {
      return r(e.sigmoid(t));
    }, {
      $x: t
    }, function (e, t) {
      var r = t[0];
      return {
        $x: function $x() {
          return e.mul(r.mul(scalar(1).sub(r)));
        }
      };
    });
  }

  function logSigmoid_(e) {
    var t = convertToTensor(e, "x", "logSigmoid");
    return ENV.engine.runKernel(function (e) {
      return e.softplus(t.neg()).neg();
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return e.mulStrict(t.neg().sigmoid());
        }
      };
    });
  }

  function softplus_(e) {
    var t = convertToTensor(e, "x", "softplus");
    return ENV.engine.runKernel(function (e) {
      return e.softplus(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return e.mulStrict(t.sigmoid());
        }
      };
    });
  }

  function sin_(e) {
    var t = convertToTensor(e, "x", "sin");
    return ENV.engine.runKernel(function (e) {
      return e.sin(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return t.toFloat().cos().mulStrict(e);
        }
      };
    });
  }

  function cos_(e) {
    var t = convertToTensor(e, "x", "cos");
    return ENV.engine.runKernel(function (e) {
      return e.cos(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return t.toFloat().sin().neg().mulStrict(e);
        }
      };
    });
  }

  function tan_(e) {
    var t = convertToTensor(e, "x", "tan");
    return ENV.engine.runKernel(function (e) {
      return e.tan(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return e.divStrict(t.cos().square());
        }
      };
    });
  }

  function asin_(e) {
    var t = convertToTensor(e, "x", "asin");
    return ENV.engine.runKernel(function (e) {
      return e.asin(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return e.divStrict(scalar(1).sub(t.toFloat().square()).sqrt());
        }
      };
    });
  }

  function acos_(e) {
    var t = convertToTensor(e, "x", "acos");
    return ENV.engine.runKernel(function (e) {
      return e.acos(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return e.divStrict(scalar(1).sub(t.toFloat().square()).sqrt()).neg();
        }
      };
    });
  }

  function atan_(e) {
    var t = convertToTensor(e, "x", "atan");
    return ENV.engine.runKernel(function (e) {
      return e.atan(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return e.div(t.toFloat().square().add(1));
        }
      };
    });
  }

  function sinh_(e) {
    var t = convertToTensor(e, "x", "sinh");
    return ENV.engine.runKernel(function (e) {
      return e.sinh(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return t.toFloat().cosh().mulStrict(e);
        }
      };
    });
  }

  function cosh_(e) {
    var t = convertToTensor(e, "x", "cosh");
    return ENV.engine.runKernel(function (e) {
      return e.cosh(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return t.toFloat().sinh().mulStrict(e);
        }
      };
    });
  }

  function tanh_(e) {
    var t = convertToTensor(e, "x", "tanh");
    return ENV.engine.runKernel(function (e, r) {
      return r(e.tanh(t));
    }, {
      $x: t
    }, function (e, t) {
      var r = t[0];
      return {
        $x: function $x() {
          return scalar(1).sub(r.square()).mulStrict(e);
        }
      };
    });
  }

  function asinh_(e) {
    var t = convertToTensor(e, "x", "asinh");
    return ENV.engine.runKernel(function (e) {
      return e.asinh(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return e.divStrict(scalar(1).add(t.toFloat().square()).sqrt());
        }
      };
    });
  }

  function acosh_(e) {
    var t = convertToTensor(e, "x", "acosh");
    return ENV.engine.runKernel(function (e) {
      return e.acosh(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return e.divStrict(t.toFloat().square().sub(1).sqrt());
        }
      };
    });
  }

  function atanh_(e) {
    var t = convertToTensor(e, "x", "atanh");
    return ENV.engine.runKernel(function (e) {
      return e.atanh(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return e.div(scalar(1).sub(t.toFloat().square()));
        }
      };
    });
  }

  function erf_(e) {
    var t = convertToTensor(e, "x", "erf");
    return assert("int32" === t.dtype || "float32" === t.dtype, "Input dtype must be `int32` or `float32`."), "int32" === t.dtype && (t = t.toFloat()), ENV.engine.runKernel(function (e) {
      return e.erf(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          return e.mul(t.square().neg().exp().mul(2 / Math.sqrt(Math.PI)));
        }
      };
    });
  }

  function step_(e, t) {
    void 0 === t && (t = 0);
    var r = convertToTensor(e, "x", "step");
    return ENV.engine.runKernel(function (e) {
      return e.step(r, t);
    }, {
      $x: r
    }, function (e) {
      return {
        $x: function $x() {
          return zerosLike(e);
        }
      };
    });
  }

  ENV.get("IS_BROWSER") && ENV.registerBackend("webgl", function () {
    return new MathBackendWebGL();
  }, 2, setTensorTracker);
  var abs = op({
    abs_: abs_
  }),
      acos = op({
    acos_: acos_
  }),
      acosh = op({
    acosh_: acosh_
  }),
      asin = op({
    asin_: asin_
  }),
      asinh = op({
    asinh_: asinh_
  }),
      atan = op({
    atan_: atan_
  }),
      atanh = op({
    atanh_: atanh_
  }),
      ceil = op({
    ceil_: ceil_
  }),
      clipByValue = op({
    clipByValue_: clipByValue_
  }),
      cos = op({
    cos_: cos_
  }),
      cosh = op({
    cosh_: cosh_
  }),
      erf = op({
    erf_: erf_
  }),
      exp = op({
    exp_: exp_
  }),
      expm1 = op({
    expm1_: expm1_
  }),
      floor = op({
    floor_: floor_
  }),
      log$1 = op({
    log_: log_
  }),
      log1p = op({
    log1p_: log1p_
  }),
      logSigmoid = op({
    logSigmoid_: logSigmoid_
  }),
      neg = op({
    neg_: neg_
  }),
      reciprocal = op({
    reciprocal_: reciprocal_
  }),
      round = op({
    round_: round_
  }),
      rsqrt = op({
    rsqrt_: rsqrt_
  }),
      sigmoid = op({
    sigmoid_: sigmoid_
  }),
      sign = op({
    sign_: sign_
  }),
      sin = op({
    sin_: sin_
  }),
      sinh = op({
    sinh_: sinh_
  }),
      softplus = op({
    softplus_: softplus_
  }),
      sqrt = op({
    sqrt_: sqrt_
  }),
      square = op({
    square_: square_
  }),
      step = op({
    step_: step_
  }),
      tan = op({
    tan_: tan_
  }),
      tanh$1 = op({
    tanh_: tanh_
  });

  function batchNorm2d_(e, t, r, n, a, o) {
    void 0 === o && (o = .001);
    var i,
        s,
        u = convertToTensor(e, "x", "batchNorm"),
        l = convertToTensor(t, "mean", "batchNorm"),
        p = convertToTensor(r, "variance", "batchNorm");
    return null != a && (i = convertToTensor(a, "scale", "batchNorm")), null != n && (s = convertToTensor(n, "offset", "batchNorm")), assert(2 === u.rank, "Error in batchNorm3D: x must be rank 3 but got rank " + u.rank + "."), assert(2 === l.rank || 1 === l.rank, "Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank " + l.rank + "."), assert(2 === p.rank || 1 === p.rank, "Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank " + p.rank + "."), null != i && assert(2 === i.rank || 1 === i.rank, "Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank " + i.rank + "."), null != s && assert(2 === s.rank || 1 === s.rank, "Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank " + s.rank + "."), batchNorm_(u, l, p, s, i, o);
  }

  function batchNorm3d_(e, t, r, n, a, o) {
    void 0 === o && (o = .001);
    var i,
        s,
        u = convertToTensor(e, "x", "batchNorm"),
        l = convertToTensor(t, "mean", "batchNorm"),
        p = convertToTensor(r, "variance", "batchNorm");
    return null != a && (i = convertToTensor(a, "scale", "batchNorm")), null != n && (s = convertToTensor(n, "offset", "batchNorm")), assert(3 === u.rank, "Error in batchNorm3D: x must be rank 3 but got rank " + u.rank + "."), assert(3 === l.rank || 1 === l.rank, "Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank " + l.rank + "."), assert(3 === p.rank || 1 === p.rank, "Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank " + p.rank + "."), null != i && assert(3 === i.rank || 1 === i.rank, "Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank " + i.rank + "."), null != s && assert(3 === s.rank || 1 === s.rank, "Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank " + s.rank + "."), batchNorm_(u, l, p, s, i, o);
  }

  function batchNorm4d_(e, t, r, n, a, o) {
    void 0 === o && (o = .001);
    var i,
        s,
        u = convertToTensor(e, "x", "batchNorm"),
        l = convertToTensor(t, "mean", "batchNorm"),
        p = convertToTensor(r, "variance", "batchNorm");
    return null != a && (i = convertToTensor(a, "scale", "batchNorm")), null != n && (s = convertToTensor(n, "offset", "batchNorm")), assert(4 === u.rank, "Error in batchNorm4D: x must be rank 4 but got rank " + u.rank + "."), assert(4 === l.rank || 1 === l.rank, "Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank " + l.rank + "."), assert(4 === p.rank || 1 === p.rank, "Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank " + p.rank + "."), null != i && assert(4 === i.rank || 1 === i.rank, "Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank " + i.rank + "."), null != s && assert(4 === s.rank || 1 === s.rank, "Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank " + s.rank + "."), batchNorm_(u, l, p, s, i, o);
  }

  function batchNormalization_(e, t, r, n, a, o) {
    return void 0 === n && (n = .001), warnDeprecation(), batchNorm_(e, t, r, o, a, n);
  }

  function batchNorm_(e, t, r, n, a, o) {
    void 0 === o && (o = .001);
    var i,
        s,
        u,
        l = convertToTensor(e, "x", "batchNorm"),
        p = convertToTensor(t, "mean", "batchNorm"),
        c = convertToTensor(r, "variance", "batchNorm");
    return null != a && (i = convertToTensor(a, "scale", "batchNorm")), null != n && (s = convertToTensor(n, "offset", "batchNorm")), assert(p.rank === c.rank, "Batch normalization gradient requires mean and variance to have equal ranks."), assert(null == s || p.rank === s.rank, "Batch normalization gradient requires mean and offset to have equal ranks."), assert(null == i || p.rank === i.rank, "Batch normalization gradient requires mean and scale to have equal ranks."), u = 0 === l.rank || 1 === l.rank ? l.as4D(1, 1, 1, l.size) : 2 === l.rank ? l.as4D(1, 1, l.shape[0], l.shape[1]) : 3 === l.rank ? l.as4D(1, l.shape[0], l.shape[1], l.shape[2]) : l, ENV.engine.runKernel(function (e) {
      return e.batchNormalization(u, batchnormReshape4D(p), batchnormReshape4D(c), o, batchnormReshape4D(i), batchnormReshape4D(s));
    }, {
      $x: l,
      $mean: p,
      $variance: c,
      $scale: i,
      $offset: s
    }, function (e) {
      var t = null == i ? scalar(1) : i,
          r = getReductionAxes(p.shape, u.shape),
          n = [];

      if (1 === p.rank) {
        for (var a = 0; a < u.shape.length - 1; ++a) {
          n.push(u.shape[a]);
        }

        n.push(1);
      }

      var s = l.sub(p),
          h = e.mul(t),
          d = rsqrt(c.add(scalar(o))),
          f = d.mul(d).mul(d).mul(scalar(-.5));
      return {
        $x: function $x() {
          return 1 === p.rank ? e.mul(tile(d.as4D(1, 1, 1, p.shape[0]), n)).mul(t).reshape(l.shape) : e.mul(d).mul(t).reshape(l.shape);
        },
        $mean: function $mean() {
          var e = d.mul(scalar(-1)).mul(h);
          return 1 === p.rank && (e = e.sum(r)), e.reshape(p.shape);
        },
        $variance: function $variance() {
          var e = f.mul(s).mul(h);
          return 1 === p.rank && (e = e.sum(r)), e.reshape(p.shape);
        },
        $scale: function $scale() {
          var t = s.mul(d),
              n = e.mul(t);
          return 1 === p.rank && (n = n.sum(r)), n.reshape(p.shape);
        },
        $offset: function $offset() {
          var t = e;
          return 1 === p.rank && (t = t.sum(r)), t.reshape(p.shape);
        }
      };
    }).reshape(l.shape);
  }

  function batchnormReshape4D(e) {
    return null == e ? null : 0 === e.rank ? e.as1D() : 1 === e.rank ? e : 2 === e.rank ? e.as4D(1, 1, e.shape[0], e.shape[1]) : 3 === e.rank ? e.as4D(1, e.shape[0], e.shape[1], e.shape[2]) : e;
  }

  function batchNormalization2d_(e, t, r, n, a, o) {
    return void 0 === n && (n = .001), warnDeprecation(), batchNorm2d_(e, t, r, o, a, n);
  }

  function batchNormalization3d_(e, t, r, n, a, o) {
    return void 0 === n && (n = .001), warnDeprecation(), batchNorm3d_(e, t, r, o, a, n);
  }

  function batchNormalization4d_(e, t, r, n, a, o) {
    return void 0 === n && (n = .001), warnDeprecation(), batchNorm4d_(e, t, r, o, a, n);
  }

  function warnDeprecation() {
    deprecationWarn("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon");
  }

  var batchNormalization2d = op({
    batchNormalization2d_: batchNormalization2d_
  }),
      batchNormalization3d = op({
    batchNormalization3d_: batchNormalization3d_
  }),
      batchNormalization4d = op({
    batchNormalization4d_: batchNormalization4d_
  }),
      batchNormalization = op({
    batchNormalization_: batchNormalization_
  }),
      batchNorm = op({
    batchNorm_: batchNorm_
  }),
      batchNorm2d = op({
    batchNorm2d_: batchNorm2d_
  }),
      batchNorm3d = op({
    batchNorm3d_: batchNorm3d_
  }),
      batchNorm4d = op({
    batchNorm4d_: batchNorm4d_
  });

  function computePool2DInfo(e, t, r, n, a, o, i) {
    void 0 === i && (i = "channelsLast");
    var s,
        u = parseTupleParam(t),
        l = u[0],
        p = u[1];
    if ("channelsLast" === i) s = [l, p, e[3], e[3]];else {
      if ("channelsFirst" !== i) throw new Error("Unknown dataFormat " + i);
      s = [l, p, e[1], e[1]];
    }
    return computeConv2DInfo(e, s, r, n, a, o, !1, i);
  }

  function computeConv2DInfo(e, t, r, n, a, o, i, s) {
    void 0 === i && (i = !1), void 0 === s && (s = "channelsLast");
    var u = [-1, -1, -1, -1],
        l = u[0],
        p = u[1],
        c = u[2],
        h = u[3];
    if ("channelsLast" === s) l = e[0], p = e[1], c = e[2], h = e[3];else {
      if ("channelsFirst" !== s) throw new Error("Unknown dataFormat " + s);
      l = e[0], h = e[1], p = e[2], c = e[3];
    }
    var d,
        f = t[0],
        m = t[1],
        g = t[3],
        y = parseTupleParam(r),
        v = y[0],
        x = y[1],
        b = parseTupleParam(n),
        w = b[0],
        N = b[1],
        S = getEffectiveFilterSize(f, w),
        T = getEffectiveFilterSize(m, N),
        E = getPadAndOutInfo(a, p, c, v, x, S, T, o),
        _ = E.padInfo,
        I = E.outHeight,
        A = E.outWidth,
        C = i ? g * h : g;
    return "channelsFirst" === s ? d = [l, C, I, A] : "channelsLast" === s && (d = [l, I, A, C]), {
      batchSize: l,
      dataFormat: s,
      inHeight: p,
      inWidth: c,
      inChannels: h,
      outHeight: I,
      outWidth: A,
      outChannels: C,
      padInfo: _,
      strideHeight: v,
      strideWidth: x,
      filterHeight: f,
      filterWidth: m,
      effectiveFilterHeight: S,
      effectiveFilterWidth: T,
      dilationHeight: w,
      dilationWidth: N,
      inShape: e,
      outShape: d,
      filterShape: t
    };
  }

  function computeConv3DInfo(e, t, r, n, a, o, i) {
    void 0 === o && (o = !1), void 0 === i && (i = "channelsLast");
    var s = [-1, -1, -1, -1, -1],
        u = s[0],
        l = s[1],
        p = s[2],
        c = s[3],
        h = s[4];
    if ("channelsLast" === i) u = e[0], l = e[1], p = e[2], c = e[3], h = e[4];else {
      if ("channelsFirst" !== i) throw new Error("Unknown dataFormat " + i);
      u = e[0], h = e[1], l = e[2], p = e[3], c = e[4];
    }

    var d,
        f = t[0],
        m = t[1],
        g = t[2],
        y = t[4],
        v = parse3TupleParam(r),
        x = v[0],
        b = v[1],
        w = v[2],
        N = parse3TupleParam(n),
        S = N[0],
        T = N[1],
        E = N[2],
        _ = get3DPadAndOutInfo(a, l, p, c, x, b, w, getEffectiveFilterSize(f, S), getEffectiveFilterSize(m, T), getEffectiveFilterSize(g, E)),
        I = _.padInfo,
        A = _.outDepth,
        C = _.outHeight,
        P = _.outWidth,
        k = o ? y * h : y;

    return "channelsFirst" === i ? d = [u, k, A, C, P] : "channelsLast" === i && (d = [u, A, C, P, k]), {
      batchSize: u,
      dataFormat: i,
      inDepth: l,
      inHeight: p,
      inWidth: c,
      inChannels: h,
      outDepth: A,
      outHeight: C,
      outWidth: P,
      outChannels: k,
      padInfo: I,
      strideDepth: x,
      strideHeight: b,
      strideWidth: w,
      filterDepth: f,
      filterHeight: m,
      filterWidth: g,
      dilationDepth: S,
      dilationHeight: T,
      dilationWidth: E,
      inShape: e,
      outShape: d,
      filterShape: t
    };
  }

  function computeOutputShape3D(e, t, r, n, a, o) {
    null == a && (a = computeDefaultPad(e, t, n));
    var i = e[0],
        s = e[1],
        u = conditionalRound((i - t + 2 * a) / n + 1, o);
    assert(isInt(u), "The output # of rows (" + u + ") must be an integer. Change the stride and/or zero pad parameters");
    var l = conditionalRound((s - t + 2 * a) / n + 1, o);
    return assert(isInt(l), "The output # of columns (" + l + ") must be an integer. Change the stride and/or zero pad parameters"), [u, l, r];
  }

  function computeDefaultPad(e, t, r, n) {
    void 0 === n && (n = 1);
    var a = getEffectiveFilterSize(t, n);
    return Math.floor((e[0] * (r - 1) - r + a) / 2);
  }

  function parseTupleParam(e) {
    return "number" == typeof e ? [e, e] : e;
  }

  function parse3TupleParam(e) {
    return "number" == typeof e ? [e, e, e] : e;
  }

  function getEffectiveFilterSize(e, t) {
    return t <= 1 ? e : e + (e - 1) * (t - 1);
  }

  function getPadAndOutInfo(e, t, r, n, a, o, i, s) {
    var u, l, p;

    if ("number" == typeof e) {
      u = {
        top: e,
        bottom: e,
        left: e,
        right: e,
        type: 0 === e ? "VALID" : "NUMBER"
      };
      var c = computeOutputShape3D([t, r, 1], o, 1, n, e, s);
      l = c[0], p = c[1];
    } else if ("same" === e) {
      l = Math.ceil(t / n), p = Math.ceil(r / a);
      var h = Math.max(0, (l - 1) * n + o - t),
          d = Math.max(0, (p - 1) * a + i - r),
          f = Math.floor(h / 2),
          m = h - f,
          g = Math.floor(d / 2);
      u = {
        top: f,
        bottom: m,
        left: g,
        right: d - g,
        type: "SAME"
      };
    } else {
      if ("valid" !== e) throw Error("Unknown padding parameter: " + e);
      u = {
        top: 0,
        bottom: 0,
        left: 0,
        right: 0,
        type: "VALID"
      }, l = Math.ceil((t - o + 1) / n), p = Math.ceil((r - i + 1) / a);
    }

    return {
      padInfo: u,
      outHeight: l,
      outWidth: p
    };
  }

  function get3DPadAndOutInfo(e, t, r, n, a, o, i, s, u, l) {
    var p, c, h, d;

    if ("same" === e) {
      var f = ((c = Math.ceil(t / a)) - 1) * a + s - t,
          m = ((h = Math.ceil(r / o)) - 1) * o + u - r,
          g = ((d = Math.ceil(n / i)) - 1) * i + l - n,
          y = Math.floor(f / 2),
          v = f - y,
          x = Math.floor(m / 2),
          b = m - x,
          w = Math.floor(g / 2);
      p = {
        top: x,
        bottom: b,
        left: w,
        right: g - w,
        front: y,
        back: v,
        type: "SAME"
      };
    } else {
      if ("valid" !== e) throw Error("Unknown padding parameter: " + e);
      p = {
        top: 0,
        bottom: 0,
        left: 0,
        right: 0,
        front: 0,
        back: 0,
        type: "VALID"
      }, c = Math.ceil((t - s + 1) / a), h = Math.ceil((r - u + 1) / o), d = Math.ceil((n - l + 1) / i);
    }

    return {
      padInfo: p,
      outDepth: c,
      outHeight: h,
      outWidth: d
    };
  }

  function conditionalRound(e, t) {
    if (!t) return e;

    switch (t) {
      case "round":
        return Math.round(e);

      case "ceil":
        return Math.ceil(e);

      case "floor":
        return Math.floor(e);

      default:
        throw new Error("Unknown roundingMode " + t);
    }
  }

  function tupleValuesAreOne(e) {
    var t = parseTupleParam(e),
        r = t[0],
        n = t[1];
    return 1 === r && 1 === n;
  }

  function eitherStridesOrDilationsAreOne(e, t) {
    return tupleValuesAreOne(e) || tupleValuesAreOne(t);
  }

  function matMul_(e, t, r, n) {
    var a;
    void 0 === r && (r = !1), void 0 === n && (n = !1);
    var o = convertToTensor(e, "a", "matMul"),
        i = convertToTensor(t, "b", "matMul");
    o = (a = makeTypesMatch(o, i))[0], i = a[1];
    var s = r ? o.shape[o.rank - 2] : o.shape[o.rank - 1],
        u = n ? i.shape[i.rank - 1] : i.shape[i.rank - 2],
        l = r ? o.shape[o.rank - 1] : o.shape[o.rank - 2],
        p = n ? i.shape[i.rank - 2] : i.shape[i.rank - 1],
        c = o.shape.slice(0, -2),
        h = i.shape.slice(0, -2),
        d = sizeFromShape(c),
        f = sizeFromShape(h);
    assert(o.rank >= 2 && i.rank >= 2 && o.rank === i.rank, "Error in matMul: inputs must have the same rank of at least 2, got ranks " + o.rank + " and " + i.rank + "."), assert(arraysEqual(c, h), "Error in matMul: outer dimensions (" + c + ") and (" + h + ") of Tensors with shapes " + o.shape + " and " + i.shape + " must match."), assert(s === u, "Error in matMul: inner shapes (" + s + ") and (" + u + ") of Tensors with shapes " + o.shape + " and " + i.shape + " and transposeA=" + r + " and transposeB=" + n + " must match.");
    var m = o.shape.slice(0, -2).concat([l, p]),
        g = r ? o.as3D(d, s, l) : o.as3D(d, l, s),
        y = n ? i.as3D(f, p, u) : i.as3D(f, u, p);
    return ENV.engine.runKernel(function (e) {
      return e.batchMatMul(g, y, r, n);
    }, {
      $a: g,
      $b: y
    }, function (e) {
      return r || n ? !r && n ? {
        $a: function $a() {
          return e.matMul(y, !1, !1);
        },
        $b: function $b() {
          return e.matMul(g, !0, !1);
        }
      } : r && !n ? {
        $a: function $a() {
          return y.matMul(e, !1, !0);
        },
        $b: function $b() {
          return g.matMul(e, !1, !1);
        }
      } : {
        $a: function $a() {
          return y.matMul(e, !0, !0);
        },
        $b: function $b() {
          return e.matMul(g, !0, !0);
        }
      } : {
        $a: function $a() {
          return e.matMul(y, !1, !0);
        },
        $b: function $b() {
          return g.matMul(e, !0, !1);
        }
      };
    }).reshape(m);
  }

  function outerProduct_(e, t) {
    var r = convertToTensor(e, "v1", "outerProduct"),
        n = convertToTensor(t, "v2", "outerProduct");
    return assert(1 === r.rank && 1 === n.rank, "Error in outerProduct: inputs must be rank 1, but got ranks " + r.rank + " and " + n.rank + "."), r.as2D(-1, 1).matMul(n.as2D(1, -1));
  }

  function dot_(e, t) {
    var r = convertToTensor(e, "t1", "dot"),
        n = convertToTensor(t, "t2", "dot");
    assert(!(1 !== r.rank && 2 !== r.rank || 1 !== n.rank && 2 !== n.rank), "Error in dot: inputs must all be rank 1 or 2, but got ranks " + r.rank + " and " + n.rank + ".");
    var a = 1 === r.rank ? r.size : r.shape[1],
        o = 1 === n.rank ? n.size : n.shape[0];
    return assert(a === o, "Error in dot: inner dimensions of inputs must match, but got " + a + " and " + o + "."), 1 === r.rank && 1 === n.rank ? r.as2D(1, -1).matMul(n.as2D(-1, 1)).asScalar() : 1 === r.rank && 2 === n.rank ? r.as2D(1, -1).matMul(n.as2D(n.shape[0], n.shape[1])).as1D() : 2 === r.rank && 1 === n.rank ? r.matMul(n.as2D(-1, 1)).as1D() : r.matMul(n.as2D(n.shape[0], n.shape[1]));
  }

  var matMul = op({
    matMul_: matMul_
  }),
      dot = op({
    dot_: dot_
  }),
      outerProduct = op({
    outerProduct_: outerProduct_
  });

  function conv1d_(e, t, r, n, a, o, i) {
    void 0 === a && (a = "NWC"), void 0 === o && (o = 1);
    var s = convertToTensor(e, "x", "conv1d"),
        u = convertToTensor(t, "filter", "conv1d"),
        l = s,
        p = !1;
    2 === s.rank && (p = !0, l = s.as3D(1, s.shape[0], s.shape[1])), assert(3 === l.rank, "Error in conv1d: input must be rank 3, but got rank " + l.rank + "."), assert(3 === u.rank, "Error in conv1d: filter must be rank 3, but got rank " + u.rank + "."), null != i && assert(isInt(n), "Error in conv1d: pad must be an integer when using, dimRoundingMode " + i + " but got pad " + n + "."), assert(l.shape[2] === u.shape[1], "Error in conv1d: depth of input (" + l.shape[2] + ") must match input depth for filter " + u.shape[1] + "."), assert(eitherStridesOrDilationsAreOne(r, o), "Error in conv1D: Either stride or dilation must be 1. Got stride " + r + " and dilation '" + o + "'"), assert("NWC" === a, "Error in conv1d: got dataFormat of " + a + " but only NWC is currently supported.");
    var c = u.as4D(1, u.shape[0], u.shape[1], u.shape[2]),
        h = l.as4D(l.shape[0], 1, l.shape[1], l.shape[2]),
        d = conv2d(h, c, [1, r], n, "NHWC", [1, o], i);
    return p ? d.as2D(d.shape[2], d.shape[3]) : d.as3D(d.shape[0], d.shape[2], d.shape[3]);
  }

  function conv2d_(e, t, r, n, a, o, i) {
    void 0 === a && (a = "NHWC"), void 0 === o && (o = [1, 1]);
    var s = convertToTensor(e, "x", "conv2d"),
        u = convertToTensor(t, "filter", "conv2d"),
        l = s,
        p = !1;
    3 === s.rank && (p = !0, l = s.as4D(1, s.shape[0], s.shape[1], s.shape[2])), assert(4 === l.rank, "Error in conv2d: input must be rank 4, but got rank " + l.rank + "."), assert(4 === u.rank, "Error in conv2d: filter must be rank 4, but got rank " + u.rank + "."), null != i && assert(isInt(n), "Error in conv2d: pad must be an integer when using, dimRoundingMode " + i + " but got pad " + n + "."), assert(l.shape[3] === u.shape[2], "Error in conv2d: depth of input (" + l.shape[3] + ") must match input depth for filter " + u.shape[2] + "."), assert(eitherStridesOrDilationsAreOne(r, o), "Error in conv2D: Either strides or dilations must be 1. Got strides " + r + " and dilations '" + o + "'"), assert("NHWC" === a, "Error in conv2d: got dataFormat of " + a + " but only NHWC is currently supported.");
    var c,
        h = computeConv2DInfo(l.shape, u.shape, r, o, n, i);
    if (1 !== h.filterHeight || 1 !== h.filterWidth || 1 !== h.dilationHeight || 1 !== h.dilationWidth || 1 !== h.strideHeight || 1 !== h.strideWidth || "SAME" !== h.padInfo.type && "VALID" !== h.padInfo.type) c = ENV.engine.runKernel(function (e) {
      return e.conv2d(l, u, h);
    }, {
      x: l,
      $filter: u
    }, function (e) {
      return assert(tupleValuesAreOne(o), "Error in gradient of conv2D: dilation rates greater than 1 are notyet supported in gradients. Got dilations '" + o + "'"), {
        x: function x() {
          return conv2dDerInput_(l.shape, e, u, r, n);
        },
        $filter: function $filter() {
          return conv2dDerFilter_(l, e, u.shape, r, n);
        }
      };
    });else {
      var d = l.reshape([-1, h.inChannels]),
          f = u.reshape([h.inChannels, h.outChannels]);
      c = matMul(d, f).reshape(h.outShape);
    }
    return p ? c.as3D(c.shape[1], c.shape[2], c.shape[3]) : c;
  }

  function conv2dDerInput_(e, t, r, n, a, o) {
    assert(e.length === t.rank, "Length of inShape (" + e.length + ") and rank of dy (" + t.rank + ") must match");
    var i = e,
        s = t,
        u = !1;
    3 === t.rank && (u = !0, s = t.as4D(1, t.shape[0], t.shape[1], t.shape[2]), i = [1, e[0], e[1], e[2]]);
    var l = i[3],
        p = s.shape[3];
    assert(4 === i.length, "Error in conv2dDerInput: inShape must be length 4, but got length " + i.length + "."), assert(4 === s.rank, "Error in conv2dDerInput: dy must be rank 4, but got rank " + s.rank), assert(4 === r.rank, "Error in conv2dDerInput: filter must be rank 4, but got rank " + r.rank), assert(l === r.shape[2], "Error in conv2dDerInput: depth of input (" + l + ") must match input depth for filter " + r.shape[2] + "."), assert(p === r.shape[3], "Error in conv2dDerInput: depth of output (" + p + ") must match output depth for filter " + r.shape[3] + "."), null != o && assert(isInt(a), "Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode " + o + " but got pad " + a + ".");
    var c = computeConv2DInfo(i, r.shape, n, 1, a, o),
        h = ENV.engine.runKernel(function (e) {
      return e.conv2dDerInput(s, r, c);
    }, {
      dy4D: s,
      filter: r
    }, function (e) {
      return {
        dy4D: function dy4D() {
          return conv2d(e, r, n, a, "NHWC", 1, o);
        },
        filter: function filter() {
          return conv2dDerFilter(e, s, r.shape, n, a, o);
        }
      };
    });
    return u ? h.as3D(h.shape[1], h.shape[2], h.shape[3]) : h;
  }

  function conv2dDerFilter_(e, t, r, n, a, o) {
    var i = e;
    3 === e.rank && (i = e.as4D(1, e.shape[0], e.shape[1], e.shape[2]));
    var s = t;
    3 === s.rank && (s = t.as4D(1, t.shape[0], t.shape[1], t.shape[2])), assert(4 === i.rank, "Error in conv2dDerFilter: input must be rank 4, but got shape " + i.shape + "."), assert(4 === s.rank, "Error in conv2dDerFilter: dy must be rank 4, but got shape " + s.shape + "."), assert(4 === r.length, "Error in conv2dDerFilter: filterShape must be length 4, but got " + r + "."), assert(i.shape[3] === r[2], "Error in conv2dDerFilter: depth of input " + i.shape[3] + ") must match input depth in filter (" + r[2] + "."), assert(s.shape[3] === r[3], "Error in conv2dDerFilter: depth of dy (" + s.shape[3] + ") must match output depth for filter (" + r[3] + ")."), null != o && assert(isInt(a), "Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode " + o + " but got pad " + a + ".");
    var u = computeConv2DInfo(i.shape, r, n, 1, a, o);
    return ENV.engine.runKernel(function (e) {
      return e.conv2dDerFilter(i, s, u);
    }, {
      x4D: i,
      dy4D: s
    });
  }

  function conv2dTranspose_(e, t, r, n, a, o) {
    return conv2dDerInput_(r, convertToTensor(e, "x", "conv2dTranspose"), convertToTensor(t, "filter", "conv2dTranspose"), n, a, o);
  }

  function depthwiseConv2d_(e, t, r, n, a, o, i) {
    void 0 === a && (a = "NHWC"), void 0 === o && (o = [1, 1]);
    var s = convertToTensor(e, "x", "depthwiseConv2d"),
        u = convertToTensor(t, "filter", "depthwiseConv2d"),
        l = s,
        p = !1;
    3 === s.rank && (p = !0, l = s.as4D(1, s.shape[0], s.shape[1], s.shape[2])), assert(4 === l.rank, "Error in depthwiseConv2d: input must be rank 4, but got rank " + l.rank + "."), assert(4 === u.rank, "Error in depthwiseConv2d: filter must be rank 4, but got rank " + u.rank + "."), assert(l.shape[3] === u.shape[2], "Error in depthwiseConv2d: number of input channels (" + l.shape[3] + ") must match the inChannels dimension in filter " + u.shape[2] + "."), null == o && (o = [1, 1]), assert(eitherStridesOrDilationsAreOne(r, o), "Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides " + r + " and dilations '" + o + "'"), null != i && assert(isInt(n), "Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode " + i + " but got pad " + n + ".");
    var c = computeConv2DInfo(l.shape, u.shape, r, o, n, i, !0),
        h = ENV.engine.runKernel(function (e) {
      return e.depthwiseConv2D(l, u, c);
    }, {
      x: l,
      $filter: u
    }, function (e) {
      return assert(tupleValuesAreOne(o), "Error in gradient of depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '" + o + "'"), {
        x: function x() {
          return depthwiseConv2dDerInput(l.shape, e, u, c);
        },
        $filter: function $filter() {
          return depthwiseConv2dDerFilter(l, e, u.shape, c);
        }
      };
    });
    return p ? h.as3D(h.shape[1], h.shape[2], h.shape[3]) : h;
  }

  function separableConv2d_(e, t, r, n, a, o, i) {
    void 0 === o && (o = [1, 1]), void 0 === i && (i = "NHWC");
    var s = convertToTensor(e, "x", "separableConv2d"),
        u = convertToTensor(t, "depthwiseFilter", "separableConv2d"),
        l = convertToTensor(r, "pointwiseFilter", "separableConv2d"),
        p = s,
        c = !1;
    if (3 === s.rank && (c = !0, p = s.as4D(1, s.shape[0], s.shape[1], s.shape[2])), "NCHW" === i) throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");
    assert(4 === p.rank, "Error in separableConv2d: input must be rank 4, but got rank " + p.rank + "."), assert(4 === u.rank, "Error in separableConv2d: depthwise filter must be rank 4, but got rank " + u.rank + "."), assert(4 === l.rank, "Error in separableConv2d: pointwise filter must be rank 4, but got rank " + u.rank + "."), assert(1 === l.shape[0], "Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got " + l.shape[0] + "."), assert(1 === l.shape[1], "Error in separableConv2d: the second dimension of pointwise filter  must be 1, but got " + l.shape[1] + ".");
    var h = u.shape[2],
        d = u.shape[3];
    assert(l.shape[2] === h * d, "Error in separableConv2d: the third dimension of pointwise filter must be " + h * d + ", but got " + l.shape[2] + ".");
    var f = depthwiseConv2d(p, u, n, a, i, o),
        m = conv2d(f, l, 1, "valid", i);
    return c ? m.as3D(m.shape[1], m.shape[2], m.shape[3]) : m;
  }

  function parseTupleParam$1(e) {
    return "number" == typeof e ? [e, e, e] : 2 === e.length ? [e[0], e[1], 1] : e;
  }

  function tupleValuesAreOne$1(e) {
    var t = parseTupleParam$1(e),
        r = t[0],
        n = t[1],
        a = t[2];
    return 1 === r && 1 === n && 1 === a;
  }

  function eitherStridesOrDilationsAreOne$1(e, t) {
    return tupleValuesAreOne$1(e) || tupleValuesAreOne$1(t);
  }

  function depthwiseConv2dDerInput(e, t, r, n) {
    var a = t,
        o = !1;
    3 === t.rank && (o = !0, a = t.as4D(1, t.shape[0], t.shape[1], t.shape[2]));
    var i = ENV.engine.runKernel(function (e) {
      return e.depthwiseConv2DDerInput(a, r, n);
    }, {
      dy4D: a
    });
    return o ? i.as3D(i.shape[1], i.shape[2], i.shape[3]) : i;
  }

  function depthwiseConv2dDerFilter(e, t, r, n) {
    var a = e;
    3 === e.rank && (a = e.as4D(1, e.shape[0], e.shape[1], e.shape[2]));
    var o = t;
    return 3 === o.rank && (o = t.as4D(1, t.shape[0], t.shape[1], t.shape[2])), ENV.engine.runKernel(function (e) {
      return e.depthwiseConv2DDerFilter(a, o, n);
    }, {
      x4D: a,
      dy4D: o
    });
  }

  function conv3d_(e, t, r, n, a, o) {
    void 0 === a && (a = "NHWC"), void 0 === o && (o = [1, 1, 1]);
    var i = convertToTensor(e, "x", "conv3d"),
        s = convertToTensor(t, "filter", "conv3d"),
        u = i,
        l = !1;
    4 === i.rank && (l = !0, u = i.as5D(1, i.shape[0], i.shape[1], i.shape[2], i.shape[3])), assert(5 === u.rank, "Error in conv3d: input must be rank 5, but got rank " + u.rank + "."), assert(5 === s.rank, "Error in conv3d: filter must be rank 5, but got rank " + s.rank + "."), assert(u.shape[4] === s.shape[3], "Error in conv3d: depth of input (" + u.shape[4] + ") must match input depth for filter " + s.shape[3] + "."), assert(eitherStridesOrDilationsAreOne$1(r, o), "Error in conv3D: Either strides or dilations must be 1. Got strides " + r + " and dilations '" + o + "'"), assert("NHWC" === a, "Error in conv3d: got dataFormat of " + a + " but only NHWC is currently supported.");
    var p = computeConv3DInfo(u.shape, s.shape, r, o, n),
        c = ENV.engine.runKernel(function (e) {
      return e.conv3d(u, s, p);
    }, {
      x: u,
      $filter: s
    }, function (e) {
      return assert(tupleValuesAreOne$1(o), "Error in gradient of conv3D: dilation rates greater than 1 are notyet supported in gradients. Got dilations '" + o + "'"), {
        x: function x() {
          return conv3dDerInput_(u.shape, e, s, r, n);
        },
        $filter: function $filter() {
          return conv3dDerFilter_(u, e, s.shape, r, n);
        }
      };
    });
    return l ? c.as4D(c.shape[1], c.shape[2], c.shape[3], c.shape[4]) : c;
  }

  function conv3dDerInput_(e, t, r, n, a) {
    assert(e.length === t.rank, "Length of inShape (" + e.length + ") and rank of dy (" + t.rank + ") must match");
    var o = e,
        i = t,
        s = !1;
    4 === t.rank && (s = !0, i = t.as5D(1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]), o = [1, e[0], e[1], e[2], e[3]]);
    var u = o[4],
        l = i.shape[4];
    assert(5 === o.length, "Error in conv3dDerInput: inShape must be length 5, but got length " + o.length + "."), assert(5 === i.rank, "Error in conv3dDerInput: dy must be rank 5, but got rank " + i.rank), assert(5 === r.rank, "Error in conv3dDerInput: filter must be rank 5, but got rank " + r.rank), assert(u === r.shape[3], "Error in conv3dDerInput: depth of input (" + u + ") must match input depth for filter " + r.shape[3] + "."), assert(l === r.shape[4], "Error in conv3dDerInput: depth of output (" + l + ") must match output depth for filter " + r.shape[4] + ".");
    var p = computeConv3DInfo(o, r.shape, n, 1, a),
        c = ENV.engine.runKernel(function (e) {
      return e.conv3dDerInput(i, r, p);
    }, {
      dy5D: i
    });
    return s ? c.as4D(c.shape[1], c.shape[2], c.shape[3], c.shape[4]) : c;
  }

  function conv3dDerFilter_(e, t, r, n, a) {
    var o = e;
    4 === e.rank && (o = e.as5D(1, e.shape[0], e.shape[1], e.shape[2], e.shape[3]));
    var i = t;
    4 === i.rank && (i = t.as5D(1, t.shape[0], t.shape[1], t.shape[2], t.shape[3])), assert(5 === o.rank, "Error in conv3dDerFilter: input must be rank 5, but got shape " + o.shape + "."), assert(5 === i.rank, "Error in conv3dDerFilter: dy must be rank 5, but got shape " + i.shape + "."), assert(5 === r.length, "Error in conv3dDerFilter: filterShape must be length 5, but got " + r + "."), assert(o.shape[4] === r[3], "Error in conv3dDerFilter: depth of input " + o.shape[4] + ") must match input depth in filter (" + r[3] + "."), assert(i.shape[4] === r[4], "Error in conv3dDerFilter: depth of dy (" + i.shape[4] + ") must match output depth for filter (" + r[4] + ").");
    var s = computeConv3DInfo(o.shape, r, n, 1, a);
    return ENV.engine.runKernel(function (e) {
      return e.conv3dDerFilter(o, i, s);
    }, {
      x5D: o,
      dy5D: i
    });
  }

  var conv1d = op({
    conv1d_: conv1d_
  }),
      conv2d = op({
    conv2d_: conv2d_
  }),
      conv3d = op({
    conv3d_: conv3d_
  }),
      conv2dDerFilter = op({
    conv2dDerFilter_: conv2dDerFilter_
  }),
      depthwiseConv2d = op({
    depthwiseConv2d_: depthwiseConv2d_
  }),
      separableConv2d = op({
    separableConv2d_: separableConv2d_
  }),
      conv2dTranspose = op({
    conv2dTranspose_: conv2dTranspose_
  });

  function reverse1d_(e) {
    var t = convertToTensor(e, "x", "reverse");
    return assert(1 === t.rank, "Error in reverse1D: x must be rank 1 but got\n             rank " + t.rank + "."), reverse(t, 0);
  }

  function reverse2d_(e, t) {
    var r = convertToTensor(e, "x", "reverse");
    return assert(2 === r.rank, "Error in reverse2D: x must be rank 2 but got\n             rank " + r.rank + "."), reverse(r, t);
  }

  function reverse3d_(e, t) {
    var r = convertToTensor(e, "x", "reverse");
    return assert(3 === r.rank, "Error in reverse3D: x must be rank 3 but got\n             rank " + r.rank + "."), reverse(r, t);
  }

  function reverse4d_(e, t) {
    var r = convertToTensor(e, "x", "reverse");
    return assert(4 === r.rank, "Error in reverse4D: x must be rank 4 but got\n             rank " + r.rank + "."), reverse(r, t);
  }

  function reverse_(e, t) {
    var r = convertToTensor(e, "x", "reverse");
    if (0 === r.rank) return r.clone();
    var n = parseAxisParam(t, r.shape);
    return ENV.engine.runKernel(function (e) {
      return e.reverse(r, n);
    }, {
      $x: r
    }, function (e) {
      return {
        $x: function $x() {
          return e.reverse(n);
        }
      };
    }).reshapeAs(r);
  }

  var reverse = op({
    reverse_: reverse_
  }),
      reverse1d = op({
    reverse1d_: reverse1d_
  }),
      reverse2d = op({
    reverse2d_: reverse2d_
  }),
      reverse3d = op({
    reverse3d_: reverse3d_
  }),
      reverse4d = op({
    reverse4d_: reverse4d_
  });

  function maxPoolImpl_(e, t, r, n, a, o) {
    var i = convertToTensor(e, "x", "maxPool"),
        s = i,
        u = !1;
    3 === i.rank && (u = !0, s = i.as4D(1, i.shape[0], i.shape[1], i.shape[2])), null == n && (n = [1, 1]), assert(4 === s.rank, "Error in maxPool: input must be rank 4 but got rank " + s.rank + "."), assert(eitherStridesOrDilationsAreOne(r, n), "Error in maxPool: Either strides or dilations must be 1. Got strides " + r + " and dilations '" + n + "'"), null != o && assert(isInt(a), "Error in maxPool: pad must be an integer when using, dimRoundingMode " + o + " but got pad " + a + ".");
    var l = computePool2DInfo(s.shape, t, r, n, a, o),
        p = ENV.engine.runKernel(function (e, t) {
      return t(e.maxPool(s, l));
    }, {
      x: s
    }, function (e, o) {
      var i = o[0];
      return {
        x: function x() {
          return maxPoolBackprop(e, s, i, t, r, n, a);
        }
      };
    });
    return u ? p.as3D(p.shape[1], p.shape[2], p.shape[3]) : p;
  }

  function maxPool_(e, t, r, n, a) {
    return maxPoolImpl_(e, t, r, 1, n, a);
  }

  function avgPoolImpl_(e, t, r, n, a, o) {
    var i = convertToTensor(e, "x", "avgPool", "float32");
    null == n && (n = [1, 1]), assert(eitherStridesOrDilationsAreOne(r, n), "Error in avgPool: Either strides or dilations must be 1. Got strides " + r + " and dilations '" + n + "'");
    var s = i,
        u = !1;
    3 === i.rank && (u = !0, s = i.as4D(1, i.shape[0], i.shape[1], i.shape[2])), assert(4 === s.rank, "Error in avgPool: x must be rank 4 but got rank " + s.rank + "."), null != o && assert(isInt(a), "Error in avgPool: pad must be an integer when using, dimRoundingMode " + o + " but got pad " + a + ".");
    var l = computePool2DInfo(s.shape, t, r, n, a, o),
        p = ENV.engine.runKernel(function (e) {
      return e.avgPool(s, l);
    }, {
      x: s
    }, function (e) {
      return {
        x: function x() {
          return avgPoolBackprop(e, s, t, r, n, a);
        }
      };
    });
    return p = p.cast(i.dtype), u ? p.as3D(p.shape[1], p.shape[2], p.shape[3]) : p;
  }

  function avgPool_(e, t, r, n, a) {
    return avgPoolImpl_(e, t, r, 1, n, a);
  }

  function pool_(e, t, r, n, a, o) {
    null == a && (a = [1, 1]), null == o && (o = 1), 0 === n && (n = "valid");
    var i = convertToTensor(e, "x", "maxPool"),
        s = i,
        u = !1;
    3 === i.rank && (u = !0, s = i.as4D(1, i.shape[0], i.shape[1], i.shape[2])), assert(eitherStridesOrDilationsAreOne(o, a), "Error in pool: Either strides or dilations must be 1. Got strides " + o + " and dilations '" + a + "'");
    var l,
        p = computePool2DInfo(s.shape, t, o, a, n),
        c = [p.dilationHeight, p.dilationWidth];
    l = "same" === n ? withSpaceToBatchBasePaddings([p.filterHeight, p.filterWidth], c) : [[0, 0], [0, 0]];
    var h = 1 === c[0] && 1 === c[1],
        d = requiredSpaceToBatchPaddings([p.inHeight, p.inWidth], c, l),
        f = d[0],
        m = d[1],
        g = h ? n : "valid",
        y = h ? s : spaceToBatchND(s, c, f),
        v = ("avg" === r ? function () {
      return avgPoolImpl_(y, t, o, 1, g);
    } : function () {
      return maxPoolImpl_(y, t, o, 1, g);
    })(),
        x = h ? v : batchToSpaceND(v, c, m);
    return u ? x.as3D(x.shape[1], x.shape[2], x.shape[3]) : x;
  }

  function maxPoolBackprop(e, t, r, n, a, o, i, s) {
    var u = convertToTensor(e, "dy", "maxPoolBackprop"),
        l = convertToTensor(t, "input", "maxPoolBackprop"),
        p = convertToTensor(r, "output", "maxPoolBackprop");
    assert(l.rank === u.rank, "Rank of input (" + l.rank + ") does not match rank of dy (" + u.rank + ")"), null == o && (o = [1, 1]), assert(eitherStridesOrDilationsAreOne(a, o), "Error in maxPoolBackProp: Either strides or dilations must be 1. Got strides " + a + " and dilations '" + o + "'"), assert(4 === u.rank, "Error in maxPoolBackprop: dy must be rank 4 but got rank " + u.rank + "."), assert(4 === l.rank, "Error in maxPoolBackprop: input must be rank 4 but got rank " + l.rank + "."), null != s && assert(isInt(i), "Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode " + s + " but got pad " + i + ".");
    var c = computePool2DInfo(l.shape, n, a, o, i, s);
    return ENV.engine.runKernel(function (e) {
      return e.maxPoolBackprop(u, l, p, c);
    }, {
      $dy: u,
      $input: l
    });
  }

  function avgPoolBackprop(e, t, r, n, a, o) {
    var i = convertToTensor(e, "dy", "avgPoolBackprop"),
        s = convertToTensor(t, "input", "avgPoolBackprop");
    assert(s.rank === i.rank, "Rank of input (" + s.rank + ") does not match rank of dy (" + i.rank + ")"), null == a && (a = [1, 1]), assert(eitherStridesOrDilationsAreOne(n, a), "Error in avgPoolBackprop: Either strides or dilations must be 1. Got strides " + n + " and dilations '" + a + "'");
    var u = s,
        l = i,
        p = !1;
    3 === s.rank && (p = !0, u = s.as4D(1, s.shape[0], s.shape[1], s.shape[2]), l = i.as4D(1, i.shape[0], i.shape[1], i.shape[2])), assert(4 === l.rank, "Error in avgPoolBackprop: dy must be rank 4 but got rank " + l.rank + "."), assert(4 === u.rank, "Error in avgPoolBackprop: input must be rank 4 but got rank " + u.rank + ".");
    var c = computePool2DInfo(u.shape, r, n, a, o),
        h = ENV.engine.runKernel(function (e) {
      return e.avgPoolBackprop(l, u, c);
    }, {
      dy4D: l,
      input4D: u
    });
    return p ? h.as3D(h.shape[1], h.shape[2], h.shape[3]) : h;
  }

  function requiredSpaceToBatchPaddings(e, t, r) {
    var n = r.map(function (e) {
      return e[0];
    }),
        a = r.map(function (e) {
      return e[1];
    }),
        o = e.concat(n, a),
        i = t.map(function (e, t) {
      return (e - o[t] % e) % e;
    }),
        s = a.map(function (e, t) {
      return e + i[t];
    });
    return [t.map(function (e, t) {
      return [n[t], s[t]];
    }), t.map(function (e, t) {
      return [0, i[t]];
    })];
  }

  function withSpaceToBatchBasePaddings(e, t) {
    var r = e.map(function (e, r) {
      return e + (e - 1) * (t[r] - 1);
    }).map(function (e) {
      return e - 1;
    }),
        n = r.map(function (e) {
      return Math.floor(e / 2);
    }),
        a = r.map(function (e, t) {
      return e - n[t];
    });
    return r.map(function (e, t) {
      return [n[t], a[t]];
    });
  }

  var maxPool = op({
    maxPool_: maxPool_
  }),
      avgPool = op({
    avgPool_: avgPool_
  }),
      pool = op({
    pool_: pool_
  });

  function slice1d_(e, t, r) {
    var n = convertToTensor(e, "x", "slice1d");
    return assert(1 === n.rank, "slice1d expects a rank-1 tensor, but got a rank-" + n.rank + " tensor"), slice(n, [t], [r]);
  }

  function slice2d_(e, t, r) {
    var n = convertToTensor(e, "x", "slice2d");
    return assert(2 === n.rank, "slice2d expects a rank-2 tensor, but got a rank-" + n.rank + " tensor"), slice(n, t, r);
  }

  function slice3d_(e, t, r) {
    var n = convertToTensor(e, "x", "slice3d");
    return assert(3 === n.rank, "slice3d expects a rank-3 tensor, but got a rank-" + n.rank + " tensor"), slice(n, t, r);
  }

  function slice4d_(e, t, r) {
    var n = convertToTensor(e, "x", "slice4d");
    return assert(4 === n.rank, "slice4d expects a rank-4 tensor, but got a rank-" + n.rank + " tensor"), slice(n, t, r);
  }

  function slice_(e, t, r) {
    var n,
        a,
        o = convertToTensor(e, "x", "slice");
    if (0 === o.rank) throw new Error("Slicing scalar is not possible");
    n = "number" == typeof t ? [t].concat(new Array(o.rank - 1).fill(0)) : t.length < o.rank ? t.concat(new Array(o.rank - t.length).fill(0)) : t.slice(), a = (a = null == r ? new Array(o.rank).fill(-1) : "number" == typeof r ? [r].concat(new Array(o.rank - 1).fill(-1)) : r.length < o.rank ? r.concat(new Array(o.rank - r.length).fill(-1)) : r).map(function (e, t) {
      return e >= 0 ? e : (assert(-1 === e, "Bad value in size"), o.shape[t] - n[t]);
    }), assertParamsValid(o, n, a);
    var i = o.shape;
    return ENV.engine.runKernel(function (e) {
      return e.slice(o, n, a);
    }, {
      $x: o
    }, function (e) {
      for (var t = [], r = 0; r < e.rank; r++) {
        t.push([n[r], i[r] - n[r] - a[r]]);
      }

      return {
        $x: function $x() {
          return e.pad(t);
        }
      };
    });
  }

  var slice = op({
    slice_: slice_
  }),
      slice1d = op({
    slice1d_: slice1d_
  }),
      slice2d = op({
    slice2d_: slice2d_
  }),
      slice3d = op({
    slice3d_: slice3d_
  }),
      slice4d = op({
    slice4d_: slice4d_
  });

  function logSumExp_(e, t, r) {
    void 0 === t && (t = null), void 0 === r && (r = !1);
    var n = convertToTensor(e, "x", "logSumExp"),
        a = parseAxisParam(t, n.shape),
        o = n.max(a, !0),
        i = n.sub(o).exp().sum(a).log(),
        s = o.reshape(i.shape).add(i);

    if (r) {
      var u = expandShapeToKeepDim(s.shape, a);
      return s.reshape(u);
    }

    return s;
  }

  function sum_(e, t, r) {
    void 0 === t && (t = null), void 0 === r && (r = !1);
    var n = convertToTensor(e, "x", "sum");
    "bool" === n.dtype && (n = n.toInt());
    var a = parseAxisParam(t, n.shape);
    return customGrad(function (e) {
      var t = getAxesPermutation(a, e.rank),
          n = a,
          o = e;
      null != t && (o = e.transpose(t), n = getInnerMostAxes(n.length, e.rank));
      var i = ENV.engine.runKernel(function (e) {
        return e.sum(o, n);
      }, {
        permutedX: o
      });

      if (r) {
        var s = expandShapeToKeepDim(i.shape, a);
        i = i.reshape(s);
      }

      return {
        value: i,
        gradFunc: function gradFunc(t) {
          var r = e.shape.slice();
          return a.forEach(function (e) {
            r[e] = 1;
          }), t.reshape(r).mul(ones$1(e.shape, "float32"));
        }
      };
    })(n);
  }

  function prod_(e, t, r) {
    void 0 === t && (t = null), void 0 === r && (r = !1);
    var n = convertToTensor(e, "x", "prod");
    "bool" === n.dtype && (n = n.toInt());
    var a = parseAxisParam(t, n.shape),
        o = getAxesPermutation(a, n.rank),
        i = a,
        s = n;
    null != o && (s = n.transpose(o), i = getInnerMostAxes(i.length, n.rank));
    var u = ENV.engine.runKernel(function (e) {
      return e.prod(s, i);
    }, {
      permutedX: s
    });

    if (r) {
      var l = expandShapeToKeepDim(u.shape, a);
      u = u.reshape(l);
    }

    return u;
  }

  function mean_(e, t, r) {
    void 0 === t && (t = null), void 0 === r && (r = !1);
    var n = convertToTensor(e, "x", "mean"),
        a = parseAxisParam(t, n.shape),
        o = sizeFromShape(computeOutAndReduceShapes(n.shape, a)[1]);
    return customGrad(function (e) {
      var n = scalar(o);
      return {
        value: (n.dtype === e.dtype ? e : e.cast(n.dtype)).div(n).sum(t, r),
        gradFunc: function gradFunc(t) {
          var r = e.shape.slice();
          return a.forEach(function (e) {
            r[e] = 1;
          }), t.reshape(r).mul(ones$1(e.shape, "float32")).div(n);
        }
      };
    })(n);
  }

  function gradForMinAndMax(e, t, r, n, a) {
    var o = t[0];
    return o.rank < r.rank && (o = o.reshape(expandShapeToKeepDim(o.shape, n))), e.rank < r.rank && (e = e.reshape(expandShapeToKeepDim(e.shape, n))), {
      $x: function $x() {
        var t = e.mul(r.equal(o).cast(e.dtype));
        return null == a ? t : t.transpose(a);
      }
    };
  }

  function min_(e, t, r) {
    void 0 === t && (t = null), void 0 === r && (r = !1);
    var n = convertToTensor(e, "x", "min"),
        a = n,
        o = parseAxisParam(t, n.shape),
        i = o,
        s = getAxesPermutation(i, n.rank);
    null != s && (n = n.transpose(s), i = getInnerMostAxes(i.length, n.rank));
    var u = ENV.engine.runKernel(function (e, t) {
      return t(e.min(n, i));
    }, {
      $x: n
    }, function (e, t) {
      return gradForMinAndMax(e, t, a, o, s);
    });

    if (r) {
      var l = expandShapeToKeepDim(u.shape, o);
      u = u.reshape(l);
    }

    return u;
  }

  function max_(e, t, r) {
    void 0 === t && (t = null), void 0 === r && (r = !1);
    var n = convertToTensor(e, "x", "max"),
        a = n,
        o = parseAxisParam(t, n.shape),
        i = o,
        s = getAxesPermutation(i, n.rank);
    null != s && (n = n.transpose(s), i = getInnerMostAxes(i.length, n.rank));
    var u = ENV.engine.runKernel(function (e, t) {
      return t(e.max(n, i));
    }, {
      $x: n
    }, function (e, t) {
      return gradForMinAndMax(e, t, a, o, s);
    });

    if (r) {
      var l = expandShapeToKeepDim(u.shape, o);
      u = u.reshape(l);
    }

    return u;
  }

  function argMin_(e, t) {
    void 0 === t && (t = 0);
    var r = convertToTensor(e, "x", "argMin");
    null == t && (t = 0);
    var n = parseAxisParam(t, r.shape),
        a = getAxesPermutation(n, r.rank);
    return null != a && (r = r.transpose(a), n = getInnerMostAxes(n.length, r.rank)), ENV.engine.runKernel(function (e) {
      return e.argMin(r, n[0]);
    }, {
      $x: r
    }, function (e) {
      return {
        $x: function $x() {
          return zerosLike(r);
        }
      };
    });
  }

  function argMax_(e, t) {
    void 0 === t && (t = 0);
    var r = convertToTensor(e, "x", "argMax");
    null == t && (t = 0);
    var n = parseAxisParam(t, r.shape),
        a = getAxesPermutation(n, r.rank);
    return null != a && (r = r.transpose(a), n = getInnerMostAxes(n.length, r.rank)), ENV.engine.runKernel(function (e) {
      return e.argMax(r, n[0]);
    }, {
      $x: r
    }, function (e) {
      return {
        $x: function $x() {
          return zerosLike(r);
        }
      };
    });
  }

  function all_(e, t, r) {
    void 0 === t && (t = null), void 0 === r && (r = !1);
    var n = convertToTensor(e, "x", "all", "bool"),
        a = parseAxisParam(t, n.shape),
        o = a,
        i = getAxesPermutation(o, n.rank);
    null != i && (n = n.transpose(i), o = getInnerMostAxes(o.length, n.rank));
    var s = ENV.engine.runKernel(function (e) {
      return e.all(n, o);
    }, {
      $x: n
    });

    if (r) {
      var u = expandShapeToKeepDim(s.shape, a);
      return s.reshape(u);
    }

    return s;
  }

  function any_(e, t, r) {
    void 0 === t && (t = null), void 0 === r && (r = !1);
    var n = convertToTensor(e, "x", "any", "bool"),
        a = parseAxisParam(t, n.shape),
        o = a,
        i = getAxesPermutation(o, n.rank);
    null != i && (n = n.transpose(i), o = getInnerMostAxes(o.length, n.rank));
    var s = ENV.engine.runKernel(function (e) {
      return e.any(n, o);
    }, {
      $x: n
    });

    if (r) {
      var u = expandShapeToKeepDim(s.shape, a);
      return s.reshape(u);
    }

    return s;
  }

  function moments_(e, t, r) {
    void 0 === t && (t = null), void 0 === r && (r = !1);
    var n = parseAxisParam(t, (e = convertToTensor(e, "x", "moments")).shape),
        a = e.mean(n, r),
        o = a.shape;
    return r || (o = expandShapeToKeepDim(a.shape, n)), {
      mean: a,
      variance: e.toFloat().sub(a.reshape(o)).square().mean(n, r)
    };
  }

  var all = op({
    all_: all_
  }),
      any = op({
    any_: any_
  }),
      argMax = op({
    argMax_: argMax_
  }),
      argMin = op({
    argMin_: argMin_
  }),
      logSumExp = op({
    logSumExp_: logSumExp_
  }),
      max = op({
    max_: max_
  }),
      mean = op({
    mean_: mean_
  }),
      min = op({
    min_: min_
  }),
      moments = op({
    moments_: moments_
  }),
      sum$1 = op({
    sum_: sum_
  }),
      prod = op({
    prod_: prod_
  });

  function notEqual_(e, t) {
    var r,
        n = convertToTensor(e, "a", "notEqual"),
        a = convertToTensor(t, "b", "notEqual");
    return r = makeTypesMatch(n, a), n = r[0], a = r[1], assertAndGetBroadcastShape(n.shape, a.shape), ENV.engine.runKernel(function (e) {
      return e.notEqual(n, a);
    }, {
      $a: n,
      $b: a
    });
  }

  function notEqualStrict_(e, t) {
    var r = convertToTensor(e, "a", "notEqualStrict"),
        n = convertToTensor(t, "b", "notEqualStrict");
    return assertShapesMatch(r.shape, n.shape, "Error in notEqualStrict: "), r.notEqual(n);
  }

  function less_(e, t) {
    var r,
        n = convertToTensor(e, "a", "less"),
        a = convertToTensor(t, "b", "less");
    return r = makeTypesMatch(n, a), n = r[0], a = r[1], assertAndGetBroadcastShape(n.shape, a.shape), ENV.engine.runKernel(function (e) {
      return e.less(n, a);
    }, {
      $a: n,
      $b: a
    });
  }

  function lessStrict_(e, t) {
    var r = convertToTensor(e, "a", "lessStrict"),
        n = convertToTensor(t, "b", "lessStrict");
    return assertShapesMatch(r.shape, n.shape, "Error in lessStrict: "), r.less(n);
  }

  function equal_(e, t) {
    var r,
        n = convertToTensor(e, "a", "equal"),
        a = convertToTensor(t, "b", "equal");
    return r = makeTypesMatch(n, a), n = r[0], a = r[1], assertAndGetBroadcastShape(n.shape, a.shape), ENV.engine.runKernel(function (e) {
      return e.equal(n, a);
    }, {
      $a: n,
      $b: a
    });
  }

  function equalStrict_(e, t) {
    var r = convertToTensor(e, "a", "equalStrict"),
        n = convertToTensor(t, "b", "equalStrict");
    return assertShapesMatch(r.shape, n.shape, "Error in equalStrict: "), r.equal(n);
  }

  function lessEqual_(e, t) {
    var r,
        n = convertToTensor(e, "a", "lessEqual"),
        a = convertToTensor(t, "b", "lessEqual");
    return r = makeTypesMatch(n, a), n = r[0], a = r[1], assertAndGetBroadcastShape(n.shape, a.shape), ENV.engine.runKernel(function (e) {
      return e.lessEqual(n, a);
    }, {
      $a: n,
      $b: a
    });
  }

  function lessEqualStrict_(e, t) {
    var r = convertToTensor(e, "a", "lessEqualStrict"),
        n = convertToTensor(t, "b", "lessEqualStrict");
    return assertShapesMatch(r.shape, n.shape, "Error in lessEqualStrict: "), r.lessEqual(n);
  }

  function greater_(e, t) {
    var r,
        n = convertToTensor(e, "a", "greater"),
        a = convertToTensor(t, "b", "greater");
    return r = makeTypesMatch(n, a), n = r[0], a = r[1], assertAndGetBroadcastShape(n.shape, a.shape), ENV.engine.runKernel(function (e) {
      return e.greater(n, a);
    }, {
      $a: n,
      $b: a
    });
  }

  function greaterStrict_(e, t) {
    var r = convertToTensor(e, "a", "greaterStrict"),
        n = convertToTensor(t, "b", "greaterStrict");
    return assertShapesMatch(r.shape, n.shape, "Error in greaterStrict: "), r.greater(n);
  }

  function greaterEqual_(e, t) {
    var r,
        n = convertToTensor(e, "a", "greaterEqual"),
        a = convertToTensor(t, "b", "greaterEqual");
    return r = makeTypesMatch(n, a), n = r[0], a = r[1], assertAndGetBroadcastShape(n.shape, a.shape), ENV.engine.runKernel(function (e) {
      return e.greaterEqual(n, a);
    }, {
      $a: n,
      $b: a
    }, function (e) {
      return {
        $a: function $a() {
          return zerosLike(n);
        },
        $b: function $b() {
          return zerosLike(a);
        }
      };
    });
  }

  function greaterEqualStrict_(e, t) {
    var r = convertToTensor(e, "a", "greaterEqualStrict"),
        n = convertToTensor(t, "b", "greaterEqualStrict");
    return assertShapesMatch(r.shape, n.shape, "Error in greaterEqualStrict: "), r.greaterEqual(n);
  }

  var equal = op({
    equal_: equal_
  }),
      equalStrict = op({
    equalStrict_: equalStrict_
  }),
      greater = op({
    greater_: greater_
  }),
      greaterEqual = op({
    greaterEqual_: greaterEqual_
  }),
      greaterEqualStrict = op({
    greaterEqualStrict_: greaterEqualStrict_
  }),
      greaterStrict = op({
    greaterStrict_: greaterStrict_
  }),
      less = op({
    less_: less_
  }),
      lessEqual = op({
    lessEqual_: lessEqual_
  }),
      lessEqualStrict = op({
    lessEqualStrict_: lessEqualStrict_
  }),
      lessStrict = op({
    lessStrict_: lessStrict_
  }),
      notEqual = op({
    notEqual_: notEqual_
  }),
      notEqualStrict = op({
    notEqualStrict_: notEqualStrict_
  });

  function add_(e, t) {
    var r,
        n = convertToTensor(e, "a", "add"),
        a = convertToTensor(t, "b", "add");
    r = makeTypesMatch(n, a), n = r[0], a = r[1];
    var o = assertAndGetBroadcastShape(n.shape, a.shape);
    return ENV.engine.runKernel(function (e) {
      return e.add(n, a);
    }, {
      $a: n,
      $b: a
    }, function (e) {
      return {
        $a: function $a() {
          var t = e,
              r = getReductionAxes(n.shape, o);
          return r.length > 0 && (t = t.sum(r)), t.reshape(n.shape);
        },
        $b: function $b() {
          var t = e,
              r = getReductionAxes(a.shape, o);
          return r.length > 0 && (t = t.sum(r)), t.reshape(a.shape);
        }
      };
    });
  }

  function addN_(e) {
    assert(Array.isArray(e), function () {
      return "The argument passed to tf.addN() must be a list of tensors";
    }), assert(e.length >= 1, function () {
      return "Must pass at least one tensor to tf.addN(), but got " + e.length;
    });
    var t = e.map(function (e, t) {
      return convertToTensor(e, "tensors" + t, "addN");
    }),
        r = t[0];
    t.forEach(function (e) {
      if (e.dtype !== r.dtype) throw new Error("All tensors passed to tf.addN() must have the same dtype");
    }), t.forEach(function (e) {
      if (!arraysEqual(e.shape, r.shape)) throw new Error("All tensors passed to tf.addN() must have the same shape");
    });
    var n = t;
    return ENV.engine.runKernel(function (e) {
      return e.addN(t);
    }, n, function (e) {
      var r = {};
      return t.forEach(function (t, n) {
        r[n] = function () {
          return e.clone();
        };
      }), r;
    });
  }

  function addStrict_(e, t) {
    var r = convertToTensor(e, "a", "addStrict"),
        n = convertToTensor(t, "b", "addStrict");
    return assertShapesMatch(r.shape, n.shape, "Error in addStrict: "), r.add(n);
  }

  function sub_(e, t) {
    var r,
        n = convertToTensor(e, "a", "sub"),
        a = convertToTensor(t, "b", "sub");
    r = makeTypesMatch(n, a), n = r[0], a = r[1];
    var o = assertAndGetBroadcastShape(n.shape, a.shape);
    return ENV.engine.runKernel(function (e) {
      return e.subtract(n, a);
    }, {
      $a: n,
      $b: a
    }, function (e) {
      return {
        $a: function $a() {
          var t = e,
              r = getReductionAxes(n.shape, o);
          return r.length > 0 && (t = t.sum(r)), t.reshape(n.shape);
        },
        $b: function $b() {
          var t = e,
              r = getReductionAxes(a.shape, o);
          return r.length > 0 && (t = t.sum(r)), t.neg().reshape(a.shape);
        }
      };
    });
  }

  function subStrict_(e, t) {
    var r = convertToTensor(e, "a", "subStrict"),
        n = convertToTensor(t, "b", "subStrict");
    return assertShapesMatch(r.shape, n.shape, "Error in subStrict: "), r.sub(n);
  }

  function pow_(e, t) {
    var r = convertToTensor(e, "base", "pow"),
        n = convertToTensor(t, "exp", "pow"),
        a = assertAndGetBroadcastShape(r.shape, n.shape);
    return e = r.cast(upcastType(r.dtype, n.dtype)), t = n.cast(upcastType(r.dtype, n.dtype)), ENV.engine.runKernel(function (e, t) {
      return t(e.pow(r, n));
    }, {
      $base: r,
      $exp: n
    }, function (e, t) {
      var o = t[0];
      return {
        $base: function $base() {
          var t = n.toFloat(),
              o = e.mul(t.mul(r.pow(t.sub(scalar(1))))),
              i = getReductionAxes(r.shape, a);
          return i.length > 0 && (o = o.sum(i)), o.reshape(r.shape);
        },
        $exp: function $exp() {
          var t = r.greater(0),
              i = r.log().where(t, zerosLike(r)),
              s = e.mul(o.mul(i)),
              u = getReductionAxes(n.shape, a);
          return u.length > 0 && (s = s.sum(u)), s.reshape(n.shape);
        }
      };
    });
  }

  function powStrict_(e, t) {
    return assertShapesMatch(e.shape, t.shape, "Error in powStrict: "), e.pow(t);
  }

  function mul_(e, t) {
    var r,
        n = convertToTensor(e, "a", "mul"),
        a = convertToTensor(t, "b", "mul");
    r = makeTypesMatch(n, a), n = r[0], a = r[1];
    var o = assertAndGetBroadcastShape(n.shape, a.shape);
    return ENV.engine.runKernel(function (e) {
      return e.multiply(n, a);
    }, {
      $a: n,
      $b: a
    }, function (e) {
      return {
        $a: function $a() {
          var t = e.mul(a.toFloat()),
              r = getReductionAxes(n.shape, o);
          return r.length > 0 ? t.sum(r).reshape(n.shape) : t;
        },
        $b: function $b() {
          var t = e.mul(n.toFloat()),
              r = getReductionAxes(a.shape, o);
          return r.length > 0 ? t.sum(r).reshape(a.shape) : t;
        }
      };
    });
  }

  function mulStrict_(e, t) {
    var r = convertToTensor(e, "a", "mul"),
        n = convertToTensor(t, "b", "mul");
    return assertShapesMatch(r.shape, n.shape, "Error in multiplyStrict: "), r.mul(n);
  }

  function div_(e, t) {
    var r,
        n,
        a = convertToTensor(e, "a", "div"),
        o = convertToTensor(t, "b", "div");
    if (r = makeTypesMatch(a, o), a = r[0], o = r[1], "int32" === a.dtype && "int32" === o.dtype) return floorDiv(a, o);

    n = function n(e) {
      return e.realDivide(a, o);
    };

    var i = assertAndGetBroadcastShape(a.shape, o.shape);
    return ENV.engine.runKernel(n, {
      $a: a,
      $b: o
    }, function (e) {
      return {
        $a: function $a() {
          var t = e.div(o.toFloat()),
              r = getReductionAxes(a.shape, i);
          return r.length > 0 ? t.sum(r).reshape(a.shape) : t;
        },
        $b: function $b() {
          var t = e.mul(a.toFloat()),
              r = getReductionAxes(o.shape, i);
          r.length > 0 && (t = t.sum(r).reshape(o.shape));
          var n = o.square();
          return t.div(n.toFloat()).neg();
        }
      };
    });
  }

  function floorDiv_(e, t) {
    var r,
        n = convertToTensor(e, "a", "floorDiv"),
        a = convertToTensor(t, "b", "floorDiv");
    r = makeTypesMatch(n, a), n = r[0], a = r[1];
    var o = assertAndGetBroadcastShape(n.shape, a.shape);
    return ENV.engine.runKernel(function (e) {
      return e.floorDiv(n, a);
    }, {
      $a: n,
      $b: a
    }, function (e) {
      return {
        $a: function $a() {
          var t = e.div(a.toFloat()),
              r = getReductionAxes(n.shape, o);
          return r.length > 0 ? t.sum(r).reshape(n.shape) : t;
        },
        $b: function $b() {
          var t = e.mul(n.toFloat()),
              r = getReductionAxes(a.shape, o);
          r.length > 0 && (t = t.sum(r).reshape(a.shape));
          var i = a.square();
          return t.div(i.toFloat()).neg();
        }
      };
    });
  }

  function divStrict_(e, t) {
    var r = convertToTensor(e, "a", "div"),
        n = convertToTensor(t, "b", "div");
    return assertShapesMatch(r.shape, n.shape, "Error in divideStrict: "), r.div(n);
  }

  function mod_(e, t) {
    var r,
        n = convertToTensor(e, "a", "mod"),
        a = convertToTensor(t, "b", "mod");
    r = makeTypesMatch(n, a), n = r[0], a = r[1];
    var o = assertAndGetBroadcastShape(n.shape, a.shape);
    return ENV.engine.runKernel(function (e) {
      return e.mod(n, a);
    }, {
      $a: n,
      $b: a
    }, function (e) {
      return {
        $a: function $a() {
          var t = getReductionAxes(n.shape, o);
          return t.length > 0 ? e.sum(t).reshape(n.shape) : e;
        },
        $b: function $b() {
          var t = e.mul(n.div(a).floor().neg()),
              r = getReductionAxes(a.shape, o);
          return r.length > 0 ? t.sum(r).reshape(a.shape) : t;
        }
      };
    });
  }

  function modStrict_(e, t) {
    var r = convertToTensor(e, "a", "modStrict"),
        n = convertToTensor(t, "b", "modStrict");
    return assertShapesMatch(r.shape, n.shape, "Error in modStrict: "), r.mod(n);
  }

  function minimum_(e, t) {
    var r,
        n = convertToTensor(e, "a", "minimum"),
        a = convertToTensor(t, "b", "minimum");
    return r = makeTypesMatch(n, a), n = r[0], a = r[1], "bool" === n.dtype && (n = n.toInt(), a = a.toInt()), assertAndGetBroadcastShape(n.shape, a.shape), ENV.engine.runKernel(function (e) {
      return e.minimum(n, a);
    }, {
      $a: n,
      $b: a
    }, function (e) {
      return {
        $a: function $a() {
          return e.mul(n.lessEqual(a).toFloat());
        },
        $b: function $b() {
          return e.mul(n.greater(a).toFloat());
        }
      };
    });
  }

  function minimumStrict_(e, t) {
    var r = convertToTensor(e, "a", "minimumStrict"),
        n = convertToTensor(t, "b", "minimumStrict");
    return assertShapesMatch(r.shape, n.shape, "Error in minimumStrict: "), r.minimum(n);
  }

  function maximum_(e, t) {
    var r,
        n = convertToTensor(e, "a", "maximum"),
        a = convertToTensor(t, "b", "maximum");
    return r = makeTypesMatch(n, a), n = r[0], a = r[1], "bool" === n.dtype && (n = n.toInt(), a = a.toInt()), assertAndGetBroadcastShape(n.shape, a.shape), ENV.engine.runKernel(function (e) {
      return e.maximum(n, a);
    }, {
      $a: n,
      $b: a
    }, function (e) {
      return {
        $a: function $a() {
          return e.mul(n.greaterEqual(a).toFloat());
        },
        $b: function $b() {
          return e.mul(n.less(a).toFloat());
        }
      };
    });
  }

  function maximumStrict_(e, t) {
    var r = convertToTensor(e, "a", "maximumStrict"),
        n = convertToTensor(t, "b", "maximumStrict");
    return assertShapesMatch(r.shape, n.shape, "Error in maximumStrict: "), r.maximum(n);
  }

  function squaredDifference_(e, t) {
    var r,
        n = convertToTensor(e, "a", "squaredDifference"),
        a = convertToTensor(t, "b", "squaredDifference");
    return r = makeTypesMatch(n, a), n = r[0], a = r[1], assertAndGetBroadcastShape(n.shape, a.shape), ENV.engine.runKernel(function (e) {
      return e.squaredDifference(n, a);
    }, {
      $a: n,
      $b: a
    }, function (e) {
      var t = scalar(2);
      return {
        $a: function $a() {
          return e.mul(n.sub(a).mul(t));
        },
        $b: function $b() {
          return e.mul(a.sub(n).mul(t));
        }
      };
    });
  }

  function squaredDifferenceStrict_(e, t) {
    var r = convertToTensor(e, "a", "squaredDifferenceStrict"),
        n = convertToTensor(t, "b", "squaredDifferenceStrict");
    return assertShapesMatch(r.shape, n.shape, "Error in squaredDifferenceStrict: "), r.squaredDifference(n);
  }

  function atan2_(e, t) {
    var r,
        n = convertToTensor(e, "a", "atan2"),
        a = convertToTensor(t, "b", "atan2");
    r = makeTypesMatch(n, a), n = r[0], a = r[1];
    var o = assertAndGetBroadcastShape(n.shape, a.shape);
    return ENV.engine.runKernel(function (e) {
      return e.atan2(n, a);
    }, {
      $a: n,
      $b: a
    }, function (e) {
      return {
        $a: function $a() {
          var t = add(n.square(), a.square()),
              r = e.mul(a.div(t)),
              i = getReductionAxes(n.shape, o);
          return i.length > 0 && (r = r.sum(i)), r.reshape(n.shape);
        },
        $b: function $b() {
          var t = add(n.square(), a.square()),
              r = neg(e.mul(n.div(t))),
              i = getReductionAxes(a.shape, o);
          return i.length > 0 && (r = r.sum(i)), r.reshape(a.shape);
        }
      };
    });
  }

  var add = op({
    add_: add_
  }),
      addN = op({
    addN_: addN_
  }),
      addStrict = op({
    addStrict_: addStrict_
  }),
      atan2 = op({
    atan2_: atan2_
  }),
      div = op({
    div_: div_
  }),
      divStrict = op({
    divStrict_: divStrict_
  }),
      floorDiv = op({
    floorDiv_: floorDiv_
  }),
      maximum = op({
    maximum_: maximum_
  }),
      maximumStrict = op({
    maximumStrict_: maximumStrict_
  }),
      minimum = op({
    minimum_: minimum_
  }),
      minimumStrict = op({
    minimumStrict_: minimumStrict_
  }),
      mod = op({
    mod_: mod_
  }),
      modStrict = op({
    modStrict_: modStrict_
  }),
      mul = op({
    mul_: mul_
  }),
      mulStrict = op({
    mulStrict_: mulStrict_
  }),
      pow = op({
    pow_: pow_
  }),
      powStrict = op({
    powStrict_: powStrict_
  }),
      squaredDifference = op({
    squaredDifference_: squaredDifference_
  }),
      squaredDifferenceStrict = op({
    squaredDifferenceStrict_: squaredDifferenceStrict_
  }),
      sub = op({
    sub_: sub_
  }),
      subStrict = op({
    subStrict_: subStrict_
  });

  function logicalNot_(e) {
    var t = convertToTensor(e, "x", "logicalNot", "bool");
    return ENV.engine.runKernel(function (e) {
      return e.logicalNot(t);
    }, {
      $x: t
    });
  }

  function logicalAnd_(e, t) {
    var r = convertToTensor(e, "a", "logicalAnd", "bool"),
        n = convertToTensor(t, "b", "logicalAnd", "bool");
    return assertAndGetBroadcastShape(r.shape, n.shape), ENV.engine.runKernel(function (e) {
      return e.logicalAnd(r, n);
    }, {
      $a: r,
      $b: n
    });
  }

  function logicalOr_(e, t) {
    var r = convertToTensor(e, "a", "logicalOr", "bool"),
        n = convertToTensor(t, "b", "logicalOr", "bool");
    return assertAndGetBroadcastShape(r.shape, n.shape), ENV.engine.runKernel(function (e) {
      return e.logicalOr(r, n);
    }, {
      $a: r,
      $b: n
    });
  }

  function logicalXor_(e, t) {
    var r = convertToTensor(e, "a", "logicalXor", "bool"),
        n = convertToTensor(t, "b", "logicalXor", "bool");
    return assertAndGetBroadcastShape(r.shape, n.shape), logicalOr(e, t).logicalAnd(logicalAnd(e, t).logicalNot());
  }

  function where_(e, t, r) {
    var n = convertToTensor(t, "a", "where"),
        a = convertToTensor(r, "b", "where"),
        o = convertToTensor(e, "condition", "where", "bool");
    return assertShapesMatch(n.shape, a.shape, "Error in where: "), 1 === o.rank ? assert(o.shape[0] === n.shape[0], "The first dimension of `a` must match the size of `condition`.") : assertShapesMatch(o.shape, a.shape, "Error in where: "), ENV.engine.runKernel(function (e) {
      return e.select(o, n, a);
    }, {
      $condition: o,
      $a: n,
      $b: a
    }, function (e) {
      return {
        $condition: function $condition() {
          return zerosLike(o).toFloat();
        },
        $a: function $a() {
          return e.mul(o.cast(e.dtype));
        },
        $b: function $b() {
          return e.mul(o.logicalNot().cast(e.dtype));
        }
      };
    });
  }

  function whereAsync_(e) {
    return __awaiter(this, void 0, void 0, function () {
      var t, r, n;
      return __generator(this, function (a) {
        switch (a.label) {
          case 0:
            return [4, (t = convertToTensor(e, "condition", "whereAsync", "bool")).data()];

          case 1:
            return r = a.sent(), n = whereImpl(t.shape, r), e !== t && t.dispose(), [2, n];
        }
      });
    });
  }

  var logicalAnd = op({
    logicalAnd_: logicalAnd_
  }),
      logicalNot = op({
    logicalNot_: logicalNot_
  }),
      logicalOr = op({
    logicalOr_: logicalOr_
  }),
      logicalXor = op({
    logicalXor_: logicalXor_
  }),
      where = op({
    where_: where_
  }),
      whereAsync = whereAsync_;

  function relu_(e) {
    var t = convertToTensor(e, "x", "relu");
    return "bool" === t.dtype ? t.toInt() : ENV.engine.runKernel(function (e) {
      return e.relu(t);
    }, {
      $x: t
    }, function (e) {
      var r = t.step();
      return {
        $x: function $x() {
          return e.mulStrict(r.toFloat());
        }
      };
    });
  }

  function elu_(e) {
    var t = convertToTensor(e, "x", "elu");
    return ENV.engine.runKernel(function (e, r) {
      return r(e.elu(t));
    }, {
      $x: t
    }, function (e, t) {
      var r = t[0];
      return {
        $x: function $x() {
          return ENV.engine.runKernel(function (t) {
            return t.eluDer(e, r);
          }, {
            dy: e,
            y: r
          });
        }
      };
    });
  }

  function selu_(e) {
    var t = convertToTensor(e, "x", "selu");
    return ENV.engine.runKernel(function (e) {
      return e.selu(t);
    }, {
      $x: t
    }, function (e) {
      return {
        $x: function $x() {
          var r = t.greater(scalar(0)),
              n = scalar(SELU_SCALEALPHA),
              a = scalar(SELU_SCALE),
              o = e.mul(a),
              i = e.mul(n).mul(t.toFloat().exp());
          return where(r, o, i);
        }
      };
    });
  }

  function leakyRelu_(e, t) {
    void 0 === t && (t = .2);
    var r = convertToTensor(e, "x", "leakyRelu");
    return maximum(scalar(t).mul(r), r);
  }

  function prelu_(e, t) {
    var r = convertToTensor(e, "x", "prelu"),
        n = convertToTensor(t, "alpha", "prelu");
    return ENV.engine.runKernel(function (e) {
      return e.prelu(r, n);
    }, {
      $x: r,
      $alpha: n
    }, function (e) {
      var t = r.greater(0);
      return {
        $x: function $x() {
          return where(t, e, e.mul(n));
        },
        $alpha: function $alpha() {
          var a = where(t, zerosLike(e), e.mul(r)),
              o = getReductionAxes(n.shape, e.shape);
          return o.length > 0 && (a = a.sum(o)), a.reshape(n.shape);
        }
      };
    });
  }

  var elu = op({
    elu_: elu_
  }),
      leakyRelu = op({
    leakyRelu_: leakyRelu_
  }),
      prelu = op({
    prelu_: prelu_
  }),
      relu = op({
    relu_: relu_
  }),
      selu = op({
    selu_: selu_
  });

  function transpose_(e, t) {
    var r = convertToTensor(e, "x", "transpose");
    return null == t && (t = r.shape.map(function (e, t) {
      return t;
    }).reverse()), assert(r.rank === t.length, "Error in transpose: rank of input " + r.rank + " must match length of perm " + t + "."), t.forEach(function (e) {
      assert(e >= 0 && e < r.rank, "All entries in 'perm' must be between 0 and " + (r.rank - 1) + " but got " + t);
    }), r.rank <= 1 ? r.clone() : ENV.engine.runKernel(function (e) {
      return e.transpose(r, t);
    }, {
      $x: r
    }, function (e) {
      var r = getUndoAxesPermutation(t);
      return {
        $x: function $x() {
          return e.transpose(r);
        }
      };
    });
  }

  var transpose = op({
    transpose_: transpose_
  });

  function localResponseNormalization_(e, t, r, n, a) {
    void 0 === t && (t = 5), void 0 === r && (r = 1), void 0 === n && (n = 1), void 0 === a && (a = .5);
    var o = convertToTensor(e, "x", "localResponseNormalization");
    assert(4 === o.rank || 3 === o.rank, "Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank " + o.rank + "."), assert(isInt(t), "Error in localResponseNormalization: depthRadius must be an integer\n                     but got depthRadius " + t + ".");
    var i = o,
        s = !1;
    3 === o.rank && (s = !0, i = o.as4D(1, o.shape[0], o.shape[1], o.shape[2]));
    var u = ENV.engine.runKernel(function (e, o) {
      return o(e.localResponseNormalization4D(i, t, r, n, a));
    }, {
      x4D: i
    }, function (e, o) {
      var s = o[0];
      return {
        x4D: function x4D() {
          return ENV.engine.runKernel(function (o) {
            return o.LRNGrad(e, i, s, t, r, n, a);
          }, {});
        }
      };
    });
    return s ? u.as3D(u.shape[1], u.shape[2], u.shape[3]) : u;
  }

  var localResponseNormalization = op({
    localResponseNormalization_: localResponseNormalization_
  });

  function norm_(e, t, r, n) {
    void 0 === t && (t = "euclidean"), void 0 === r && (r = null), void 0 === n && (n = !1);
    var a = normImpl(e = convertToTensor(e, "x", "norm"), t, r),
        o = a.shape;

    if (n) {
      var i = parseAxisParam(r, e.shape);
      o = expandShapeToKeepDim(a.shape, i);
    }

    return a.reshape(o);
  }

  function normImpl(e, t, r) {
    if (void 0 === r && (r = null), 0 === e.rank) return e.abs();
    if (1 !== e.rank && null === r) return normImpl(e.reshape([-1]), t, r);

    if (1 === e.rank || "number" == typeof r || Array.isArray(r) && 1 === r.length) {
      if (1 === t) return e.abs().sum(r);
      if (t === 1 / 0) return e.abs().max(r);
      if (t === -1 / 0) return e.abs().min(r);
      if ("euclidean" === t || 2 === t) return e.abs().pow(scalar(2, "int32")).sum(r).sqrt();
      throw new Error("Error in norm: invalid ord value: " + t);
    }

    if (Array.isArray(r) && 2 === r.length) {
      if (1 === t) return e.abs().sum(r[0]).max(r[1] - 1);
      if (t === 1 / 0) return e.abs().sum(r[1]).max(r[0]);
      if (t === -1 / 0) return e.abs().sum(r[1]).min(r[0]);
      if ("fro" === t || "euclidean" === t) return e.square().sum(r).sqrt();
      throw new Error("Error in norm: invalid ord value: " + t);
    }

    throw new Error("Error in norm: invalid axis: " + r);
  }

  var norm = op({
    norm_: norm_
  });

  function unsortedSegmentSum_(e, t, r) {
    var n = convertToTensor(e, "x", "unsortedSegmentSum"),
        a = convertToTensor(t, "segmentIds", "unsortedSegmentSum", "int32");
    return assert(isInt(r), "numSegments must be of dtype int"), ENV.engine.runKernel(function (e) {
      return e.unsortedSegmentSum(n, a, r);
    }, {
      $x: n
    }, function (e) {
      return {
        $x: function $x() {
          return gatherDropNegatives(e, a);
        }
      };
    });
  }

  function gather_(e, t, r) {
    void 0 === r && (r = 0);
    var n = convertToTensor(e, "x", "gather"),
        a = convertToTensor(t, "indices", "gather", "int32");
    r = parseAxisParam(r, n.shape)[0];
    var o = collectGatherOpShapeInfo(n, a, r);
    return ENV.engine.runKernel(function (e) {
      return e.gather(n, a.flatten(), r);
    }, {
      $x: n
    }, function (e) {
      return {
        $x: function $x() {
          var t = n.shape,
              o = a.size,
              i = t.slice(0, r),
              s = i.length,
              u = t.slice(r, t.length).slice(1),
              l = u.length,
              p = arrayRange(0, s),
              c = arrayRange(s + 1, s + 1 + l),
              h = arrayConcat([i, [o], u]),
              d = e.reshape(h),
              f = a.reshape([o]),
              m = arrayConcat([[s], p, c]),
              g = d.transpose(m),
              y = unsortedSegmentSum(g, f, n.shape[r]),
              v = getUndoAxesPermutation(m);
          return y.transpose(v);
        }
      };
    }).reshape(o.outputShape);
  }

  function arrayRange(e, t) {
    for (var r = [], n = e; n < t; ++n) {
      r.push(n);
    }

    return r;
  }

  function arrayConcat(e) {
    for (var t = [], r = 0; r < e.length; ++r) {
      for (var n = 0; n < e[r].length; ++n) {
        t.push(e[r][n]);
      }
    }

    return t;
  }

  function gatherDropNegatives(e, t) {
    for (var r = maximum(t, zerosLike(t)), n = gather(e, r), a = greaterEqual(t, scalar(0, "int32")), o = n.rank - a.rank, i = 0; i < o; ++i) {
      a = expandDims(a, i + 1);
    }

    a = logicalAnd(a, ones$1(n.shape, "bool"));
    var s = zerosLike(n);
    return where(a, n, s);
  }

  var gather = op({
    gather_: gather_
  }),
      unsortedSegmentSum = op({
    unsortedSegmentSum_: unsortedSegmentSum_
  });

  function multiRNNCell_(e, t, r, n) {
    for (var a = convertToTensor(t, "data", "multiRNNCell"), o = convertToTensorArray(r, "c", "multiRNNCell"), i = convertToTensorArray(n, "h", "multiRNNCell"), s = a, u = [], l = 0; l < e.length; l++) {
      var p = e[l](s, o[l], i[l]);
      u.push(p[0]), u.push(p[1]), s = p[1];
    }

    var c = [],
        h = [];

    for (l = 0; l < u.length; l += 2) {
      c.push(u[l]), h.push(u[l + 1]);
    }

    return [c, h];
  }

  function basicLSTMCell_(e, t, r, n, a, o) {
    var i = convertToTensor(e, "forgetBias", "basicLSTMCell"),
        s = convertToTensor(t, "lstmKernel", "basicLSTMCell"),
        u = convertToTensor(r, "lstmBias", "basicLSTMCell"),
        l = convertToTensor(n, "data", "basicLSTMCell"),
        p = convertToTensor(a, "c", "basicLSTMCell"),
        c = convertToTensor(o, "h", "basicLSTMCell"),
        h = l.concat(c, 1).matMul(s).add(u),
        d = h.shape[0],
        f = h.shape[1] / 4,
        m = [d, f],
        g = h.slice([0, 0], m),
        y = h.slice([0, f], m),
        v = h.slice([0, 2 * f], m),
        x = h.slice([0, 3 * f], m),
        b = g.sigmoid().mulStrict(y.tanh()).addStrict(p.mulStrict(i.add(v).sigmoid()));
    return [b, b.tanh().mulStrict(x.sigmoid())];
  }

  var basicLSTMCell = op({
    basicLSTMCell_: basicLSTMCell_
  }),
      multiRNNCell = op({
    multiRNNCell_: multiRNNCell_
  });

  function movingAverage_(e, t, r, n, a) {
    void 0 === a && (a = !0);
    var o = convertToTensor(e, "v", "movingAverage"),
        i = convertToTensor(t, "x", "movingAverage"),
        s = convertToTensor(r, "decay", "movingAverage");
    assertTypesMatch(o, i), assert(arraysEqual(o.shape, i.shape), "Shape mismatch in v and x");
    var u = scalar(1),
        l = u.sub(s),
        p = i.sub(o).mul(l);

    if (a) {
      assert(null != n, "When using zeroDebias: true, step is required.");
      var c = convertToTensor(n, "step", "movingAverage");
      p = p.div(u.sub(pow(s, c)));
    }

    return o.add(p);
  }

  var movingAverage = op({
    movingAverage_: movingAverage_
  });

  function stridedSlice_(e, t, r, n, a, o, i, s, u) {
    if (void 0 === a && (a = 0), void 0 === o && (o = 0), void 0 === i && (i = 0), void 0 === s && (s = 0), void 0 === u && (u = 0), 0 !== i) throw new Error("ellipsis mask is not yet supported");
    if (0 !== s) throw new Error("new axis mask is not yet supported");
    var l = convertToTensor(e, "x", "stridedSlice");

    if (n.every(function (e) {
      return 1 === e;
    })) {
      var p = getStridedSlicedInfo(l.shape, t, r, n, a, o, i, s, u),
          c = p[0],
          h = p[1],
          d = p[2],
          f = h.filter(function (e, t) {
        return -1 === d.indexOf(t);
      });
      return slice(l, c, h).reshape(f);
    }

    return ENV.engine.runKernel(function (e) {
      return e.stridedSlice(l, t, r, n, a, o, i, s, u);
    }, {
      $x: l
    });
  }

  var stridedSlice = op({
    stridedSlice_: stridedSlice_
  });

  function topk_(e, t, r) {
    void 0 === t && (t = 1), void 0 === r && (r = !0);
    var n = convertToTensor(e, "x", "topk");
    if (0 === n.rank) throw new Error("topk() expects the input to be of rank 1 or higher");
    var a = n.shape[n.shape.length - 1];
    if (t > a) throw new Error("'k' passed to topk() must be <= the last dimension (" + a + ") but got " + t);
    var o = ENV.engine.runKernel(function (e) {
      return e.topk(n, t, r);
    }, {
      $x: n
    });
    return {
      values: o[0],
      indices: o[1]
    };
  }

  var topk = op({
    topk_: topk_
  });

  function scatterND_(e, t, r) {
    var n = convertToTensor(e, "indices", "scatterND", "int32"),
        a = convertToTensor(t, "updates", "scatterND");
    return validateInput(a, n, r), ENV.engine.runKernel(function (e) {
      return e.scatterND(n, a, r);
    }, {
      $indices: n,
      $updates: a
    });
  }

  var scatterND = op({
    scatterND_: scatterND_
  });

  function fft_(e) {
    assert("complex64" === e.dtype, "The dtype for tf.spectral.fft() must be complex64 but got " + e.dtype + ".");
    var t = e.shape[e.shape.length - 1],
        r = e.size / t,
        n = e.as2D(r, t);
    return ENV.engine.runKernel(function (e) {
      return e.fft(n);
    }, {
      input: e
    }).reshape(e.shape);
  }

  function ifft_(e) {
    assert("complex64" === e.dtype, "The dtype for tf.spectral.ifft() must be complex64 but got " + e.dtype + ".");
    var t = e.shape[e.shape.length - 1],
        r = e.size / t,
        n = e.as2D(r, t);
    return ENV.engine.runKernel(function (e) {
      return e.ifft(n);
    }, {
      input: e
    }).reshape(e.shape);
  }

  function rfft_(e) {
    assert("float32" === e.dtype, "The dtype for rfft() must be real value but\n    got " + e.dtype);
    var t = e.shape[e.shape.length - 1],
        r = e.size / t,
        n = e.zerosLike(),
        a = complex(e, n).as2D(r, t),
        o = fft(a),
        i = Math.floor(t / 2) + 1,
        s = real(o),
        u = imag(o),
        l = s.split([i, t - i], s.shape.length - 1),
        p = u.split([i, t - i], u.shape.length - 1),
        c = e.shape.slice();
    return c[e.shape.length - 1] = i, complex(l[0], p[0]).reshape(c);
  }

  function irfft_(e) {
    var t = e.shape[e.shape.length - 1],
        r = e.size / t;

    if (t <= 2) {
      var n = e.as2D(r, t),
          a = ifft(n);
      return real(a);
    }

    var o = [r, 2 * (t - 1)],
        i = real(e).as2D(r, t),
        s = imag(e).as2D(r, t),
        u = i.slice([0, 1], [r, t - 2]).reverse(1),
        l = s.slice([0, 1], [r, t - 2]).reverse(1).mul(scalar(-1)),
        p = i.concat(u, 1),
        c = s.concat(l, 1);
    return n = complex(p, c).as2D(o[0], o[1]), a = ifft(n), real(a);
  }

  var fft = op({
    fft_: fft_
  }),
      ifft = op({
    ifft_: ifft_
  }),
      rfft = op({
    rfft_: rfft_
  }),
      irfft = op({
    irfft_: irfft_
  }),
      spectral_ops = Object.freeze({
    fft: fft,
    ifft: ifft,
    rfft: rfft,
    irfft: irfft
  });

  function validateInput$1(e, t, r, n) {
    if ("int32" !== e.dtype) throw new Error("tf.sparseToDense() expects the indices to be int32 type, but the dtype was " + e.dtype + ".");
    if (e.rank > 2) throw new Error("sparseIndices should be a scalar, vector, or matrix, but got shape " + e.shape + ".");
    var a = e.rank > 0 ? e.shape[0] : 1,
        o = e.rank > 1 ? e.shape[1] : 1;
    if (r.length !== o) throw new Error("outputShape has incorrect number of elements:, " + r.length + ", should be: " + o + ".");
    var i = t.size;
    if (0 !== t.rank && (1 !== t.rank || i !== a)) throw new Error("sparseValues has incorrect shape " + t.shape + ", should be [] or [" + a + "]");
    if (t.dtype !== n.dtype) throw new Error("sparseValues.dtype must match defaultValues.dtype");
  }

  function sparseToDense_(e, t, r, n) {
    var a = convertToTensor(e, "sparseIndices", "sparseToDense", "int32"),
        o = convertToTensor(t, "sparseValues", "sparseToDense"),
        i = convertToTensor(n, "defaultValue", "sparseToDense", o.dtype);
    return validateInput$1(a, o, r, i), ENV.engine.runKernel(function (e) {
      return e.sparseToDense(a, o, r, i);
    }, {
      $sparseIndices: a,
      $sparseValues: o,
      $defaultValue: i
    });
  }

  var sparseToDense = op({
    sparseToDense_: sparseToDense_
  });

  function gatherND_(e, t) {
    var r = convertToTensor(t, "indices", "gatherND", "int32"),
        n = convertToTensor(e, "x", "gatherND");
    return ENV.engine.runKernel(function (e) {
      return e.gatherND(n, r);
    }, {
      $x: n,
      $indices: r
    });
  }

  var gatherND = op({
    gatherND_: gatherND_
  });

  function computeWeightedLoss_(e, t, r) {
    void 0 === r && (r = exports.Reduction.SUM_BY_NONZERO_WEIGHTS);
    var n = convertToTensor(e, "losses", "computeWeightedLoss"),
        a = null;
    null != t && (a = convertToTensor(t, "weights", "computeWeightedLoss"));
    var o = null == a ? n : n.mul(a);
    if (r === exports.Reduction.NONE) return o;
    if (r === exports.Reduction.SUM) return o.sum();

    if (r === exports.Reduction.MEAN) {
      if (null == a) return o.mean();
      var i = sizeFromShape(n.shape) / sizeFromShape(a.shape),
          s = o.sum().div(a.sum());
      return i > 1 ? s.div(scalar(i)) : s;
    }

    if (r === exports.Reduction.SUM_BY_NONZERO_WEIGHTS) {
      if (null == a) return o.sum().div(scalar(n.size));
      var u = a.mul(ones$1(n.shape)).notEqual(scalar(0)).sum().toFloat();
      return o.sum().div(u);
    }

    throw Error("Unknown reduction: " + r);
  }

  function absoluteDifference_(e, t, r, n) {
    void 0 === n && (n = exports.Reduction.SUM_BY_NONZERO_WEIGHTS);
    var a = convertToTensor(e, "labels", "absoluteDifference"),
        o = convertToTensor(t, "predictions", "absoluteDifference"),
        i = null;
    null != r && (i = convertToTensor(r, "weights", "absoluteDifference")), assertShapesMatch(a.shape, o.shape, "Error in absoluteDifference: ");
    var s = a.sub(o).abs();
    return computeWeightedLoss(s, i, n);
  }

  function meanSquaredError_(e, t, r, n) {
    void 0 === n && (n = exports.Reduction.SUM_BY_NONZERO_WEIGHTS);
    var a = convertToTensor(e, "labels", "meanSquaredError"),
        o = convertToTensor(t, "predictions", "meanSquaredError"),
        i = null;
    null != r && (i = convertToTensor(r, "weights", "meanSquaredError")), assertShapesMatch(a.shape, o.shape, "Error in meanSquaredError: ");
    var s = a.squaredDifference(o);
    return computeWeightedLoss(s, i, n);
  }

  function cosineDistance_(e, t, r, n, a) {
    void 0 === a && (a = exports.Reduction.SUM_BY_NONZERO_WEIGHTS);
    var o = convertToTensor(e, "labels", "cosineDistance"),
        i = convertToTensor(t, "predictions", "cosineDistance"),
        s = null;
    null != n && (s = convertToTensor(n, "weights", "cosineDistance")), assertShapesMatch(o.shape, i.shape, "Error in cosineDistance: ");
    var u = scalar(1).sub(o.mul(i).sum(r, !0));
    return computeWeightedLoss(u, s, a);
  }

  function hingeLoss_(e, t, r, n) {
    void 0 === n && (n = exports.Reduction.SUM_BY_NONZERO_WEIGHTS);
    var a = convertToTensor(e, "labels", "hingeLoss"),
        o = convertToTensor(t, "predictions", "hingeLoss"),
        i = null;
    null != r && (i = convertToTensor(r, "weights", "hingeLoss")), assertShapesMatch(a.shape, o.shape, "Error in hingeLoss: ");
    var s = scalar(1);
    a = scalar(2).mul(a).sub(s);
    var u = s.sub(a.mul(o)).relu();
    return computeWeightedLoss(u, i, n);
  }

  function logLoss_(e, t, r, n, a) {
    void 0 === n && (n = 1e-7), void 0 === a && (a = exports.Reduction.SUM_BY_NONZERO_WEIGHTS);
    var o = convertToTensor(e, "labels", "logLoss"),
        i = convertToTensor(t, "predictions", "logLoss"),
        s = null;
    null != r && (s = convertToTensor(r, "weights", "logLoss")), assertShapesMatch(o.shape, i.shape, "Error in logLoss: ");
    var u = scalar(1),
        l = scalar(n),
        p = o.mul(i.add(l).log()).neg().sub(u.sub(o).mul(u.sub(i).add(l).log()));
    return computeWeightedLoss(p, s, a);
  }

  function sigmoidCrossEntropyWithLogits_(e, t) {
    var r = convertToTensor(e, "labels", "sigmoidCrossEntropyWithLogits"),
        n = convertToTensor(t, "logits", "sigmoidCrossEntropyWithLogits");
    assertShapesMatch(r.shape, n.shape, "Error in sigmoidCrossEntropyWithLogits: ");
    var a = n.relu(),
        o = n.mul(r),
        i = n.abs().neg().exp().log1p();
    return a.sub(o).add(i);
  }

  function sigmoidCrossEntropy_(e, t, r, n, a) {
    void 0 === n && (n = 0), void 0 === a && (a = exports.Reduction.SUM_BY_NONZERO_WEIGHTS);
    var o = convertToTensor(e, "multiClassLabels", "sigmoidCrossEntropy"),
        i = convertToTensor(t, "logits", "sigmoidCrossEntropy"),
        s = null;

    if (null != r && (s = convertToTensor(r, "weights", "sigmoidCrossEntropy")), assertShapesMatch(o.shape, i.shape, "Error in sigmoidCrossEntropy: "), n > 0) {
      var u = scalar(n),
          l = scalar(1),
          p = scalar(.5);
      o = o.mul(l.sub(u)).add(p.mul(u));
    }

    var c = sigmoidCrossEntropyWithLogits_(o, i);
    return computeWeightedLoss(c, s, a);
  }

  function huberLoss_(e, t, r, n, a) {
    void 0 === n && (n = 1), void 0 === a && (a = exports.Reduction.SUM_BY_NONZERO_WEIGHTS);
    var o = convertToTensor(e, "labels", "huberLoss"),
        i = convertToTensor(t, "predictions", "huberLoss"),
        s = null;
    null != r && (s = convertToTensor(r, "weights", "huberLoss")), assertShapesMatch(o.shape, i.shape, "Error in huberLoss: ");
    var u = scalar(n),
        l = i.sub(o).abs(),
        p = minimum(l, u),
        c = l.sub(p),
        h = scalar(.5).mul(p.square()).add(u.mul(c));
    return computeWeightedLoss(h, s, a);
  }

  function softmaxCrossEntropyWithLogits_(e, t, r) {
    if (void 0 === r && (r = -1), -1 === r && (r = t.rank - 1), r !== t.rank - 1) throw Error("Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank " + t.rank + " and dim was " + r);
    return customGrad(function (e, t) {
      var n = t.logSumExp([r], !0),
          a = t.toFloat().sub(n);
      return {
        value: a.mul(e).neg().sum([r]),
        gradFunc: function gradFunc(t) {
          var n = expandShapeToKeepDim(t.shape, [r]);
          return [t.reshape(n).mul(e.toFloat().sub(a.exp())), t.reshape(n).mul(a.exp().sub(e.toFloat()))];
        }
      };
    })(e, t);
  }

  function softmaxCrossEntropy_(e, t, r, n, a) {
    void 0 === n && (n = 0), void 0 === a && (a = exports.Reduction.SUM_BY_NONZERO_WEIGHTS);
    var o = convertToTensor(e, "onehotLabels", "softmaxCrossEntropy"),
        i = convertToTensor(t, "logits", "softmaxCrossEntropy"),
        s = null;

    if (null != r && (s = convertToTensor(r, "weights", "softmaxCrossEntropy")), assertShapesMatch(o.shape, i.shape, "Error in softmaxCrossEntropy: "), n > 0) {
      var u = scalar(n),
          l = scalar(1),
          p = scalar(o.shape[1]);
      o = o.mul(l.sub(u)).add(u.div(p));
    }

    var c = softmaxCrossEntropyWithLogits_(o, i);
    return computeWeightedLoss(c, s, a);
  }

  !function (e) {
    e[e.NONE = 0] = "NONE", e[e.MEAN = 1] = "MEAN", e[e.SUM = 2] = "SUM", e[e.SUM_BY_NONZERO_WEIGHTS = 3] = "SUM_BY_NONZERO_WEIGHTS";
  }(exports.Reduction || (exports.Reduction = {}));
  var absoluteDifference = op({
    absoluteDifference_: absoluteDifference_
  }),
      computeWeightedLoss = op({
    computeWeightedLoss_: computeWeightedLoss_
  }),
      cosineDistance = op({
    cosineDistance_: cosineDistance_
  }),
      hingeLoss = op({
    hingeLoss_: hingeLoss_
  }),
      huberLoss = op({
    huberLoss_: huberLoss_
  }),
      logLoss = op({
    logLoss_: logLoss_
  }),
      meanSquaredError = op({
    meanSquaredError_: meanSquaredError_
  }),
      sigmoidCrossEntropy = op({
    sigmoidCrossEntropy_: sigmoidCrossEntropy_
  }),
      softmaxCrossEntropy = op({
    softmaxCrossEntropy_: softmaxCrossEntropy_
  }),
      loss_ops = Object.freeze({
    get Reduction() {
      return exports.Reduction;
    },

    absoluteDifference: absoluteDifference,
    computeWeightedLoss: computeWeightedLoss,
    cosineDistance: cosineDistance,
    hingeLoss: hingeLoss,
    huberLoss: huberLoss,
    logLoss: logLoss,
    meanSquaredError: meanSquaredError,
    sigmoidCrossEntropy: sigmoidCrossEntropy,
    softmaxCrossEntropy: softmaxCrossEntropy
  });

  function gramSchmidt_(e) {
    var t;

    if (Array.isArray(e)) {
      t = !1, assert(null != e && e.length > 0, "Gram-Schmidt process: input must not be null, undefined, or empty");

      for (var r = e[0].shape[0], n = 1; n < e.length; ++n) {
        assert(e[n].shape[0] === r, "Gram-Schmidt: Non-unique lengths found in the input vectors: (" + e[n].shape[0] + " vs. " + r + ")");
      }
    } else t = !0, e = split$1(e, e.shape[0], 0).map(function (e) {
      return squeeze(e, [0]);
    });

    assert(e.length <= e[0].shape[0], "Gram-Schmidt: Number of vectors (" + e.length + ") exceeds number of dimensions (" + e[0].shape[0] + ").");

    var a = [],
        o = e,
        i = function i(e) {
      a.push(ENV.engine.tidy(function () {
        var t = o[e];
        if (e > 0) for (var r = 0; r < e; ++r) {
          var n = sum$1(a[r].mulStrict(t)).mul(a[r]);
          t = t.sub(n);
        }
        return t.div(norm(t, "euclidean"));
      }));
    };

    for (n = 0; n < e.length; ++n) {
      i(n);
    }

    return t ? stack(a, 0) : a;
  }

  function qr_(e, t) {
    if (void 0 === t && (t = !1), e.rank < 2) throw new Error("qr() requires input tensor to have a rank >= 2, but got rank " + e.rank);
    if (2 === e.rank) return qr2d(e, t);
    var r = e.shape.slice(0, e.shape.length - 2).reduce(function (e, t) {
      return e * t;
    }),
        n = [],
        a = [];
    return unstack(e.reshape([r, e.shape[e.shape.length - 2], e.shape[e.shape.length - 1]]), 0).forEach(function (e) {
      var r = qr2d(e, t),
          o = r[0],
          i = r[1];
      n.push(o), a.push(i);
    }), [stack(n, 0).reshape(e.shape), stack(a, 0).reshape(e.shape)];
  }

  function qr2d(e, t) {
    return void 0 === t && (t = !1), ENV.engine.tidy(function () {
      if (2 !== e.shape.length) throw new Error("qr2d() requires a 2D Tensor, but got a " + e.shape.length + "D Tensor.");

      for (var r = e.shape[0], n = e.shape[1], a = eye(r), o = e.clone(), i = tensor2d([[1]], [1, 1]), s = i.clone(), u = r >= n ? n : r, l = function l(e) {
        var t,
            u = o,
            l = s,
            p = a;
        t = ENV.engine.tidy(function () {
          var t = o.slice([e, e], [r - e, 1]),
              u = t.norm(),
              l = o.slice([e, e], [1, 1]),
              p = l.sign().neg(),
              c = l.sub(p.mul(u)),
              h = t.div(c);
          s = 1 === h.shape[0] ? i.clone() : i.concat(h.slice([1, 0], [h.shape[0] - 1, h.shape[1]]), 0);
          var d = p.matMul(c).div(u).neg(),
              f = o.slice([e, 0], [r - e, n]),
              m = d.mul(s);
          o = 0 === e ? f.sub(m.matMul(s.transpose().matMul(f))) : o.slice([0, 0], [e, n]).concat(f.sub(m.matMul(s.transpose().matMul(f))), 0);
          var g = a.slice([0, e], [r, a.shape[1] - e]);
          return a = 0 === e ? g.sub(g.matMul(s).matMul(m.transpose())) : a.slice([0, 0], [r, e]).concat(g.sub(g.matMul(s).matMul(m.transpose())), 1), [s, o, a];
        }), s = t[0], o = t[1], a = t[2], dispose([u, l, p]);
      }, p = 0; p < u; ++p) {
        l(p);
      }

      return !t && r > n && (a = a.slice([0, 0], [r, n]), o = o.slice([0, 0], [n, n])), [a, o];
    });
  }

  var gramSchmidt = op({
    gramSchmidt_: gramSchmidt_
  }),
      qr = op({
    qr_: qr_
  }),
      linalg_ops = Object.freeze({
    gramSchmidt: gramSchmidt,
    qr: qr
  });

  function resizeBilinear_(e, t, r) {
    void 0 === r && (r = !1);
    var n = convertToTensor(e, "images", "resizeBilinear");
    assert(3 === n.rank || 4 === n.rank, "Error in resizeBilinear: x must be rank 3 or 4, but got rank " + n.rank + "."), assert(2 === t.length, "Error in resizeBilinear: new shape must 2D, but got shape " + t + ".");
    var a = n,
        o = !1;
    3 === n.rank && (o = !0, a = n.as4D(1, n.shape[0], n.shape[1], n.shape[2]));
    var i = t[0],
        s = t[1],
        u = ENV.engine.runKernel(function (e, t) {
      return e.resizeBilinear(a, i, s, r);
    }, {
      batchImages: a
    }, function (e, t) {
      return {
        batchImages: function batchImages() {
          return ENV.engine.runKernel(function (t) {
            return t.resizeBilinearBackprop(e, a, r);
          }, {});
        }
      };
    });
    return o ? u.as3D(u.shape[1], u.shape[2], u.shape[3]) : u;
  }

  function resizeNearestNeighbor_(e, t, r) {
    void 0 === r && (r = !1);
    var n = convertToTensor(e, "images", "resizeNearestNeighbor");
    assert(3 === n.rank || 4 === n.rank, "Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank " + n.rank + "."), assert(2 === t.length, "Error in resizeNearestNeighbor: new shape must 2D, but got shape " + t + "."), assert("float32" === n.dtype || "int32" === n.dtype, "`images` must have `int32` or `float32` as dtype");
    var a = n,
        o = !1;
    3 === n.rank && (o = !0, a = n.as4D(1, n.shape[0], n.shape[1], n.shape[2]));
    var i = t[0],
        s = t[1],
        u = ENV.engine.runKernel(function (e, t) {
      return e.resizeNearestNeighbor(a, i, s, r);
    }, {
      batchImages: a
    }, function (e, t) {
      return {
        batchImages: function batchImages() {
          return ENV.engine.runKernel(function (t) {
            return t.resizeNearestNeighborBackprop(e, a, r);
          }, {});
        }
      };
    });
    return o ? u.as3D(u.shape[1], u.shape[2], u.shape[3]) : u;
  }

  function nonMaxSuppression_(e, t, r, n, a) {
    void 0 === n && (n = .5), void 0 === a && (a = Number.NEGATIVE_INFINITY);
    var o = convertToTensor(e, "boxes", "nonMaxSuppression"),
        i = convertToTensor(t, "scores", "nonMaxSuppression"),
        s = nonMaxSuppSanityCheck(o, i, r, n, a);
    return r = s.maxOutputSize, n = s.iouThreshold, a = s.scoreThreshold, ENV.engine.runKernel(function (e) {
      return e.nonMaxSuppression(o, i, r, n, a);
    }, {
      $boxes: o
    });
  }

  function nonMaxSuppressionAsync_(e, t, r, n, a) {
    return void 0 === n && (n = .5), void 0 === a && (a = Number.NEGATIVE_INFINITY), __awaiter(this, void 0, void 0, function () {
      var o, i, s, u, l, p;
      return __generator(this, function (c) {
        switch (c.label) {
          case 0:
            return o = convertToTensor(e, "boxes", "nonMaxSuppressionAsync"), i = convertToTensor(t, "scores", "nonMaxSuppressionAsync"), s = nonMaxSuppSanityCheck(o, i, r, n, a), r = s.maxOutputSize, n = s.iouThreshold, a = s.scoreThreshold, [4, o.data()];

          case 1:
            return u = c.sent(), [4, i.data()];

          case 2:
            return l = c.sent(), p = nonMaxSuppressionImpl(u, l, r, n, a), o !== e && o.dispose(), i !== t && i.dispose(), [2, p];
        }
      });
    });
  }

  function nonMaxSuppSanityCheck(e, t, r, n, a) {
    null == n && (n = .5), null == a && (a = Number.NEGATIVE_INFINITY);
    var o = e.shape[0];
    return r = Math.min(r, o), assert(0 <= n && n <= 1, "iouThreshold must be in [0, 1], but was '" + n + "'"), assert(2 === e.rank, "boxes must be a 2D tensor, but was of rank '" + e.rank + "'"), assert(4 === e.shape[1], "boxes must have 4 columns, but 2nd dimension was " + e.shape[1]), assert(1 === t.rank, "scores must be a 1D tensor"), assert(t.shape[0] === o, "scores has incompatible shape with boxes. Expected " + o + ", but was " + t.shape[0]), {
      maxOutputSize: r,
      iouThreshold: n,
      scoreThreshold: a
    };
  }

  function cropAndResize_(e, t, r, n, a, o) {
    var i = convertToTensor(e, "image", "cropAndResize", "float32"),
        s = convertToTensor(t, "boxes", "cropAndResize", "float32"),
        u = convertToTensor(r, "boxInd", "cropAndResize", "int32");
    a = a || "bilinear", o = o || 0;
    var l = s.shape[0];
    return assert(4 === i.rank, "Error in cropAndResize: image must be rank 4,but got rank " + i.rank + "."), assert(2 === s.rank && 4 === s.shape[1], "Error in cropAndResize: boxes must be have size [" + l + ",4] but had shape " + s.shape + "."), assert(1 === u.rank && u.shape[0] === l, "Error in cropAndResize: boxInd must be have size [" + l + "] but had shape " + s.shape + "."), assert(2 === n.length, "Error in cropAndResize: cropSize must be of length 2, but got length " + n.length + "."), assert(n[0] >= 1 && n[1] >= 1, "cropSize must be atleast [1,1], but was " + n), assert("bilinear" === a || "nearest" === a, "method must be bilinear or nearest, but was " + a), ENV.engine.runKernel(function (e, t) {
      return e.cropAndResize(i, s, u, n, a, o);
    }, {
      $image: i,
      $boxes: s
    });
  }

  var resizeBilinear = op({
    resizeBilinear_: resizeBilinear_
  }),
      resizeNearestNeighbor = op({
    resizeNearestNeighbor_: resizeNearestNeighbor_
  }),
      nonMaxSuppression = op({
    nonMaxSuppression_: nonMaxSuppression_
  }),
      nonMaxSuppressionAsync = nonMaxSuppressionAsync_,
      cropAndResize = op({
    cropAndResize_: cropAndResize_
  }),
      image_ops = Object.freeze({
    resizeBilinear: resizeBilinear,
    resizeNearestNeighbor: resizeNearestNeighbor,
    nonMaxSuppression: nonMaxSuppression,
    nonMaxSuppressionAsync: nonMaxSuppressionAsync,
    cropAndResize: cropAndResize
  });

  function matMul_$1(e, t, r, n, a, o) {
    var i;
    void 0 === r && (r = !1), void 0 === n && (n = !1), void 0 === o && (o = "linear");
    var s = convertToTensor(e, "a", "fused matMul"),
        u = convertToTensor(t, "b", "fused matMul");
    s = (i = makeTypesMatch(s, u))[0], u = i[1];
    var l = r ? s.shape[s.rank - 2] : s.shape[s.rank - 1],
        p = n ? u.shape[u.rank - 1] : u.shape[u.rank - 2],
        c = r ? s.shape[s.rank - 1] : s.shape[s.rank - 2],
        h = n ? u.shape[u.rank - 2] : u.shape[u.rank - 1],
        d = s.shape.slice(0, -2),
        f = u.shape.slice(0, -2),
        m = sizeFromShape(d),
        g = sizeFromShape(f);
    assert(s.rank >= 2 && u.rank >= 2 && s.rank === u.rank, "Error in fused matMul: inputs must have the same rank of at least 2, got ranks " + s.rank + " and " + u.rank + "."), assert(arraysEqual(d, f), "Error in fused matMul: outer dimensions (" + d + ") and (" + f + ") of Tensors with shapes " + s.shape + " and " + u.shape + " must match."), assert(l === p, "Error in fused matMul: inner shapes (" + l + ") and (" + p + ") of Tensors with shapes " + s.shape + " and " + u.shape + " and transposeA=" + r + " and transposeB=" + n + " must match.");
    var y,
        v = s.shape.slice(0, -2).concat([c, h]),
        x = r ? s.as3D(m, l, c) : s.as3D(m, c, l),
        b = n ? u.as3D(g, h, p) : u.as3D(g, p, h);
    null != a && (y = makeTypesMatch(y = convertToTensor(a, "bias", "fused matMul"), s)[0], assertAndGetBroadcastShape(v, y.shape));
    var w = {
      $a: x,
      $b: b
    };
    return null != a && (w.$bias = y), ENV.engine.runKernel(function (e, t) {
      return t(e.fusedBatchMatMul(x, b, r, n, y, o));
    }, w, function (e, t) {
      var i,
          s = t[0];
      if (null == o || "linear" === o) i = e;else {
        if ("relu" !== o) throw new Error("Gradient for activation " + o + " has not been implemented yet.");
        i = e.mul(s.step());
      }
      var u = {};
      return null != a && (u = {
        $bias: function $bias() {
          var e = i,
              t = getReductionAxes(y.shape, v);
          return t.length > 0 && (e = e.sum(t)), e.reshape(y.shape);
        }
      }), r || n ? !r && n ? Object.assign({
        $a: function $a() {
          return i.matMul(b, !1, !1);
        },
        $b: function $b() {
          return i.matMul(x, !0, !1);
        }
      }, u) : r && !n ? Object.assign({
        $a: function $a() {
          return b.matMul(i, !1, !0);
        },
        $b: function $b() {
          return x.matMul(i, !1, !1);
        }
      }, u) : Object.assign({
        $a: function $a() {
          return b.matMul(i, !0, !0);
        },
        $b: function $b() {
          return i.matMul(x, !0, !0);
        }
      }, u) : Object.assign({
        $a: function $a() {
          return i.matMul(b, !1, !0);
        },
        $b: function $b() {
          return x.matMul(i, !0, !1);
        }
      }, u);
    }).reshape(v);
  }

  var matMul$1 = op({
    matMul_: matMul_$1
  }),
      fused_ops = Object.freeze({
    matMul: matMul$1
  }),
      ops = Object.freeze({
    image: image_ops,
    linalg: linalg_ops,
    losses: loss_ops,
    spectral: spectral_ops,
    fused: fused_ops,
    op: op,
    batchNormalization2d: batchNormalization2d,
    batchNormalization3d: batchNormalization3d,
    batchNormalization4d: batchNormalization4d,
    batchNormalization: batchNormalization,
    batchNorm: batchNorm,
    batchNorm2d: batchNorm2d,
    batchNorm3d: batchNorm3d,
    batchNorm4d: batchNorm4d,
    complex: complex,
    real: real,
    imag: imag,
    concat: concat,
    concat1d: concat1d,
    concat2d: concat2d,
    concat3d: concat3d,
    concat4d: concat4d,
    split: split$1,
    conv1d: conv1d,
    conv2d: conv2d,
    conv3d: conv3d,
    conv2dDerFilter: conv2dDerFilter,
    depthwiseConv2d: depthwiseConv2d,
    separableConv2d: separableConv2d,
    conv2dTranspose: conv2dTranspose,
    matMul: matMul,
    dot: dot,
    outerProduct: outerProduct,
    reverse: reverse,
    reverse1d: reverse1d,
    reverse2d: reverse2d,
    reverse3d: reverse3d,
    reverse4d: reverse4d,
    maxPool: maxPool,
    avgPool: avgPool,
    pool: pool,
    slice: slice,
    slice1d: slice1d,
    slice2d: slice2d,
    slice3d: slice3d,
    slice4d: slice4d,
    abs: abs,
    acos: acos,
    acosh: acosh,
    asin: asin,
    asinh: asinh,
    atan: atan,
    atanh: atanh,
    ceil: ceil,
    clipByValue: clipByValue,
    cos: cos,
    cosh: cosh,
    erf: erf,
    exp: exp,
    expm1: expm1,
    floor: floor,
    log: log$1,
    log1p: log1p,
    logSigmoid: logSigmoid,
    neg: neg,
    reciprocal: reciprocal,
    round: round,
    rsqrt: rsqrt,
    sigmoid: sigmoid,
    sign: sign,
    sin: sin,
    sinh: sinh,
    softplus: softplus,
    sqrt: sqrt,
    square: square,
    step: step,
    tan: tan,
    tanh: tanh$1,
    all: all,
    any: any,
    argMax: argMax,
    argMin: argMin,
    logSumExp: logSumExp,
    max: max,
    mean: mean,
    min: min,
    moments: moments,
    sum: sum$1,
    prod: prod,
    equal: equal,
    equalStrict: equalStrict,
    greater: greater,
    greaterEqual: greaterEqual,
    greaterEqualStrict: greaterEqualStrict,
    greaterStrict: greaterStrict,
    less: less,
    lessEqual: lessEqual,
    lessEqualStrict: lessEqualStrict,
    lessStrict: lessStrict,
    notEqual: notEqual,
    notEqualStrict: notEqualStrict,
    add: add,
    addN: addN,
    addStrict: addStrict,
    atan2: atan2,
    div: div,
    divStrict: divStrict,
    floorDiv: floorDiv,
    maximum: maximum,
    maximumStrict: maximumStrict,
    minimum: minimum,
    minimumStrict: minimumStrict,
    mod: mod,
    modStrict: modStrict,
    mul: mul,
    mulStrict: mulStrict,
    pow: pow,
    powStrict: powStrict,
    squaredDifference: squaredDifference,
    squaredDifferenceStrict: squaredDifferenceStrict,
    sub: sub,
    subStrict: subStrict,
    elu: elu,
    leakyRelu: leakyRelu,
    prelu: prelu,
    relu: relu,
    selu: selu,
    logicalAnd: logicalAnd,
    logicalNot: logicalNot,
    logicalOr: logicalOr,
    logicalXor: logicalXor,
    where: where,
    whereAsync: whereAsync,
    buffer: buffer,
    toPixels: toPixels$1,
    print: print,
    batchToSpaceND: batchToSpaceND,
    cast: cast,
    clone: clone,
    cumsum: cumsum,
    depthToSpace: depthToSpace,
    expandDims: expandDims,
    eye: eye,
    fromPixels: fromPixels$1,
    multinomial: multinomial,
    oneHot: oneHot,
    pad: pad,
    pad1d: pad1d,
    pad2d: pad2d,
    pad3d: pad3d,
    pad4d: pad4d,
    rand: rand,
    randomNormal: randomNormal,
    randomUniform: randomUniform,
    reshape: reshape,
    spaceToBatchND: spaceToBatchND,
    squeeze: squeeze,
    stack: stack,
    tile: tile,
    truncatedNormal: truncatedNormal,
    unstack: unstack,
    setdiff1dAsync: setdiff1dAsync,
    fill: fill,
    linspace: linspace,
    ones: ones$1,
    range: range,
    scalar: scalar,
    tensor: tensor,
    tensor1d: tensor1d,
    tensor2d: tensor2d,
    tensor3d: tensor3d,
    tensor4d: tensor4d,
    tensor5d: tensor5d,
    tensor6d: tensor6d,
    zeros: zeros,
    onesLike: onesLike,
    zerosLike: zerosLike,
    transpose: transpose,
    softmax: softmax,
    logSoftmax: logSoftmax,
    localResponseNormalization: localResponseNormalization,
    norm: norm,
    gather: gather,
    unsortedSegmentSum: unsortedSegmentSum,
    basicLSTMCell: basicLSTMCell,
    multiRNNCell: multiRNNCell,
    movingAverage: movingAverage,
    stridedSlice: stridedSlice,
    topk: topk,
    scatterND: scatterND,
    fft: fft,
    ifft: ifft,
    rfft: rfft,
    irfft: irfft,
    sparseToDense: sparseToDense,
    gatherND: gatherND
  });

  function mapActivation(e, t, r) {
    if ("linear" === t) return e.linear(r);
    if ("relu" === t) return e.relu(r);
    throw new Error("Activation " + t + " has not been implemented for the CPU backend.");
  }

  var MathBackendCPU = function () {
    function e() {
      this.blockSize = 48, this.firstUse = !0, ENV.get("IS_BROWSER") && (this.fromPixels2DContext = document.createElement("canvas").getContext("2d"));
    }

    return e.prototype.setDataMover = function (e) {
      this.data = new DataStorage(e);
    }, e.prototype.register = function (e, t, r) {
      if (this.firstUse && (this.firstUse = !1, ENV.get("IS_NODE") && warn("\n============================\nHi there ð. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================\n")), this.data.has(e)) throw new Error("Data buffer is already registered");
      this.data.set(e, {
        dtype: r
      });
    }, e.prototype.write = function (e, t) {
      if (null == t) throw new Error("MathBackendCPU.write(): values can not be null");
      this.data.get(e).values = t;
    }, e.prototype.fromPixels = function (e, t) {
      if (null == e) throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
      var r, n;
      if (ENV.get("IS_NODE") && null == e.getContext) throw new Error("When running in node, pixels must be an HTMLCanvasElement like the one returned by the `canvas` npm package");
      if (null != e.getContext) r = e.getContext("2d").getImageData(0, 0, e.width, e.height).data;else if (e instanceof ImageData) r = e.data;else {
        if (!(e instanceof HTMLImageElement || e instanceof HTMLVideoElement)) throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement or ImageData, but was " + e.constructor.name);
        if (null == this.fromPixels2DContext) throw new Error("Can't read pixels from HTMLImageElement outside the browser.");
        this.fromPixels2DContext.canvas.width = e.width, this.fromPixels2DContext.canvas.height = e.height, this.fromPixels2DContext.drawImage(e, 0, 0, e.width, e.height), r = this.fromPixels2DContext.getImageData(0, 0, e.width, e.height).data;
      }
      if (4 === t) n = new Int32Array(r);else {
        var a = e.width * e.height;
        n = new Int32Array(a * t);

        for (var o = 0; o < a; o++) {
          for (var i = 0; i < t; ++i) {
            n[o * t + i] = r[4 * o + i];
          }
        }
      }
      return tensor3d(n, [e.height, e.width, t], "int32");
    }, e.prototype.read = function (e) {
      return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (t) {
          return [2, this.readSync(e)];
        });
      });
    }, e.prototype.readSync = function (e) {
      var t = this.data.get(e),
          r = t.dtype,
          n = t.complexTensors;
      return "complex64" === r ? mergeRealAndImagArrays(n.real.dataSync(), n.imag.dataSync()) : this.data.get(e).values;
    }, e.prototype.disposeData = function (e) {
      if (this.data.has(e)) {
        var t = this.data.get(e).complexTensors;
        null != t && (t.real.dispose(), t.imag.dispose()), this.data.delete(e);
      }
    }, e.prototype.time = function (e) {
      return __awaiter(this, void 0, void 0, function () {
        var t;
        return __generator(this, function (r) {
          return t = now(), e(), [2, {
            kernelMs: now() - t
          }];
        });
      });
    }, e.prototype.memory = function () {
      return {
        unreliable: !0,
        reasons: ["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]
      };
    }, e.prototype.complex = function (e, t) {
      var r = Tensor.make(e.shape, {}, "complex64");
      return this.data.get(r.dataId).complexTensors = {
        real: ENV.engine.keep(e.clone()),
        imag: ENV.engine.keep(t.clone())
      }, r;
    }, e.prototype.real = function (e) {
      return this.data.get(e.dataId).complexTensors.real.clone();
    }, e.prototype.imag = function (e) {
      return this.data.get(e.dataId).complexTensors.imag.clone();
    }, e.prototype.assertNotComplex = function (e, t) {
      Array.isArray(e) || (e = [e]), e.forEach(function (e) {
        null != e && assert("complex64" !== e.dtype, t + " does not support complex64 tensors.");
      });
    }, e.prototype.slice = function (e, t, r) {
      if (this.assertNotComplex(e, "slice"), isSliceContinous(e.shape, t, r)) {
        var n = computeFlatOffset(t, e.strides),
            a = sizeFromShape(r);
        return tensor(e.dataSync().subarray(n, n + a), r, e.dtype);
      }

      for (var o = buffer(r, e.dtype), i = e.bufferSync(), s = 0; s < o.size; ++s) {
        var u = o.indexToLoc(s).map(function (e, r) {
          return e + t[r];
        });
        o.values[s] = i.get.apply(i, u);
      }

      return o.toTensor();
    }, e.prototype.stridedSlice = function (e, t, r, n, a, o, i, s, u) {
      this.assertNotComplex(e, "stridedSlice");
      var l = getStridedSlicedInfo(e.shape, t, r, n, a, o, i, s, u),
          p = l[0],
          c = l[1],
          h = l[2],
          d = c.filter(function (e, t) {
        return -1 === h.indexOf(t);
      });
      if (d.some(function (e) {
        return 0 === e;
      })) return tensor([], d);

      for (var f = buffer(c, e.dtype), m = e.bufferSync(), g = 0; g < f.size; g++) {
        for (var y = f.indexToLoc(g), v = new Array(y.length), x = 0; x < v.length; x++) {
          v[x] = y[x] * n[x] + p[x];
        }

        f.set.apply(f, [m.get.apply(m, v)].concat(y));
      }

      return f.toTensor().reshape(d);
    }, e.prototype.unstack = function (e, t) {
      for (var r = e.shape[t], n = new Array(e.rank - 1), a = 0, o = 0; o < e.rank; o++) {
        o !== t && (n[a++] = e.shape[o]);
      }

      var i = new Array(e.rank).fill(0),
          s = e.shape.slice();
      s[t] = 1;
      var u = new Array(r);

      for (o = 0; o < u.length; o++) {
        i[t] = o, u[o] = this.slice(e, i, s).reshape(n);
      }

      return u;
    }, e.prototype.reverse = function (e, t) {
      this.assertNotComplex(e, "reverse");

      for (var r = buffer(e.shape, e.dtype), n = e.bufferSync(), a = function a(_a) {
        var o = r.indexToLoc(_a),
            i = o.slice();
        t.forEach(function (t) {
          return i[t] = e.shape[t] - 1 - i[t];
        }), r.set.apply(r, [n.get.apply(n, i)].concat(o));
      }, o = 0; o < r.size; o++) {
        a(o);
      }

      return r.toTensor();
    }, e.prototype.concat = function (e, t) {
      this.assertNotComplex(e, "concat");
      var r = e.map(function (e) {
        var r = sizeFromShape(e.shape.slice(t));
        return e.as2D(-1, r);
      }),
          n = computeOutShape(r.map(function (e) {
        return e.shape;
      }), 1),
          a = buffer(n, e[0].dtype).values;

      if (1 === r[0].shape[0]) {
        var o = 0;
        r.forEach(function (e) {
          a.set(e.dataSync(), o), o += e.size;
        });
      } else {
        var i = 0;
        r.forEach(function (e) {
          for (var t = e.dataSync(), r = 0, o = 0; o < e.shape[0]; ++o) {
            for (var s = o * n[1] + i, u = 0; u < e.shape[1]; ++u) {
              a[s + u] = t[r++];
            }
          }

          i += e.shape[1];
        });
      }

      var s = computeOutShape(e.map(function (e) {
        return e.shape;
      }), t);
      return tensor(a, s, e[0].dtype);
    }, e.prototype.neg = function (e) {
      return this.assertNotComplex(e, "neg"), this.multiply(scalar(-1), e);
    }, e.prototype.add = function (e, t) {
      return "complex64" === e.dtype || "complex64" === t.dtype ? this.broadcastedBinaryComplexOp(e.cast("complex64"), t.cast("complex64"), function (e, t, r, n) {
        return {
          real: e + r,
          imag: t + n
        };
      }) : this.broadcastedBinaryOp(e, t, upcastType(e.dtype, t.dtype), function (e, t) {
        return e + t;
      });
    }, e.prototype.addN = function (e) {
      this.assertNotComplex(e, "addN");

      for (var t = e.map(function (e) {
        return e.dataSync();
      }), r = buffer(e[0].shape, e[0].dtype), n = r.values, a = 0; a < e.length; a++) {
        for (var o = t[a], i = 0; i < n.length; i++) {
          n[i] += o[i];
        }
      }

      return r.toTensor();
    }, e.prototype.subtract = function (e, t) {
      return "complex64" === e.dtype || "complex64" === t.dtype ? this.broadcastedBinaryComplexOp(e.cast("complex64"), t.cast("complex64"), function (e, t, r, n) {
        return {
          real: e - r,
          imag: t - n
        };
      }) : this.broadcastedBinaryOp(e, t, upcastType(e.dtype, t.dtype), function (e, t) {
        return e - t;
      });
    }, e.prototype.pow = function (e, t) {
      return this.assertNotComplex([e, t], "pow"), this.broadcastedBinaryOp(e, t, e.dtype, function (e, t) {
        return Math.pow(e, t);
      });
    }, e.prototype.batchMatMul = function (e, t, r, n) {
      this.assertNotComplex([e, t], "matMul");

      for (var a = r ? e.shape[1] : e.shape[2], o = r ? e.shape[2] : e.shape[1], i = n ? t.shape[1] : t.shape[2], s = e.shape[0], u = e.dataSync(), l = t.dataSync(), p = r ? [e.strides[0], 1, e.strides[1]] : [e.strides[0], e.strides[1], 1], c = p[0], h = p[1], d = p[2], f = n ? [1, t.strides[1], t.strides[0]] : [t.strides[1], 1, t.strides[0]], m = f[0], g = f[1], y = f[2], v = o * i, x = buffer([s, o, i], e.dtype), b = x.values, w = this.blockSize, N = 0; N < s; N++) {
        for (var S = 0; S < o; S += w) {
          for (var T = 0; T < i; T += w) {
            for (var E = 0; E < a; E += w) {
              for (var _ = Math.min(S + w, o), I = Math.min(T + w, i), A = Math.min(E + w, a), C = S; C < _; C++) {
                for (var P = T; P < I; P++) {
                  for (var k = 0, O = E; O < A; O++) {
                    k += u[N * c + C * h + O * d] * l[O * m + P * g + N * y];
                  }

                  b[N * v + (C * i + P)] += k;
                }
              }
            }
          }
        }
      }

      return x.toTensor();
    }, e.prototype.fusedBatchMatMul = function (e, t, r, n, a, o) {
      var i = this.batchMatMul(e, t, r, n);
      return a && (i = this.add(i, a)), o && (i = mapActivation(this, o, i)), i;
    }, e.prototype.multiply = function (e, t) {
      return "complex64" === e.dtype || "complex64" === t.dtype ? this.broadcastedBinaryComplexOp(e.cast("complex64"), t.cast("complex64"), function (e, t, r, n) {
        return {
          real: e * r - t * n,
          imag: e * n + t * r
        };
      }) : this.broadcastedBinaryOp(e, t, upcastType(e.dtype, t.dtype), function (e, t) {
        return e * t;
      });
    }, e.prototype.realDivide = function (e, t) {
      return this.assertNotComplex([e, t], "realDivide"), this.broadcastedBinaryOp(e, t, "float32", function (e, t) {
        return e / t;
      });
    }, e.prototype.floorDiv = function (e, t) {
      return this.assertNotComplex([e, t], "floorDiv"), this.broadcastedBinaryOp(e, t, "int32", function (e, t) {
        return Math.floor(e / t);
      });
    }, e.prototype.sum = function (e, t) {
      this.assertNotComplex(e, "sum"), assertAxesAreInnerMostDims("sum", t, e.rank);

      for (var r = computeOutAndReduceShapes(e.shape, t), n = r[0], a = r[1], o = zeros(n, upcastType(e.dtype, "int32")), i = sizeFromShape(a), s = o.dataSync(), u = e.dataSync(), l = 0; l < s.length; ++l) {
        for (var p = l * i, c = 0, h = 0; h < i; ++h) {
          c += u[p + h];
        }

        s[l] = c;
      }

      return o;
    }, e.prototype.prod = function (e, t) {
      this.assertNotComplex(e, "sum");

      for (var r = computeOutAndReduceShapes(e.shape, t), n = r[0], a = r[1], o = zeros(n, upcastType(e.dtype, "int32")), i = sizeFromShape(a), s = o.dataSync(), u = e.dataSync(), l = 0; l < s.length; ++l) {
        for (var p = l * i, c = 1, h = 0; h < i; ++h) {
          c *= u[p + h];
        }

        s[l] = c;
      }

      return o;
    }, e.prototype.unsortedSegmentSum = function (e, t, r) {
      this.assertNotComplex(e, "unsortedSegmentSum");

      for (var n = [], a = e.rank - t.rank, o = 0; o < a; ++o) {
        t = t.expandDims(o + 1);
      }

      for (o = 0; o < r; ++o) {
        var i = scalar(o, "int32"),
            s = equal(i, t).asType("float32").mul(e).sum(0);
        n.push(s);
      }

      return stack(n);
    }, e.prototype.argMin = function (e, t) {
      this.assertNotComplex(e, "argMin");
      var r = [t];
      assertAxesAreInnerMostDims("argMin", r, e.rank);

      for (var n = computeOutAndReduceShapes(e.shape, r), a = n[0], o = n[1], i = zeros(a, "int32"), s = sizeFromShape(o), u = i.dataSync(), l = e.dataSync(), p = 0; p < u.length; ++p) {
        for (var c = p * s, h = l[c], d = 0, f = 0; f < s; ++f) {
          var m = l[c + f];
          m < h && (h = m, d = f);
        }

        u[p] = d;
      }

      return i;
    }, e.prototype.argMax = function (e, t) {
      this.assertNotComplex(e, "argMax");
      var r = [t];
      assertAxesAreInnerMostDims("argMax", r, e.rank);

      for (var n = computeOutAndReduceShapes(e.shape, r), a = n[0], o = n[1], i = zeros(a, "int32"), s = sizeFromShape(o), u = i.dataSync(), l = e.dataSync(), p = 0; p < u.length; ++p) {
        for (var c = p * s, h = l[c], d = 0, f = 0; f < s; ++f) {
          var m = l[c + f];
          m > h && (h = m, d = f);
        }

        u[p] = d;
      }

      return i;
    }, e.prototype.cumsum = function (e, t, r, n) {
      if (this.assertNotComplex(e, "cumsum"), t !== e.rank - 1) throw new Error("backend.cumsum in CPU expects an inner-most axis=" + (e.rank - 1) + " but got axis=" + t);

      for (var a = upcastType(e.dtype, "int32"), o = zeros(e.shape, a), i = o.dataSync(), s = e.dataSync(), u = e.shape[e.rank - 1], l = n ? function (e, t) {
        return e + u - t - 1;
      } : function (e, t) {
        return e + t;
      }, p = 0; p < s.length; p += u) {
        for (var c = 0; c < u; c++) {
          var h = l(p, c);
          if (0 === c) i[h] = r ? 0 : s[h];else {
            var d = l(p, c - 1);
            i[h] = r ? s[d] + i[d] : s[h] + i[d];
          }
        }
      }

      return o;
    }, e.prototype.equal = function (e, t) {
      return this.assertNotComplex([e, t], "equal"), this.broadcastedBinaryOp(e, t, "bool", function (e, t) {
        return e === t ? 1 : 0;
      });
    }, e.prototype.notEqual = function (e, t) {
      return this.assertNotComplex([e, t], "notEqual"), this.broadcastedBinaryOp(e, t, "bool", function (e, t) {
        return e !== t ? 1 : 0;
      });
    }, e.prototype.less = function (e, t) {
      return this.assertNotComplex([e, t], "less"), this.broadcastedBinaryOp(e, t, "bool", function (e, t) {
        return e < t ? 1 : 0;
      });
    }, e.prototype.lessEqual = function (e, t) {
      return this.assertNotComplex([e, t], "lessEqual"), this.broadcastedBinaryOp(e, t, "bool", function (e, t) {
        return e <= t ? 1 : 0;
      });
    }, e.prototype.greater = function (e, t) {
      return this.assertNotComplex([e, t], "greater"), this.broadcastedBinaryOp(e, t, "bool", function (e, t) {
        return e > t ? 1 : 0;
      });
    }, e.prototype.greaterEqual = function (e, t) {
      return this.assertNotComplex([e, t], "greaterEqual"), this.broadcastedBinaryOp(e, t, "bool", function (e, t) {
        return e >= t ? 1 : 0;
      });
    }, e.prototype.logicalNot = function (e) {
      this.assertNotComplex(e, "logicalNot");

      for (var t = e.dataSync(), r = new Uint8Array(t.length), n = 0; n < t.length; ++n) {
        r[n] = t[n] ? 0 : 1;
      }

      return Tensor.make(e.shape, {
        values: r
      }, "bool");
    }, e.prototype.logicalAnd = function (e, t) {
      return this.assertNotComplex([e, t], "logicalAnd"), this.broadcastedBinaryOp(e, t, "bool", function (e, t) {
        return e && t;
      });
    }, e.prototype.logicalOr = function (e, t) {
      return this.assertNotComplex([e, t], "logicalOr"), this.broadcastedBinaryOp(e, t, "bool", function (e, t) {
        return e || t;
      });
    }, e.prototype.select = function (e, t, r) {
      this.assertNotComplex([e, t, r], "select");

      for (var n = e.dataSync(), a = t.dataSync(), o = r.dataSync(), i = zeros(t.shape, upcastType(t.dtype, r.dtype)), s = i.dataSync(), u = 0, l = 0 === e.rank || e.rank > 1 || 1 === t.rank ? 1 : t.shape[1], p = 0; p < n.length; p++) {
        for (var c = 0; c < l; c++) {
          1 === n[p] ? s[u++] = a[p] : s[u++] = o[p];
        }
      }

      return i;
    }, e.prototype.where = function (e) {
      this.assertNotComplex([e], "where");
      var t = e.dataSync();
      return whereImpl(e.shape, t);
    }, e.prototype.topk = function (e, t, r) {
      return this.assertNotComplex(e, "topk"), topkImpl(e.dataSync(), e.shape, e.dtype, t, r);
    }, e.prototype.min = function (e, t) {
      this.assertNotComplex(e, "min"), assertAxesAreInnerMostDims("min", t, e.rank);

      for (var r = computeOutAndReduceShapes(e.shape, t), n = r[0], a = r[1], o = zeros(n, e.dtype), i = sizeFromShape(a), s = o.dataSync(), u = e.dataSync(), l = 0; l < s.length; ++l) {
        for (var p = l * i, c = u[p], h = 0; h < i; ++h) {
          var d = u[p + h];
          d < c && (c = d);
        }

        s[l] = c;
      }

      return o;
    }, e.prototype.minimum = function (e, t) {
      return this.assertNotComplex([e, t], "minimum"), this.broadcastedBinaryOp(e, t, e.dtype, function (e, t) {
        return Math.min(e, t);
      });
    }, e.prototype.mod = function (e, t) {
      return this.assertNotComplex([e, t], "mod"), this.broadcastedBinaryOp(e, t, e.dtype, function (e, t) {
        var r = e % t;
        return e < 0 && t < 0 || e >= 0 && t >= 0 ? r : (r + t) % t;
      });
    }, e.prototype.max = function (e, t) {
      this.assertNotComplex(e, "max"), assertAxesAreInnerMostDims("max", t, e.rank);

      for (var r = computeOutAndReduceShapes(e.shape, t), n = r[0], a = r[1], o = zeros(n, e.dtype), i = sizeFromShape(a), s = o.dataSync(), u = e.dataSync(), l = 0; l < s.length; ++l) {
        for (var p = l * i, c = u[p], h = 0; h < i; ++h) {
          var d = u[p + h];
          d > c && (c = d);
        }

        s[l] = c;
      }

      return o;
    }, e.prototype.maximum = function (e, t) {
      return this.assertNotComplex([e, t], "maximum"), this.broadcastedBinaryOp(e, t, e.dtype, function (e, t) {
        return Math.max(e, t);
      });
    }, e.prototype.all = function (e, t) {
      this.assertNotComplex(e, "all"), assertAxesAreInnerMostDims("all", t, e.rank);

      for (var r = computeOutAndReduceShapes(e.shape, t), n = r[0], a = r[1], o = zeros(n, e.dtype), i = sizeFromShape(a), s = o.dataSync(), u = e.dataSync(), l = 0; l < s.length; ++l) {
        for (var p = l * i, c = u[p], h = 0; h < i; ++h) {
          var d = u[p + h];
          c = c && d;
        }

        s[l] = c;
      }

      return o;
    }, e.prototype.any = function (e, t) {
      this.assertNotComplex(e, "any"), assertAxesAreInnerMostDims("any", t, e.rank);

      for (var r = computeOutAndReduceShapes(e.shape, t), n = r[0], a = r[1], o = zeros(n, e.dtype), i = sizeFromShape(a), s = o.dataSync(), u = e.dataSync(), l = 0; l < s.length; ++l) {
        for (var p = l * i, c = u[p], h = 0; h < i; ++h) {
          var d = u[p + h];
          c = c || d;
        }

        s[l] = c;
      }

      return o;
    }, e.prototype.squaredDifference = function (e, t) {
      return this.assertNotComplex([e, t], "squaredDifference"), this.broadcastedBinaryOp(e, t, e.dtype, function (e, t) {
        var r = e - t;
        return r * r;
      });
    }, e.prototype.ceil = function (e) {
      this.assertNotComplex(e, "ceil");

      for (var t = e.dataSync(), r = new Float32Array(t.length), n = 0; n < t.length; ++n) {
        r[n] = Math.ceil(t[n]);
      }

      return Tensor.make(e.shape, {
        values: r
      });
    }, e.prototype.floor = function (e) {
      this.assertNotComplex(e, "floor");

      for (var t = e.dataSync(), r = new Float32Array(t.length), n = 0; n < t.length; ++n) {
        r[n] = Math.floor(t[n]);
      }

      return Tensor.make(e.shape, {
        values: r
      });
    }, e.prototype.sign = function (e) {
      this.assertNotComplex(e, "x");

      for (var t = e.dataSync(), r = new Float32Array(t.length), n = 0; n < t.length; ++n) {
        t[n] < 0 ? r[n] = -1 : t[n] > 0 ? r[n] = 1 : r[n] = 0;
      }

      return Tensor.make(e.shape, {
        values: r
      });
    }, e.prototype.round = function (e) {
      this.assertNotComplex(e, "round");

      for (var t = e.dataSync(), r = new Float32Array(t.length), n = 0; n < t.length; ++n) {
        var a = Math.floor(t[n]);
        t[n] - a < .5 ? r[n] = Math.floor(t[n]) : t[n] - a > .5 ? r[n] = Math.ceil(t[n]) : r[n] = a % 2 == 0 ? a : a + 1;
      }

      return Tensor.make(e.shape, {
        values: r
      });
    }, e.prototype.exp = function (e) {
      this.assertNotComplex(e, "exp");

      for (var t = e.dataSync(), r = new Float32Array(t.length), n = 0; n < t.length; ++n) {
        r[n] = Math.exp(t[n]);
      }

      return Tensor.make(e.shape, {
        values: r
      });
    }, e.prototype.expm1 = function (e) {
      this.assertNotComplex(e, "expm1");

      for (var t = e.dataSync(), r = new Float32Array(t.length), n = 0; n < t.length; ++n) {
        r[n] = Math.expm1(t[n]);
      }

      return Tensor.make(e.shape, {
        values: r
      });
    }, e.prototype.log = function (e) {
      this.assertNotComplex(e, "log");

      for (var t = e.dataSync(), r = new Float32Array(t.length), n = 0; n < t.length; ++n) {
        var a = t[n];
        r[n] = Math.log(a);
      }

      return Tensor.make(e.shape, {
        values: r
      });
    }, e.prototype.log1p = function (e) {
      this.assertNotComplex(e, "log1p");

      for (var t = e.dataSync(), r = new Float32Array(t.length), n = 0; n < t.length; ++n) {
        var a = t[n];
        r[n] = Math.log1p(a);
      }

      return Tensor.make(e.shape, {
        values: r
      });
    }, e.prototype.sqrt = function (e) {
      this.assertNotComplex(e, "sqrt");

      for (var t = e.dataSync(), r = new Float32Array(t.length), n = 0; n < t.length; ++n) {
        var a = t[n];
        r[n] = Math.sqrt(a);
      }

      return Tensor.make(e.shape, {
        values: r
      });
    }, e.prototype.rsqrt = function (e) {
      this.assertNotComplex(e, "rsqrt");

      for (var t = e.dataSync(), r = new Float32Array(t.length), n = 0; n < t.length; ++n) {
        var a = t[n];
        r[n] = 1 / Math.sqrt(a);
      }

      return Tensor.make(e.shape, {
        values: r
      });
    }, e.prototype.square = function (e) {
      this.assertNotComplex(e, "square");

      for (var t = e.dataSync(), r = new Float32Array(t.length), n = 0; n < t.length; ++n) {
        var a = t[n];
        r[n] = a * a;
      }

      return Tensor.make(e.shape, {
        values: r
      });
    }, e.prototype.reciprocal = function (e) {
      this.assertNotComplex(e, "reciprocal");

      for (var t = e.dataSync(), r = new Float32Array(t.length), n = 0; n < t.length; ++n) {
        r[n] = 1 / t[n];
      }

      return Tensor.make(e.shape, {
        values: r
      });
    }, e.prototype.linear = function (e) {
      return e;
    }, e.prototype.relu = function (e) {
      this.assertNotComplex(e, "relu");

      for (var t = zeros(e.shape, e.dtype), r = t.dataSync(), n = e.dataSync(), a = 0; a < n.length; ++a) {
        r[a] = Math.max(0, n[a]);
      }

      return t;
    }, e.prototype.prelu = function (e, t) {
      return this.assertNotComplex([e, t], "prelu"), this.broadcastedBinaryOp(e, t, e.dtype, function (e, t) {
        return e < 0 ? t * e : e;
      });
    }, e.prototype.elu = function (e) {
      this.assertNotComplex(e, "elu");

      for (var t = new Float32Array(e.size), r = e.dataSync(), n = 0; n < r.length; ++n) {
        var a = r[n];
        t[n] = a >= 0 ? a : Math.exp(a) - 1;
      }

      return Tensor.make(e.shape, {
        values: t
      });
    }, e.prototype.eluDer = function (e, t) {
      this.assertNotComplex([e, t], "eluDer");

      for (var r = new Float32Array(t.size), n = t.dataSync(), a = e.dataSync(), o = 0; o < n.length; ++o) {
        var i = n[o];
        r[o] = i >= 1 ? a[o] : a[o] * (i + 1);
      }

      return Tensor.make(t.shape, {
        values: r
      });
    }, e.prototype.selu = function (e) {
      this.assertNotComplex(e, "selu");

      for (var t = SELU_SCALEALPHA, r = SELU_SCALE, n = new Float32Array(e.size), a = e.dataSync(), o = 0; o < a.length; ++o) {
        var i = a[o];
        n[o] = i >= 0 ? r * i : t * (Math.exp(i) - 1);
      }

      return Tensor.make(e.shape, {
        values: n
      });
    }, e.prototype.clip = function (e, t, r) {
      this.assertNotComplex(e, "clip");

      for (var n = new Float32Array(e.size), a = e.dataSync(), o = 0; o < a.length; ++o) {
        var i = a[o];
        n[o] = i > r ? r : i < t ? t : i;
      }

      return Tensor.make(e.shape, {
        values: n
      });
    }, e.prototype.abs = function (e) {
      for (var t = new Float32Array(e.size), r = e.dataSync(), n = 0; n < r.length; ++n) {
        t[n] = Math.abs(r[n]);
      }

      return Tensor.make(e.shape, {
        values: t
      });
    }, e.prototype.complexAbs = function (e) {
      for (var t = new Float32Array(e.size), r = e.dataSync(), n = 0; n < e.size; ++n) {
        var a = r[2 * n],
            o = r[2 * n + 1];
        t[n] = Math.hypot(a, o);
      }

      return Tensor.make(e.shape, {
        values: t
      });
    }, e.prototype.int = function (e) {
      this.assertNotComplex(e, "int");

      for (var t = new Int32Array(e.size), r = e.dataSync(), n = 0; n < r.length; ++n) {
        t[n] = r[n];
      }

      return Tensor.make(e.shape, {
        values: t
      }, "int32");
    }, e.prototype.sigmoid = function (e) {
      this.assertNotComplex(e, "sigmoid");

      for (var t = new Float32Array(e.size), r = e.dataSync(), n = 0; n < r.length; ++n) {
        t[n] = 1 / (1 + Math.exp(-r[n]));
      }

      return Tensor.make(e.shape, {
        values: t
      });
    }, e.prototype.softplus = function (e) {
      this.assertNotComplex(e, "softplus");

      for (var t = Math.log(1.1920928955078125e-7) + 2, r = new Float32Array(e.size), n = e.dataSync(), a = 0; a < n.length; ++a) {
        var o,
            i = n[a] > -t,
            s = n[a] < t,
            u = Math.exp(n[a]);
        o = s ? u : i ? n[a] : Math.log(1 + u), r[a] = o;
      }

      return Tensor.make(e.shape, {
        values: r
      });
    }, e.prototype.sin = function (e) {
      this.assertNotComplex(e, "sin");

      for (var t = new Float32Array(e.size), r = e.dataSync(), n = 0; n < r.length; ++n) {
        t[n] = Math.sin(r[n]);
      }

      return Tensor.make(e.shape, {
        values: t
      });
    }, e.prototype.cos = function (e) {
      this.assertNotComplex(e, "cos");

      for (var t = new Float32Array(e.size), r = e.dataSync(), n = 0; n < r.length; ++n) {
        t[n] = Math.cos(r[n]);
      }

      return Tensor.make(e.shape, {
        values: t
      });
    }, e.prototype.tan = function (e) {
      this.assertNotComplex(e, "tan");

      for (var t = new Float32Array(e.size), r = e.dataSync(), n = 0; n < r.length; ++n) {
        t[n] = Math.tan(r[n]);
      }

      return Tensor.make(e.shape, {
        values: t
      });
    }, e.prototype.asin = function (e) {
      this.assertNotComplex(e, "asin");

      for (var t = new Float32Array(e.size), r = e.dataSync(), n = 0; n < r.length; ++n) {
        t[n] = Math.asin(r[n]);
      }

      return Tensor.make(e.shape, {
        values: t
      });
    }, e.prototype.acos = function (e) {
      this.assertNotComplex(e, "acos");

      for (var t = new Float32Array(e.size), r = e.dataSync(), n = 0; n < r.length; ++n) {
        t[n] = Math.acos(r[n]);
      }

      return Tensor.make(e.shape, {
        values: t
      });
    }, e.prototype.atan = function (e) {
      this.assertNotComplex(e, "atan");

      for (var t = new Float32Array(e.size), r = e.dataSync(), n = 0; n < r.length; ++n) {
        t[n] = Math.atan(r[n]);
      }

      return Tensor.make(e.shape, {
        values: t
      });
    }, e.prototype.atan2 = function (e, t) {
      return this.assertNotComplex([e, t], "atan2"), this.broadcastedBinaryOp(e, t, e.dtype, function (e, t) {
        return Math.atan2(e, t);
      });
    }, e.prototype.sinh = function (e) {
      this.assertNotComplex(e, "sinh");

      for (var t = new Float32Array(e.size), r = e.dataSync(), n = 0; n < r.length; ++n) {
        t[n] = Math.sinh(r[n]);
      }

      return Tensor.make(e.shape, {
        values: t
      });
    }, e.prototype.cosh = function (e) {
      this.assertNotComplex(e, "cosh");

      for (var t = new Float32Array(e.size), r = e.dataSync(), n = 0; n < r.length; ++n) {
        t[n] = Math.cosh(r[n]);
      }

      return Tensor.make(e.shape, {
        values: t
      });
    }, e.prototype.tanh = function (e) {
      this.assertNotComplex(e, "tanh");

      for (var t = new Float32Array(e.size), r = e.dataSync(), n = 0; n < r.length; ++n) {
        t[n] = tanh(r[n]);
      }

      return Tensor.make(e.shape, {
        values: t
      });
    }, e.prototype.asinh = function (e) {
      this.assertNotComplex(e, "asinh");

      for (var t = new Float32Array(e.size), r = e.dataSync(), n = 0; n < r.length; ++n) {
        t[n] = Math.asinh(r[n]);
      }

      return Tensor.make(e.shape, {
        values: t
      });
    }, e.prototype.acosh = function (e) {
      this.assertNotComplex(e, "acosh");

      for (var t = new Float32Array(e.size), r = e.dataSync(), n = 0; n < r.length; ++n) {
        t[n] = Math.acosh(r[n]);
      }

      return Tensor.make(e.shape, {
        values: t
      });
    }, e.prototype.atanh = function (e) {
      this.assertNotComplex(e, "atanh");

      for (var t = new Float32Array(e.size), r = e.dataSync(), n = 0; n < r.length; ++n) {
        t[n] = Math.atanh(r[n]);
      }

      return Tensor.make(e.shape, {
        values: t
      });
    }, e.prototype.erf = function (e) {
      this.assertNotComplex(e, "erf");

      for (var t = new Float32Array(e.size), r = e.dataSync(), n = ERF_P, a = ERF_A1, o = ERF_A2, i = ERF_A3, s = ERF_A4, u = ERF_A5, l = 0; l < r.length; ++l) {
        var p = r[l],
            c = 1 / (1 + n * p);
        t[l] = 1 - ((((u * c + s) * c + i) * c + o) * c + a) * c * Math.exp(-p * p);
      }

      return Tensor.make(e.shape, {
        values: t
      });
    }, e.prototype.step = function (e, t) {
      void 0 === t && (t = 0), this.assertNotComplex(e, "step");

      for (var r = new Float32Array(e.size), n = e.dataSync(), a = 0; a < n.length; ++a) {
        var o = n[a];
        isNaN(o) ? r[a] = NaN : r[a] = o > 0 ? 1 : t;
      }

      return Tensor.make(e.shape, {
        values: r
      });
    }, e.prototype.conv2d = function (e, t, r) {
      this.assertNotComplex([e, t], "conv2d");

      for (var n = r.filterHeight, a = r.filterWidth, o = r.dilationHeight, i = r.dilationWidth, s = r.padInfo.left, u = r.padInfo.top, l = buffer(r.outShape, e.dtype), p = e.dataSync(), c = t.dataSync(), h = l.values, d = 0; d < r.batchSize; ++d) {
        for (var f = d * e.strides[0], m = d * l.strides[0], g = 0; g < r.outHeight; ++g) {
          for (var y = m + g * l.strides[1], v = g * r.strideHeight - s, x = 0; x < n; x++) {
            var b = v + x * o;
            if (!(b < 0 || b >= r.inHeight)) for (var w = x * t.strides[0], N = f + b * e.strides[1], S = 0; S < r.outWidth; ++S) {
              for (var T = y + S * r.outChannels, E = S * r.strideWidth - u, _ = 0; _ < a; _++) {
                var I = E + _ * i;
                if (!(I < 0 || I >= r.inWidth)) for (var A = w + _ * t.strides[1], C = N + I * r.inChannels, P = A, k = 0; k < r.inChannels; ++k) {
                  for (var O = p[C + k], D = 0; D < r.outChannels; ++D) {
                    h[T + D] += O * c[P + D];
                  }

                  P += r.outChannels;
                }
              }
            }
          }
        }
      }

      return l.toTensor();
    }, e.prototype.conv3d = function (e, t, r) {
      for (var n = r.filterDepth, a = r.filterHeight, o = r.filterWidth, i = r.dilationDepth, s = r.dilationHeight, u = r.dilationWidth, l = r.padInfo.front, p = r.padInfo.left, c = r.padInfo.top, h = buffer(r.outShape, e.dtype), d = e.dataSync(), f = t.dataSync(), m = h.values, g = 0; g < r.batchSize; ++g) {
        for (var y = g * e.strides[0], v = g * h.strides[0], x = 0; x < r.outDepth; ++x) {
          for (var b = v + x * h.strides[1], w = x * r.strideDepth - l, N = 0; N < n; N++) {
            var S = w + N * i;
            if (!(S < 0 || S >= r.inDepth)) for (var T = N * t.strides[0], E = y + S * e.strides[1], _ = 0; _ < r.outHeight; ++_) {
              for (var I = b + _ * h.strides[2], A = _ * r.strideHeight - c, C = 0; C < a; C++) {
                var P = A + C * s;
                if (!(P < 0 || P >= r.inHeight)) for (var k = T + C * t.strides[1], O = E + P * e.strides[2], D = 0; D < r.outWidth; ++D) {
                  for (var R = I + D * r.outChannels, M = D * r.strideWidth - p, L = 0; L < o; L++) {
                    var z = M + L * u;
                    if (!(z < 0 || z >= r.inWidth)) for (var F = k + L * t.strides[2], V = O + z * r.inChannels, B = F, $ = 0; $ < r.inChannels; ++$) {
                      for (var U = d[V + $], W = 0; W < r.outChannels; ++W) {
                        m[R + W] += U * f[B + W];
                      }

                      B += r.outChannels;
                    }
                  }
                }
              }
            }
          }
        }
      }

      return h.toTensor();
    }, e.prototype.conv2dDerInput = function (e, t, r) {
      this.assertNotComplex([e, t], "conv2dDerInput");

      for (var n = buffer(r.inShape, "float32"), a = n.values, o = n.strides, i = o[0], s = o[1], u = o[2], l = e.dataSync(), p = e.strides, c = p[0], h = p[1], d = p[2], f = t.dataSync(), m = t.strides, g = m[0], y = m[1], v = m[2], x = r.batchSize, b = r.filterHeight, w = r.filterWidth, N = r.inChannels, S = r.inHeight, T = r.inWidth, E = r.outChannels, _ = r.outHeight, I = r.outWidth, A = r.strideHeight, C = r.strideWidth, P = b - 1 - r.padInfo.top, k = w - 1 - r.padInfo.left, O = 0; O < x; ++O) {
        for (var D = 0; D < N; ++D) {
          for (var R = 0; R < S; ++R) {
            for (var M = R - P, L = Math.max(0, Math.ceil(M / A)), z = Math.min(_, (b + M) / A), F = 0; F < T; ++F) {
              for (var V = F - k, B = Math.max(0, Math.ceil(V / C)), $ = Math.min(I, (w + V) / C), U = 0, W = L; W < z; ++W) {
                for (var G = W * A - M, q = B; q < $; ++q) {
                  for (var H = c * O + h * W + d * q, j = g * (b - 1 - G) + y * (w - 1 - (q * C - V)) + v * D, K = 0; K < E; ++K) {
                    U += l[H + K] * f[j + K];
                  }
                }
              }

              a[i * O + s * R + u * F + D] = U;
            }
          }
        }
      }

      return n.toTensor();
    }, e.prototype.conv3dDerInput = function (e, t, r) {
      for (var n = buffer(r.inShape, "float32"), a = n.values, o = n.strides, i = o[0], s = o[1], u = o[2], l = o[3], p = e.dataSync(), c = e.strides, h = c[0], d = c[1], f = c[2], m = c[3], g = t.dataSync(), y = t.strides, v = y[0], x = y[1], b = y[2], w = y[3], N = r.batchSize, S = r.filterDepth, T = r.filterHeight, E = r.filterWidth, _ = r.inChannels, I = r.inDepth, A = r.inHeight, C = r.inWidth, P = r.outChannels, k = r.outDepth, O = r.outHeight, D = r.outWidth, R = r.strideDepth, M = r.strideHeight, L = r.strideWidth, z = S - 1 - r.padInfo.front, F = T - 1 - r.padInfo.top, V = E - 1 - r.padInfo.left, B = 0; B < N; ++B) {
        for (var $ = 0; $ < _; ++$) {
          for (var U = 0; U < I; ++U) {
            for (var W = U - z, G = Math.max(0, Math.ceil(W / R)), q = Math.min(k, (S + W) / R), H = 0; H < A; ++H) {
              for (var j = H - F, K = Math.max(0, Math.ceil(j / M)), X = Math.min(O, (T + j) / M), Y = 0; Y < C; ++Y) {
                for (var Z = Y - V, J = Math.max(0, Math.ceil(Z / L)), Q = Math.min(D, (E + Z) / L), ee = 0, te = G; te < q; ++te) {
                  for (var re = te * R - W, ne = K; ne < X; ++ne) {
                    for (var ae = ne * M - j, oe = J; oe < Q; ++oe) {
                      for (var ie = h * B + d * te + f * ne + m * oe, se = v * (S - 1 - re) + x * (T - 1 - ae) + b * (E - 1 - (oe * L - Z)) + w * $, ue = 0; ue < P; ++ue) {
                        ee += p[ie + ue] * g[se + ue];
                      }
                    }
                  }
                }

                a[i * B + s * U + u * H + l * Y + $] = ee;
              }
            }
          }
        }
      }

      return n.toTensor();
    }, e.prototype.conv2dDerFilter = function (e, t, r) {
      this.assertNotComplex([e, t], "conv2dDerFilter");

      for (var n = r.strideHeight, a = r.strideWidth, o = r.filterHeight, i = r.filterWidth, s = buffer(r.filterShape, "float32"), u = r.padInfo.left, l = r.padInfo.top, p = e.bufferSync(), c = t.bufferSync(), h = 0; h < o; ++h) {
        for (var d = Math.max(0, Math.ceil((l - h) / n)), f = Math.min(r.outHeight, (r.inHeight + l - h) / n), m = 0; m < i; ++m) {
          for (var g = Math.max(0, Math.ceil((u - m) / a)), y = Math.min(r.outWidth, (r.inWidth + u - m) / a), v = 0; v < r.inChannels; ++v) {
            for (var x = 0; x < r.outChannels; ++x) {
              for (var b = 0, w = 0; w < r.batchSize; ++w) {
                for (var N = d; N < f; ++N) {
                  for (var S = h + N * n - l, T = g; T < y; ++T) {
                    var E = m + T * a - u;
                    b += p.get(w, S, E, v) * c.get(w, N, T, x);
                  }
                }
              }

              s.set(b, h, m, v, x);
            }
          }
        }
      }

      return s.toTensor();
    }, e.prototype.conv3dDerFilter = function (e, t, r) {
      for (var n = r.strideDepth, a = r.strideHeight, o = r.strideWidth, i = r.filterDepth, s = r.filterHeight, u = r.filterWidth, l = buffer(r.filterShape, "float32"), p = l.values, c = l.strides, h = c[0], d = c[1], f = c[2], m = c[3], g = t.dataSync(), y = t.strides, v = y[0], x = y[1], b = y[2], w = y[3], N = e.dataSync(), S = e.strides, T = S[0], E = S[1], _ = S[2], I = S[3], A = r.padInfo.front, C = r.padInfo.left, P = r.padInfo.top, k = 0; k < i; ++k) {
        for (var O = Math.max(0, Math.ceil((A - k) / n)), D = Math.min(r.outDepth, (r.inDepth + A - k) / n), R = k * h, M = 0; M < s; ++M) {
          for (var L = Math.max(0, Math.ceil((P - M) / a)), z = Math.min(r.outHeight, (r.inHeight + P - M) / a), F = M * d + R, V = 0; V < u; ++V) {
            for (var B = Math.max(0, Math.ceil((C - V) / o)), $ = Math.min(r.outWidth, (r.inWidth + C - V) / o), U = V * f + F, W = 0; W < r.inChannels; ++W) {
              for (var G = W * m + U, q = 0; q < r.outChannels; ++q) {
                for (var H = 0, j = 0; j < r.batchSize; ++j) {
                  for (var K = j * T, X = j * v, Y = O; Y < D; ++Y) {
                    for (var Z = (k + Y * n - A) * E + K, J = Y * x + X, Q = L; Q < z; ++Q) {
                      for (var ee = (M + Q * a - P) * _ + Z, te = Q * b + J, re = B; re < $; ++re) {
                        var ne = re * w + te;
                        H += N[(V + re * o - C) * I + ee + W] * g[ne + q];
                      }
                    }
                  }
                }

                p[G + q] = H;
              }
            }
          }
        }
      }

      return l.toTensor();
    }, e.prototype.depthwiseConv2D = function (e, t, r) {
      this.assertNotComplex([e, t], "depthwiseConv2D");

      for (var n = r.filterHeight, a = r.filterWidth, o = r.dilationHeight, i = r.dilationWidth, s = r.padInfo.left, u = r.padInfo.top, l = r.outChannels / r.inChannels, p = buffer(r.outShape, e.dtype), c = e.dataSync(), h = t.dataSync(), d = p.values, f = 0; f < r.batchSize; ++f) {
        for (var m = f * e.strides[0], g = f * p.strides[0], y = 0; y < r.outHeight; ++y) {
          for (var v = g + y * p.strides[1], x = y * r.strideHeight - s, b = 0; b < n; ++b) {
            var w = x + b * o;
            if (!(w < 0 || w >= r.inHeight)) for (var N = b * t.strides[0], S = m + w * e.strides[1], T = 0; T < r.outWidth; ++T) {
              for (var E = v + T * p.strides[2], _ = T * r.strideWidth - u, I = 0; I < a; ++I) {
                var A = _ + I * i;
                if (!(A < 0 || A >= r.inWidth)) for (var C = N + I * t.strides[1], P = S + A * r.inChannels, k = E, O = C, D = 0; D < r.inChannels; ++D) {
                  for (var R = c[P + D], M = 0; M < l; ++M) {
                    d[k + M] += R * h[O + M];
                  }

                  k += l, O += l;
                }
              }
            }
          }
        }
      }

      return p.toTensor();
    }, e.prototype.depthwiseConv2DDerInput = function (e, t, r) {
      this.assertNotComplex([e, t], "depthwiseConv2DDerInput");

      for (var n = buffer(r.inShape, "float32"), a = n.values, o = n.strides, i = o[0], s = o[1], u = o[2], l = e.dataSync(), p = e.strides, c = p[0], h = p[1], d = p[2], f = t.dataSync(), m = t.strides, g = m[0], y = m[1], v = m[2], x = r.batchSize, b = r.filterHeight, w = r.filterWidth, N = r.inChannels, S = r.inHeight, T = r.inWidth, E = r.outChannels, _ = r.outHeight, I = r.outWidth, A = r.strideHeight, C = r.strideWidth, P = b - 1 - r.padInfo.top, k = w - 1 - r.padInfo.left, O = E / N, D = 0; D < x; ++D) {
        for (var R = 0; R < N; ++R) {
          for (var M = 0; M < S; ++M) {
            for (var L = M - P, z = Math.max(0, Math.ceil(L / A)), F = Math.min(_, (b + L) / A), V = 0; V < T; ++V) {
              for (var B = V - k, $ = Math.max(0, Math.ceil(B / C)), U = Math.min(I, (w + B) / C), W = 0, G = z; G < F; ++G) {
                for (var q = G * A - L, H = $; H < U; ++H) {
                  for (var j = c * D + h * G + d * H, K = g * (b - 1 - q) + y * (w - 1 - (H * C - B)) + v * R, X = 0; X < O; ++X) {
                    W += l[j + (R * O + X)] * f[K + X];
                  }
                }
              }

              a[i * D + s * M + u * V + R] = W;
            }
          }
        }
      }

      return n.toTensor();
    }, e.prototype.depthwiseConv2DDerFilter = function (e, t, r) {
      this.assertNotComplex([e, t], "depthwiseConv2DDerFilter");

      for (var n = r.strideHeight, a = r.strideWidth, o = r.filterHeight, i = r.filterWidth, s = buffer(r.filterShape, "float32"), u = r.padInfo.left, l = r.padInfo.top, p = r.outChannels / r.inChannels, c = e.bufferSync(), h = t.bufferSync(), d = 0; d < o; ++d) {
        for (var f = Math.max(0, Math.ceil((l - d) / n)), m = Math.min(r.outHeight, (r.inHeight + l - d) / n), g = 0; g < i; ++g) {
          for (var y = Math.max(0, Math.ceil((u - g) / a)), v = Math.min(r.outWidth, (r.inWidth + u - g) / a), x = 0; x < r.outChannels; ++x) {
            for (var b = Math.trunc(x / p), w = x % p, N = 0, S = 0; S < r.batchSize; ++S) {
              for (var T = f; T < m; ++T) {
                for (var E = d + T * n - l, _ = y; _ < v; ++_) {
                  var I = g + _ * a - u;
                  N += c.get(S, E, I, b) * h.get(S, T, _, x);
                }
              }
            }

            s.set(N, d, g, b, w);
          }
        }
      }

      return s.toTensor();
    }, e.prototype.tile = function (e, t) {
      this.assertNotComplex(e, "tile");

      for (var r = new Array(e.rank), n = 0; n < r.length; n++) {
        r[n] = e.shape[n] * t[n];
      }

      var a = buffer(r, e.dtype),
          o = e.bufferSync();

      for (n = 0; n < a.values.length; ++n) {
        for (var i = a.indexToLoc(n), s = new Array(e.rank), u = 0; u < s.length; u++) {
          s[u] = i[u] % e.shape[u];
        }

        var l = o.locToIndex(s);
        a.values[n] = o.values[l];
      }

      return a.toTensor();
    }, e.prototype.pad = function (e, t, r) {
      this.assertNotComplex(e, "pad");
      var n = t.map(function (t, r) {
        return t[0] + e.shape[r] + t[1];
      }),
          a = t.map(function (e) {
        return e[0];
      }),
          o = e.bufferSync(),
          i = buffer(n, e.dtype);
      0 !== r && i.values.fill(r);

      for (var s = 0; s < e.size; s++) {
        var u = o.indexToLoc(s),
            l = u.map(function (e, t) {
          return e + a[t];
        });
        i.set.apply(i, [o.get.apply(o, u)].concat(l));
      }

      return i.toTensor();
    }, e.prototype.transpose = function (e, t) {
      this.assertNotComplex(e, "transpose");

      for (var r = new Array(e.rank), n = 0; n < r.length; n++) {
        r[n] = e.shape[t[n]];
      }

      var a = e.dataSync(),
          o = buffer(r, e.dtype),
          i = e.bufferSync();

      for (n = 0; n < e.size; ++n) {
        for (var s = i.indexToLoc(n), u = new Array(s.length), l = 0; l < u.length; l++) {
          u[l] = s[t[l]];
        }

        var p = o.locToIndex(u);
        o.values[p] = a[n];
      }

      return o.toTensor();
    }, e.prototype.gather = function (e, t, r) {
      this.assertNotComplex([e, t], "gather");
      var n = e.shape.slice(),
          a = t.dataSync();
      n[r] = a.length;

      for (var o = buffer(n, e.dtype), i = e.bufferSync(), s = 0; s < o.size; ++s) {
        var u = o.indexToLoc(s),
            l = u.slice();
        l[r] = a[u[r]];
        var p = i.locToIndex(l);
        o.values[s] = i.values[p];
      }

      return o.toTensor();
    }, e.prototype.batchToSpaceND = function (e, t, r) {
      this.assertNotComplex([e], "batchToSpaceND");
      var n = t.reduce(function (e, t) {
        return e * t;
      }),
          a = getReshaped(e.shape, t, n),
          o = getPermuted(a.length, t.length),
          i = getReshapedPermuted(e.shape, t, n),
          s = getSliceBeginCoords(r, t.length),
          u = getSliceSize(i, r, t.length);
      return e.reshape(a).transpose(o).reshape(i).slice(s, u);
    }, e.prototype.spaceToBatchND = function (e, t, r) {
      this.assertNotComplex([e], "spaceToBatchND");
      var n = t.reduce(function (e, t) {
        return e * t;
      }),
          a = [[0, 0]];
      a.push.apply(a, r);

      for (var o = 1 + t.length; o < e.shape.length; ++o) {
        a.push([0, 0]);
      }

      var i = e.pad(a),
          s = getReshaped(i.shape, t, n, !1),
          u = getPermuted(s.length, t.length, !1),
          l = getReshapedPermuted(i.shape, t, n, !1);
      return i.reshape(s).transpose(u).reshape(l);
    }, e.prototype.pool = function (e, t, r) {
      this.assertNotComplex(e, "pool");

      for (var n = t.strideHeight, a = t.strideWidth, o = t.dilationHeight, i = t.dilationWidth, s = t.effectiveFilterHeight, u = t.effectiveFilterWidth, l = t.padInfo.top, p = t.padInfo.left, c = "max" === r ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, h = e.dataSync(), d = buffer(t.outShape, e.dtype), f = d.values, m = t.outShape[1] * t.outShape[2] * t.outShape[3], g = t.outShape[2] * t.outShape[3], y = t.outShape[3], v = 0; v < t.batchSize; ++v) {
        for (var x = v * m, b = v * e.strides[0], w = 0; w < t.inChannels; ++w) {
          for (var N = 0; N < t.outHeight; ++N) {
            for (var S = N * n - l, T = Math.max(0, S), E = Math.min(t.inHeight, s + S), _ = x + N * g, I = 0; I < t.outWidth; ++I) {
              for (var A = I * a - p, C = Math.max(0, A), P = Math.min(t.inWidth, u + A), k = c, O = 0, D = 0, R = T; R < E; R += o) {
                for (var M = b + R * e.strides[1], L = C; L < P; L += i) {
                  var z = h[M + L * e.strides[2] + w];
                  "max" === r && z > k ? k = z : "avg" === r && (O += z, D++);
                }

                if (isNaN(k)) break;
              }

              f[_ + I * y + w] = "avg" === r ? O / D : k;
            }
          }
        }
      }

      return d.toTensor();
    }, e.prototype.maxPool = function (e, t) {
      return this.pool(e, t, "max");
    }, e.prototype.maxPoolPositions = function (e, t) {
      for (var r = buffer(t.outShape, "int32"), n = t.strideHeight, a = t.strideWidth, o = t.dilationHeight, i = t.dilationWidth, s = t.effectiveFilterHeight, u = t.effectiveFilterWidth, l = t.padInfo.top, p = t.padInfo.left, c = e.bufferSync(), h = 0; h < t.batchSize; ++h) {
        for (var d = 0; d < t.inChannels; ++d) {
          for (var f = 0; f < t.outHeight; ++f) {
            for (var m = f * n - l, g = m; g < 0;) {
              g += o;
            }

            for (var y = Math.min(t.inHeight, s + m), v = 0; v < t.outWidth; ++v) {
              for (var x = v * a - p, b = x; b < 0;) {
                b += i;
              }

              for (var w = Math.min(t.inWidth, u + x), N = Number.NEGATIVE_INFINITY, S = -1, T = g; T < y; T += o) {
                for (var E = T - m, _ = b; _ < w; _ += i) {
                  var I = _ - x,
                      A = c.get(h, T, _, d);
                  A > N && (N = A, S = E * u + I);
                }
              }

              r.set(S, h, f, v, d);
            }
          }
        }
      }

      return r.toTensor();
    }, e.prototype.maxPoolBackprop = function (e, t, r, n) {
      this.assertNotComplex([t, r], "maxPoolBackprop");

      for (var a = this.maxPoolPositions(t, n), o = n.strideHeight, i = n.strideWidth, s = n.dilationHeight, u = n.dilationWidth, l = n.effectiveFilterHeight, p = n.effectiveFilterWidth, c = p - 1 - n.padInfo.left, h = l - 1 - n.padInfo.top, d = buffer(t.shape, "float32"), f = a.bufferSync(), m = e.bufferSync(), g = 0; g < n.batchSize; ++g) {
        for (var y = 0; y < n.inChannels; ++y) {
          for (var v = 0; v < n.inHeight; ++v) {
            for (var x = 0; x < n.inWidth; ++x) {
              for (var b = v - h, w = x - c, N = 0, S = 0; S < l; S += s) {
                var T = (b + S) / o;
                if (!(T < 0 || T >= n.outHeight || Math.floor(T) !== T)) for (var E = 0; E < p; E += u) {
                  var _ = (w + E) / i;

                  if (!(_ < 0 || _ >= n.outWidth || Math.floor(_) !== _)) {
                    var I = l * p - 1 - f.get(g, T, _, y) === S * p + E ? 1 : 0;
                    0 !== I && (N += m.get(g, T, _, y) * I);
                  }
                }
              }

              d.set(N, g, v, x, y);
            }
          }
        }
      }

      return d.toTensor();
    }, e.prototype.avgPoolBackprop = function (e, t, r) {
      this.assertNotComplex([e, t], "avgPoolBackprop");

      for (var n = r.strideHeight, a = r.strideWidth, o = r.filterHeight, i = r.filterWidth, s = r.dilationHeight, u = r.dilationWidth, l = r.effectiveFilterHeight, p = r.effectiveFilterWidth, c = p - 1 - r.padInfo.left, h = l - 1 - r.padInfo.top, d = buffer(t.shape, "float32"), f = 1 / (o * i), m = e.bufferSync(), g = 0; g < r.batchSize; ++g) {
        for (var y = 0; y < r.inChannels; ++y) {
          for (var v = 0; v < r.inHeight; ++v) {
            for (var x = 0; x < r.inWidth; ++x) {
              for (var b = v - h, w = x - c, N = 0, S = 0; S < l; S += s) {
                var T = (b + S) / n;
                if (!(T < 0 || T >= r.outHeight || Math.floor(T) !== T)) for (var E = 0; E < p; E += u) {
                  var _ = (w + E) / a;

                  _ < 0 || _ >= r.outWidth || Math.floor(_) !== _ || (N += m.get(g, T, _, y));
                }
              }

              d.set(N * f, g, v, x, y);
            }
          }
        }
      }

      return d.toTensor();
    }, e.prototype.cast = function (e, t) {
      return castTensor(e, t, this);
    }, e.prototype.reshape = function (e, t) {
      return reshapeTensor(e, t);
    }, e.prototype.avgPool = function (e, t) {
      return this.assertNotComplex(e, "avgPool"), this.pool(e, t, "avg").toFloat();
    }, e.prototype.resizeBilinear = function (e, t, r, n) {
      this.assertNotComplex(e, "resizeBilinear");

      for (var a = e.shape, o = a[0], i = a[1], s = a[2], u = a[3], l = e.dataSync(), p = new Float32Array(sizeFromShape([o, t, r, u])), c = [n && t > 1 ? i - 1 : i, n && r > 1 ? s - 1 : s], h = [n && t > 1 ? t - 1 : t, n && r > 1 ? r - 1 : r], d = 0, f = c[0] / h[0], m = c[1] / h[1], g = 0; g < o; g++) {
        for (var y = 0; y < t; y++) {
          for (var v = f * y, x = Math.floor(v), b = v - x, w = Math.min(i - 1, Math.ceil(v)), N = g * e.strides[0] + x * e.strides[1], S = g * e.strides[0] + w * e.strides[1], T = 0; T < r; T++) {
            for (var E = m * T, _ = Math.floor(E), I = E - _, A = Math.min(s - 1, Math.ceil(E)), C = N + _ * e.strides[2], P = S + _ * e.strides[2], k = N + +A * e.strides[2], O = S + A * e.strides[2], D = 0; D < u; D++) {
              var R = l[C + D],
                  M = l[P + D],
                  L = R + (l[k + D] - R) * I,
                  z = L + (M + (l[O + D] - M) * I - L) * b;
              p[d++] = z;
            }
          }
        }
      }

      return tensor(p, [o, t, r, u]);
    }, e.prototype.resizeBilinearBackprop = function (e, t, r) {
      this.assertNotComplex([e, t], "resizeBilinearBackprop");

      for (var n = t.shape, a = n[0], o = n[1], i = n[2], s = n[3], u = e.shape, l = u[1], p = u[2], c = new Float32Array(a * o * i * s), h = [r && l > 1 ? o - 1 : o, r && p > 1 ? i - 1 : i], d = [r && l > 1 ? l - 1 : l, r && p > 1 ? p - 1 : p], f = h[0] / d[0], m = h[1] / d[1], g = e.dataSync(), y = 0, v = 0; v < a; v++) {
        for (var x = v * t.strides[0], b = 0; b < l; b++) {
          for (var w = b * f, N = Math.floor(w), S = Math.min(Math.ceil(w), o - 1), T = x + N * t.strides[1], E = x + S * t.strides[1], _ = w - N, I = 1 - _, A = 0; A < p; A++) {
            for (var C = A * m, P = Math.floor(C), k = Math.min(Math.ceil(C), i - 1), O = C - P, D = 1 - O, R = T + P * t.strides[2], M = T + k * t.strides[2], L = E + P * t.strides[2], z = E + k * t.strides[2], F = I * D, V = I * O, B = _ * D, $ = _ * O, U = 0; U < s; U++) {
              var W = g[y++];
              c[R + U] += W * F, c[M + U] += W * V, c[L + U] += W * B, c[z + U] += W * $;
            }
          }
        }
      }

      return tensor4d(c, [a, i, o, s], t.dtype);
    }, e.prototype.resizeNearestNeighbor = function (e, t, r, n) {
      this.assertNotComplex(e, "resizeNearestNeighbor");

      for (var a = e.shape, o = a[0], i = a[1], s = a[2], u = a[3], l = e.dataSync(), p = new Float32Array(o * t * r * u), c = [n && t > 1 ? i - 1 : i, n && r > 1 ? s - 1 : s], h = [n && t > 1 ? t - 1 : t, n && r > 1 ? r - 1 : r], d = c[0] / h[0], f = c[1] / h[1], m = 0, g = 0; g < o; g++) {
        for (var y = g * e.strides[0], v = 0; v < t; v++) {
          for (var x = d * v, b = y + Math.min(i - 1, n ? Math.round(x) : Math.floor(x)) * e.strides[1], w = 0; w < r; w++) {
            for (var N = f * w, S = b + Math.min(s - 1, n ? Math.round(N) : Math.floor(N)) * e.strides[2], T = 0; T < u; T++) {
              var E = l[S + T];
              p[m++] = E;
            }
          }
        }
      }

      return tensor(p, [o, t, r, u], e.dtype);
    }, e.prototype.resizeNearestNeighborBackprop = function (e, t, r) {
      this.assertNotComplex([e, t], "resizeNearestNeighborBackprop");

      for (var n = t.shape, a = n[0], o = n[1], i = n[2], s = n[3], u = e.shape, l = u[1], p = u[2], c = new Float32Array(a * o * i * s), h = e.dataSync(), d = [r && l > 1 ? o - 1 : o, r && p > 1 ? i - 1 : i], f = [r && l > 1 ? l - 1 : l, r && p > 1 ? p - 1 : p], m = d[0] / f[0], g = d[1] / f[1], y = 1 / m, v = 1 / g, x = 2 * Math.ceil(y) + 2, b = 2 * Math.ceil(v) + 2, w = 0; w < a; w++) {
        for (var N = w * t.strides[0], S = 0; S < o; S++) {
          for (var T = N + S * t.strides[1], E = Math.floor(S * y), _ = Math.floor(E - x / 2), I = 0; I < i; I++) {
            for (var A = T + I * t.strides[2], C = Math.floor(I * v), P = Math.floor(C - b / 2), k = 0; k < s; k++) {
              for (var O = 0, D = 0; D < x; D++) {
                var R = D + _;

                if (!(R < 0 || R >= l)) {
                  var M = N + R * e.strides[1],
                      L = R * m;
                  if (S === Math.min(o - 1, r ? Math.round(L) : Math.floor(L))) for (var z = 0; z < b; z++) {
                    var F = z + P;

                    if (!(F < 0 || F >= p)) {
                      var V = M + F * e.strides[2],
                          B = F * g;
                      I === Math.min(i - 1, r ? Math.round(B) : Math.floor(B)) && (O += h[V + k]);
                    }
                  }
                }
              }

              c[A + k] = O;
            }
          }
        }
      }

      return tensor4d(c, t.shape, t.dtype);
    }, e.prototype.batchNormalization = function (e, t, r, n, a, o) {
      this.assertNotComplex([e, t, r, a, o], "batchNorm");

      for (var i = e.dataSync(), s = t.dataSync(), u = r.dataSync(), l = a ? a.dataSync() : new Float32Array([1]), p = o ? o.dataSync() : new Float32Array([0]), c = new Float32Array(i.length), h = p.length, d = l.length, f = u.length, m = s.length, g = 0, y = 0, v = 0, x = 0, b = 0; b < i.length; ++b) {
        c[b] = p[g++] + (i[b] - s[y++]) * l[v++] / Math.sqrt(u[x++] + n), g >= h && (g = 0), y >= m && (y = 0), v >= d && (v = 0), x >= f && (x = 0);
      }

      return tensor4d(c, e.shape);
    }, e.prototype.localResponseNormalization4D = function (e, t, r, n, a) {
      this.assertNotComplex(e, "localResponseNormalization4D");
      var o = e.shape[3],
          i = o - 1,
          s = e.dataSync(),
          u = sizeFromShape(e.shape),
          l = new Float32Array(u);

      function p(e) {
        for (var r = e % o, n = e - r + Math.max(0, r - t), a = e - r + Math.min(r + t, i), u = 0; n <= a; n++) {
          var l = s[n];
          u += l * l;
        }

        return u;
      }

      for (var c = 0; c < u; c++) {
        var h = p(c),
            d = s[c] * Math.pow(r + n * h, -a);
        l[c] = d;
      }

      return tensor4d(l, e.shape);
    }, e.prototype.LRNGrad = function (e, t, r, n, a, o, i) {
      this.assertNotComplex(e, "LRNGrad");

      for (var s = e.shape[3], u = e.dataSync(), l = t.dataSync(), p = r.dataSync(), c = new Float32Array(sizeFromShape(e.shape)), h = sizeFromShape(e.shape), d = 0; d < h; d++) {
        for (var f = d % s, m = d - f + Math.max(0, f - n), g = d - f + Math.min(s, f + n + 1), y = 0, v = m; v < g; v++) {
          y += Math.pow(l[v], 2);
        }

        for (y = o * y + a, v = m; v < g; v++) {
          var x = -2 * o * i * l[v] * p[d] / y;
          d === v && (x += Math.pow(y, -i)), x *= u[d], c[v] += x;
        }
      }

      return tensor4d(c, e.shape);
    }, e.prototype.multinomial = function (e, t, r, n) {
      this.assertNotComplex(e, "multinomial");

      for (var a = t ? e : softmax(e), o = a.shape[0], i = a.shape[1], s = zeros([o, r], "int32"), u = s.dataSync(), l = a.dataSync(), p = 0; p < o; ++p) {
        var c = p * i,
            h = new Float32Array(i - 1);
        h[0] = l[c];

        for (var d = 1; d < h.length; ++d) {
          h[d] = h[d - 1] + l[c + d];
        }

        for (var f = seedrandom_1(n.toString()), m = p * r, g = 0; g < r; ++g) {
          var y = f();
          u[m + g] = h.length;

          for (var v = 0; v < h.length; v++) {
            if (y < h[v]) {
              u[m + g] = v;
              break;
            }
          }
        }
      }

      return s;
    }, e.prototype.oneHot = function (e, t, r, n) {
      this.assertNotComplex(e, "oneHot");
      var a = new Float32Array(e.size * t);
      a.fill(n);

      for (var o = e.dataSync(), i = 0; i < e.size; ++i) {
        o[i] >= 0 && o[i] < t && (a[i * t + o[i]] = r);
      }

      return tensor2d(a, [e.size, t], "int32");
    }, e.prototype.nonMaxSuppression = function (e, t, r, n, a) {
      return this.assertNotComplex(e, "nonMaxSuppression"), nonMaxSuppressionImpl(e.dataSync(), t.dataSync(), r, n, a);
    }, e.prototype.fft = function (e) {
      return this.fftBatch(e, !1);
    }, e.prototype.ifft = function (e) {
      return this.fftBatch(e, !0);
    }, e.prototype.fftBatch = function (e, t) {
      for (var r = e.shape[0], n = e.shape[1], a = buffer(e.shape, "float32"), o = buffer(e.shape, "float32"), i = real(e).as2D(r, n), s = imag(e).as2D(r, n), u = 0; u < r; u++) {
        for (var l = i.slice([u, 0], [1, n]), p = s.slice([u, 0], [1, n]), c = complex(l, p), h = this.fftImpl(c, t).dataSync(), d = 0; d < n; d++) {
          var f = getComplexWithIndex(h, d);
          a.values[u * n + d] = f.real, o.values[u * n + d] = f.imag;
        }
      }

      return complex(a.toTensor(), o.toTensor()).as2D(r, n);
    }, e.prototype.fftImpl = function (e, t) {
      var r = e.as1D(),
          n = r.size;

      if (this.isExponentOf2(n)) {
        var a = this.fftRadix2(r, n, t).as2D(e.shape[0], e.shape[1]);
        return t && (a = complex(real(a).div(scalar(n)), imag(a).div(scalar(n)))), a;
      }

      var o = e.dataSync(),
          i = splitRealAndImagArrays(this.fourierTransformByMatmul(o, n, t));
      return complex(i.real, i.imag).as2D(e.shape[0], e.shape[1]);
    }, e.prototype.isExponentOf2 = function (e) {
      return 0 == (e & e - 1);
    }, e.prototype.fftRadix2 = function (e, t, r) {
      if (1 === t) return e;
      var n = e.dataSync(),
          a = t / 2,
          o = complexWithEvenIndex(n),
          i = complex(o.real, o.imag).as1D(),
          s = complexWithOddIndex(n),
          u = complex(s.real, s.imag).as1D();
      i = this.fftRadix2(i, a, r), u = this.fftRadix2(u, a, r);
      var l = exponents(t, r),
          p = complex(l.real, l.imag).mul(u),
          c = i.add(p),
          h = i.sub(p),
          d = real(c).concat(real(h)),
          f = imag(c).concat(imag(h));
      return complex(d, f).as1D();
    }, e.prototype.fourierTransformByMatmul = function (e, t, r) {
      for (var n = new Float32Array(2 * t), a = 0; a < t; a++) {
        for (var o = 0, i = 0, s = 0; s < t; s++) {
          var u = exponent(a * s, t, r),
              l = getComplexWithIndex(e, s);
          o += l.real * u.real - l.imag * u.imag, i += l.real * u.imag + l.imag * u.real;
        }

        r && (o /= t, i /= t), assignToTypedArray(n, o, i, a);
      }

      return n;
    }, e.prototype.depthToSpace = function (e, t, r) {
      assert("NHWC" === r, "Only NHWC dataFormat supported on CPU for depthToSpace. Got " + r), assert(t > 1, "blockSize should be > 1 for depthToSpace, but was: " + t);

      for (var n = e.shape[0], a = e.shape[1], o = e.shape[2], i = e.shape[3], s = a * t, u = o * t, l = i / (t * t), p = e.dataSync(), c = new Float32Array(n * s * u * l), h = 0, d = 0; d < n; ++d) {
        for (var f = 0; f < s; ++f) {
          for (var m = Math.floor(f / t), g = f % t, y = 0; y < u; ++y) {
            for (var v = Math.floor(y / t), x = (g * t + y % t) * l, b = 0; b < l; ++b) {
              var w = b + x + i * (v + o * (m + a * d));
              c[h++] = p[w];
            }
          }
        }
      }

      return tensor4d(c, [n, s, u, l]);
    }, e.prototype.broadcastedBinaryOp = function (e, t, r, n) {
      var a = assertAndGetBroadcastShape(e.shape, t.shape),
          o = buffer(a, r),
          i = e.dataSync(),
          s = t.dataSync(),
          u = getBroadcastDims(e.shape, a),
          l = getBroadcastDims(t.shape, a),
          p = o.values;
      if (u.length + l.length === 0) for (var c = 0; c < p.length; ++c) {
        p[c] = n(i[c % i.length], s[c % s.length]);
      } else {
        var h = e.bufferSync(),
            d = t.bufferSync(),
            f = function f(r) {
          var a = o.indexToLoc(r),
              c = a.slice(-e.rank);
          u.forEach(function (e) {
            return c[e] = 0;
          });
          var f = h.locToIndex(c),
              m = a.slice(-t.rank);
          l.forEach(function (e) {
            return m[e] = 0;
          });
          var g = d.locToIndex(m);
          p[r] = n(i[f], s[g]);
        };

        for (c = 0; c < p.length; ++c) {
          f(c);
        }
      }
      return o.toTensor();
    }, e.prototype.broadcastedBinaryComplexOp = function (e, t, r) {
      var n = assertAndGetBroadcastShape(e.shape, t.shape),
          a = buffer(n, "float32"),
          o = buffer(n, "float32"),
          i = e.dataSync(),
          s = t.dataSync(),
          u = getBroadcastDims(e.shape, n),
          l = getBroadcastDims(t.shape, n),
          p = a.values,
          c = o.values;
      if (u.length + l.length === 0) for (var h = 0; h < p.length; h++) {
        var d = h % i.length,
            f = h % s.length,
            m = r(i[2 * d], i[2 * d + 1], s[2 * f], s[2 * f + 1]);
        p[h] = m.real, c[h] = m.imag;
      } else {
        var g = this.data.get(e.dataId).complexTensors.real.bufferSync(),
            y = this.data.get(t.dataId).complexTensors.real.bufferSync(),
            v = function v(n) {
          var o = a.indexToLoc(n),
              h = o.slice(-e.rank);
          u.forEach(function (e) {
            return h[e] = 0;
          });
          var d = g.locToIndex(h),
              f = o.slice(-t.rank);
          l.forEach(function (e) {
            return f[e] = 0;
          });
          var m = y.locToIndex(f),
              v = r(i[2 * d], i[2 * d + 1], s[2 * m], s[2 * m + 1]);
          p[n] = v.real, c[n] = v.imag;
        };

        for (h = 0; h < p.length; h++) {
          v(h);
        }
      }
      return this.complex(a.toTensor(), o.toTensor());
    }, e.prototype.split = function (e, t, r) {
      return split(e, t, r);
    }, e.prototype.dispose = function () {}, e.prototype.floatPrecision = function () {
      return 32;
    }, e.prototype.cropAndResize = function (e, t, r, n, a, o) {
      for (var i = e.shape, s = i[0], u = i[1], l = i[2], p = i[3], c = t.shape[0], h = n[0], d = n[1], f = buffer([c, h, d, p], e.dtype), m = t.dataSync(), g = r.dataSync(), y = e.dataSync(), v = e.strides, x = f.strides, b = 0; b < c; b++) {
        var w = 4 * b,
            N = m[w],
            S = m[w + 1],
            T = m[w + 2],
            E = m[w + 3],
            _ = g[b];
        if (!(_ >= s)) for (var I = h > 1 ? (T - N) * (u - 1) / (h - 1) : 0, A = d > 1 ? (E - S) * (l - 1) / (d - 1) : 0, C = 0; C < h; C++) {
          var P = h > 1 ? N * (u - 1) + C * I : .5 * (N + T) * (u - 1);
          if (P < 0 || P > u - 1) for (var k = 0; k < d; k++) {
            for (var O = 0; O < p; O++) {
              var D = O + k * x[2] + C * x[1] + b * x[0];
              f.values[D] = o;
            }
          } else if ("bilinear" === a) {
            var R = Math.floor(P),
                M = Math.ceil(P),
                L = P - R;

            for (k = 0; k < d; k++) {
              if ((q = d > 1 ? S * (l - 1) + k * A : .5 * (S + E) * (l - 1)) < 0 || q > l - 1) for (O = 0; O < p; O++) {
                D = O + k * x[2] + C * x[1] + b * x[0], f.values[D] = o;
              } else {
                var z = Math.floor(q),
                    F = Math.ceil(q),
                    V = q - z;

                for (O = 0; O < p; O++) {
                  var B = y[D = O + z * v[2] + R * v[1] + _ * v[0]],
                      $ = y[D = O + F * v[2] + R * v[1] + _ * v[0]],
                      U = y[D = O + z * v[2] + M * v[1] + _ * v[0]],
                      W = B + ($ - B) * V,
                      G = U + (y[D = O + F * v[2] + M * v[1] + _ * v[0]] - U) * V;
                  D = O + k * x[2] + C * x[1] + b * x[0], f.values[D] = W + (G - W) * L;
                }
              }
            }
          } else for (k = 0; k < d; ++k) {
            var q;
            if ((q = d > 1 ? S * (l - 1) + k * A : .5 * (S + E) * (l - 1)) < 0 || q > l - 1) for (O = 0; O < p; O++) {
              D = O + k * x[2] + C * x[1] + b * x[0], f.values[D] = o;
            } else {
              var H = Math.round(q),
                  j = Math.round(P);

              for (O = 0; O < p; O++) {
                var K = O + H * v[2] + j * v[1] + _ * v[0],
                    X = O + k * x[2] + C * x[1] + b * x[0];
                f.values[X] = y[K];
              }
            }
          }
        }
      }

      return f.toTensor();
    }, e.prototype.sparseToDense = function (e, t, r, n) {
      var a = calculateShapes(t, e, r),
          o = a.sliceRank,
          i = a.numUpdates,
          s = a.sliceSize,
          u = a.strides,
          l = a.outputSize;
      return this.scatter(e, t, r, l, s, i, o, u, n, !1);
    }, e.prototype.gatherND = function (e, t) {
      var r = t.shape,
          n = r[r.length - 1],
          a = prepareAndValidate(e, t),
          o = a[0],
          i = a[1],
          s = a[2],
          u = a[3];
      if (0 === i) return tensor([], o, e.dtype);

      for (var l = new TensorBuffer([i, s], e.dtype), p = t.dataSync(), c = e.dataSync(), h = 0; h < i; h++) {
        for (var d = [], f = 0, m = 0; m < n; m++) {
          var g = p[h * n + m];
          f += g * u[m], d.push(g);
        }

        if (f < 0 || f >= e.size / s) throw new Error("Invalid indices: " + d + " does not index into " + e.shape);

        for (var y = 0; y < s; y++) {
          l.values[h * s + y] = c[f * s + y];
        }
      }

      return l.toTensor().reshape(o);
    }, e.prototype.scatterND = function (e, t, r) {
      var n = calculateShapes(t, e, r),
          a = n.sliceRank,
          o = n.numUpdates,
          i = n.sliceSize,
          s = n.strides,
          u = n.outputSize,
          l = scalar(0);
      return this.scatter(e, t, r, u, i, o, a, s, l, !0);
    }, e.prototype.scatter = function (e, t, r, n, a, o, i, s, u, l) {
      var p = [n / a, a],
          c = e.dataSync(),
          h = t.dataSync();
      if (0 === n) return tensor([], r, t.dtype);
      var d = new TensorBuffer(p, t.dtype);
      d.values.fill(u.dataSync()[0]);

      for (var f = 0; f < o; f++) {
        for (var m = [], g = 0, y = 0; y < i; y++) {
          var v = c[f * i + y];
          m.push(v), g += v * s[y];
        }

        if (g < 0 || g >= n / a) throw new Error("Invalid indices: " + m + " does not index into " + r);

        for (var x = 0; x < a; x++) {
          l ? d.values[g * a + x] += h[f * a + x] : d.values[g * a + x] = 0 === t.rank ? h[0] : h[f * a + x];
        }
      }

      return d.toTensor().reshape(r);
    }, e;
  }();

  ENV.registerBackend("cpu", function () {
    return new MathBackendCPU();
  }, 1, setTensorTracker);
  var delayCallback = "undefined" != typeof requestAnimationFrame ? requestAnimationFrame : setImmediate;

  function nextFrame() {
    return new Promise(function (e) {
      return delayCallback(function () {
        return e();
      });
    });
  }

  var DTYPE_VALUE_SIZE_MAP = {
    float32: 4,
    int32: 4,
    uint16: 2,
    uint8: 1,
    bool: 1
  };

  function encodeWeights(e) {
    return __awaiter(this, void 0, void 0, function () {
      var t, r, n, a;
      return __generator(this, function (o) {
        switch (o.label) {
          case 0:
            for (n in t = [], r = [], e) {
              if ("float32" !== (a = e[n]).dtype && "int32" !== a.dtype && "bool" !== a.dtype) throw new Error("Unsupported dtype in weight '" + n + "': " + a.dtype);
              t.push({
                name: n,
                shape: a.shape,
                dtype: a.dtype
              }), r.push(a.data());
            }

            return [4, Promise.all(r)];

          case 1:
            return [2, {
              data: concatenateTypedArrays(o.sent()),
              specs: t
            }];
        }
      });
    });
  }

  function decodeWeights(e, t) {
    for (var r = {}, n = 0, a = function a(t) {
      var a = t.name,
          o = t.dtype,
          i = t.shape,
          s = sizeFromShape(i),
          u = void 0;

      if (("quantization" in t)) {
        var l = t.quantization;
        if ("uint8" !== l.dtype && "uint16" !== l.dtype) throw new Error("Weight " + t.name + " has unknown quantization dtype " + l.dtype + ". Supported quantization dtypes are: 'uint8' and 'uint16'.");
        var p = DTYPE_VALUE_SIZE_MAP[l.dtype],
            c = e.slice(n, n + s * p),
            h = "uint8" === l.dtype ? new Uint8Array(c) : new Uint16Array(c);
        if ("float32" === o) u = Float32Array.from(h, function (e) {
          return e * l.scale + l.min;
        });else {
          if ("int32" !== o) throw new Error("Unsupported dtype in weight '" + a + "': " + o);
          u = Int32Array.from(h, function (e) {
            return Math.round(e * l.scale + l.min);
          });
        }
        n += s * p;
      } else {
        var d = DTYPE_VALUE_SIZE_MAP[o];
        if (c = e.slice(n, n + s * d), "float32" === o) u = new Float32Array(c);else if ("int32" === o) u = new Int32Array(c);else {
          if ("bool" !== o) throw new Error("Unsupported dtype in weight '" + a + "': " + o);
          u = new Uint8Array(c);
        }
        n += s * d;
      }

      var f = void 0;
      if ("float32" === o) f = tensor(u, i, "float32");else if ("int32" === o) f = tensor(u, i, "int32");else {
        if ("bool" !== o) throw new Error("Unsupported dtype in weight '" + a + "': " + o);
        f = tensor(u, i, "bool");
      }
      r[a] = f;
    }, o = 0, i = t; o < i.length; o++) {
      a(i[o]);
    }

    return r;
  }

  function concatenateTypedArrays(e) {
    if (null === e) throw new Error("Invalid input value: " + JSON.stringify(e));
    var t = 0,
        r = [];
    e.forEach(function (e) {
      if (t += e.byteLength, r.push(e.byteLength === e.buffer.byteLength ? e : new e.constructor(e)), !(e instanceof Float32Array || e instanceof Int32Array || e instanceof Uint8Array)) throw new Error("Unsupported TypedArray subtype: " + e.constructor.name);
    });
    var n = new Uint8Array(t),
        a = 0;
    return r.forEach(function (e) {
      n.set(new Uint8Array(e.buffer), a), a += e.byteLength;
    }), n.buffer;
  }

  var useNodeBuffer = "undefined" != typeof Buffer && ("undefined" == typeof Blob || "undefined" == typeof atob || "undefined" == typeof btoa);

  function stringByteLength(e) {
    return useNodeBuffer ? Buffer.byteLength(e) : new Blob([e]).size;
  }

  function arrayBufferToBase64String(e) {
    return useNodeBuffer ? Buffer.from(e).toString("base64") : btoa(String.fromCharCode.apply(null, new Uint8Array(e)));
  }

  function base64StringToArrayBuffer(e) {
    if (useNodeBuffer) {
      var t = Buffer.from(e, "base64");
      return t.buffer.slice(t.byteOffset, t.byteOffset + t.byteLength);
    }

    for (var r = atob(e), n = new Uint8Array(r.length), a = 0; a < r.length; ++a) {
      n.set([r.charCodeAt(a)], a);
    }

    return n.buffer;
  }

  function concatenateArrayBuffers(e) {
    var t = 0;
    e.forEach(function (e) {
      t += e.byteLength;
    });
    var r = new Uint8Array(t),
        n = 0;
    return e.forEach(function (e) {
      r.set(new Uint8Array(e), n), n += e.byteLength;
    }), r.buffer;
  }

  function basename(e) {
    for (e = e.trim(); e.endsWith("/");) {
      e = e.slice(0, e.length - 1);
    }

    var t = e.split("/");
    return t[t.length - 1];
  }

  function getModelArtifactsInfoForJSON(e) {
    if (e.modelTopology instanceof ArrayBuffer) throw new Error("Expected JSON model topology, received ArrayBuffer.");
    return {
      dateSaved: new Date(),
      modelTopologyType: "JSON",
      modelTopologyBytes: null == e.modelTopology ? 0 : stringByteLength(JSON.stringify(e.modelTopology)),
      weightSpecsBytes: null == e.weightSpecs ? 0 : stringByteLength(JSON.stringify(e.weightSpecs)),
      weightDataBytes: null == e.weightData ? 0 : e.weightData.byteLength
    };
  }

  var IORouterRegistry = function () {
    function e() {
      this.saveRouters = [], this.loadRouters = [];
    }

    return e.getInstance = function () {
      return null == e.instance && (e.instance = new e()), e.instance;
    }, e.registerSaveRouter = function (t) {
      e.getInstance().saveRouters.push(t);
    }, e.registerLoadRouter = function (t) {
      e.getInstance().loadRouters.push(t);
    }, e.getSaveHandlers = function (t) {
      return e.getHandlers(t, "save");
    }, e.getLoadHandlers = function (t, r) {
      return e.getHandlers(t, "load", r);
    }, e.getHandlers = function (e, t, r) {
      var n = [];
      return ("load" === t ? this.getInstance().loadRouters : this.getInstance().saveRouters).forEach(function (t) {
        var a = t(e, r);
        null !== a && n.push(a);
      }), n;
    }, e;
  }(),
      registerSaveRouter = function registerSaveRouter(e) {
    return IORouterRegistry.registerSaveRouter(e);
  },
      registerLoadRouter = function registerLoadRouter(e) {
    return IORouterRegistry.registerLoadRouter(e);
  },
      getSaveHandlers = function getSaveHandlers(e) {
    return IORouterRegistry.getSaveHandlers(e);
  },
      getLoadHandlers = function getLoadHandlers(e, t) {
    return IORouterRegistry.getLoadHandlers(e);
  },
      URL_SCHEME_SUFFIX = "://",
      ModelStoreManagerRegistry = function () {
    function e() {
      this.managers = {};
    }

    return e.getInstance = function () {
      return null == e.instance && (e.instance = new e()), e.instance;
    }, e.registerManager = function (t, r) {
      assert(null != t, "scheme must not be undefined or null."), t.endsWith(URL_SCHEME_SUFFIX) && (t = t.slice(0, t.indexOf(URL_SCHEME_SUFFIX))), assert(t.length > 0, "scheme must not be an empty string.");
      var n = e.getInstance();
      assert(null == n.managers[t], "A model store manager is already registered for scheme '" + t + "'."), n.managers[t] = r;
    }, e.getManager = function (e) {
      var t = this.getInstance().managers[e];
      if (null == t) throw new Error("Cannot find model manager for scheme '" + e + "'");
      return t;
    }, e.getSchemes = function () {
      return Object.keys(this.getInstance().managers);
    }, e;
  }();

  function parseURL(e) {
    if (-1 === e.indexOf(URL_SCHEME_SUFFIX)) throw new Error("The url string provided does not contain a scheme. Supported schemes are: " + ModelStoreManagerRegistry.getSchemes().join(","));
    return {
      scheme: e.split(URL_SCHEME_SUFFIX)[0],
      path: e.split(URL_SCHEME_SUFFIX)[1]
    };
  }

  function cloneModelInternal(e, t, r) {
    return void 0 === r && (r = !1), __awaiter(this, void 0, void 0, function () {
      var n, a, o, i, s, u, l, p, c;
      return __generator(this, function (h) {
        switch (h.label) {
          case 0:
            return assert(e !== t, "Old path and new path are the same: '" + e + "'"), assert((n = IORouterRegistry.getLoadHandlers(e)).length > 0, "Copying failed because no load handler is found for source URL " + e + "."), assert(n.length < 2, "Copying failed because more than one (" + n.length + ") load handlers for source URL " + e + "."), a = n[0], assert((o = IORouterRegistry.getSaveHandlers(t)).length > 0, "Copying failed because no save handler is found for destination URL " + t + "."), assert(o.length < 2, "Copying failed because more than one (" + n.length + ") save handlers for destination URL " + t + "."), i = o[0], s = parseURL(e).scheme, u = parseURL(e).path, l = s === parseURL(e).scheme, [4, a.load()];

          case 1:
            return p = h.sent(), r && l ? [4, ModelStoreManagerRegistry.getManager(s).removeModel(u)] : [3, 3];

          case 2:
            h.sent(), h.label = 3;

          case 3:
            return [4, i.save(p)];

          case 4:
            return c = h.sent(), !r || l ? [3, 6] : [4, ModelStoreManagerRegistry.getManager(s).removeModel(u)];

          case 5:
            h.sent(), h.label = 6;

          case 6:
            return [2, c.modelArtifactsInfo];
        }
      });
    });
  }

  function listModels() {
    return __awaiter(this, void 0, void 0, function () {
      var e, t, r, n, a, o, i;
      return __generator(this, function (s) {
        switch (s.label) {
          case 0:
            e = ModelStoreManagerRegistry.getSchemes(), t = {}, r = 0, n = e, s.label = 1;

          case 1:
            return r < n.length ? (a = n[r], [4, ModelStoreManagerRegistry.getManager(a).listModels()]) : [3, 4];

          case 2:
            for (i in o = s.sent()) {
              t[a + URL_SCHEME_SUFFIX + i] = o[i];
            }

            s.label = 3;

          case 3:
            return r++, [3, 1];

          case 4:
            return [2, t];
        }
      });
    });
  }

  function removeModel(e) {
    return __awaiter(this, void 0, void 0, function () {
      var t;
      return __generator(this, function (r) {
        switch (r.label) {
          case 0:
            return t = parseURL(e), [4, ModelStoreManagerRegistry.getManager(t.scheme).removeModel(t.path)];

          case 1:
            return [2, r.sent()];
        }
      });
    });
  }

  function copyModel(e, t) {
    return __awaiter(this, void 0, void 0, function () {
      return __generator(this, function (r) {
        switch (r.label) {
          case 0:
            return [4, cloneModelInternal(e, t, !1)];

          case 1:
            return [2, r.sent()];
        }
      });
    });
  }

  function moveModel(e, t) {
    return __awaiter(this, void 0, void 0, function () {
      return __generator(this, function (r) {
        switch (r.label) {
          case 0:
            return [4, cloneModelInternal(e, t, !0)];

          case 1:
            return [2, r.sent()];
        }
      });
    });
  }

  var DATABASE_NAME = "tensorflowjs",
      DATABASE_VERSION = 1,
      MODEL_STORE_NAME = "models_store",
      INFO_STORE_NAME = "model_info_store";

  function getIndexedDBFactory() {
    if (!ENV.get("IS_BROWSER")) throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");
    var e = window,
        t = e.indexedDB || e.mozIndexedDB || e.webkitIndexedDB || e.msIndexedDB || e.shimIndexedDB;
    if (null == t) throw new Error("The current browser does not appear to support IndexedDB.");
    return t;
  }

  function setUpDatabase(e) {
    var t = e.result;
    t.createObjectStore(MODEL_STORE_NAME, {
      keyPath: "modelPath"
    }), t.createObjectStore(INFO_STORE_NAME, {
      keyPath: "modelPath"
    });
  }

  var BrowserIndexedDB = function () {
    function e(e) {
      if (this.indexedDB = getIndexedDBFactory(), null == e || !e) throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");
      this.modelPath = e;
    }

    return e.prototype.save = function (e) {
      return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (t) {
          if (e.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
          return [2, this.databaseAction(this.modelPath, e)];
        });
      });
    }, e.prototype.load = function () {
      return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (e) {
          return [2, this.databaseAction(this.modelPath)];
        });
      });
    }, e.prototype.databaseAction = function (e, t) {
      var r = this;
      return new Promise(function (e, n) {
        var a = r.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
        a.onupgradeneeded = function () {
          return setUpDatabase(a);
        }, a.onsuccess = function () {
          var o = a.result;

          if (null == t) {
            var i = o.transaction(MODEL_STORE_NAME, "readonly"),
                s = i.objectStore(MODEL_STORE_NAME).get(r.modelPath);
            s.onsuccess = function () {
              if (null == s.result) return o.close(), n(new Error("Cannot find model with path '" + r.modelPath + "' in IndexedDB."));
              e(s.result.modelArtifacts);
            }, s.onerror = function (e) {
              return o.close(), n(s.error);
            }, i.oncomplete = function () {
              return o.close();
            };
          } else {
            var u,
                l = getModelArtifactsInfoForJSON(t),
                p = o.transaction(INFO_STORE_NAME, "readwrite"),
                c = p.objectStore(INFO_STORE_NAME),
                h = c.put({
              modelPath: r.modelPath,
              modelArtifactsInfo: l
            });
            h.onsuccess = function () {
              var a = (u = o.transaction(MODEL_STORE_NAME, "readwrite")).objectStore(MODEL_STORE_NAME).put({
                modelPath: r.modelPath,
                modelArtifacts: t,
                modelArtifactsInfo: l
              });
              a.onsuccess = function () {
                return e({
                  modelArtifactsInfo: l
                });
              }, a.onerror = function (e) {
                var t = (c = p.objectStore(INFO_STORE_NAME)).delete(r.modelPath);
                t.onsuccess = function () {
                  return o.close(), n(a.error);
                }, t.onerror = function (e) {
                  return o.close(), n(a.error);
                };
              };
            }, h.onerror = function (e) {
              return o.close(), n(h.error);
            }, p.oncomplete = function () {
              null == u ? o.close() : u.oncomplete = function () {
                return o.close();
              };
            };
          }
        }, a.onerror = function (e) {
          return n(a.error);
        };
      });
    }, e.URL_SCHEME = "indexeddb://", e;
  }(),
      indexedDBRouter = function indexedDBRouter(e) {
    return ENV.get("IS_BROWSER") && !Array.isArray(e) && e.startsWith(BrowserIndexedDB.URL_SCHEME) ? browserIndexedDB(e.slice(BrowserIndexedDB.URL_SCHEME.length)) : null;
  };

  function browserIndexedDB(e) {
    return new BrowserIndexedDB(e);
  }

  function maybeStripScheme(e) {
    return e.startsWith(BrowserIndexedDB.URL_SCHEME) ? e.slice(BrowserIndexedDB.URL_SCHEME.length) : e;
  }

  IORouterRegistry.registerSaveRouter(indexedDBRouter), IORouterRegistry.registerLoadRouter(indexedDBRouter);

  var BrowserIndexedDBManager = function () {
    function e() {
      this.indexedDB = getIndexedDBFactory();
    }

    return e.prototype.listModels = function () {
      return __awaiter(this, void 0, void 0, function () {
        var e = this;
        return __generator(this, function (t) {
          return [2, new Promise(function (t, r) {
            var n = e.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
            n.onupgradeneeded = function () {
              return setUpDatabase(n);
            }, n.onsuccess = function () {
              var e = n.result,
                  a = e.transaction(INFO_STORE_NAME, "readonly"),
                  o = a.objectStore(INFO_STORE_NAME).getAll();
              o.onsuccess = function () {
                for (var e = {}, r = 0, n = o.result; r < n.length; r++) {
                  var a = n[r];
                  e[a.modelPath] = a.modelArtifactsInfo;
                }

                t(e);
              }, o.onerror = function (t) {
                return e.close(), r(o.error);
              }, a.oncomplete = function () {
                return e.close();
              };
            }, n.onerror = function (e) {
              return r(n.error);
            };
          })];
        });
      });
    }, e.prototype.removeModel = function (e) {
      return __awaiter(this, void 0, void 0, function () {
        var t = this;
        return __generator(this, function (r) {
          return e = maybeStripScheme(e), [2, new Promise(function (r, n) {
            var a = t.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
            a.onupgradeneeded = function () {
              return setUpDatabase(a);
            }, a.onsuccess = function () {
              var t,
                  o = a.result,
                  i = o.transaction(INFO_STORE_NAME, "readwrite"),
                  s = i.objectStore(INFO_STORE_NAME),
                  u = s.get(e);
              u.onsuccess = function () {
                if (null == u.result) return o.close(), n(new Error("Cannot find model with path '" + e + "' in IndexedDB."));

                var a = s.delete(e),
                    i = function i() {
                  var a = (t = o.transaction(MODEL_STORE_NAME, "readwrite")).objectStore(MODEL_STORE_NAME).delete(e);
                  a.onsuccess = function () {
                    return r(u.result.modelArtifactsInfo);
                  }, a.onerror = function (e) {
                    return n(u.error);
                  };
                };

                a.onsuccess = i, a.onerror = function (e) {
                  return i(), o.close(), n(u.error);
                };
              }, u.onerror = function (e) {
                return o.close(), n(u.error);
              }, i.oncomplete = function () {
                null == t ? o.close() : t.oncomplete = function () {
                  return o.close();
                };
              };
            }, a.onerror = function (e) {
              return n(a.error);
            };
          })];
        });
      });
    }, e;
  }();

  if (ENV.get("IS_BROWSER")) try {
    ModelStoreManagerRegistry.registerManager(BrowserIndexedDB.URL_SCHEME, new BrowserIndexedDBManager());
  } catch (e) {}
  var PATH_SEPARATOR = "/",
      PATH_PREFIX = "tensorflowjs_models",
      INFO_SUFFIX = "info",
      MODEL_TOPOLOGY_SUFFIX = "model_topology",
      WEIGHT_SPECS_SUFFIX = "weight_specs",
      WEIGHT_DATA_SUFFIX = "weight_data";

  function getModelKeys(e) {
    return {
      info: [PATH_PREFIX, e, INFO_SUFFIX].join(PATH_SEPARATOR),
      topology: [PATH_PREFIX, e, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),
      weightSpecs: [PATH_PREFIX, e, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),
      weightData: [PATH_PREFIX, e, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR)
    };
  }

  function getModelPathFromKey(e) {
    var t = e.split(PATH_SEPARATOR);
    if (t.length < 3) throw new Error("Invalid key format: " + e);
    return t.slice(1, t.length - 1).join(PATH_SEPARATOR);
  }

  function maybeStripScheme$1(e) {
    return e.startsWith(BrowserLocalStorage.URL_SCHEME) ? e.slice(BrowserLocalStorage.URL_SCHEME.length) : e;
  }

  var BrowserLocalStorage = function () {
    function e(e) {
      if (!ENV.get("IS_BROWSER") || void 0 === window.localStorage) throw new Error("The current environment does not support local storage.");
      if (this.LS = window.localStorage, null == e || !e) throw new Error("For local storage, modelPath must not be null, undefined or empty.");
      this.modelPath = e, this.keys = getModelKeys(this.modelPath);
    }

    return e.prototype.save = function (e) {
      return __awaiter(this, void 0, void 0, function () {
        var t, r, n, a;
        return __generator(this, function (o) {
          if (e.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
          t = JSON.stringify(e.modelTopology), r = JSON.stringify(e.weightSpecs), n = getModelArtifactsInfoForJSON(e);

          try {
            return this.LS.setItem(this.keys.info, JSON.stringify(n)), this.LS.setItem(this.keys.topology, t), this.LS.setItem(this.keys.weightSpecs, r), this.LS.setItem(this.keys.weightData, arrayBufferToBase64String(e.weightData)), [2, {
              modelArtifactsInfo: n
            }];
          } catch (e) {
            for (a in this.keys) {
              this.LS.removeItem(this.keys[a]);
            }

            throw new Error("Failed to save model '" + this.modelPath + "' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=" + n.modelTopologyBytes + ", weightSpecsBytes=" + n.weightSpecsBytes + ", weightDataBytes=" + n.weightDataBytes + ".");
          }

          return [2];
        });
      });
    }, e.prototype.load = function () {
      return __awaiter(this, void 0, void 0, function () {
        var e, t, r, n, a;
        return __generator(this, function (o) {
          if (null == (e = JSON.parse(this.LS.getItem(this.keys.info)))) throw new Error("In local storage, there is no model with name '" + this.modelPath + "'");
          if ("JSON" !== e.modelTopologyType) throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");
          if (t = {}, null == (r = JSON.parse(this.LS.getItem(this.keys.topology)))) throw new Error("In local storage, the topology of model '" + this.modelPath + "' is missing.");
          if (t.modelTopology = r, null == (n = JSON.parse(this.LS.getItem(this.keys.weightSpecs)))) throw new Error("In local storage, the weight specs of model '" + this.modelPath + "' are missing.");
          if (t.weightSpecs = n, null == (a = this.LS.getItem(this.keys.weightData))) throw new Error("In local storage, the binary weight values of model '" + this.modelPath + "' are missing.");
          return t.weightData = base64StringToArrayBuffer(a), [2, t];
        });
      });
    }, e.URL_SCHEME = "localstorage://", e;
  }(),
      localStorageRouter = function localStorageRouter(e) {
    return ENV.get("IS_BROWSER") && !Array.isArray(e) && e.startsWith(BrowserLocalStorage.URL_SCHEME) ? browserLocalStorage(e.slice(BrowserLocalStorage.URL_SCHEME.length)) : null;
  };

  function browserLocalStorage(e) {
    return new BrowserLocalStorage(e);
  }

  IORouterRegistry.registerSaveRouter(localStorageRouter), IORouterRegistry.registerLoadRouter(localStorageRouter);

  var BrowserLocalStorageManager = function () {
    function e() {
      assert(ENV.get("IS_BROWSER"), "Current environment is not a web browser"), assert(void 0 !== window.localStorage, "Current browser does not appear to support localStorage"), this.LS = window.localStorage;
    }

    return e.prototype.listModels = function () {
      return __awaiter(this, void 0, void 0, function () {
        var e, t, r, n, a, o;
        return __generator(this, function (i) {
          for (e = {}, t = PATH_PREFIX + PATH_SEPARATOR, r = PATH_SEPARATOR + INFO_SUFFIX, n = 0; n < this.LS.length; ++n) {
            (a = this.LS.key(n)).startsWith(t) && a.endsWith(r) && (o = getModelPathFromKey(a), e[o] = JSON.parse(this.LS.getItem(a)));
          }

          return [2, e];
        });
      });
    }, e.prototype.removeModel = function (e) {
      return __awaiter(this, void 0, void 0, function () {
        var t, r;
        return __generator(this, function (n) {
          if (e = maybeStripScheme$1(e), t = getModelKeys(e), null == this.LS.getItem(t.info)) throw new Error("Cannot find model at path '" + e + "'");
          return r = JSON.parse(this.LS.getItem(t.info)), this.LS.removeItem(t.info), this.LS.removeItem(t.topology), this.LS.removeItem(t.weightSpecs), this.LS.removeItem(t.weightData), [2, r];
        });
      });
    }, e;
  }();

  if (ENV.get("IS_BROWSER")) try {
    ModelStoreManagerRegistry.registerManager(BrowserLocalStorage.URL_SCHEME, new BrowserLocalStorageManager());
  } catch (e) {}

  var DEFAULT_FILE_NAME_PREFIX = "model",
      DEFAULT_JSON_EXTENSION_NAME = ".json",
      DEFAULT_WEIGHT_DATA_EXTENSION_NAME = ".weights.bin",
      BrowserDownloads = function () {
    function e(t) {
      if (!ENV.get("IS_BROWSER")) throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");
      t.startsWith(e.URL_SCHEME) && (t = t.slice(e.URL_SCHEME.length)), null != t && 0 !== t.length || (t = DEFAULT_FILE_NAME_PREFIX), this.modelTopologyFileName = t + DEFAULT_JSON_EXTENSION_NAME, this.weightDataFileName = t + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;
    }

    return e.prototype.save = function (e) {
      return __awaiter(this, void 0, void 0, function () {
        var t, r, n, a, o, i;
        return __generator(this, function (s) {
          if (t = window.URL.createObjectURL(new Blob([e.weightData], {
            type: "application/octet-stream"
          })), e.modelTopology instanceof ArrayBuffer) throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");
          return r = [{
            paths: ["./" + this.weightDataFileName],
            weights: e.weightSpecs
          }], n = {
            modelTopology: e.modelTopology,
            weightsManifest: r
          }, a = window.URL.createObjectURL(new Blob([JSON.stringify(n)], {
            type: "application/json"
          })), (o = null == this.jsonAnchor ? document.createElement("a") : this.jsonAnchor).download = this.modelTopologyFileName, o.href = a, o.click(), null != e.weightData && ((i = null == this.weightDataAnchor ? document.createElement("a") : this.weightDataAnchor).download = this.weightDataFileName, i.href = t, i.click()), [2, {
            modelArtifactsInfo: getModelArtifactsInfoForJSON(e)
          }];
        });
      });
    }, e.URL_SCHEME = "downloads://", e;
  }(),
      BrowserFiles = function () {
    function e(e) {
      if (null == e || e.length < 1) throw new Error("When calling browserFiles, at least 1 file is required, but received " + e);
      this.files = e;
    }

    return e.prototype.load = function () {
      return __awaiter(this, void 0, void 0, function () {
        var e,
            t,
            r = this;
        return __generator(this, function (n) {
          return e = this.files[0], t = this.files.slice(1), [2, new Promise(function (n, a) {
            var o = new FileReader();
            o.onload = function (o) {
              var i = JSON.parse(o.target.result),
                  s = i.modelTopology;

              if (null != s) {
                0 === t.length && n({
                  modelTopology: s
                });
                var u = i.weightsManifest;

                if (null != u) {
                  var l;

                  try {
                    l = r.checkManifestAndWeightFiles(u, t);
                  } catch (e) {
                    return void a(e);
                  }

                  var p = [],
                      c = [],
                      h = [];
                  u.forEach(function (e) {
                    e.paths.forEach(function (e) {
                      c.push(e), h.push(null);
                    }), p.push.apply(p, e.weights);
                  }), u.forEach(function (e) {
                    e.paths.forEach(function (e) {
                      var t = new FileReader();
                      t.onload = function (t) {
                        var r = t.target.result,
                            a = c.indexOf(e);
                        h[a] = r, -1 === h.indexOf(null) && n({
                          modelTopology: s,
                          weightSpecs: p,
                          weightData: concatenateArrayBuffers(h)
                        });
                      }, t.onerror = function (t) {
                        return a("Failed to weights data from file of path '" + e + "'.");
                      }, t.readAsArrayBuffer(l[e]);
                    });
                  });
                } else a(new Error("weightManifest field is missing from file " + e.name));
              } else a(new Error("modelTopology field is missing from file " + e.name));
            }, o.onerror = function (t) {
              return a("Failed to read model topology and weights manifest JSON from file '" + e.name + "'. BrowserFiles supports loading Keras-style tf.Model artifacts only.");
            }, o.readAsText(e);
          })];
        });
      });
    }, e.prototype.checkManifestAndWeightFiles = function (e, t) {
      for (var r = [], n = t.map(function (e) {
        return basename(e.name);
      }), a = {}, o = 0, i = e; o < i.length; o++) {
        i[o].paths.forEach(function (e) {
          var o = basename(e);
          if (-1 !== r.indexOf(o)) throw new Error("Duplicate file basename found in weights manifest: '" + o + "'");
          if (r.push(o), -1 === n.indexOf(o)) throw new Error("Weight file with basename '" + o + "' is not provided.");
          a[e] = t[n.indexOf(o)];
        });
      }

      if (r.length !== t.length) throw new Error("Mismatch in the number of files in weights manifest (" + r.length + ") and the number of weight files provided (" + t.length + ").");
      return a;
    }, e;
  }(),
      browserDownloadsRouter = function browserDownloadsRouter(e) {
    return ENV.get("IS_BROWSER") && !Array.isArray(e) && e.startsWith(BrowserDownloads.URL_SCHEME) ? browserDownloads(e.slice(BrowserDownloads.URL_SCHEME.length)) : null;
  };

  function browserDownloads(e) {
    return void 0 === e && (e = "model"), new BrowserDownloads(e);
  }

  function browserFiles(e) {
    return new BrowserFiles(e);
  }

  function loadWeightsAsArrayBuffer(e, t, r, n) {
    return __awaiter(this, void 0, void 0, function () {
      var a, o, i;
      return __generator(this, function (s) {
        switch (s.label) {
          case 0:
            return null == r && (r = fetch), a = e.map(function (e) {
              return r(e, t);
            }), null != n && monitorPromisesProgress(a, n, 0, .5), [4, Promise.all(a)];

          case 1:
            return o = s.sent(), i = o.map(function (e) {
              return e.arrayBuffer();
            }), null != n && monitorPromisesProgress(i, n, .5, 1), [4, Promise.all(i)];

          case 2:
            return [2, s.sent()];
        }
      });
    });
  }

  function loadWeights(e, t, r, n) {
    return void 0 === t && (t = ""), __awaiter(this, void 0, void 0, function () {
      return __generator(this, function (a) {
        return [2, weightsLoaderFactory(function (e) {
          return loadWeightsAsArrayBuffer(e, n);
        })(e, t, r)];
      });
    });
  }

  function weightsLoaderFactory(e) {
    var t = this;
    return function (r, n, a) {
      return void 0 === n && (n = ""), __awaiter(t, void 0, void 0, function () {
        var t, o, i, s, u, l, p, c, h, d;
        return __generator(this, function (f) {
          switch (f.label) {
            case 0:
              if (t = r.map(function () {
                return !1;
              }), o = {}, i = null != a ? a.map(function () {
                return !1;
              }) : [], s = [], r.forEach(function (e, r) {
                var n = 0;
                e.weights.forEach(function (e) {
                  var u = "quantization" in e ? e.quantization.dtype : e.dtype,
                      l = DTYPE_VALUE_SIZE_MAP[u] * sizeFromShape(e.shape),
                      p = function p() {
                    t[r] = !0, null == o[r] && (o[r] = []), o[r].push({
                      manifestEntry: e,
                      groupOffset: n,
                      sizeBytes: l
                    });
                  };

                  null != a ? a.forEach(function (t, r) {
                    t === e.name && (p(), i[r] = !0);
                  }) : p(), s.push(e.name), n += l;
                });
              }), !i.every(function (e) {
                return e;
              })) throw u = a.filter(function (e, t) {
                return !i[t];
              }), new Error("Could not find weights in manifest with names: " + u.join(", ") + ". \nManifest JSON has weights with names: " + s.join(", ") + ".");
              return l = t.reduce(function (e, t, r) {
                return t && e.push(r), e;
              }, []), p = [], l.forEach(function (e) {
                r[e].paths.forEach(function (e) {
                  var t = n + (n.endsWith("/") ? "" : "/") + e;
                  p.push(t);
                });
              }), [4, e(p)];

            case 1:
              return c = f.sent(), h = {}, d = 0, l.forEach(function (e) {
                for (var t = r[e].paths.length, n = 0, a = 0; a < t; a++) {
                  n += c[d + a].byteLength;
                }

                for (var i = new ArrayBuffer(n), s = new Uint8Array(i), u = 0, l = 0; l < t; l++) {
                  var p = new Uint8Array(c[d + l]);
                  s.set(p, u), u += p.byteLength;
                }

                o[e].forEach(function (e) {
                  var t = decodeWeights(i.slice(e.groupOffset, e.groupOffset + e.sizeBytes), [e.manifestEntry]);

                  for (var r in t) {
                    h[r] = t[r];
                  }
                }), d += t;
              }), [2, h];
          }
        });
      });
    };
  }

  IORouterRegistry.registerSaveRouter(browserDownloadsRouter);

  var OCTET_STREAM_MIME_TYPE = "application/octet-stream",
      JSON_TYPE = "application/json",
      BrowserHTTPRequest = function () {
    function e(e, t, r, n, a) {
      if (this.weightPathPrefix = r, this.onProgress = a, this.DEFAULT_METHOD = "POST", null == n) {
        if ("undefined" == typeof fetch) throw new Error("browserHTTPRequest is not supported outside the web browser without a fetch polyfill.");
        n = fetch.bind("undefined" == typeof window ? null : window);
      } else assert("function" == typeof n, "Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)");

      if (this.fetchFunc = function (e, t) {
        return n(e, t).catch(function (t) {
          throw new Error("Request for " + e + " failed due to error: " + t);
        });
      }, assert(null != e && e.length > 0, "URL path for browserHTTPRequest must not be null, undefined or empty."), Array.isArray(e) && assert(2 === e.length, "URL paths for browserHTTPRequest must have a length of 2, (actual length is " + e.length + ")."), this.path = e, null != t && null != t.body) throw new Error("requestInit is expected to have no pre-existing body, but has one.");
      this.requestInit = t || {};
    }

    return e.prototype.save = function (e) {
      return __awaiter(this, void 0, void 0, function () {
        var t, r, n, a;
        return __generator(this, function (o) {
          switch (o.label) {
            case 0:
              if (e.modelTopology instanceof ArrayBuffer) throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");
              return (t = Object.assign({
                method: this.DEFAULT_METHOD
              }, this.requestInit)).body = new FormData(), r = [{
                paths: ["./model.weights.bin"],
                weights: e.weightSpecs
              }], n = {
                modelTopology: e.modelTopology,
                weightsManifest: r
              }, t.body.append("model.json", new Blob([JSON.stringify(n)], {
                type: JSON_TYPE
              }), "model.json"), null != e.weightData && t.body.append("model.weights.bin", new Blob([e.weightData], {
                type: OCTET_STREAM_MIME_TYPE
              }), "model.weights.bin"), [4, this.getFetchFunc()(this.path, t)];

            case 1:
              if ((a = o.sent()).ok) return [2, {
                modelArtifactsInfo: getModelArtifactsInfoForJSON(e),
                responses: [a]
              }];
              throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status " + a.status + ".");
          }
        });
      });
    }, e.prototype.load = function () {
      return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (e) {
          return [2, Array.isArray(this.path) ? this.loadBinaryModel() : this.loadJSONModel()];
        });
      });
    }, e.prototype.loadBinaryTopology = function () {
      return __awaiter(this, void 0, void 0, function () {
        var e;
        return __generator(this, function (t) {
          switch (t.label) {
            case 0:
              return [4, this.getFetchFunc()(this.path[0], this.requestInit)];

            case 1:
              if (!(e = t.sent()).ok) throw new Error("Request to " + this.path[0] + " failed with error: " + e.statusText);
              return [4, e.arrayBuffer()];

            case 2:
              return [2, t.sent()];
          }
        });
      });
    }, e.prototype.loadBinaryModel = function () {
      return __awaiter(this, void 0, void 0, function () {
        var e, t, r, n, a, o, i, s;
        return __generator(this, function (u) {
          switch (u.label) {
            case 0:
              return e = this.loadBinaryTopology(), [4, this.getFetchFunc()(this.path[1], this.requestInit)];

            case 1:
              if (!(t = u.sent()).ok) throw new Error("Request to " + this.path[1] + " failed with error: " + t.statusText);
              return [4, Promise.all([e, t])];

            case 2:
              return r = u.sent(), n = r[0], [4, r[1].json()];

            case 3:
              return null == (a = u.sent()) ? [3, 5] : [4, this.loadWeights(a)];

            case 4:
              s = u.sent(), o = s[0], i = s[1], u.label = 5;

            case 5:
              return [2, {
                modelTopology: n,
                weightSpecs: o,
                weightData: i
              }];
          }
        });
      });
    }, e.prototype.loadJSONModel = function () {
      return __awaiter(this, void 0, void 0, function () {
        var e, t, r, n, a, o, i, s;
        return __generator(this, function (u) {
          switch (u.label) {
            case 0:
              return [4, this.getFetchFunc()(this.path, this.requestInit)];

            case 1:
              if (!(e = u.sent()).ok) throw new Error("Request to " + this.path + " failed with error: " + e.statusText);
              return [4, e.json()];

            case 2:
              if (t = u.sent(), r = t.modelTopology, n = t.weightsManifest, null == r && null == n) throw new Error("The JSON from HTTP path " + this.path + " contains neither model topology or manifest for weights.");
              return null == n ? [3, 4] : (i = t.weightsManifest, [4, this.loadWeights(i)]);

            case 3:
              s = u.sent(), a = s[0], o = s[1], u.label = 4;

            case 4:
              return [2, {
                modelTopology: r,
                weightSpecs: a,
                weightData: o
              }];
          }
        });
      });
    }, e.prototype.loadWeights = function (e) {
      return __awaiter(this, void 0, void 0, function () {
        var t, r, n, a, o, i, s, u, l, p, c, h;
        return __generator(this, function (d) {
          switch (d.label) {
            case 0:
              for (t = Array.isArray(this.path) ? this.path[1] : this.path, r = parseUrl(t), n = r[0], a = r[1], o = this.weightPathPrefix || n, i = [], s = 0, u = e; s < u.length; s++) {
                l = u[s], i.push.apply(i, l.weights);
              }

              return p = [], e.forEach(function (e) {
                e.paths.forEach(function (e) {
                  p.push(o + e + a);
                });
              }), c = [i], h = concatenateArrayBuffers, [4, loadWeightsAsArrayBuffer(p, this.requestInit, this.getFetchFunc(), this.onProgress)];

            case 1:
              return [2, c.concat([h.apply(void 0, [d.sent()])])];
          }
        });
      });
    }, e.prototype.getFetchFunc = function () {
      return this.fetchFunc;
    }, e.URL_SCHEME_REGEX = /^https?:\/\//, e;
  }();

  function parseUrl(e) {
    var t = e.lastIndexOf("/"),
        r = e.lastIndexOf("?");
    return [e.substring(0, t) + "/", r > t ? e.substring(r) : ""];
  }

  function isHTTPScheme(e) {
    return null != e.match(BrowserHTTPRequest.URL_SCHEME_REGEX);
  }

  var httpRequestRouter = function httpRequestRouter(e, t) {
    return "undefined" == typeof fetch ? null : (Array.isArray(e) ? e.every(function (e) {
      return isHTTPScheme(e);
    }) : isHTTPScheme(e)) ? browserHTTPRequest(e, null, null, null, t) : null;
  };

  function browserHTTPRequest(e, t, r, n, a) {
    return new BrowserHTTPRequest(e, t, r, n, a);
  }

  IORouterRegistry.registerSaveRouter(httpRequestRouter), IORouterRegistry.registerLoadRouter(httpRequestRouter);

  var PassthroughLoader = function () {
    function e(e, t, r) {
      this.modelTopology = e, this.weightSpecs = t, this.weightData = r;
    }

    return e.prototype.load = function () {
      return __awaiter(this, void 0, void 0, function () {
        var e;
        return __generator(this, function (t) {
          return e = {}, null != this.modelTopology && (e = _assign({
            modelTopology: this.modelTopology
          }, e)), null != this.weightSpecs && this.weightSpecs.length > 0 && (e = _assign({
            weightSpecs: this.weightSpecs
          }, e)), null != this.weightData && this.weightData.byteLength > 0 && (e = _assign({
            weightData: this.weightData
          }, e)), [2, e];
        });
      });
    }, e;
  }(),
      PassthroughSaver = function () {
    function e(e) {
      this.saveHandler = e;
    }

    return e.prototype.save = function (e) {
      return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (t) {
          return [2, this.saveHandler(e)];
        });
      });
    }, e;
  }();

  function fromMemory(e, t, r) {
    return new PassthroughLoader(e, t, r);
  }

  function withSaveHandler(e) {
    return new PassthroughSaver(e);
  }

  var io = Object.freeze({
    browserFiles: browserFiles,
    browserHTTPRequest: browserHTTPRequest,
    concatenateArrayBuffers: concatenateArrayBuffers,
    decodeWeights: decodeWeights,
    encodeWeights: encodeWeights,
    fromMemory: fromMemory,
    getLoadHandlers: getLoadHandlers,
    getModelArtifactsInfoForJSON: getModelArtifactsInfoForJSON,
    getSaveHandlers: getSaveHandlers,
    isHTTPScheme: isHTTPScheme,
    loadWeights: loadWeights,
    registerLoadRouter: registerLoadRouter,
    registerSaveRouter: registerSaveRouter,
    weightsLoaderFactory: weightsLoaderFactory,
    withSaveHandler: withSaveHandler,
    copyModel: copyModel,
    listModels: listModels,
    moveModel: moveModel,
    removeModel: removeModel
  });

  function confusionMatrix_(e, t, r) {
    var n = convertToTensor(e, "labels", "confusionMatrix"),
        a = convertToTensor(t, "predictions", "confusionMatrix");
    assert(null == r || r > 0 && Number.isInteger(r), "If provided, numClasses must be a positive integer, but got " + r), assert(1 === n.rank, "Expected the rank of labels to be 1, but got " + n.rank), assert(1 === a.rank, "Expected the rank of predictions to be 1, but got " + a.rank), assert(n.shape[0] === a.shape[0], "Mismatch in the number of examples: " + n.shape[0] + " vs. " + a.shape[0] + ". Labels and predictions should have the same number of elements."), assert(r > 0 && Number.isInteger(r), "numClasses is required to be a positive integer, but got " + r);
    var o = oneHot(n.asType("int32"), r),
        i = oneHot(a.asType("int32"), r);
    return o.transpose().matMul(i).asType("int32");
  }

  var confusionMatrix = op({
    confusionMatrix_: confusionMatrix_
  }),
      math = Object.freeze({
    confusionMatrix: confusionMatrix
  }),
      Serializable = function () {
    function e() {}

    return e.prototype.getClassName = function () {
      return this.constructor.className;
    }, e.fromConfig = function (e, t) {
      return new e(t);
    }, e;
  }(),
      SerializationMap = function () {
    function e() {
      this.classNameMap = {};
    }

    return e.getMap = function () {
      return null == e.instance && (e.instance = new e()), e.instance;
    }, e.register = function (t) {
      e.getMap().classNameMap[t.className] = [t, t.fromConfig];
    }, e;
  }();

  function registerClass(e) {
    assert(null != e.className, "Class being registered does not have the static className property defined."), assert("string" == typeof e.className, "className is required to be a string, but got type " + _typeof(e.className)), assert(e.className.length > 0, "Class being registered has an empty-string as its className, which is disallowed."), SerializationMap.register(e);
  }

  var serialization = Object.freeze({
    Serializable: Serializable,
    SerializationMap: SerializationMap,
    registerClass: registerClass
  }),
      WEBGL_ENVS = {
    HAS_WEBGL: !0
  },
      PACKED_ENVS = {
    WEBGL_PACK: !0
  },
      NODE_ENVS = {
    IS_NODE: !0
  },
      CHROME_ENVS = {
    IS_CHROME: !0
  },
      BROWSER_ENVS = {
    IS_BROWSER: !0
  },
      CPU_ENVS = {
    HAS_WEBGL: !1
  },
      ALL_ENVS = {};

  function expectArraysClose(e, t, r) {
    return null == r && (r = ENV.get("TEST_EPSILON")), expectArraysPredicate(e, "number" == typeof t || "boolean" == typeof t ? [t] : t, function (e, t) {
      return areClose(e, Number(t), r);
    });
  }

  function expectArraysPredicate(e, t, r) {
    if (e instanceof Tensor || t instanceof Tensor) {
      if (e instanceof Tensor && t instanceof Tensor) {
        if (e.dtype !== t.dtype) throw new Error("Arrays are of different type actual: " + e.dtype + " vs expected: " + t.dtype + ".");
        if (!arraysEqual(e.shape, t.shape)) throw new Error("Arrays are of different shape actual: " + e.shape + " vs expected: " + t.shape + ".");
      }
    } else {
      var n = e.constructor.name,
          a = t.constructor.name;
      if (n !== a) throw new Error("Arrays are of different type actual: " + n + " vs expected: " + a);
    }

    var o, i;
    if (o = e instanceof Tensor ? e.dataSync() : e, i = t instanceof Tensor ? t.dataSync() : t, o.length !== i.length) throw new Error("Arrays have different lengths actual: " + o.length + " vs expected: " + i.length + ".\nActual:   " + o + ".\nExpected: " + i + ".");

    for (var s = 0; s < i.length; ++s) {
      var u = o[s],
          l = i[s];
      if (!r(u, l)) throw new Error("Arrays differ: actual[" + s + "] = " + u + ", expected[" + s + "] = " + l + ".\nActual:   " + o + ".\nExpected: " + i + ".");
    }
  }

  function expectPromiseToFail(e, t) {
    e().then(function () {
      return t.fail();
    }, function () {
      return t();
    });
  }

  function expectArraysEqual(e, t) {
    var r = "string" == typeof t || "number" == typeof t || "boolean" == typeof t ? [t] : t;
    return e instanceof Tensor && "string" === e.dtype || t instanceof Tensor && "string" === t.dtype || Array.isArray(e) && isString(e[0]) || Array.isArray(t) && isString(t[0]) ? expectArraysPredicate(e, r, function (e, t) {
      return e == t;
    }) : expectArraysClose(e, t, 0);
  }

  function expectNumbersClose(e, t, r) {
    if (null == r && (r = ENV.get("TEST_EPSILON")), !areClose(e, t, r)) throw new Error("Numbers differ: actual === " + e + ", expected === " + t);
  }

  function areClose(e, t, r) {
    return !(!isNaN(e) || !isNaN(t)) || !(isNaN(e) || isNaN(t) || Math.abs(e - t) > r);
  }

  function expectValuesInRange(e, t, r) {
    var n;
    n = e instanceof Tensor ? e.dataSync() : e;

    for (var a = 0; a < n.length; a++) {
      if (n[a] < t || n[a] > r) throw new Error("Value out of range:" + n[a] + " low: " + t + ", high: " + r);
    }
  }

  function expectArrayBuffersEqual(e, t) {
    expect(new Float32Array(e)).toEqual(new Float32Array(t));
  }

  var test_util = Object.freeze({
    WEBGL_ENVS: WEBGL_ENVS,
    PACKED_ENVS: PACKED_ENVS,
    NODE_ENVS: NODE_ENVS,
    CHROME_ENVS: CHROME_ENVS,
    BROWSER_ENVS: BROWSER_ENVS,
    CPU_ENVS: CPU_ENVS,
    ALL_ENVS: ALL_ENVS,
    expectArraysClose: expectArraysClose,
    expectPromiseToFail: expectPromiseToFail,
    expectArraysEqual: expectArraysEqual,
    expectNumbersClose: expectNumbersClose,
    expectValuesInRange: expectValuesInRange,
    expectArrayBuffersEqual: expectArrayBuffersEqual
  }),
      version = "0.15.4",
      webgl = Object.freeze({
    gpgpu_util: gpgpu_util,
    webgl_util: webgl_util,
    MathBackendWebGL: MathBackendWebGL,
    GPGPUContext: GPGPUContext
  }),
      Optimizer = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }

    return __extends(t, e), t.prototype.minimize = function (e, t, r) {
      void 0 === t && (t = !1);
      var n = this.computeGradients(e, r),
          a = n.value,
          o = n.grads;
      return this.applyGradients(o), Object.keys(o).forEach(function (e) {
        return o[e].dispose();
      }), t ? a : (a.dispose(), null);
    }, t.prototype.computeGradients = function (e, t) {
      return variableGrads(e, t);
    }, t;
  }(Serializable);

  Object.defineProperty(Optimizer, Symbol.hasInstance, {
    value: function value(e) {
      return null != e.minimize && null != e.computeGradients && null != e.applyGradients;
    }
  });

  var AdadeltaOptimizer = function (e) {
    function t(t, r, n) {
      void 0 === n && (n = null);
      var a = e.call(this) || this;
      return a.learningRate = t, a.rho = r, a.epsilon = n, a.accumulatedGrads = {}, a.accumulatedUpdates = {}, a.c = keep(scalar(-t)), a.rhoScalar = keep(scalar(r)), a.oneMinusRho = keep(scalar(1 - r)), null === n && (n = ENV.get("EPSILON")), a.epsilonScalar = keep(scalar(n)), a;
    }

    return __extends(t, e), t.prototype.applyGradients = function (e) {
      var t = this,
          r = function r(_r2) {
        var a = ENV.engine.registeredVariables[_r2];
        null == n.accumulatedGrads[_r2] && tidy(function () {
          t.accumulatedGrads[_r2] = zerosLike(a).variable(!1);
        }), null == n.accumulatedUpdates[_r2] && tidy(function () {
          t.accumulatedUpdates[_r2] = zerosLike(a).variable(!1);
        });
        var o = e[_r2],
            i = n.accumulatedGrads[_r2],
            s = n.accumulatedUpdates[_r2];
        tidy(function () {
          var e = t.rhoScalar.mul(i).add(t.oneMinusRho.mul(o.square())),
              n = s.add(t.epsilonScalar).sqrt().div(i.add(t.epsilonScalar).sqrt()).mul(o),
              u = t.rhoScalar.mul(s).add(t.oneMinusRho.mul(n.square()));
          t.accumulatedGrads[_r2].assign(e), t.accumulatedUpdates[_r2].assign(u);
          var l = t.c.mul(n).add(a);
          a.assign(l);
        });
      },
          n = this;

      for (var a in e) {
        r(a);
      }
    }, t.prototype.dispose = function () {
      var e = this;
      this.c.dispose(), this.epsilonScalar.dispose(), this.rhoScalar.dispose(), this.oneMinusRho.dispose(), null != this.accumulatedUpdates && (Object.keys(this.accumulatedUpdates).forEach(function (t) {
        return e.accumulatedUpdates[t].dispose();
      }), Object.keys(this.accumulatedGrads).forEach(function (t) {
        return e.accumulatedGrads[t].dispose();
      }));
    }, t.prototype.getConfig = function () {
      return {
        learningRate: this.learningRate,
        rho: this.rho,
        epsilon: this.epsilon
      };
    }, t.fromConfig = function (e, t) {
      return new e(t.learningRate, t.rho, t.epsilon);
    }, t.className = "AdadeltaOptimizer", t;
  }(Optimizer);

  registerClass(AdadeltaOptimizer);

  var AdagradOptimizer = function (e) {
    function t(t, r) {
      void 0 === r && (r = .1);
      var n = e.call(this) || this;
      return n.learningRate = t, n.initialAccumulatorValue = r, n.accumulatedGrads = {}, n.c = keep(scalar(-t)), n.epsilon = keep(scalar(ENV.get("EPSILON"))), n;
    }

    return __extends(t, e), t.prototype.applyGradients = function (e) {
      var t = this,
          r = function r(_r3) {
        var a = ENV.engine.registeredVariables[_r3];
        null == n.accumulatedGrads[_r3] && tidy(function () {
          t.accumulatedGrads[_r3] = fill(a.shape, t.initialAccumulatorValue).variable(!1);
        });
        var o = e[_r3],
            i = n.accumulatedGrads[_r3];
        tidy(function () {
          var e = i.add(o.square());

          t.accumulatedGrads[_r3].assign(e);

          var n = t.c.mul(o.div(e.add(t.epsilon).sqrt())).add(a);
          a.assign(n);
        });
      },
          n = this;

      for (var a in e) {
        r(a);
      }
    }, t.prototype.dispose = function () {
      var e = this;
      this.epsilon.dispose(), this.c.dispose(), null != this.accumulatedGrads && Object.keys(this.accumulatedGrads).forEach(function (t) {
        return e.accumulatedGrads[t].dispose();
      });
    }, t.prototype.getConfig = function () {
      return {
        learningRate: this.learningRate,
        initialAccumulatorValue: this.initialAccumulatorValue
      };
    }, t.fromConfig = function (e, t) {
      return new e(t.learningRate, t.initialAccumulatorValue);
    }, t.className = "AdagradOptimizer", t;
  }(Optimizer);

  registerClass(AdagradOptimizer);

  var AdamOptimizer = function (e) {
    function t(t, r, n, a) {
      void 0 === a && (a = null);
      var o = e.call(this) || this;
      return o.learningRate = t, o.beta1 = r, o.beta2 = n, o.epsilon = a, o.accumulatedFirstMoment = {}, o.accumulatedSecondMoment = {}, o.c = keep(scalar(-t)), o.beta1Scalar = keep(scalar(r)), o.beta2Scalar = keep(scalar(n)), tidy(function () {
        o.accBeta1 = scalar(r).variable(), o.accBeta2 = scalar(n).variable();
      }), o.oneMinusBeta1 = keep(scalar(1 - r)), o.oneMinusBeta2 = keep(scalar(1 - n)), o.one = keep(scalar(1)), null === a && (a = ENV.get("EPSILON")), o.epsScalar = keep(scalar(a)), o;
    }

    return __extends(t, e), t.prototype.applyGradients = function (e) {
      var t = this;
      tidy(function () {
        var r = t.one.sub(t.accBeta1),
            n = t.one.sub(t.accBeta2);

        for (var a in e) {
          var o = ENV.engine.registeredVariables[a];

          if (null == t.accumulatedFirstMoment[a]) {
            var i = !1;
            t.accumulatedFirstMoment[a] = zerosLike(o).variable(i);
          }

          null == t.accumulatedSecondMoment[a] && (i = !1, t.accumulatedSecondMoment[a] = zerosLike(o).variable(i));
          var s = e[a],
              u = t.accumulatedFirstMoment[a],
              l = t.accumulatedSecondMoment[a],
              p = t.beta1Scalar.mul(u).add(t.oneMinusBeta1.mul(s)),
              c = t.beta2Scalar.mul(l).add(t.oneMinusBeta2.mul(s.square())),
              h = p.div(r),
              d = c.div(n);
          t.accumulatedFirstMoment[a].assign(p), t.accumulatedSecondMoment[a].assign(c);
          var f = t.c.mul(h.div(t.epsScalar.add(d.sqrt()))).add(o);
          o.assign(f);
        }

        t.accBeta1.assign(t.accBeta1.mul(t.beta1Scalar)), t.accBeta2.assign(t.accBeta2.mul(t.beta2Scalar));
      });
    }, t.prototype.dispose = function () {
      var e = this;
      this.c.dispose(), this.epsScalar.dispose(), this.beta1Scalar.dispose(), this.beta2Scalar.dispose(), this.accBeta1.dispose(), this.accBeta2.dispose(), this.oneMinusBeta1.dispose(), this.oneMinusBeta2.dispose(), this.one.dispose(), null != this.accumulatedFirstMoment && Object.keys(this.accumulatedFirstMoment).forEach(function (t) {
        return e.accumulatedFirstMoment[t].dispose();
      }), null != this.accumulatedSecondMoment && Object.keys(this.accumulatedSecondMoment).forEach(function (t) {
        return e.accumulatedSecondMoment[t].dispose();
      });
    }, t.prototype.getConfig = function () {
      return {
        learningRate: this.learningRate,
        beta1: this.beta1,
        beta2: this.beta2,
        epsilon: this.epsilon
      };
    }, t.fromConfig = function (e, t) {
      return new e(t.learningRate, t.beta1, t.beta2, t.epsilon);
    }, t.className = "AdamOptimizer", t;
  }(Optimizer);

  registerClass(AdamOptimizer);

  var AdamaxOptimizer = function (e) {
    function t(t, r, n, a, o) {
      void 0 === a && (a = null), void 0 === o && (o = 0);
      var i = e.call(this) || this;
      return i.learningRate = t, i.beta1 = r, i.beta2 = n, i.epsilon = a, i.decay = o, i.accumulatedFirstMoment = {}, i.accumulatedWeightedInfNorm = {}, i.c = keep(scalar(-t)), i.beta1Scalar = keep(scalar(r)), i.beta2Scalar = keep(scalar(n)), i.decayScalar = keep(scalar(o)), tidy(function () {
        i.iteration = scalar(0).variable(), i.accBeta1 = scalar(r).variable();
      }), i.oneMinusBeta1 = keep(scalar(1 - r)), i.one = keep(scalar(1)), null === a && (a = ENV.get("EPSILON")), i.epsScalar = keep(scalar(a)), i;
    }

    return __extends(t, e), t.prototype.applyGradients = function (e) {
      var t = this;
      tidy(function () {
        var r = t.one.sub(t.accBeta1),
            n = t.c.div(t.one.add(t.decayScalar.mul(t.iteration)));

        for (var a in e) {
          var o = ENV.engine.registeredVariables[a];

          if (null == t.accumulatedFirstMoment[a]) {
            var i = !1;
            t.accumulatedFirstMoment[a] = zerosLike(o).variable(i);
          }

          null == t.accumulatedWeightedInfNorm[a] && (i = !1, t.accumulatedWeightedInfNorm[a] = zerosLike(o).variable(i));
          var s = e[a],
              u = t.accumulatedFirstMoment[a],
              l = t.accumulatedWeightedInfNorm[a],
              p = t.beta1Scalar.mul(u).add(t.oneMinusBeta1.mul(s)),
              c = t.beta2Scalar.mul(l),
              h = s.abs(),
              d = c.maximum(h);
          t.accumulatedFirstMoment[a].assign(p), t.accumulatedWeightedInfNorm[a].assign(d);
          var f = n.div(r).mul(p.div(t.epsScalar.add(d))).add(o);
          o.assign(f);
        }

        t.iteration.assign(t.iteration.add(t.one)), t.accBeta1.assign(t.accBeta1.mul(t.beta1Scalar));
      });
    }, t.prototype.dispose = function () {
      var e = this;
      this.c.dispose(), this.epsScalar.dispose(), this.accBeta1.dispose(), this.beta1Scalar.dispose(), this.beta2Scalar.dispose(), this.oneMinusBeta1.dispose(), this.decayScalar.dispose(), this.iteration.dispose(), this.one.dispose(), null != this.accumulatedFirstMoment && Object.keys(this.accumulatedFirstMoment).forEach(function (t) {
        return e.accumulatedFirstMoment[t].dispose();
      }), null != this.accumulatedWeightedInfNorm && Object.keys(this.accumulatedWeightedInfNorm).forEach(function (t) {
        return e.accumulatedWeightedInfNorm[t].dispose();
      });
    }, t.prototype.getConfig = function () {
      return {
        learningRate: this.learningRate,
        beta1: this.beta1,
        beta2: this.beta2,
        epsilon: this.epsilon,
        decay: this.decay
      };
    }, t.fromConfig = function (e, t) {
      return new e(t.learningRate, t.beta1, t.beta2, t.epsilon, t.decay);
    }, t.className = "AdamaxOptimizer", t;
  }(Optimizer);

  registerClass(AdamaxOptimizer);

  var SGDOptimizer = function (e) {
    function t(t) {
      var r = e.call(this) || this;
      return r.learningRate = t, r.setLearningRate(t), r;
    }

    return __extends(t, e), t.prototype.applyGradients = function (e) {
      var t = this;
      Object.keys(e).forEach(function (r) {
        var n = e[r],
            a = ENV.engine.registeredVariables[r];
        tidy(function () {
          var e = t.c.mul(n).add(a);
          a.assign(e);
        });
      });
    }, t.prototype.setLearningRate = function (e) {
      this.learningRate = e, null != this.c && this.c.dispose(), this.c = keep(scalar(-e));
    }, t.prototype.dispose = function () {
      this.c.dispose();
    }, t.prototype.getConfig = function () {
      return {
        learningRate: this.learningRate
      };
    }, t.fromConfig = function (e, t) {
      return new e(t.learningRate);
    }, t.className = "SGDOptimizer", t;
  }(Optimizer);

  registerClass(SGDOptimizer);

  var MomentumOptimizer = function (e) {
    function t(t, r, n) {
      void 0 === n && (n = !1);
      var a = e.call(this, t) || this;
      return a.learningRate = t, a.momentum = r, a.useNesterov = n, a.m = scalar(a.momentum), a.accumulations = {}, a;
    }

    return __extends(t, e), t.prototype.applyGradients = function (e) {
      var t = this,
          r = function r(_r4) {
        var a = ENV.engine.registeredVariables[_r4];
        null == n.accumulations[_r4] && tidy(function () {
          t.accumulations[_r4] = zerosLike(a).variable(!1);
        });
        var o = n.accumulations[_r4],
            i = e[_r4];
        tidy(function () {
          var e,
              n = t.m.mul(o).add(i);
          e = t.useNesterov ? t.c.mul(i.add(n.mul(t.m))).add(a) : t.c.mul(n).add(a), t.accumulations[_r4].assign(n), a.assign(e);
        });
      },
          n = this;

      for (var a in e) {
        r(a);
      }
    }, t.prototype.dispose = function () {
      if (e.prototype.dispose.call(this), this.m.dispose(), null != this.accumulations) for (var t in this.accumulations) {
        this.accumulations[t].dispose();
      }
    }, t.prototype.setMomentum = function (e) {
      this.momentum = e;
    }, t.prototype.getConfig = function () {
      return {
        learningRate: this.learningRate,
        momentum: this.momentum,
        useNesterov: this.useNesterov
      };
    }, t.fromConfig = function (e, t) {
      return new e(t.learningRate, t.momentum, t.useNesterov);
    }, t.className = "MomentumOptimizer", t;
  }(SGDOptimizer);

  registerClass(MomentumOptimizer);

  var RMSPropOptimizer = function (e) {
    function t(t, r, n, a, o) {
      void 0 === r && (r = .9), void 0 === n && (n = 0), void 0 === a && (a = null), void 0 === o && (o = !1);
      var i = e.call(this) || this;
      return i.learningRate = t, i.decay = r, i.momentum = n, i.epsilon = a, i.accumulatedMeanSquares = {}, i.accumulatedMeanGrads = {}, i.accumulatedMoments = {}, i.c = keep(scalar(t)), i.decayScalar = keep(scalar(r)), i.momentumScalar = keep(scalar(n)), i.oneMinusDecay = keep(scalar(1 - r)), i.centered = o, null === a && (a = ENV.get("EPSILON")), i.epsilonScalar = keep(scalar(a)), i;
    }

    return __extends(t, e), t.prototype.applyGradients = function (e) {
      var t = this,
          r = function r(_r5) {
        var a = ENV.engine.registeredVariables[_r5];
        null == n.accumulatedMeanSquares[_r5] && tidy(function () {
          t.accumulatedMeanSquares[_r5] = zerosLike(a).variable(!1);
        }), null == n.accumulatedMeanGrads[_r5] && n.centered && tidy(function () {
          t.accumulatedMeanGrads[_r5] = zerosLike(a).variable(!1);
        }), null == n.accumulatedMoments[_r5] && tidy(function () {
          t.accumulatedMoments[_r5] = zerosLike(a).variable(!1);
        });
        var o = n.accumulatedMeanSquares[_r5],
            i = n.accumulatedMeanGrads[_r5],
            s = n.accumulatedMoments[_r5],
            u = e[_r5];
        tidy(function () {
          var e = t.decayScalar.mul(o).add(t.oneMinusDecay.mul(u.square()));

          if (t.centered) {
            var n = t.decayScalar.mul(i).add(t.oneMinusDecay.mul(u)),
                l = t.momentumScalar.mul(s).add(t.c.mul(u).div(e.sub(n.square().add(t.epsilonScalar)).sqrt()));
            t.accumulatedMeanSquares[_r5].assign(e), t.accumulatedMeanGrads[_r5].assign(n), t.accumulatedMoments[_r5].assign(l);
            var p = a.sub(l);
            a.assign(p);
          } else {
            var c = t.decayScalar.mul(o).add(t.oneMinusDecay.mul(u.square()));
            l = t.momentumScalar.mul(s).add(t.c.mul(u).div(c.add(t.epsilonScalar).sqrt())), t.accumulatedMeanSquares[_r5].assign(c), t.accumulatedMoments[_r5].assign(l), p = a.sub(l), a.assign(p);
          }
        });
      },
          n = this;

      for (var a in e) {
        r(a);
      }
    }, t.prototype.dispose = function () {
      var e = this;
      this.c.dispose(), this.epsilonScalar.dispose(), this.decayScalar.dispose(), this.momentumScalar.dispose(), this.oneMinusDecay.dispose(), null != this.accumulatedMeanSquares && Object.keys(this.accumulatedMeanSquares).forEach(function (t) {
        return e.accumulatedMeanSquares[t].dispose();
      }), null != this.accumulatedMeanGrads && this.centered && Object.keys(this.accumulatedMeanGrads).forEach(function (t) {
        return e.accumulatedMeanGrads[t].dispose();
      }), null != this.accumulatedMoments && Object.keys(this.accumulatedMoments).forEach(function (t) {
        return e.accumulatedMoments[t].dispose();
      });
    }, t.prototype.getConfig = function () {
      return {
        learningRate: this.learningRate,
        decay: this.decay,
        momentum: this.momentum,
        epsilon: this.epsilon,
        centered: this.centered
      };
    }, t.fromConfig = function (e, t) {
      return new e(t.learningRate, t.decay, t.momentum, t.epsilon, t.centered);
    }, t.className = "RMSPropOptimizer", t;
  }(Optimizer);

  registerClass(RMSPropOptimizer);

  var OptimizerConstructors = function () {
    function e() {}

    return e.sgd = function (e) {
      return new SGDOptimizer(e);
    }, e.momentum = function (e, t, r) {
      return void 0 === r && (r = !1), new MomentumOptimizer(e, t, r);
    }, e.rmsprop = function (e, t, r, n, a) {
      return void 0 === t && (t = .9), void 0 === r && (r = 0), void 0 === n && (n = null), void 0 === a && (a = !1), new RMSPropOptimizer(e, t, r, n, a);
    }, e.adam = function (e, t, r, n) {
      return void 0 === e && (e = .001), void 0 === t && (t = .9), void 0 === r && (r = .999), void 0 === n && (n = null), new AdamOptimizer(e, t, r, n);
    }, e.adadelta = function (e, t, r) {
      return void 0 === e && (e = .001), void 0 === t && (t = .95), void 0 === r && (r = null), new AdadeltaOptimizer(e, t, r);
    }, e.adamax = function (e, t, r, n, a) {
      return void 0 === e && (e = .002), void 0 === t && (t = .9), void 0 === r && (r = .999), void 0 === n && (n = null), void 0 === a && (a = 0), new AdamaxOptimizer(e, t, r, n, a);
    }, e.adagrad = function (e, t) {
      return void 0 === t && (t = .1), new AdagradOptimizer(e, t);
    }, e;
  }(),
      train = {
    sgd: OptimizerConstructors.sgd,
    momentum: OptimizerConstructors.momentum,
    adadelta: OptimizerConstructors.adadelta,
    adagrad: OptimizerConstructors.adagrad,
    rmsprop: OptimizerConstructors.rmsprop,
    adamax: OptimizerConstructors.adamax,
    adam: OptimizerConstructors.adam
  },
      setBackend = Environment.setBackend,
      getBackend = Environment.getBackend,
      disposeVariables = Environment.disposeVariables,
      memory = Environment.memory;

  setOpHandler(ops);

  var _extendStatics$ = function extendStatics$1(e, t) {
    return (_extendStatics$ = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (e, t) {
      e.__proto__ = t;
    } || function (e, t) {
      for (var r in t) {
        t.hasOwnProperty(r) && (e[r] = t[r]);
      }
    })(e, t);
  };

  function __extends$1(e, t) {
    function r() {
      this.constructor = e;
    }

    _extendStatics$(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r());
  }

  var _epsilon,
      _assign$ = function __assign$1() {
    return (_assign$ = Object.assign || function (e) {
      for (var t, r = 1, n = arguments.length; r < n; r++) {
        for (var a in t = arguments[r]) {
          Object.prototype.hasOwnProperty.call(t, a) && (e[a] = t[a]);
        }
      }

      return e;
    }).apply(this, arguments);
  };

  function __awaiter$1(e, t, r, n) {
    return new (r || (r = Promise))(function (a, o) {
      function i(e) {
        try {
          u(n.next(e));
        } catch (e) {
          o(e);
        }
      }

      function s(e) {
        try {
          u(n.throw(e));
        } catch (e) {
          o(e);
        }
      }

      function u(e) {
        e.done ? a(e.value) : new r(function (t) {
          t(e.value);
        }).then(i, s);
      }

      u((n = n.apply(e, t || [])).next());
    });
  }

  function __generator$1(e, t) {
    var r,
        n,
        a,
        o,
        i = {
      label: 0,
      sent: function sent() {
        if (1 & a[0]) throw a[1];
        return a[1];
      },
      trys: [],
      ops: []
    };
    return o = {
      next: s(0),
      throw: s(1),
      return: s(2)
    }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {
      return this;
    }), o;

    function s(o) {
      return function (s) {
        return function (o) {
          if (r) throw new TypeError("Generator is already executing.");

          for (; i;) {
            try {
              if (r = 1, n && (a = 2 & o[0] ? n.return : o[0] ? n.throw || ((a = n.return) && a.call(n), 0) : n.next) && !(a = a.call(n, o[1])).done) return a;

              switch (n = 0, a && (o = [2 & o[0], a.value]), o[0]) {
                case 0:
                case 1:
                  a = o;
                  break;

                case 4:
                  return i.label++, {
                    value: o[1],
                    done: !1
                  };

                case 5:
                  i.label++, n = o[1], o = [0];
                  continue;

                case 7:
                  o = i.ops.pop(), i.trys.pop();
                  continue;

                default:
                  if (!(a = (a = i.trys).length > 0 && a[a.length - 1]) && (6 === o[0] || 2 === o[0])) {
                    i = 0;
                    continue;
                  }

                  if (3 === o[0] && (!a || o[1] > a[0] && o[1] < a[3])) {
                    i.label = o[1];
                    break;
                  }

                  if (6 === o[0] && i.label < a[1]) {
                    i.label = a[1], a = o;
                    break;
                  }

                  if (a && i.label < a[2]) {
                    i.label = a[2], i.ops.push(o);
                    break;
                  }

                  a[2] && i.ops.pop(), i.trys.pop();
                  continue;
              }

              o = t.call(e, i);
            } catch (e) {
              o = [6, e], n = 0;
            } finally {
              r = a = 0;
            }
          }

          if (5 & o[0]) throw o[1];
          return {
            value: o[0] ? o[1] : void 0,
            done: !0
          };
        }([o, s]);
      };
    }
  }

  function epsilon() {
    return null == _epsilon && (_epsilon = ENV.get("EPSILON")), _epsilon;
  }

  function imageDataFormat() {
    return "channelsLast";
  }

  var _nextUniqueTensorId = 0;

  function getNextUniqueTensorId() {
    return _nextUniqueTensorId++;
  }

  var _uidPrefixes = {};

  function getUid(e) {
    return void 0 === e && (e = ""), e in _uidPrefixes || (_uidPrefixes[e] = 0), _uidPrefixes[e] += 1, e + _uidPrefixes[e].toString();
  }

  var scalarCache = {
    float32: {},
    int32: {}
  },
      DEFAULT_DTYPE = "float32";

  function getScalar(e, t) {
    return void 0 === t && (t = DEFAULT_DTYPE), null == scalarCache[t][e] && (scalarCache[t][e] = scalar(e, t), keep(scalarCache[t][e])), scalarCache[t][e];
  }

  var AttributeError = function (e) {
    function t(r) {
      var n = e.call(this, r) || this;
      return Object.setPrototypeOf(n, t.prototype), n;
    }

    return __extends$1(t, e), t;
  }(Error),
      RuntimeError = function (e) {
    function t(r) {
      var n = e.call(this, r) || this;
      return Object.setPrototypeOf(n, t.prototype), n;
    }

    return __extends$1(t, e), t;
  }(Error),
      ValueError = function (e) {
    function t(r) {
      var n = e.call(this, r) || this;
      return Object.setPrototypeOf(n, t.prototype), n;
    }

    return __extends$1(t, e), t;
  }(Error),
      NotImplementedError = function (e) {
    function t(r) {
      var n = e.call(this, r) || this;
      return Object.setPrototypeOf(n, t.prototype), n;
    }

    return __extends$1(t, e), t;
  }(Error),
      AssertionError = function (e) {
    function t(r) {
      var n = e.call(this, r) || this;
      return Object.setPrototypeOf(n, t.prototype), n;
    }

    return __extends$1(t, e), t;
  }(Error),
      IndexError = function (e) {
    function t(r) {
      var n = e.call(this, r) || this;
      return Object.setPrototypeOf(n, t.prototype), n;
    }

    return __extends$1(t, e), t;
  }(Error);

  function pyListRepeat(e, t) {
    if (Array.isArray(e)) {
      for (var r = [], n = 0; n < t; n++) {
        r = r.concat(e);
      }

      return r;
    }

    return (r = new Array(t)).fill(e), r;
  }

  function assert$1(e, t) {
    if (!e) throw new AssertionError(t);
  }

  function count(e, t) {
    for (var r = 0, n = 0, a = e; n < a.length; n++) {
      a[n] === t && r++;
    }

    return r;
  }

  function singletonOrArray(e) {
    return 1 === e.length ? e[0] : e;
  }

  function toList(e) {
    return Array.isArray(e) ? e : [e];
  }

  function toSnakeCase(e) {
    var t = e.replace(/(.)([A-Z][a-z0-9]+)/g, "$1_$2").replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase();
    return "_" !== t[0] ? t : "private" + t;
  }

  function toCamelCase(e) {
    return e.length <= 1 ? e : -1 === e.indexOf("_") ? e : e.replace(/[_]+(\w|$)/g, function (e, t) {
      return t.toUpperCase();
    });
  }

  var _GLOBAL_CUSTOM_OBJECTS = {};

  function serializeKerasObject(e) {
    return null === e || void 0 === e ? null : {
      className: e.getClassName(),
      config: e.getConfig()
    };
  }

  function convertNDArrayScalarsInConfig(e) {
    if (null != e && "object" == _typeof(e)) if (Array.isArray(e)) e.forEach(function (e) {
      return convertNDArrayScalarsInConfig(e);
    });else for (var t = 0, r = Object.keys(e); t < r.length; t++) {
      var n = r[t],
          a = e[n];
      null != a && "object" == _typeof(a) && (Array.isArray(a) || "ndarray" !== a.type || "number" != typeof a.value ? convertNDArrayScalarsInConfig(a) : e[n] = a.value);
    }
  }

  function deserializeKerasObject(e, t, r, n, a) {
    if (void 0 === t && (t = {}), void 0 === r && (r = {}), void 0 === n && (n = "object"), void 0 === a && (a = !1), "string" == typeof e) {
      var o = e,
          i = void 0;
      if (o in r) i = r[o];else if (o in _GLOBAL_CUSTOM_OBJECTS) i = _GLOBAL_CUSTOM_OBJECTS[o];else if (null == (i = t[o])) throw new ValueError("Unknown " + n + ": " + e + ". This may be due to one of the following reasons:\n1. The " + n + " is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom " + n + " is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().");
      return i;
    }

    var s = e;
    if (null == s.className || null == s.config) throw new ValueError(n + ": Improper config format: " + JSON.stringify(s) + ".\n'className' and 'config' must set.");
    var u,
        l,
        p,
        c = s.className,
        h = void 0,
        d = void 0;
    if (c in r ? (h = (u = r.get(c))[0], d = u[1]) : c in _GLOBAL_CUSTOM_OBJECTS ? (h = (l = _GLOBAL_CUSTOM_OBJECTS.className)[0], d = l[1]) : c in t && (h = (p = t[c])[0], d = p[1]), null == h) throw new ValueError("Unknown " + n + ": " + c + ". This may be due to one of the following reasons:\n1. The " + n + " is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom " + n + " is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().");

    if (null != d) {
      for (var f = {}, m = 0, g = Object.keys(_GLOBAL_CUSTOM_OBJECTS); m < g.length; m++) {
        f[N = g[m]] = _GLOBAL_CUSTOM_OBJECTS[N];
      }

      for (var y = 0, v = Object.keys(r); y < v.length; y++) {
        f[N = v[y]] = r[N];
      }

      s.config.customObjects = f;

      for (var x = _assign$({}, _GLOBAL_CUSTOM_OBJECTS), b = 0, w = Object.keys(r); b < w.length; b++) {
        var N = w[b];
        _GLOBAL_CUSTOM_OBJECTS[N] = r[N];
      }

      convertNDArrayScalarsInConfig(s.config);
      var S = d(h, s.config, r, a);
      return _GLOBAL_CUSTOM_OBJECTS = _assign$({}, x), S;
    }

    x = _assign$({}, _GLOBAL_CUSTOM_OBJECTS);

    for (var T = 0, E = Object.keys(r); T < E.length; T++) {
      N = E[T], _GLOBAL_CUSTOM_OBJECTS[N] = r[N];
    }

    return S = new h(s.config), _GLOBAL_CUSTOM_OBJECTS = _assign$({}, x), S;
  }

  function numberCompare(e, t) {
    return e < t ? -1 : e > t ? 1 : 0;
  }

  function reverseNumberCompare(e, t) {
    return -1 * numberCompare(e, t);
  }

  function stringToDType(e) {
    switch (e) {
      case "float32":
        return "float32";

      default:
        throw new ValueError("Invalid dtype: " + e);
    }
  }

  function unique(e) {
    if (null == e) return e;

    for (var t = [], r = 0, n = e; r < n.length; r++) {
      var a = n[r];
      -1 === t.indexOf(a) && t.push(a);
    }

    return t;
  }

  function isObjectEmpty(e) {
    if (null == e) throw new ValueError("Invalid value in obj: " + JSON.stringify(e));

    for (var t in e) {
      if (e.hasOwnProperty(t)) return !1;
    }

    return !0;
  }

  function checkStringTypeUnionValue(e, t, r) {
    if (null != r && e.indexOf(r) < 0) throw new ValueError(r + " is not a valid " + t + ".  Valid values are " + e + " or null/undefined.");
  }

  function checkArrayTypeAndLength(e, t, r, n) {
    return void 0 === r && (r = 0), void 0 === n && (n = 1 / 0), assert$1(r >= 0), assert$1(n >= r), Array.isArray(e) && e.length >= r && e.length <= n && e.every(function (e) {
      return _typeof(e) === t;
    });
  }

  function calcL2Norms(e, t) {
    return tidy(function () {
      return sqrt(sum$1(mulStrict(e, e), t, !0));
    });
  }

  var Constraint = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }

    return __extends$1(t, e), t.prototype.getConfig = function () {
      return {};
    }, t;
  }(serialization.Serializable),
      MaxNorm = function (e) {
    function t(t) {
      var r = e.call(this) || this;
      return r.defaultMaxValue = 2, r.defaultAxis = 0, r.maxValue = null != t.maxValue ? t.maxValue : r.defaultMaxValue, r.axis = null != t.axis ? t.axis : r.defaultAxis, r;
    }

    return __extends$1(t, e), t.prototype.apply = function (e) {
      var t = this;
      return tidy(function () {
        var r = calcL2Norms(e, t.axis),
            n = clipByValue(r, 0, t.maxValue);
        return mul(e, div(n, add(getScalar(epsilon()), r)));
      });
    }, t.prototype.getConfig = function () {
      return {
        maxValue: this.maxValue,
        axis: this.axis
      };
    }, t.className = "MaxNorm", t;
  }(Constraint);

  serialization.registerClass(MaxNorm);

  var UnitNorm = function (e) {
    function t(t) {
      var r = e.call(this) || this;
      return r.defaultAxis = 0, r.axis = null != t.axis ? t.axis : r.defaultAxis, r;
    }

    return __extends$1(t, e), t.prototype.apply = function (e) {
      var t = this;
      return tidy(function () {
        return div(e, add(getScalar(epsilon()), calcL2Norms(e, t.axis)));
      });
    }, t.prototype.getConfig = function () {
      return {
        axis: this.axis
      };
    }, t.className = "UnitNorm", t;
  }(Constraint);

  serialization.registerClass(UnitNorm);

  var NonNeg = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }

    return __extends$1(t, e), t.prototype.apply = function (e) {
      return relu(e);
    }, t.className = "NonNeg", t;
  }(Constraint);

  serialization.registerClass(NonNeg);

  var MinMaxNorm = function (e) {
    function t(t) {
      var r = e.call(this) || this;
      return r.defaultMinValue = 0, r.defaultMaxValue = 1, r.defaultRate = 1, r.defaultAxis = 0, r.minValue = null != t.minValue ? t.minValue : r.defaultMinValue, r.maxValue = null != t.maxValue ? t.maxValue : r.defaultMaxValue, r.rate = null != t.rate ? t.rate : r.defaultRate, r.axis = null != t.axis ? t.axis : r.defaultAxis, r;
    }

    return __extends$1(t, e), t.prototype.apply = function (e) {
      var t = this;
      return tidy(function () {
        var r = calcL2Norms(e, t.axis),
            n = add(mul(getScalar(t.rate), clipByValue(r, t.minValue, t.maxValue)), mul(getScalar(1 - t.rate), r));
        return mul(e, div(n, add(getScalar(epsilon()), r)));
      });
    }, t.prototype.getConfig = function () {
      return {
        minValue: this.minValue,
        maxValue: this.maxValue,
        rate: this.rate,
        axis: this.axis
      };
    }, t.className = "MinMaxNorm", t;
  }(Constraint);

  serialization.registerClass(MinMaxNorm);
  var CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = {
    maxNorm: "MaxNorm",
    minMaxNorm: "MinMaxNorm",
    nonNeg: "NonNeg",
    unitNorm: "UnitNorm"
  };

  function serializeConstraint(e) {
    return serializeKerasObject(e);
  }

  function deserializeConstraint(e, t) {
    return void 0 === t && (t = {}), deserializeKerasObject(e, serialization.SerializationMap.getMap().classNameMap, t, "constraint");
  }

  function getConstraint(e) {
    return null == e ? null : "string" == typeof e ? deserializeConstraint({
      className: e in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ? CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[e] : e,
      config: {}
    }) : e instanceof Constraint ? e : deserializeConstraint(e);
  }

  function maxNorm(e) {
    return new MaxNorm(e);
  }

  function unitNorm(e) {
    return new UnitNorm(e);
  }

  function nonNeg() {
    return new NonNeg();
  }

  function minMaxNorm(e) {
    return new MinMaxNorm(e);
  }

  var exports_constraints = Object.freeze({
    maxNorm: maxNorm,
    unitNorm: unitNorm,
    nonNeg: nonNeg,
    minMaxNorm: minMaxNorm
  }),
      VALID_DATA_FORMAT_VALUES = ["channelsFirst", "channelsLast"],
      VALID_PADDING_MODE_VALUES = ["valid", "same", "causal"],
      VALID_POOL_MODE_VALUES = ["max", "avg"],
      VALID_BIDIRECTIONAL_MERGE_MODES = ["sum", "mul", "concat", "ave"],
      nameMap = new Map();

  function checkDataFormat(e) {
    checkStringTypeUnionValue(VALID_DATA_FORMAT_VALUES, "DataFormat", e);
  }

  function checkPaddingMode(e) {
    checkStringTypeUnionValue(VALID_PADDING_MODE_VALUES, "PaddingMode", e);
  }

  function checkPoolMode(e) {
    checkStringTypeUnionValue(VALID_POOL_MODE_VALUES, "PoolMode", e);
  }

  var _nameScopeStack = [],
      _nameScopeDivider = "/";

  function nameScope(e, t) {
    _nameScopeStack.push(e);

    try {
      var r = t();
      return _nameScopeStack.pop(), r;
    } catch (e) {
      throw _nameScopeStack.pop(), e;
    }
  }

  function currentNameScopePrefix() {
    return 0 === _nameScopeStack.length ? "" : _nameScopeStack.join(_nameScopeDivider) + _nameScopeDivider;
  }

  function getScopedTensorName(e) {
    if (!isValidTensorName(e)) throw new Error("Not a valid tensor name: '" + e + "'");
    return currentNameScopePrefix() + e;
  }

  function getUniqueTensorName(e) {
    if (!isValidTensorName(e)) throw new Error("Not a valid tensor name: '" + e + "'");
    nameMap.has(e) || nameMap.set(e, 0);
    var t = nameMap.get(e);

    if (nameMap.set(e, nameMap.get(e) + 1), t > 0) {
      var r = e + "_" + t;
      return nameMap.set(r, 1), r;
    }

    return e;
  }

  var tensorNameRegex = new RegExp(/^[A-Za-z][-A-Za-z0-9\._\/]*$/);

  function isValidTensorName(e) {
    return !!e.match(tensorNameRegex);
  }

  function isInteger(e) {
    return e === parseInt(e.toString(), 10);
  }

  function arrayProd(e, t, r) {
    null == t && (t = 0), null == r && (r = e.length);

    for (var n = 1, a = t; a < r; ++a) {
      n *= e[a];
    }

    return n;
  }

  function toArray1D(e) {
    return tensor1d(e = Array.isArray(e) ? new Float32Array(e) : e);
  }

  function min$1(e) {
    return min(toArray1D(e)).dataSync()[0];
  }

  function max$1(e) {
    return max(toArray1D(e)).dataSync()[0];
  }

  function range$1(e, t) {
    if (t < e) throw new ValueError("end (" + t + ") < begin (" + e + ") is forbidden.");

    for (var r = [], n = e; n < t; ++n) {
      r.push(n);
    }

    return r;
  }

  function cast$1(e, t) {
    return e.asType(t);
  }

  function expandDims$1(e, t) {
    void 0 === t && (t = -1);
    var r = e.shape.slice();
    return t < 0 && (t = r.length + t + 1), r.splice(t, 0, 1), e.reshape(r);
  }

  function repeat(e, t) {
    return tidy(function () {
      if (2 !== e.shape.length) throw new ValueError("repeat() expects a rank-2 tensor, but received a rank-" + e.shape.length + " tensor.");
      return tile$1(expandDims$1(e, 1), [1, t, 1]);
    });
  }

  function flatten$1(e) {
    var t = [arrayProd(e.shape)];
    return e.reshape(t);
  }

  function batchFlatten(e) {
    if (e.rank <= 1) throw new ValueError("batchFlatten requires a minimum rank of 2. Got rank: " + e.rank + ".");
    var t = [e.shape[0], arrayProd(e.shape, 1)];
    return e.reshape(t);
  }

  function sliceAlongFirstAxis(e, t, r) {
    return tidy(function () {
      switch (e.rank) {
        case 1:
          return slice1d(e, t, r);

        case 2:
          return slice2d(e, [t, 0], [r, e.shape[1]]);

        case 3:
          return slice3d(e, [t, 0, 0], [r, e.shape[1], e.shape[2]]);

        case 4:
          return slice4d(e, [t, 0, 0, 0], [r, e.shape[1], e.shape[2], e.shape[3]]);

        default:
          throw new ValueError("sliceAlongFirstAxis() received an unsupported tensor rank: " + e.rank);
      }
    });
  }

  function sliceAlongLastAxis(e, t, r) {
    return tidy(function () {
      switch (e.rank) {
        case 1:
          return slice1d(e, t, r);

        case 2:
          return slice2d(e, [0, t], [e.shape[0], r]);

        case 3:
          return slice3d(e, [0, 0, t], [e.shape[0], e.shape[1], r]);

        case 4:
          return slice4d(e, [0, 0, 0, t], [e.shape[0], e.shape[1], e.shape[2], r]);

        default:
          throw new ValueError("sliceAlongLastAxis() received an unsupported tensor rank: " + e.rank);
      }
    });
  }

  function sliceAlongAxis(e, t, r, n) {
    return tidy(function () {
      switch (e.rank) {
        case 1:
          return slice1d(e, t, r);

        case 2:
          switch (n) {
            case 1:
              return sliceAlongFirstAxis(e, t, r);

            case 2:
              return sliceAlongLastAxis(e, t, r);

            default:
              throw new ValueError("The axis is not within the rank of the tensor " + n);
          }

        case 3:
          switch (n) {
            case 1:
              return sliceAlongFirstAxis(e, t, r);

            case 2:
              return slice3d(e, [0, t, 0], [e.shape[0], r, e.shape[2]]);

            case 3:
              return sliceAlongLastAxis(e, t, r);

            default:
              throw new ValueError("The axis is not within the rank of the tensor " + n);
          }

        case 4:
          switch (n) {
            case 1:
              return sliceAlongFirstAxis(e, t, r);

            case 2:
              return slice4d(e, [0, t, 0, 0], [e.shape[0], r, e.shape[2], e.shape[3]]);

            case 3:
              return slice4d(e, [0, 0, t, 0], [e.shape[0], e.shape[1], r, e.shape[3]]);

            case 4:
              return sliceAlongLastAxis(e, t, r);

            default:
              throw new ValueError("The axis is not within the rank of the tensor " + n);
          }

        default:
          throw new ValueError("sliceAlongLastAxis() received an unsupported tensor rank: " + e.rank);
      }
    });
  }

  function concatenate(e, t) {
    var r;
    return void 0 === t && (t = -1), t < 0 && (t = 0 !== (r = e[0].rank) ? r : 0), t === e[0].rank && (t = -1), concat(e, t);
  }

  function concatAlongFirstAxis(e, t) {
    switch (e.rank) {
      case 1:
        return concat1d([e, t]);

      case 2:
        return concat2d([e, t], 0);

      case 3:
        return concat3d([e, t], 0);

      case 4:
        return concat4d([e, t], 0);

      default:
        throw new ValueError("concatAlongFirstAxis() received an unsupported tensor rank: " + e.rank);
    }
  }

  function tile$1(e, t) {
    if (Array.isArray(t) || (t = [t]), e.rank !== t.length) throw new ValueError("The length of input n (" + t.length + ") does not match the number of dimensions in input x (" + e.rank + ")");
    return tile(e, t);
  }

  function randomNormal$1(e, t, r, n, a) {
    return void 0 === t && (t = 0), void 0 === r && (r = 1), randomNormal(e, t, r, n, a);
  }

  function dot$1(e, t) {
    if (e.rank < 2 || t.rank < 2) throw new NotImplementedError("dot requires both inputs to be rank >= 2 but got x shape = " + e.shape + " and y shape = " + t.shape);
    if (t.rank >= 3 && (n = e.shape.slice(-1)[0]) !== (i = t.shape.slice(-2)[0])) throw new NotImplementedError("If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = " + e.shape + " and  y shape = " + t.shape);
    if (2 === e.rank && 2 === t.rank) return matMul(e, t);
    var r = e.shape.slice(),
        n = r.pop();
    e = e.reshape([-1, n]);
    var a = t.shape.slice(),
        o = a.pop(),
        i = a.pop(),
        s = a.concat([o]),
        u = Array.from({
      length: t.rank
    }, function (e, r) {
      return 0 === r ? t.rank - 2 : r <= t.rank - 2 ? r - 1 : r;
    });
    t = t.transpose(u).reshape([i, -1]);
    var l = r.concat(s);
    return matMul(e, t).reshape(l);
  }

  function gather$1(e, t, r) {
    return tidy(function () {
      return t = Array.isArray(t) ? tensor1d(t, "int32") : t.toInt(), gather(e, t, r);
    });
  }

  function square$1(e) {
    return mulStrict(e, e);
  }

  function biasAdd(e, t, r) {
    return tidy(function () {
      if (null == r && (r = imageDataFormat()), checkDataFormat(r), 1 !== t.rank && t.rank !== e.rank) throw new ValueError("Unexpected bias dimensions: " + t.rank + "; expected it to be 1 or " + e.rank);
      var n,
          a = t.shape;
      if (5 === e.rank) "channelsFirst" === r ? n = 1 === a.length ? e.add(t.reshape([1, a[0], 1, 1, 1])) : e.add(t.reshape([1, a[3], a[0], a[1], a[2]])) : "channelsLast" === r && (n = 1 === a.length ? e.add(t.reshape([1, 1, 1, 1, a[0]])) : e.add(t.reshape([1].concat(a))));else if (4 === e.rank) "channelsFirst" === r ? n = 1 === a.length ? e.add(t.reshape([1, a[0], 1, 1])) : e.add(t.reshape([1, a[2], a[0], a[1]])) : "channelsLast" === r && (n = 1 === a.length ? e.add(t.reshape([1, 1, 1, a[0]])) : e.add(t.reshape([1].concat(a))));else if (3 === e.rank) "channelsFirst" === r ? n = 1 === a.length ? e.add(t.reshape([1, a[0], 1])) : e.add(t.reshape([1, a[1], a[0]])) : "channelsLast" === r && (n = 1 === a.length ? e.add(t.reshape([1, 1, a[0]])) : e.add(t.reshape([1].concat(a))));else {
        if (!(e.rank < 3)) throw new ValueError("Unsupported input rank by biasAdd: " + e.rank);
        n = e.add(t);
      }
      return n;
    });
  }

  function elu$1(e, t) {
    if (void 0 === t && (t = 1), 1 !== t) throw new NotImplementedError("Support for alpha values other than 1 (" + t + ") is not implemented yet.");
    return elu(e);
  }

  function softsign(e) {
    return tidy(function () {
      return div(e, add(getScalar(1), abs(e)));
    });
  }

  function dropout(e, t, r, n) {
    return tidy(function () {
      if (null != r && !util.arraysEqual(e.shape, r)) throw new NotImplementedError("Non-default noise shape is not implemented yet: " + JSON.stringify(r));
      if (null != n) throw new NotImplementedError("seed is not implemented for dropout yet.");
      var a = step(add(neg(t), randomUniform(e.shape, 0, 1, "float32")));
      return a = mul(div(getScalar(1), sub(getScalar(1), t)), a), mul(e, a);
    });
  }

  function hardSigmoid(e) {
    return tidy(function () {
      var t = add(getScalar(.5), mul(getScalar(.2), e));
      return clipByValue(t, 0, 1);
    });
  }

  function inTrainPhase(e, t, r) {
    return void 0 === r && (r = !1), r ? e() : t();
  }

  var VALID_FAN_MODE_VALUES = ["fanIn", "fanOut", "fanAvg"],
      VALID_DISTRIBUTION_VALUES = ["normal", "uniform"];

  function checkFanMode(e) {
    checkStringTypeUnionValue(VALID_FAN_MODE_VALUES, "FanMode", e);
  }

  function checkDistribution(e) {
    checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES, "Distribution", e);
  }

  var Initializer = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }

    return __extends$1(t, e), t.prototype.fromConfigUsesCustomObjects = function () {
      return !1;
    }, t.prototype.getConfig = function () {
      return {};
    }, t;
  }(serialization.Serializable),
      Zeros = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }

    return __extends$1(t, e), t.prototype.apply = function (e, t) {
      return zeros(e, t);
    }, t.className = "Zeros", t;
  }(Initializer);

  serialization.registerClass(Zeros);

  var Ones = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }

    return __extends$1(t, e), t.prototype.apply = function (e, t) {
      return ones$1(e, t);
    }, t.className = "Ones", t;
  }(Initializer);

  serialization.registerClass(Ones);

  var Constant = function (e) {
    function t(t) {
      var r = e.call(this) || this;
      if ("object" != _typeof(t)) throw new ValueError("Expected argument of type ConstantConfig but got " + t);
      if (void 0 === t.value) throw new ValueError("config must have value set but got " + t);
      return r.value = t.value, r;
    }

    return __extends$1(t, e), t.prototype.apply = function (e, t) {
      var r = this;
      return tidy(function () {
        return mul(scalar(r.value), ones$1(e, t));
      });
    }, t.prototype.getConfig = function () {
      return {
        value: this.value
      };
    }, t.className = "Constant", t;
  }(Initializer);

  serialization.registerClass(Constant);

  var RandomUniform = function (e) {
    function t(t) {
      var r = e.call(this) || this;
      return r.DEFAULT_MINVAL = -.05, r.DEFAULT_MAXVAL = .05, r.minval = t.minval || r.DEFAULT_MINVAL, r.maxval = t.maxval || r.DEFAULT_MAXVAL, r.seed = t.seed, r;
    }

    return __extends$1(t, e), t.prototype.apply = function (e, t) {
      return randomUniform(e, this.minval, this.maxval, t);
    }, t.prototype.getConfig = function () {
      return {
        minval: this.minval,
        maxval: this.maxval,
        seed: this.seed
      };
    }, t.className = "RandomUniform", t;
  }(Initializer);

  serialization.registerClass(RandomUniform);

  var RandomNormal = function (e) {
    function t(t) {
      var r = e.call(this) || this;
      return r.DEFAULT_MEAN = 0, r.DEFAULT_STDDEV = .05, r.mean = t.mean || r.DEFAULT_MEAN, r.stddev = t.stddev || r.DEFAULT_STDDEV, r.seed = t.seed, r;
    }

    return __extends$1(t, e), t.prototype.apply = function (e, t) {
      if ("float32" !== (t = t || "float32") && "int32" !== t) throw new NotImplementedError("randomNormal does not support dType " + t + ".");
      return randomNormal$1(e, this.mean, this.stddev, t, this.seed);
    }, t.prototype.getConfig = function () {
      return {
        mean: this.mean,
        stddev: this.stddev,
        seed: this.seed
      };
    }, t.className = "RandomNormal", t;
  }(Initializer);

  serialization.registerClass(RandomNormal);

  var TruncatedNormal = function (e) {
    function t(t) {
      var r = e.call(this) || this;
      return r.DEFAULT_MEAN = 0, r.DEFAULT_STDDEV = .05, r.mean = t.mean || r.DEFAULT_MEAN, r.stddev = t.stddev || r.DEFAULT_STDDEV, r.seed = t.seed, r;
    }

    return __extends$1(t, e), t.prototype.apply = function (e, t) {
      if ("float32" !== (t = t || "float32") && "int32" !== t) throw new NotImplementedError("truncatedNormal does not support dType " + t + ".");
      return truncatedNormal(e, this.mean, this.stddev, t, this.seed);
    }, t.prototype.getConfig = function () {
      return {
        mean: this.mean,
        stddev: this.stddev,
        seed: this.seed
      };
    }, t.className = "TruncatedNormal", t;
  }(Initializer);

  serialization.registerClass(TruncatedNormal);

  var Identity = function (e) {
    function t(t) {
      var r = e.call(this) || this;
      return r.gain = null != t.gain ? scalar(t.gain) : getScalar(1), r;
    }

    return __extends$1(t, e), t.prototype.apply = function (e, t) {
      var r = this;
      return tidy(function () {
        if (2 !== e.length || e[0] !== e[1]) throw new ValueError("Identity matrix initializer can only be used for 2D square matrices.");
        return mul(r.gain, eye(e[0]));
      });
    }, t.prototype.getConfig = function () {
      return {
        gain: this.gain.get()
      };
    }, t.className = "Identity", t;
  }(Initializer);

  function computeFans(e, t) {
    var r, n;
    if (void 0 === t && (t = "channelsLast"), checkDataFormat(t), 2 === e.length) r = e[0], n = e[1];else if (-1 !== [3, 4, 5].indexOf(e.length)) {
      if ("channelsFirst" === t) {
        var a = arrayProd(e, 2);
        r = e[1] * a, n = e[0] * a;
      } else "channelsLast" === t && (a = arrayProd(e, 0, e.length - 2), r = e[e.length - 2] * a, n = e[e.length - 1] * a);
    } else {
      var o = arrayProd(e);
      r = Math.sqrt(o), n = Math.sqrt(o);
    }
    return [r, n];
  }

  serialization.registerClass(Identity);

  var VarianceScaling = function (e) {
    function t(t) {
      var r = e.call(this) || this;
      if (t.scale < 0) throw new ValueError("scale must be a positive float. Got: " + t.scale);
      return r.scale = null == t.scale ? 1 : t.scale, r.mode = t.mode, checkFanMode(r.mode), r.distribution = t.distribution, checkDistribution(r.distribution), r.seed = t.seed, r;
    }

    return __extends$1(t, e), t.prototype.apply = function (e, t) {
      var r = computeFans(e),
          n = r[0],
          a = r[1],
          o = this.scale;

      if ("fanIn" === this.mode ? o /= Math.max(1, n) : "fanOut" === this.mode ? o /= Math.max(1, a) : o /= Math.max(1, (n + a) / 2), "normal" === this.distribution) {
        var i = Math.sqrt(o);
        if ("float32" !== (t = t || "float32") && "int32" !== t) throw new NotImplementedError(this.getClassName() + " does not support dType " + t + ".");
        return truncatedNormal(e, 0, i, t, this.seed);
      }

      var s = Math.sqrt(3 * o);
      return randomUniform(e, -s, s, t);
    }, t.prototype.getConfig = function () {
      return {
        scale: this.scale,
        mode: this.mode,
        distribution: this.distribution,
        seed: this.seed
      };
    }, t.className = "VarianceScaling", t;
  }(Initializer);

  serialization.registerClass(VarianceScaling);

  var GlorotUniform = function (e) {
    function t(t) {
      return e.call(this, {
        scale: 1,
        mode: "fanAvg",
        distribution: "uniform",
        seed: null == t ? null : t.seed
      }) || this;
    }

    return __extends$1(t, e), t.prototype.getClassName = function () {
      return VarianceScaling.className;
    }, t.className = "GlorotUniform", t;
  }(VarianceScaling);

  serialization.registerClass(GlorotUniform);

  var GlorotNormal = function (e) {
    function t(t) {
      return e.call(this, {
        scale: 1,
        mode: "fanAvg",
        distribution: "normal",
        seed: null == t ? null : t.seed
      }) || this;
    }

    return __extends$1(t, e), t.prototype.getClassName = function () {
      return VarianceScaling.className;
    }, t.className = "GlorotNormal", t;
  }(VarianceScaling);

  serialization.registerClass(GlorotNormal);

  var HeNormal = function (e) {
    function t(t) {
      return e.call(this, {
        scale: 2,
        mode: "fanIn",
        distribution: "normal",
        seed: null == t ? null : t.seed
      }) || this;
    }

    return __extends$1(t, e), t.prototype.getClassName = function () {
      return VarianceScaling.className;
    }, t.className = "HeNormal", t;
  }(VarianceScaling);

  serialization.registerClass(HeNormal);

  var HeUniform = function (e) {
    function t(t) {
      return e.call(this, {
        scale: 2,
        mode: "fanIn",
        distribution: "uniform",
        seed: null == t ? null : t.seed
      }) || this;
    }

    return __extends$1(t, e), t.prototype.getClassName = function () {
      return VarianceScaling.className;
    }, t.className = "HeUniform", t;
  }(VarianceScaling);

  serialization.registerClass(HeUniform);

  var LeCunNormal = function (e) {
    function t(t) {
      return e.call(this, {
        scale: 1,
        mode: "fanIn",
        distribution: "normal",
        seed: null == t ? null : t.seed
      }) || this;
    }

    return __extends$1(t, e), t.prototype.getClassName = function () {
      return VarianceScaling.className;
    }, t.className = "LeCunNormal", t;
  }(VarianceScaling);

  serialization.registerClass(LeCunNormal);

  var LeCunUniform = function (e) {
    function t(t) {
      return e.call(this, {
        scale: 1,
        mode: "fanIn",
        distribution: "uniform",
        seed: null == t ? null : t.seed
      }) || this;
    }

    return __extends$1(t, e), t.prototype.getClassName = function () {
      return VarianceScaling.className;
    }, t.className = "LeCunNormal", t;
  }(VarianceScaling);

  serialization.registerClass(LeCunUniform);

  var Orthogonal = function (e) {
    function t(t) {
      var r = e.call(this) || this;
      if (r.DEFAULT_GAIN = 1, r.gain = null == t.gain ? r.DEFAULT_GAIN : t.gain, r.seed = t.seed, null != r.seed) throw new NotImplementedError("Random seed is not implemented for Orthogonal Initializer yet.");
      return r;
    }

    return __extends$1(t, e), t.prototype.apply = function (e, t) {
      var r = this;
      return tidy(function () {
        if (2 !== e.length) throw new NotImplementedError("The Orthogonal Initializer does not support non-2D shapes yet.");
        e[0] * e[1] > 2e3 && console.warn("Orthogonal initializer is being called on a matrix with more than 2000 (" + e[0] * e[1] + ") elements: Slowness may result.");
        var t = randomNormal$1(e[0] > e[1] ? [e[1], e[0]] : e, 0, 1, "float32"),
            n = linalg_ops.gramSchmidt(t);
        return e[0] > e[1] && (n = n.transpose()), mul(getScalar(r.gain), n);
      });
    }, t.prototype.getConfig = function () {
      return {
        gain: this.gain,
        seed: this.seed
      };
    }, t.className = "Orthogonal", t;
  }(Initializer);

  serialization.registerClass(Orthogonal);
  var INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {
    constant: "Constant",
    glorotNormal: "GlorotNormal",
    glorotUniform: "GlorotUniform",
    heNormal: "HeNormal",
    heUniform: "HeUniform",
    identity: "Identity",
    leCunNormal: "LeCunNormal",
    leCunUniform: "LeCunUniform",
    ones: "Ones",
    orthogonal: "Orthogonal",
    randomNormal: "RandomNormal",
    randomUniform: "RandomUniform",
    truncatedNormal: "TruncatedNormal",
    varianceScaling: "VarianceScaling",
    zeros: "Zeros"
  };

  function deserializeInitializer(e, t) {
    return void 0 === t && (t = {}), deserializeKerasObject(e, serialization.SerializationMap.getMap().classNameMap, t, "initializer");
  }

  function serializeInitializer(e) {
    return serializeKerasObject(e);
  }

  function getInitializer(e) {
    if ("string" == typeof e) {
      var t = e in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[e] : e;
      return "GlorotNormal" === t ? new GlorotNormal() : "GlorotUniform" === t ? new GlorotUniform() : "HeNormal" === t ? new HeNormal() : "HeUniform" === t ? new HeUniform() : "LeCunNormal" === t ? new LeCunNormal() : "LeCunUniform" === t ? new LeCunUniform() : deserializeInitializer({
        className: t,
        config: {}
      });
    }

    return e instanceof Initializer ? e : deserializeInitializer(e);
  }

  function zeros$1() {
    return new Zeros();
  }

  function ones$1$1() {
    return new Ones();
  }

  function constant(e) {
    return new Constant(e);
  }

  function randomUniform$1(e) {
    return new RandomUniform(e);
  }

  function randomNormal$2(e) {
    return new RandomNormal(e);
  }

  function truncatedNormal$1(e) {
    return new TruncatedNormal(e);
  }

  function identity(e) {
    return new Identity(e);
  }

  function varianceScaling(e) {
    return new VarianceScaling(e);
  }

  function glorotUniform(e) {
    return new GlorotUniform(e);
  }

  function glorotNormal(e) {
    return new GlorotNormal(e);
  }

  function heNormal(e) {
    return new HeNormal(e);
  }

  function heUniform(e) {
    return new HeUniform(e);
  }

  function leCunNormal(e) {
    return new LeCunNormal(e);
  }

  function leCunUniform(e) {
    return new LeCunUniform(e);
  }

  function orthogonal(e) {
    return new Orthogonal(e);
  }

  var exports_initializers = Object.freeze({
    zeros: zeros$1,
    ones: ones$1$1,
    constant: constant,
    randomUniform: randomUniform$1,
    randomNormal: randomNormal$2,
    truncatedNormal: truncatedNormal$1,
    identity: identity,
    varianceScaling: varianceScaling,
    glorotUniform: glorotUniform,
    glorotNormal: glorotNormal,
    heNormal: heNormal,
    heUniform: heUniform,
    leCunNormal: leCunNormal,
    leCunUniform: leCunUniform,
    orthogonal: orthogonal
  });

  function isArrayOfShapes(e) {
    return Array.isArray(e) && Array.isArray(e[0]);
  }

  function normalizeShapeList(e) {
    return 0 === e.length ? [] : Array.isArray(e[0]) ? e : [e];
  }

  function getExactlyOneTensor(e) {
    var t;

    if (Array.isArray(e)) {
      if (1 !== e.length) throw new ValueError("Expected Tensor length to be 1; got " + e.length);
      t = e[0];
    } else t = e;

    return t;
  }

  function getExactlyOneShape(e) {
    if (Array.isArray(e) && Array.isArray(e[0])) {
      if (1 === e.length) return (e = e)[0];
      throw new ValueError("Expected exactly 1 Shape; got " + e.length);
    }

    return e;
  }

  function countParamsInWeights(e) {
    for (var t = 0, r = 0, n = e; r < n.length; r++) {
      var a = n[r];
      0 === a.shape.length ? t += 1 : t += a.shape.reduce(function (e, t) {
        return e * t;
      });
    }

    return t;
  }

  var DEFAULT_VARIABLE_NAME_PREFIX = "Variable",
      LayerVariable = function () {
    function e(e, t, r, n, a) {
      void 0 === t && (t = "float32"), void 0 === r && (r = DEFAULT_VARIABLE_NAME_PREFIX), void 0 === n && (n = !0), void 0 === a && (a = null), this.dtype = null == t ? "float32" : t, this.shape = e.shape, this.id = getNextUniqueTensorId(), r = null == r ? DEFAULT_VARIABLE_NAME_PREFIX : r, this.originalName = getScopedTensorName(r), this.name = getUniqueTensorName(this.originalName), this.trainable = n, this.constraint = a, this.val = variable(e, this.trainable, this.name, this.dtype);
    }

    return e.prototype.read = function () {
      return this.assertNotDisposed(), this.val;
    }, e.prototype.write = function (e) {
      return this.assertNotDisposed(), checkShapesMatch(this.val, e), this.val.id !== e.id && (this.val.assign(e), null != this.constraint && this.val.assign(this.constraint.apply(this.val))), this;
    }, e.prototype.dispose = function () {
      this.assertNotDisposed(), this.val.dispose();
    }, e.prototype.assertNotDisposed = function () {
      if (this.val.isDisposed) throw new Error("LayersVariable " + this.name + " is already disposed.");
    }, e;
  }();

  function checkShapesMatch(e, t) {
    if (e.shape.toString() !== t.shape.toString()) throw new Error("Shape mismatch: " + JSON.stringify(e.shape) + " vs. " + JSON.stringify(t.shape));
  }

  function batchGetValue(e) {
    return e.map(function (e) {
      return e.read();
    });
  }

  function batchSetValue(e) {
    e.forEach(function (e) {
      e[0].write(e[1]);
    });
  }

  var InputSpec = function InputSpec(e) {
    this.dtype = e.dtype, this.shape = e.shape, null != e.shape ? this.ndim = e.shape.length : this.ndim = e.ndim, this.maxNDim = e.maxNDim, this.minNDim = e.minNDim, this.axes = e.axes || {};
  },
      SymbolicTensor = function SymbolicTensor(e, t, r, n, a, o, i) {
    this.dtype = e, this.shape = t, this.sourceLayer = r, this.inputs = n, this.callArgs = a, this.outputTensorIndex = i, this.id = getNextUniqueTensorId(), null != o && (this.originalName = getScopedTensorName(o), this.name = getUniqueTensorName(this.originalName)), this.rank = t.length;
  },
      _nextNodeID = 0,
      Node = function () {
    function e(e, t) {
      this.callArgs = t, this.id = _nextNodeID++, this.outboundLayer = e.outboundLayer, this.inboundLayers = e.inboundLayers, this.nodeIndices = e.nodeIndices, this.tensorIndices = e.tensorIndices, this.inputTensors = e.inputTensors, this.outputTensors = e.outputTensors, this.inputMasks = e.inputMasks, this.outputMasks = e.outputMasks, this.inputShapes = e.inputShapes, this.outputShapes = e.outputShapes;

      for (var r = 0, n = e.inboundLayers; r < n.length; r++) {
        var a = n[r];
        null != a && a.outboundNodes.push(this);
      }

      e.outboundLayer.inboundNodes.push(this);
    }

    return e.prototype.getConfig = function () {
      for (var e = [], t = 0, r = this.inboundLayers; t < r.length; t++) {
        var n = r[t];
        null != n ? e.push(n.name) : e.push(null);
      }

      return {
        outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,
        inboundLayers: e,
        nodeIndices: this.nodeIndices,
        tensorIndices: this.tensorIndices
      };
    }, e;
  }(),
      _nextLayerID = 0,
      Layer = function (e) {
    function t(t) {
      var r = e.call(this) || this;
      r._callHook = null, r._addedWeightNames = [], r._stateful = !1, r.id = _nextLayerID++, r.activityRegularizer = null, r.inputSpec = null, r.supportsMasking = !1, r._trainableWeights = [], r._nonTrainableWeights = [], r._losses = [], r._updates = [], r._built = !1, r.inboundNodes = [], r.outboundNodes = [];
      var n = t.name;

      if (!n) {
        var a = r.getClassName();
        n = toSnakeCase(a) + "_" + getUid(a);
      }

      if (r.name = n, r.trainable = null == t.trainable || t.trainable, r.updatable = null == t.updatable || t.updatable, null != t.inputShape || null != t.batchInputShape) {
        var o = void 0;
        if (null != t.batchInputShape) o = t.batchInputShape;else if (null != t.inputShape) {
          var i = null;
          null != t.batchSize && (i = t.batchSize), o = [i].concat(t.inputShape);
        }
        r.batchInputShape = o;
        var s = t.dtype;
        null == s && (s = t.inputDType), null == s && (s = "float32"), r.dtype = s;
      }

      return null != t.weights ? r.initialWeights = t.weights : r.initialWeights = null, r._refCount = null, r.fastWeightInitDuringBuild = !1, r;
    }

    return __extends$1(t, e), t.nodeKey = function (e, t) {
      return e.name + "_ib-" + t.toString();
    }, t.prototype.getNodeAtIndex = function (e, t) {
      if (0 === this.inboundNodes.length) throw new RuntimeError("The layer has never been called and thus has no defined " + t + ".");
      if (this.inboundNodes.length <= e) throw new ValueError("Asked to get " + t + " at node " + e + ", but the layer has only " + this.inboundNodes.length + " inbound nodes.");
      return this.inboundNodes[e];
    }, t.prototype.getInputAt = function (e) {
      return singletonOrArray(this.getNodeAtIndex(e, "input").inputTensors);
    }, t.prototype.getOutputAt = function (e) {
      return singletonOrArray(this.getNodeAtIndex(e, "output").outputTensors);
    }, Object.defineProperty(t.prototype, "input", {
      get: function get() {
        if (this.inboundNodes.length > 1) throw new AttributeError("Layer " + this.name + ' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');
        if (0 === this.inboundNodes.length) throw new AttributeError("Layer " + this.name + " is not connected, no input to return.");
        return singletonOrArray(this.getNodeAtIndex(0, "input").inputTensors);
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "output", {
      get: function get() {
        if (0 === this.inboundNodes.length) throw new AttributeError("Layer " + this.name + " has no inbound nodes.");
        if (this.inboundNodes.length > 1) throw new AttributeError("Layer " + this.name + ' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');
        return singletonOrArray(this.getNodeAtIndex(0, "output").outputTensors);
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "losses", {
      get: function get() {
        return this._losses;
      },
      enumerable: !0,
      configurable: !0
    }), t.prototype.calculateLosses = function () {
      return this.losses.map(function (e) {
        return e();
      });
    }, Object.defineProperty(t.prototype, "updates", {
      get: function get() {
        return this._updates;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "built", {
      get: function get() {
        return this._built;
      },
      set: function set(e) {
        this._built = e;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "trainableWeights", {
      get: function get() {
        return this.trainable ? this._trainableWeights : [];
      },
      set: function set(e) {
        this._trainableWeights = e;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "nonTrainableWeights", {
      get: function get() {
        return this.trainable ? this._nonTrainableWeights : this._trainableWeights.concat(this._nonTrainableWeights);
      },
      set: function set(e) {
        this._nonTrainableWeights = e;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "weights", {
      get: function get() {
        return this.trainableWeights.concat(this.nonTrainableWeights);
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "stateful", {
      get: function get() {
        return this._stateful;
      },
      enumerable: !0,
      configurable: !0
    }), t.prototype.resetStates = function () {
      if (!this.stateful) throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.");
    }, t.prototype.assertInputCompatibility = function (e) {
      if (e = toList(e), null != this.inputSpec && 0 !== this.inputSpec.length) {
        var t = toList(this.inputSpec);
        if (e.length !== t.length) throw new ValueError("Layer " + this.name + " expects " + t.length + " inputs, but it received " + e.length + " input tensors. Input received: " + e);

        for (var r = 0; r < e.length; r++) {
          var n = e[r],
              a = t[r];

          if (null != a) {
            var o = n.rank;
            if (null != a.ndim && o !== a.ndim) throw new ValueError("Input " + r + " is incompatible with layer " + this.name + ": expected ndim=" + a.ndim + ", found ndim=" + o);
            if (null != a.maxNDim && o > a.maxNDim) throw new ValueError("Input " + r + " is incompatible with layer " + this.name + ": expected max_ndim=" + a.maxNDim + ", found ndim=" + o);
            if (null != a.minNDim && o < a.minNDim) throw new ValueError("Input " + r + " is incompatible with layer " + this.name + ": expected min_ndim=" + a.minNDim + ", found ndim=" + o + ".");
            if (null != a.dtype && n.dtype !== a.dtype) throw new ValueError("Input " + r + " is incompatible with layer " + this.name + " : expected dtype=" + a.dtype + ", found dtype=" + n.dtype + ".");

            if (a.axes) {
              var i = n.shape;

              for (var s in a.axes) {
                var u = Number(s),
                    l = a.axes[s],
                    p = u >= 0 ? i[u] : i[i.length + u];
                if (null != l && -1 === [l, null].indexOf(p)) throw new ValueError("Input " + r + " is incompatible with layer " + this.name + ": expected axis " + u + " of input shape to have value " + l + " but got shape " + i + ".");
              }
            }

            if (null != a.shape) for (var c = 0; c < a.shape.length; ++c) {
              var h = a.shape[c],
                  d = n.shape[c];
              if (null != h && null != d && h !== d) throw new ValueError("Input " + r + " is incompatible with layer " + this.name + ": expected shape=" + a.shape + ", found shape=${xShape}.");
            }
          }
        }
      }
    }, t.prototype.call = function (e, t) {
      return e;
    }, t.prototype.invokeCallHook = function (e, t) {
      null != this._callHook && this._callHook(e, t);
    }, t.prototype.setCallHook = function (e) {
      this._callHook = e;
    }, t.prototype.clearCallHook = function () {
      this._callHook = null;
    }, t.prototype.apply = function (e, t) {
      var r = this;
      t = t || {}, this.assertNotDisposed();

      for (var n = toList(e), a = !0, o = 0, i = n; o < i.length; o++) {
        if (!(i[o] instanceof SymbolicTensor)) {
          a = !1;
          break;
        }
      }

      for (var s = !0, u = 0, l = n; u < l.length; u++) {
        if (l[u] instanceof SymbolicTensor) {
          s = !1;
          break;
        }
      }

      if (a === s) throw new ValueError("Arguments to apply() must be all SymbolicTensors or all Tensors");
      return nameScope(this.name, function () {
        if (!r.built) {
          r.assertInputCompatibility(e);

          for (var a = [], o = 0, i = toList(e); o < i.length; o++) {
            var u = i[o];
            a.push(u.shape);
          }

          r.build(singletonOrArray(a)), r.built = !0, r.initialWeights && r.setWeights(r.initialWeights), null === r._refCount && s && (r._refCount = 1);
        }

        if (r.assertInputCompatibility(e), s) {
          for (var l = [], p = 0, c = toList(m = r.call(e, t)); p < c.length; p++) {
            var h = c[p];
            -1 !== n.indexOf(h) && (h = h.clone()), l.push(h);
          }

          if (m = singletonOrArray(l), null != r.activityRegularizer) throw new NotImplementedError("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
          return m;
        }

        var d = collectInputShape(e),
            f = r.computeOutputShape(d),
            m = void 0,
            g = guessOutputDType(e);
        if (r.warnOnIncompatibleInputShape(Array.isArray(e) ? d[0] : d), m = null != f && f.length > 0 && Array.isArray(f[0]) ? f.map(function (n, a) {
          return new SymbolicTensor(g, n, r, toList(e), t, r.name, a);
        }) : new SymbolicTensor(g, f, r, toList(e), t, r.name), r.addInboundNode(e, m, null, null, d, f, t), r._refCount++, null != r.activityRegularizer) throw new NotImplementedError("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
        return m;
      });
    }, t.prototype.warnOnIncompatibleInputShape = function (e) {
      if (null != this.batchInputShape) if (e.length !== this.batchInputShape.length) console.warn("The rank of the input tensor provided (shape: " + JSON.stringify(e) + ") does not match that of the batchInputShape (" + JSON.stringify(this.batchInputShape) + ") of the layer " + this.name);else {
        var t = !1;
        this.batchInputShape.forEach(function (r, n) {
          null != r && null != e[n] && e[n] !== r && (t = !0);
        }), t && console.warn("The shape of the input tensor (" + JSON.stringify(e) + ") does not match the expectation of layer " + this.name + ": " + JSON.stringify(this.batchInputShape));
      }
    }, Object.defineProperty(t.prototype, "outputShape", {
      get: function get() {
        if (null == this.inboundNodes || 0 === this.inboundNodes.length) throw new AttributeError("The layer " + this.name + " has never been called and thus has no defined output shape.");

        for (var e = [], t = 0, r = this.inboundNodes; t < r.length; t++) {
          var n = r[t],
              a = JSON.stringify(n.outputShapes);
          -1 === e.indexOf(a) && e.push(a);
        }

        if (1 === e.length) {
          var o = this.inboundNodes[0].outputShapes;
          return Array.isArray(o) && Array.isArray(o[0]) && 1 === o.length ? o[0] : o;
        }

        throw new AttributeError("The layer " + this.name + ' has multiple inbound nodes with different output shapes. Hence the notion of "outut shape" is ill-defined for the layer.');
      },
      enumerable: !0,
      configurable: !0
    }), t.prototype.countParams = function () {
      if (!this.built) throw new RuntimeError("You tried to call countParams() on " + this.name + ", but the layer is not built yet. Build it first by calling build(batchInputShape).");
      return countParamsInWeights(this.weights);
    }, t.prototype.build = function (e) {
      this.built = !0;
    }, t.prototype.getWeights = function (e) {
      return void 0 === e && (e = !1), batchGetValue(e ? this.trainableWeights : this.weights);
    }, t.prototype.setWeights = function (e) {
      var t = this;
      tidy(function () {
        var r = t.weights;
        if (r.length !== e.length) throw new ValueError('You called setWeights(weights) on layer "' + t.name + '" with a weight list of length ' + e.length + ", but the layer was expecting " + r.length + " weights. Provided weights: " + e + "...");

        if (0 !== r.length) {
          for (var n = [], a = batchGetValue(r), o = 0; o < a.length; ++o) {
            var i = a[o],
                s = r[o],
                u = e[o];
            if (!util.arraysEqual(i.shape, u.shape)) throw new ValueError("Layer weight shape " + i.shape + " not compatible with provided weight shape " + u.shape);
            n.push([s, u]);
          }

          batchSetValue(n);
        }
      });
    }, t.prototype.addWeight = function (e, t, r, n, a, o, i) {
      if (-1 !== this._addedWeightNames.indexOf(e)) throw new ValueError("Duplicate weight name " + e + " for layer " + this.name);
      this._addedWeightNames.push(e), null == r && (r = "float32"), this.fastWeightInitDuringBuild && (n = getInitializer("zeros"));
      var s = n.apply(t, r),
          u = new LayerVariable(s, r, e, o, i);
      return s.dispose(), null != a && this.addLoss(function () {
        return a.apply(u.read());
      }), null == o && (o = !0), o ? this._trainableWeights.push(u) : this._nonTrainableWeights.push(u), u;
    }, t.prototype.setFastWeightInitDuringBuild = function (e) {
      this.fastWeightInitDuringBuild = e;
    }, t.prototype.addLoss = function (e) {
      var t;
      null == e || Array.isArray(e) && 0 === e.length || (e = toList(e), void 0 !== this._losses && null !== this._losses && (t = this.losses).push.apply(t, e));
    }, t.prototype.computeOutputShape = function (e) {
      return e;
    }, t.prototype.computeMask = function (e, t) {
      var r = this;

      if (!this.supportsMasking) {
        if (null != t) {
          if (!Array.isArray(t)) throw new TypeError("Layer " + this.name + " does not support masking, but was passed an inputMask.");
          t.forEach(function (e) {
            if (null != e) throw new TypeError("Layer " + r.name + " does not support masking, but was passed an inputMask.");
          });
        }

        return null;
      }

      return t;
    }, t.prototype.addInboundNode = function (e, t, r, n, a, o, i) {
      void 0 === i && (i = null);
      var s = toList(e);
      t = toList(t), r = toList(r), n = toList(n), a = normalizeShapeList(a), o = normalizeShapeList(o);

      for (var u = [], l = [], p = [], c = 0, h = s; c < h.length; c++) {
        var d = h[c];
        u.push(d.sourceLayer), l.push(d.nodeIndex), p.push(d.tensorIndex);
      }

      new Node({
        outboundLayer: this,
        inboundLayers: u,
        nodeIndices: l,
        tensorIndices: p,
        inputTensors: s,
        outputTensors: t,
        inputMasks: r,
        outputMasks: n,
        inputShapes: a,
        outputShapes: o
      }, i);

      for (var f = 0; f < t.length; f++) {
        t[f].sourceLayer = this, t[f].nodeIndex = this.inboundNodes.length - 1, t[f].tensorIndex = f;
      }
    }, t.prototype.getConfig = function () {
      var e = {
        name: this.name,
        trainable: this.trainable
      };
      return null != this.batchInputShape && (e.batchInputShape = this.batchInputShape), null != this.dtype && (e.dtype = this.dtype), e;
    }, t.prototype.disposeWeights = function () {
      return this.weights.forEach(function (e) {
        return e.dispose();
      }), this.weights.length;
    }, t.prototype.assertNotDisposed = function () {
      if (0 === this._refCount) throw new Error("Layer '" + this.name + "' is already disposed.");
    }, t.prototype.dispose = function () {
      if (!this.built) throw new Error("Cannot dispose Layer " + this.name + " because it has not been built yet.");
      if (null === this._refCount) throw new Error("Cannot dispose Layer " + this.name + " because it has not been used yet.");
      this.assertNotDisposed();
      var e = 0;
      return 0 == --this._refCount && (e = this.disposeWeights()), {
        refCountAfterDispose: this._refCount,
        numDisposedVariables: e
      };
    }, t;
  }(serialization.Serializable);

  function collectInputShape(e) {
    for (var t = [], r = 0, n = e = toList(e); r < n.length; r++) {
      var a = n[r];
      t.push(a.shape);
    }

    return singletonOrArray(t);
  }

  function guessOutputDType(e) {
    return "float32";
  }

  function getSourceInputs(e, t, r) {
    if ((null == t || null != r && r > 0) && (t = e.sourceLayer, r = e.nodeIndex), 0 === t.inboundNodes.length) return [e];
    var n = t.inboundNodes[r];
    if (0 === n.inboundLayers.length) return n.inputTensors;

    for (var a = [], o = 0; o < n.inboundLayers.length; o++) {
      for (var i = 0, s = getSourceInputs(n.inputTensors[o], n.inboundLayers[o], n.nodeIndices[o]); i < s.length; i++) {
        var u = s[i];
        -1 === a.indexOf(u) && a.push(u);
      }
    }

    return a;
  }

  var ModelLoggingVerbosity,
      InputLayer = function (e) {
    function t(t) {
      var r = e.call(this, {
        dtype: t.dtype,
        name: null != t.name ? t.name : getUid("input").toString()
      }) || this;
      if (null == t.batchSize && (t.batchSize = null), null == t.sparse && (t.sparse = !1), r.trainable = !1, r.built = !0, r.sparse = t.sparse, null != t.inputShape && null != t.batchInputShape) throw new ValueError("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");
      var n = t.batchInputShape;

      if (null == n) {
        if (null == t.inputShape) throw new ValueError("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");
        n = [t.batchSize].concat(t.inputShape);
      } else if (null != t.batchSize) throw new ValueError("Cannot specify batchSize if batchInputShape isspecified when creating an InputLayer.");

      var a = t.dtype || "float32";
      r.batchInputShape = n, r.dtype = a, r.inputSpec = [{
        shape: n
      }];
      var o = new SymbolicTensor(r.dtype, r.batchInputShape, r, [], {}, r.name);
      return o.nodeIndex = 0, o.tensorIndex = 0, new Node({
        outboundLayer: r,
        inboundLayers: [],
        nodeIndices: [],
        tensorIndices: [],
        inputTensors: [o],
        outputTensors: [o],
        inputMasks: [null],
        outputMasks: [null],
        inputShapes: [n],
        outputShapes: [n]
      }), r;
    }

    return __extends$1(t, e), t.prototype.apply = function (e, t) {
      throw new ValueError("Cannot pass any input to an InputLayer's apply() method. InputLayer name: " + this.name);
    }, t.prototype.dispose = function () {
      return {
        refCountAfterDispose: this._refCount,
        numDisposedVariables: 0
      };
    }, t.prototype.getConfig = function () {
      return {
        batchInputShape: this.batchInputShape,
        dtype: this.dtype,
        sparse: this.sparse,
        name: this.name
      };
    }, t.className = "InputLayer", t;
  }(Layer);

  function Input(e) {
    if (null == e.batchShape && null == e.shape) throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");
    if (null != e.batchShape && null != e.shape) throw new ValueError("Please provide either a `shape` or `batchShape` argument to Input, but not both.");
    var t = e.batchShape;
    null != e.shape && null == t && (t = [null].concat(e.shape));
    var r = e.dtype;
    return null == r && (r = "float32"), new InputLayer({
      batchInputShape: t,
      name: e.name,
      dtype: r,
      sparse: e.sparse
    }).inboundNodes[0].outputTensors[0];
  }

  function resolveScalarsInLogs(e) {
    return __awaiter$1(this, void 0, void 0, function () {
      var t, r, n, a, o, i, s, u;
      return __generator$1(this, function (l) {
        switch (l.label) {
          case 0:
            if (null == e) return [2];

            for (a in t = [], r = [], n = [], e) {
              "number" != typeof (o = e[a]) && (i = o, t.push(i.data()), r.push(a), n.push(i));
            }

            return [4, Promise.all(t)];

          case 1:
            for (s = l.sent(), u = 0; u < s.length; ++u) {
              e[r[u]] = s[u][0];
            }

            return dispose(n), [2];
        }
      });
    });
  }

  function disposeTensorsInLogs(e) {
    if (null != e) for (var t in e) {
      var r = e[t];
      "number" != typeof r && r.dispose();
    }
  }

  serialization.registerClass(InputLayer), function (e) {
    e[e.SILENT = 0] = "SILENT", e[e.VERBOSE = 1] = "VERBOSE";
  }(ModelLoggingVerbosity || (ModelLoggingVerbosity = {}));

  var BaseCallback = function () {
    function e() {
      this.validationData = null;
    }

    return e.prototype.setParams = function (e) {
      this.params = e;
    }, e.prototype.onEpochBegin = function (e, t) {
      return __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (e) {
          return [2];
        });
      });
    }, e.prototype.onEpochEnd = function (e, t) {
      return __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (e) {
          return [2];
        });
      });
    }, e.prototype.onBatchBegin = function (e, t) {
      return __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (e) {
          return [2];
        });
      });
    }, e.prototype.onBatchEnd = function (e, t) {
      return __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (e) {
          return [2];
        });
      });
    }, e.prototype.onTrainBegin = function (e) {
      return __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (e) {
          return [2];
        });
      });
    }, e.prototype.onTrainEnd = function (e) {
      return __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (e) {
          return [2];
        });
      });
    }, e.prototype.setModel = function (e) {}, e;
  }(),
      CallbackList = function () {
    function e(e, t) {
      void 0 === t && (t = 10), null == e && (e = []), this.callbacks = e, this.queueLength = t;
    }

    return e.prototype.append = function (e) {
      this.callbacks.push(e);
    }, e.prototype.setParams = function (e) {
      for (var t = 0, r = this.callbacks; t < r.length; t++) {
        r[t].setParams(e);
      }
    }, e.prototype.setModel = function (e) {
      for (var t = 0, r = this.callbacks; t < r.length; t++) {
        r[t].setModel(e);
      }
    }, e.prototype.onEpochBegin = function (e, t) {
      return __awaiter$1(this, void 0, void 0, function () {
        var r, n;
        return __generator$1(this, function (a) {
          switch (a.label) {
            case 0:
              null == t && (t = {}), r = 0, n = this.callbacks, a.label = 1;

            case 1:
              return r < n.length ? [4, n[r].onEpochBegin(e, t)] : [3, 4];

            case 2:
              a.sent(), a.label = 3;

            case 3:
              return r++, [3, 1];

            case 4:
              return [2];
          }
        });
      });
    }, e.prototype.onEpochEnd = function (e, t) {
      return __awaiter$1(this, void 0, void 0, function () {
        var r, n;
        return __generator$1(this, function (a) {
          switch (a.label) {
            case 0:
              null == t && (t = {}), r = 0, n = this.callbacks, a.label = 1;

            case 1:
              return r < n.length ? [4, n[r].onEpochEnd(e, t)] : [3, 4];

            case 2:
              a.sent(), a.label = 3;

            case 3:
              return r++, [3, 1];

            case 4:
              return [2];
          }
        });
      });
    }, e.prototype.onBatchBegin = function (e, t) {
      return __awaiter$1(this, void 0, void 0, function () {
        var r, n;
        return __generator$1(this, function (a) {
          switch (a.label) {
            case 0:
              null == t && (t = {}), r = 0, n = this.callbacks, a.label = 1;

            case 1:
              return r < n.length ? [4, n[r].onBatchBegin(e, t)] : [3, 4];

            case 2:
              a.sent(), a.label = 3;

            case 3:
              return r++, [3, 1];

            case 4:
              return [2];
          }
        });
      });
    }, e.prototype.onBatchEnd = function (e, t) {
      return __awaiter$1(this, void 0, void 0, function () {
        var r, n;
        return __generator$1(this, function (a) {
          switch (a.label) {
            case 0:
              null == t && (t = {}), r = 0, n = this.callbacks, a.label = 1;

            case 1:
              return r < n.length ? [4, n[r].onBatchEnd(e, t)] : [3, 4];

            case 2:
              a.sent(), a.label = 3;

            case 3:
              return r++, [3, 1];

            case 4:
              return [2];
          }
        });
      });
    }, e.prototype.onTrainBegin = function (e) {
      return __awaiter$1(this, void 0, void 0, function () {
        var t, r;
        return __generator$1(this, function (n) {
          switch (n.label) {
            case 0:
              null == e && (e = {}), t = 0, r = this.callbacks, n.label = 1;

            case 1:
              return t < r.length ? [4, r[t].onTrainBegin(e)] : [3, 4];

            case 2:
              n.sent(), n.label = 3;

            case 3:
              return t++, [3, 1];

            case 4:
              return [2];
          }
        });
      });
    }, e.prototype.onTrainEnd = function (e) {
      return __awaiter$1(this, void 0, void 0, function () {
        var t, r;
        return __generator$1(this, function (n) {
          switch (n.label) {
            case 0:
              null == e && (e = {}), t = 0, r = this.callbacks, n.label = 1;

            case 1:
              return t < r.length ? [4, r[t].onTrainEnd(e)] : [3, 4];

            case 2:
              n.sent(), n.label = 3;

            case 3:
              return t++, [3, 1];

            case 4:
              return [2];
          }
        });
      });
    }, e;
  }(),
      ModelTrainingYielder = function () {
    function e(e) {
      this.yieldEvery = e, this.batchCount = 0, this.batchDurationsMillis = [], this.autoYieldEveryBatches = null, this.batchStartMillis = util.now();
    }

    return e.prototype.maybeYieldOnBatch = function (t) {
      return __awaiter$1(this, void 0, void 0, function () {
        var t, r;
        return __generator$1(this, function (n) {
          switch (n.label) {
            case 0:
              return "auto" !== this.yieldEvery ? [3, 5] : (this.batchCount++, null != this.autoYieldEveryBatches ? [3, 2] : (t = util.now(), [4, nextFrame()]));

            case 1:
              return n.sent(), this.batchCount > e.SKIP_FIRST_BATCHES && (this.batchDurationsMillis.push(t - this.batchStartMillis), this.batchDurationsMillis.length >= e.DECISION_BATCH_COUNT && (r = this.batchDurationsMillis.reduce(function (e, t) {
                return e + t;
              }) / this.batchDurationsMillis.length, this.autoYieldEveryBatches = Math.round(e.THRESHOLD_MILLIS / r), this.autoYieldEveryBatches < 1 && (this.autoYieldEveryBatches = 1))), this.batchStartMillis = util.now(), this.lastYieldBatchCount = this.batchCount, [3, 4];

            case 2:
              return this.batchCount - this.lastYieldBatchCount >= this.autoYieldEveryBatches ? [4, nextFrame()] : [3, 4];

            case 3:
              n.sent(), this.lastYieldBatchCount = this.batchCount, n.label = 4;

            case 4:
              return [3, 7];

            case 5:
              return "batch" !== this.yieldEvery ? [3, 7] : [4, nextFrame()];

            case 6:
              n.sent(), n.label = 7;

            case 7:
              return [2];
          }
        });
      });
    }, e.prototype.maybeYieldOnEpoch = function () {
      return __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (e) {
          switch (e.label) {
            case 0:
              return "epoch" !== this.yieldEvery ? [3, 2] : [4, nextFrame()];

            case 1:
              e.sent(), e.label = 2;

            case 2:
              return [2];
          }
        });
      });
    }, e.SKIP_FIRST_BATCHES = 1, e.DECISION_BATCH_COUNT = 2, e.THRESHOLD_MILLIS = 16, e;
  }(),
      BaseLogger = function (e) {
    function t(t) {
      var r = e.call(this) || this;
      return r.yieldEvery = t || "auto", r;
    }

    return __extends$1(t, e), t.prototype.onTrainBegin = function (e) {
      return __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (e) {
          return this.autoYielder = new ModelTrainingYielder(this.yieldEvery), [2];
        });
      });
    }, t.prototype.onEpochBegin = function (e) {
      return __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (e) {
          return this.seen = 0, this.totals = {}, [2];
        });
      });
    }, t.prototype.onBatchEnd = function (e, t) {
      return __awaiter$1(this, void 0, void 0, function () {
        var e,
            r,
            n,
            a,
            o = this;
        return __generator$1(this, function (i) {
          switch (i.label) {
            case 0:
              return [4, this.autoYielder.maybeYieldOnBatch(t)];

            case 1:
              for (a in i.sent(), null == t && (t = {}), e = null == t.size ? 0 : t.size, this.seen += e, r = function r(_r6) {
                var a = t[_r6];
                if ("number" == typeof a) n.totals.hasOwnProperty(_r6) || (n.totals[_r6] = 0), n.totals[_r6] = n.totals[_r6] + a * e;else {
                  var i = void 0;
                  _r6 in n.totals ? i = n.totals[_r6] : n.totals[_r6] = getScalar(0), n.totals[_r6] = tidy(function () {
                    return add(o.totals[_r6], mul(a, getScalar(e)));
                  }), null != i && i.dispose();
                }
              }, n = this, t) {
                r(a);
              }

              return [2];
          }
        });
      });
    }, t.prototype.onEpochEnd = function (e, t) {
      return __awaiter$1(this, void 0, void 0, function () {
        var e,
            r,
            n,
            a,
            o,
            i = this;
        return __generator$1(this, function (s) {
          switch (s.label) {
            case 0:
              return [4, this.autoYielder.maybeYieldOnEpoch()];

            case 1:
              if (s.sent(), null != t) for (e = function e(_e) {
                if (null == r.totals[_e]) return "continue";
                "number" == typeof r.totals[_e] ? t[_e] = r.totals[_e] / r.seen : tidy(function () {
                  t[_e] = mul(div(getScalar(1), getScalar(i.seen)), i.totals[_e]), i.totals[_e].dispose(), keep(t[_e]);
                });
              }, r = this, n = 0, a = this.params.metrics; n < a.length; n++) {
                o = a[n], e(o);
              }
              return [2];
          }
        });
      });
    }, t;
  }(BaseCallback),
      History = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }

    return __extends$1(t, e), t.prototype.onTrainBegin = function (e) {
      return __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (e) {
          return this.epoch = [], this.history = {}, [2];
        });
      });
    }, t.prototype.onEpochEnd = function (e, t) {
      return __awaiter$1(this, void 0, void 0, function () {
        var r;
        return __generator$1(this, function (n) {
          for (r in null == t && (t = {}), this.epoch.push(e), t) {
            null == this.history[r] && (this.history[r] = []), this.history[r].push(t[r]);
          }

          return [2];
        });
      });
    }, t.prototype.syncData = function () {
      return __awaiter$1(this, void 0, void 0, function () {
        var e, t, r, n, a, o, i, s, u;
        return __generator$1(this, function (l) {
          switch (l.label) {
            case 0:
              for (n in e = [], t = [], r = [], this.history) {
                for (a = this.history[n], o = 0; o < a.length; ++o) {
                  "number" != typeof a[o] && (i = a[o], e.push(i.data()), t.push(n), r.push(o));
                }
              }

              return [4, Promise.all(e)];

            case 1:
              for (s = l.sent(), u = 0; u < s.length; ++u) {
                this.history[t[u]][r[u]].dispose(), this.history[t[u]][r[u]] = s[u][0];
              }

              return [2];
          }
        });
      });
    }, t;
  }(BaseCallback),
      CustomCallback = function (e) {
    function t(t) {
      var r = e.call(this) || this;
      return r.trainBegin = t.onTrainBegin, r.trainEnd = t.onTrainEnd, r.epochBegin = t.onEpochBegin, r.epochEnd = t.onEpochEnd, r.batchBegin = t.onBatchBegin, r.batchEnd = t.onBatchEnd, r;
    }

    return __extends$1(t, e), t.prototype.onEpochBegin = function (e, t) {
      return __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (r) {
          switch (r.label) {
            case 0:
              return null == this.epochBegin ? [3, 3] : [4, resolveScalarsInLogs(t)];

            case 1:
              return r.sent(), [4, this.epochBegin(e, t)];

            case 2:
              r.sent(), r.label = 3;

            case 3:
              return [2];
          }
        });
      });
    }, t.prototype.onEpochEnd = function (e, t) {
      return __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (r) {
          switch (r.label) {
            case 0:
              return null == this.epochEnd ? [3, 3] : [4, resolveScalarsInLogs(t)];

            case 1:
              return r.sent(), [4, this.epochEnd(e, t)];

            case 2:
              r.sent(), r.label = 3;

            case 3:
              return [2];
          }
        });
      });
    }, t.prototype.onBatchBegin = function (e, t) {
      return __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (r) {
          switch (r.label) {
            case 0:
              return null == this.batchBegin ? [3, 3] : [4, resolveScalarsInLogs(t)];

            case 1:
              return r.sent(), [4, this.batchBegin(e, t)];

            case 2:
              r.sent(), r.label = 3;

            case 3:
              return [2];
          }
        });
      });
    }, t.prototype.onBatchEnd = function (e, t) {
      return __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (r) {
          switch (r.label) {
            case 0:
              return null == this.batchEnd ? [3, 3] : [4, resolveScalarsInLogs(t)];

            case 1:
              return r.sent(), [4, this.batchEnd(e, t)];

            case 2:
              r.sent(), r.label = 3;

            case 3:
              return [2];
          }
        });
      });
    }, t.prototype.onTrainBegin = function (e) {
      return __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (t) {
          switch (t.label) {
            case 0:
              return null == this.trainBegin ? [3, 3] : [4, resolveScalarsInLogs(e)];

            case 1:
              return t.sent(), [4, this.trainBegin(e)];

            case 2:
              t.sent(), t.label = 3;

            case 3:
              return [2];
          }
        });
      });
    }, t.prototype.onTrainEnd = function (e) {
      return __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (t) {
          switch (t.label) {
            case 0:
              return null == this.trainEnd ? [3, 3] : [4, resolveScalarsInLogs(e)];

            case 1:
              return t.sent(), [4, this.trainEnd(e)];

            case 2:
              t.sent(), t.label = 3;

            case 3:
              return [2];
          }
        });
      });
    }, t;
  }(BaseCallback);

  function standardizeCallbacks(e) {
    return null == e ? null : e instanceof BaseCallback ? [e] : Array.isArray(e) && e[0] instanceof BaseCallback ? e : toList(e).map(function (e) {
      return new CustomCallback(e);
    });
  }

  var CallbackConstructorRegistry = function () {
    function e() {}

    return e.registerCallbackConstructor = function (t, r) {
      util.assert(t >= 0 && Number.isInteger(t), "Verbosity level is expected to be an integer >= 0, but got " + t), e.checkForDuplicate(r), null == e.constructors[t] && (e.constructors[t] = []), e.constructors[t].push(r);
    }, e.checkForDuplicate = function (t) {
      for (var r in e.constructors) {
        e.constructors[+r].forEach(function (e) {
          if (e === t) throw new ValueError("Duplicate callback constructor.");
        });
      }
    }, e.clear = function () {
      e.constructors = {};
    }, e.createCallbacks = function (t) {
      var r = [];

      for (var n in e.constructors) {
        var a = +n;
        t >= a && r.push.apply(r, e.constructors[a]);
      }

      return r.map(function (e) {
        return new e();
      });
    }, e.constructors = {}, e;
  }();

  function configureCallbacks(e, t, r, n, a, o, i, s, u, l) {
    var p = new History(),
        c = [new BaseLogger(t)].concat(CallbackConstructorRegistry.createCallbacks(r));
    null != e && c.push.apply(c, e), c.push(p);
    var h = new CallbackList(c);
    return h.setParams({
      epochs: n,
      initialEpoch: a,
      samples: o,
      steps: i,
      batchSize: s,
      verbose: r,
      doValidation: u,
      metrics: l
    }), {
      callbackList: h,
      history: p
    };
  }

  function l2Normalize(e, t) {
    return tidy(function () {
      var r = sum$1(square$1(e), t, !0),
          n = mul(scalar(epsilon()), onesLike(e)),
          a = sqrt(maximum(r, n));
      return div(e, a);
    });
  }

  function meanSquaredError$1(e, t) {
    return tidy(function () {
      return mean(square$1(sub(t, e)), -1);
    });
  }

  function meanAbsoluteError(e, t) {
    return tidy(function () {
      return mean(abs(sub(t, e)), -1);
    });
  }

  function meanAbsolutePercentageError(e, t) {
    return tidy(function () {
      var r = sub(e, t),
          n = clipByValue(abs(e), epsilon(), Number.MAX_VALUE),
          a = abs(div(r, n));
      return mul(getScalar(100), mean(a, -1));
    });
  }

  function meanSquaredLogarithmicError(e, t) {
    return tidy(function () {
      var r = getScalar(1),
          n = clipByValue(t, epsilon(), Number.MAX_VALUE),
          a = log$1(add(r, n)),
          o = clipByValue(e, epsilon(), Number.MAX_VALUE),
          i = log$1(add(r, o));
      return mean(square$1(sub(a, i)), -1);
    });
  }

  function squaredHinge(e, t) {
    return tidy(function () {
      var r = getScalar(0),
          n = getScalar(1),
          a = maximum(r, sub(n, mul(e, t)));
      return mean(square$1(a), -1);
    });
  }

  function hinge(e, t) {
    return tidy(function () {
      var r = getScalar(0),
          n = getScalar(1),
          a = maximum(r, sub(n, mul(e, t)));
      return mean(a, -1);
    });
  }

  function categoricalHinge(e, t) {
    return tidy(function () {
      var r = getScalar(0),
          n = getScalar(1),
          a = sum$1(mul(e, t), -1),
          o = max(mul(sub(n, e), t), -1);
      return maximum(r, add(n, sub(o, a)));
    });
  }

  function logcosh(e, t) {
    return tidy(function () {
      var r = getScalar(Math.log(2)),
          n = sub(t, e),
          a = sub(add(n, softplus(mul(getScalar(-2), n))), r);
      return mean(a, -1);
    });
  }

  function categoricalCrossentropy(e, t, r) {
    return void 0 === r && (r = !1), tidy(function () {
      if (r) t = softmax(t);else {
        var n = sum$1(t, t.shape.length - 1, !0);
        t = div(t, n);
      }
      return t = clipByValue(t, epsilon(), 1 - epsilon()), neg(sum$1(mul(e.toFloat(), log$1(t)), t.shape.length - 1));
    });
  }

  function sparseCategoricalCrossentropy(e, t) {
    return tidy(function () {
      var r = floor(flatten$1(e)).toInt(),
          n = (t = clipByValue(t, epsilon(), 1 - epsilon())).shape;
      return categoricalCrossentropy(oneHot(r, n[n.length - 1]).reshape(n), t, !1);
    });
  }

  function sigmoidCrossEntropyWithLogits(e, t) {
    if (!util.arraysEqual(e.shape, t.shape)) throw new ValueError("logits and labels must have the same shape, but got shapes " + JSON.stringify(e.shape) + " and " + JSON.stringify(t.shape));
    return tidy(function () {
      var r = t.relu(),
          n = t.abs().neg();
      return r.sub(t.mul(e)).add(n.exp().log1p());
    });
  }

  function binaryCrossentropy(e, t) {
    return tidy(function () {
      var r;
      return r = clipByValue(t, epsilon(), 1 - epsilon()), r = log$1(div(r, sub(getScalar(1), r))), mean(sigmoidCrossEntropyWithLogits(e, r), -1);
    });
  }

  function kullbackLeiblerDivergence(e, t) {
    return tidy(function () {
      var r = clipByValue(e, epsilon(), 1),
          n = clipByValue(t, epsilon(), 1);
      return sum$1(mul(e, log$1(div(r, n))), -1);
    });
  }

  function poisson(e, t) {
    return tidy(function () {
      var r = log$1(add(getScalar(epsilon()), t));
      return mean(sub(t, mul(e, r)), -1);
    });
  }

  function cosineProximity(e, t) {
    return tidy(function () {
      var r = l2Normalize(e, -1),
          n = l2Normalize(t, -1),
          a = mul(r, n);
      return neg(sum$1(a, -1));
    });
  }

  function get(e) {
    var t = {
      meanSquaredError: meanSquaredError$1,
      meanAbsoluteError: meanAbsoluteError,
      meanAbsolutePercentageError: meanAbsolutePercentageError,
      meanSquaredLogarithmicError: meanSquaredLogarithmicError,
      squaredHinge: squaredHinge,
      hinge: hinge,
      categoricalHinge: categoricalHinge,
      logcosh: logcosh,
      categoricalCrossentropy: categoricalCrossentropy,
      sparseCategoricalCrossentropy: sparseCategoricalCrossentropy,
      binaryCrossentropy: binaryCrossentropy,
      kullbackLeiblerDivergence: kullbackLeiblerDivergence,
      poisson: poisson,
      cosineProximity: cosineProximity
    };

    if ("string" == typeof e) {
      if (e in t) return t[e];
      var r = "Unknown loss " + e;
      throw e.toLowerCase().includes("softmaxcrossentropy") && (r = "Unknown loss " + e + '. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy'), new ValueError(r);
    }

    return e;
  }

  function binaryAccuracy(e, t) {
    return tidy(function () {
      var r = mul(getScalar(.5), onesLike(t)),
          n = cast$1(greater(t, r), e.dtype);
      return mean(equal(e, n), -1);
    });
  }

  function categoricalAccuracy(e, t) {
    return tidy(function () {
      return cast$1(equal(argMax(e, -1), argMax(t, -1)), "float32");
    });
  }

  function truePositives(e, t) {
    return tidy(function () {
      var r = getScalar(1);
      return logicalAnd(e.equal(r), t.equal(r)).sum().cast("float32");
    });
  }

  function falseNegatives(e, t) {
    return tidy(function () {
      var r = getScalar(1),
          n = getScalar(0);
      return logicalAnd(e.equal(r), t.equal(n)).sum().cast("float32");
    });
  }

  function falsePositives(e, t) {
    return tidy(function () {
      var r = getScalar(1),
          n = getScalar(0);
      return logicalAnd(e.equal(n), t.equal(r)).sum().cast("float32");
    });
  }

  function precision(e, t) {
    return tidy(function () {
      var r = getScalar(0),
          n = truePositives(e, t),
          a = falsePositives(e, t),
          o = n.add(a);
      return where(greater(o, r), n.div(o), r).cast("float32");
    });
  }

  function recall(e, t) {
    return tidy(function () {
      var r = getScalar(0),
          n = truePositives(e, t),
          a = falseNegatives(e, t),
          o = n.add(a);
      return where(greater(o, r), n.div(o), r).cast("float32");
    });
  }

  function binaryCrossentropy$1(e, t) {
    return binaryCrossentropy(e, t);
  }

  function sparseCategoricalAccuracy(e, t) {
    return e.rank === t.rank && (e = e.squeeze([e.rank - 1])), (t = t.argMax(-1)).dtype !== e.dtype && (t = t.asType(e.dtype)), equal(e, t).asType("float32");
  }

  var mse$1 = meanSquaredError$1,
      MSE$1 = meanSquaredError$1,
      mae$1 = meanAbsoluteError,
      MAE$1 = meanAbsoluteError,
      mape$1 = meanAbsolutePercentageError,
      MAPE$1 = meanAbsolutePercentageError,
      categoricalCrossentropy$1 = categoricalCrossentropy,
      cosine$1 = cosineProximity,
      sparseCategoricalCrossentropy$1 = sparseCategoricalCrossentropy;

  function get$1(e) {
    var t = {
      binaryAccuracy: binaryAccuracy,
      categoricalAccuracy: categoricalAccuracy,
      precision: precision,
      categoricalCrossentropy: categoricalCrossentropy$1,
      sparseCategoricalCrossentropy: sparseCategoricalCrossentropy$1,
      mse: mse$1,
      MSE: MSE$1,
      mae: mae$1,
      MAE: MAE$1,
      mape: mape$1,
      MAPE: MAPE$1,
      cosine: cosine$1
    };
    if ("string" == typeof e && e in t) return t[e];
    if ("string" != typeof e && null != e) return e;
    throw new ValueError("Unknown metric " + e);
  }

  function getOptimizer(e) {
    var t = {
      Adagrad: function Adagrad() {
        return train.adagrad(.01);
      },
      Adadelta: function Adadelta() {
        return train.adadelta(1, .95, epsilon());
      },
      Adam: function Adam() {
        return train.adam(.001, .9, .999, epsilon());
      },
      Adamax: function Adamax() {
        return train.adamax(.002, .9, .999, epsilon(), 0);
      },
      RMSProp: function RMSProp() {
        return train.rmsprop(.001, .9, 0, epsilon());
      },
      SGD: function SGD() {
        return train.sgd(.01);
      }
    };
    if (t.adagrad = t.Adagrad, t.adadelta = t.Adadelta, t.adam = t.Adam, t.adamax = t.Adamax, t.rmsprop = t.RMSProp, t.sgd = t.SGD, e in t) return t[e]();
    throw new ValueError("Unknown Optimizer " + e);
  }

  function printSummary(e, t, r, n) {
    void 0 === n && (n = console.log);
    var a,
        o = isModelSequentialLike(e),
        i = ["Layer (type)", "Output shape", "Param #"];
    if (o ? (t = t || 65, r = r || [.45, .85, 1]) : (t = t || 98, r = r || [.33, .55, .67, 1]), r[r.length - 1] <= 1 && (r = r.map(function (e) {
      return Math.floor(t * e);
    })), !o) for (var s in i.push("Receives inputs"), a = [], e.nodesByDepth) {
      a.push.apply(a, e.nodesByDepth[s]);
    }
    n("_".repeat(t)), printRow(i, r, n), n("=".repeat(t));

    for (var u = e.layers, l = 0; l < u.length; ++l) {
      o ? printLayerSummary(u[l], r, n) : printLayerSummaryWithConnections(u[l], r, a, n), n((l === u.length - 1 ? "=" : "_").repeat(t));
    }

    e.checkTrainableWeightsConsistency();
    var p = countTrainableParams(e),
        c = countParamsInWeights(e.nonTrainableWeights);
    n("Total params: " + (p + c)), n("Trainable params: " + p), n("Non-trainable params: " + c), n("_".repeat(t));
  }

  function countTrainableParams(e) {
    return null != e.collectedTrainableWeights ? countParamsInWeights(e.collectedTrainableWeights) : countParamsInWeights(e.trainableWeights);
  }

  function isModelSequentialLike(e) {
    var t = !0,
        r = [],
        n = [];

    for (var a in e.nodesByDepth) {
      r.push(e.nodesByDepth[a]);
    }

    for (var o = 0, i = r; o < i.length; o++) {
      var s = i[o];

      if (s.length > 1 || 1 === s.length && s[0].inboundLayers.length > 1) {
        t = !1;
        break;
      }

      n.push.apply(n, s);
    }

    if (t) for (var u = 0, l = e.layers; u < l.length; u++) {
      for (var p = !1, c = 0, h = l[u].inboundNodes; c < h.length; c++) {
        var d = h[c];

        if (-1 !== n.indexOf(d)) {
          if (p) {
            t = !1;
            break;
          }

          p = !0;
        }
      }

      if (!t) break;
    }
    return t;
  }

  function printRow(e, t, r) {
    void 0 === r && (r = console.log);

    for (var n = "", a = 0; a < e.length; ++a) {
      a > 0 && (n = n.slice(0, n.length - 1) + " "), n = (n += e[a]).slice(0, t[a]), n += " ".repeat(t[a] - n.length);
    }

    r(n);
  }

  function printLayerSummary(e, t, r) {
    var n;

    try {
      n = JSON.stringify(e.outputShape);
    } catch (e) {
      n = "multiple";
    }

    printRow([e.name + " (" + e.getClassName() + ")", n, e.countParams().toString()], t, r);
  }

  function printLayerSummaryWithConnections(e, t, r, n) {
    var a;

    try {
      a = JSON.stringify(e.outputShape);
    } catch (e) {
      a = "multiple";
    }

    for (var o = [], i = 0, s = e.inboundNodes; i < s.length; i++) {
      var u = s[i];
      if (!(null != r && r.length > 0 && -1 === r.indexOf(u))) for (var l = 0; l < u.inboundLayers.length; ++l) {
        var p = u.inboundLayers[l].name,
            c = u.nodeIndices[l],
            h = u.tensorIndices[l];
        o.push(p + "[" + c + "][" + h + "]");
      }
    }

    var d = e.name,
        f = e.getClassName(),
        m = 0 === o.length ? "" : o[0];

    for (printRow([d + " (" + f + ")", a, e.countParams().toString(), m], t, n), l = 1; l < o.length; ++l) {
      printRow(["", "", "", o[l]], t, n);
    }
  }

  function deserialize(e, t, r) {
    return void 0 === t && (t = {}), void 0 === r && (r = !1), deserializeKerasObject(e, serialization.SerializationMap.getMap().classNameMap, t, "layer", r);
  }

  function isArrayItemInputOrOutputName(e, t, r) {
    return ("inboundNodes" === e || "outputLayers" === e || "inputLayers" === e) && 0 === t && "string" == typeof r;
  }

  function convertPythonicToTs(e, t) {
    if (null === e) return null;
    if ("string" == typeof e) return toCamelCase(e);
    if ("number" == typeof e || "boolean" == typeof e) return e;

    if (e instanceof Array) {
      for (var r = [], n = e.length, a = 0; a < n; ++a) {
        var o = e[a];
        isArrayItemInputOrOutputName(t, a, o) ? r.push(o) : r.push(convertPythonicToTs(o, t));
      }

      return r;
    }

    for (var i = {}, s = 0, u = Object.keys(e); s < u.length; s++) {
      var l = u[s],
          p = e[l];
      if ("name" === l && "string" == typeof p) i[l] = p;else {
        var c = toCamelCase(l);
        i[c] = convertPythonicToTs(p, c);
      }
    }

    return i;
  }

  function convertTsToPythonic(e, t) {
    if (null === e || void 0 === e) return null;
    if ("string" == typeof e) return toSnakeCase(e);
    if ("number" == typeof e || "boolean" == typeof e) return e;

    if (e instanceof Array) {
      for (var r = [], n = e.length, a = 0; a < n; ++a) {
        var o = e[a];
        isArrayItemInputOrOutputName(t, a, o) ? r.push(o) : r.push(convertTsToPythonic(o, t));
      }

      return r;
    }

    for (var i = {}, s = 0, u = Object.keys(e); s < u.length; s++) {
      var l = u[s],
          p = e[l];
      i[toSnakeCase(l)] = "name" !== l && "className" !== l || "string" != typeof p ? convertTsToPythonic(p, l) : p;
    }

    return i;
  }

  var version$1 = "0.10.3";

  function assertFeedCompatibility(e, t) {
    if (null == e.dtype || e.dtype === t.dtype) return t;

    try {
      return cast(t, e.dtype);
    } catch (r) {
      throw new ValueError("The dtype of the feed (" + t.dtype + ") can not be cast to the dtype of the key '" + e.name + "' (" + e.dtype + ").");
    }
  }

  var FeedDict = function () {
    function e(t) {
      if (this.id2Value = {}, this.id2Mask = {}, this.name2Id = {}, t instanceof e) for (var r in t.id2Value) {
        this.id2Value[r] = t.id2Value[r], r in t.id2Mask && (this.id2Mask[r] = t.id2Mask[r]);
      } else {
        if (null == t) return;

        for (var n = 0, a = t; n < a.length; n++) {
          var o = a[n];
          this.add(o.key, o.value);
        }
      }
    }

    return e.prototype.add = function (e, t, r) {
      if (null != this.id2Value[e.id]) throw new ValueError("Duplicate key: name=" + e.name + ", id=" + e.id);
      return this.id2Value[e.id] = assertFeedCompatibility(e, t), this.name2Id[e.name] = e.id, null != r && (this.id2Mask[e.id] = r), this;
    }, e.prototype.addFeed = function (e) {
      this.add(e.key, e.value);
    }, e.prototype.hasKey = function (e) {
      return null != this.id2Value[e.id];
    }, e.prototype.names = function () {
      return Object.keys(this.name2Id);
    }, e.prototype.getValue = function (e) {
      if (e instanceof SymbolicTensor) {
        if (null == this.id2Value[e.id]) throw new ValueError("Nonexistent key: " + e.name);
        return this.id2Value[e.id];
      }

      var t = this.name2Id[e];
      if (null == t) throw new ValueError("Feed dict has no SymbolicTensor name: " + e);
      return this.id2Value[t];
    }, e.prototype.getMask = function (e) {
      if (e instanceof SymbolicTensor) {
        if (null == this.id2Value[e.id]) throw new ValueError("Nonexistent key: " + e.name);
        return this.id2Mask[e.id];
      }

      var t = this.name2Id[e];
      if (null == t) throw new ValueError("Feed dict has no SymbolicTensor name: " + e);
      return this.id2Mask[t];
    }, e.prototype.disposeMasks = function () {
      null != this.id2Mask && dispose(this.id2Mask);
    }, e;
  }(),
      cachedSorted = {},
      cachedRecipientCounts = {};

  function execute(e, t, r, n) {
    for (var a = null != r && r.training, o = Array.isArray(e), i = o ? e : [e], s = i.map(function (e) {
      return e.name;
    }), u = [], l = t.names(), p = 0, c = s; p < c.length; p++) {
      var h = c[p];
      -1 !== l.indexOf(h) ? u.push(t.getValue(h)) : u.push(null);
    }

    null != n && (n.maxNumTensors = -1 / 0, n.minNumTensors = 1 / 0);
    var d,
        f,
        m = s.join(",") + "|" + t.names().join(",");

    if (null == cachedSorted[m]) {
      var g = getTopologicalSortAndRecipientCounts(i, t);
      d = g.sorted, f = g.recipientCounts, cachedSorted[m] = d, cachedRecipientCounts[m] = f;
    }

    d = cachedSorted[m], f = {}, a || Object.assign(f, cachedRecipientCounts[m]);

    for (var y = new FeedDict(t), v = 0; v < d.length; ++v) {
      if (null != n) {
        var x = memory().numTensors;
        x > n.maxNumTensors && (n.maxNumTensors = x), x < n.minNumTensors && (n.minNumTensors = x);
      }

      var b = d[v],
          w = b.sourceLayer;

      if (!(w instanceof InputLayer)) {
        for (var N = [], S = [], T = [], E = !1, _ = 0, I = b.inputs; _ < I.length; _++) {
          var A = I[_],
              C = y.getValue(A),
              P = y.getMask(A);
          N.push(C), S.push(P), null != P && (E = !0), a || (f[A.name]--, 0 !== f[A.name] || t.hasKey(A) || -1 !== s.indexOf(A.name) || C.isDisposed || T.push(C));
        }

        E && ((r = r || {}).mask = S[0]);
        var k = toList(w.apply(N, r)),
            O = null;
        w.supportsMasking && (O = w.computeMask(N, S));

        for (var D = getNodeOutputs(b), R = Array.isArray(D) ? D : [D], M = 0; M < R.length; ++M) {
          y.hasKey(R[M]) || y.add(R[M], k[M], Array.isArray(O) ? O[0] : O);
          var L = s.indexOf(R[M].name);
          -1 !== L && (u[L] = k[M]);
        }

        a || dispose(T);
      }
    }

    return y.disposeMasks(), o ? u : u[0];
  }

  function getTopologicalSortAndRecipientCounts(e, t) {
    util.assert(null != e && e.length > 0, "Exepcted at least one fetch, got none");
    var r = [],
        n = {};

    if (1 === e.length) {
      var a = getTopologicalSortAndRecipientCountsForOneFetch(e[0], t);
      r = a.sorted, n = a.recipientMap;
    } else for (var o = new Set(), i = 0, s = e; i < s.length; i++) {
      for (var u = getTopologicalSortAndRecipientCountsForOneFetch(s[i], t), l = u.sorted, p = u.recipientMap, c = 0, h = l; c < h.length; c++) {
        var d = h[c];
        o.has(d.name) || (r.push(d), o.add(d.name));
      }

      var f = function f(e) {
        null == n[e] && (n[e] = new Set()), p[e].forEach(function (t) {
          return n[e].add(t);
        });
      };

      for (var m in p) {
        f(m);
      }
    }

    return {
      sorted: r,
      recipientCounts: recipientMap2Counts(n)
    };
  }

  function recipientMap2Counts(e) {
    var t = {};

    for (var r in e) {
      t[r] = e[r].size;
    }

    return t;
  }

  function getTopologicalSortAndRecipientCountsForOneFetch(e, t) {
    for (var r = new Set(), n = [], a = {}, o = 0, i = t.names(); o < i.length; o++) {
      var s = i[o];
      r.add(s);
    }

    var u = [],
        l = [];

    for (u.push(e); u.length > 0;) {
      var p = u[u.length - 1];
      if (r.has(p.name)) u.pop();else {
        var c = l[l.length - 1] === u.length - 1;
        if (0 === p.inputs.length || c) u.pop(), n.push(p), r.add(p.name), c && l.pop();else {
          l.push(u.length - 1);

          for (var h = 0, d = p.inputs; h < d.length; h++) {
            var f = d[h];
            null == a[f.name] && (a[f.name] = new Set()), a[f.name].add(p.name), r.has(f.name) || u.push(f);
          }
        }
      }
    }

    return {
      sorted: n,
      recipientMap: a
    };
  }

  function getNodeOutputs(e) {
    var t;
    if (1 === e.sourceLayer.inboundNodes.length) t = e.sourceLayer.output;else {
      for (var r = null, n = 0; n < e.sourceLayer.inboundNodes.length; ++n) {
        for (var a = 0, o = e.sourceLayer.inboundNodes[n].outputTensors; a < o.length; a++) {
          if (o[a].id === e.id) {
            r = n;
            break;
          }
        }
      }

      t = e.sourceLayer.getOutputAt(r);
    }
    return t;
  }

  function preprocessWeightsForLoading(e, t, r, n) {
    if (!r.startsWith("2.")) throw new ValueError("Unsupported Keras version in weights being loaded: " + r);
    return t;
  }

  function loadTensor(e, t, r) {
    var n = stringToDType(e);
    return Tensor.make(t, {
      values: 0 === t.length ? r : util.flatten(r)
    }, n);
  }

  function loadWeightsFromJson(e, t, r) {
    void 0 === r && (r = !1);

    for (var n = e.keras_version, a = e.backend, o = t.map(function (e) {
      return e.name;
    }), i = {}, s = 0, u = t; s < u.length; s++) {
      null != (x = u[s]).name && (null == i[x.name] && (i[x.name] = []), i[x.name].push(x));
    }

    for (var l = e.weights, p = [], c = 0; c < o.length; ++c) {
      var h = o[c],
          d = l[h];
      null == d && (d = []);

      for (var f = [], m = 0; m < d.length; ++m) {
        var g = d[m];
        f.push(new LayerVariable(loadTensor(g.dtype, g.shape, g.value)));
      }

      for (var y = 0, v = i[h]; y < v.length; y++) {
        var x,
            b = (x = v[y]).weights;

        if ((f = preprocessWeightsForLoading(x, f, n, a)).length !== b.length) {
          if (!r) throw new ValueError("Layer #" + c + ' (named "' + x.name + '") expects ' + b.length + " weight(s), but the saved weights have " + f.length + " element(s).");
          console.warn("Skipping loading of weights of layer " + x.name + " due to mismatch in number of weights: (" + f.length + " vs " + b.length + ").");
        }

        for (var w = 0; w < f.length; ++w) {
          !r || util.arraysEqual(b[w].shape, f[w].shape) ? p.push([b[w], f[w].read()]) : console.warn("Skipping loading of weights for layer " + x.name + " due to mismatch in shape (" + b[w].shape + " vs " + f[w].shape + ")");
        }
      }
    }

    batchSetValue(p);
  }

  function loadWeightsFromNamedTensorMap(e, t, r) {
    void 0 === r && (r = !0);

    for (var n = {}, a = 0, o = 0, i = t; o < i.length; o++) {
      for (var s = 0, u = i[o].weights; s < u.length; s++) {
        var l = u[s];
        if (null != n[l.originalName]) throw new ValueError("Duplicate weight name: " + l.originalName);
        n[l.originalName] = l, a++;
      }
    }

    var p = [];

    for (var c in e) {
      if (null != n[c]) p.push([n[c], e[c]]);else if (r) throw new ValueError("Provided weight data has no target variable: " + c);
      delete n[c];
    }

    if (r) {
      var h = [];

      for (var d in n) {
        h.push(d);
      }

      if (h.length > 0) throw new ValueError(h.length + " of " + a + " weights are not set: " + h);
    }

    batchSetValue(p);
  }

  var Container = function (e) {
    function t(r) {
      var n = e.call(this, {}) || this;

      if (n.containerNodes = new Set(), n.name = r.name, null == n.name) {
        var a = n.getClassName().toLowerCase();
        n.name = getUid(a);
      }

      if (n.supportsMasking = !1, n.trainable = !0, n.updatable = !0, Array.isArray(r.inputs) ? n.inputs = r.inputs.slice() : n.inputs = [r.inputs], Array.isArray(r.outputs) ? n.outputs = r.outputs.slice() : n.outputs = [r.outputs], unique(n.inputs).length !== n.inputs.length) throw new ValueError("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: " + n.inputs.map(function (e) {
        return e.name;
      }));
      unique(n.outputs).length !== n.outputs.length && console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: " + n.outputs.map(function (e) {
        return e.name;
      })), n.inputLayers = [], n.inputLayersNodeIndices = [], n.inputLayersTensorIndices = [], n.outputLayers = [], n.outputLayersNodeIndices = [], n.outputLayersTensorIndices = [], n.layers = [];

      for (var o = 0, i = n.outputs; o < i.length; o++) {
        var s = (_ = i[o]).sourceLayer,
            u = _.nodeIndex,
            l = _.tensorIndex;
        n.outputLayers.push(s), n.outputLayersNodeIndices.push(u), n.outputLayersTensorIndices.push(l);
      }

      for (var p = 0, c = n.inputs; p < c.length; p++) {
        s = (_ = c[p]).sourceLayer, u = _.nodeIndex, l = _.tensorIndex, assert$1(0 === u, "input layer has >1 nodes"), assert$1(0 === l, "input layer has >1 tensors"), n.inputLayers.push(s), n.inputLayersNodeIndices.push(u), n.inputLayersTensorIndices.push(l);
      }

      n.inputNames = [], n.outputNames = [], n.feedInputShapes = [], n.feedInputNames = [], n.feedOutputNames = [];

      for (var h = 0; h < n.inputLayers.length; h++) {
        if (!((s = n.inputLayers[h]) instanceof InputLayer)) throw new TypeError("Input layers to a Model must be InputLayer objects. Received inputs: " + r.inputs + ". Input " + h + " (0-based) originates from layer type " + s.getClassName() + ".");
        n.inputNames.push(s.name), n.feedInputShapes.push(s.batchInputShape), n.feedInputNames.push(s.name);
      }

      for (var d = 0, f = n.outputLayers; d < f.length; d++) {
        s = f[d], n.outputNames.push(s.name);
      }

      n.internalInputShapes = n.inputs.map(function (e) {
        return e.shape;
      }), n.internalOutputShapes = n.outputs.map(function (e) {
        return e.shape;
      });

      for (var m = {}, g = {}, y = {}, v = {}, x = {}, b = [], w = function w(e, r, a, o, i, s) {
        null != o && null != i && null != s || (o = e.sourceLayer, i = e.nodeIndex, s = e.tensorIndex);
        var u = o.inboundNodes[i];
        if (-1 !== a.indexOf(u)) throw new RuntimeError("The tensor " + e.name + ' at layer "' + o.name + '" is part of a cycle.');

        if (-1 === r.indexOf(u)) {
          n.containerNodes.add(t.nodeKey(o, i)), (o.id in x) || (x[o.id] = Object.keys(x).length), -1 === a.indexOf(u) && a.push(u);

          for (var l = u.inboundLayers.length, p = 0; p < l; p++) {
            var c = u.inputTensors[p],
                h = u.inboundLayers[p],
                d = u.nodeIndices[p],
                f = u.tensorIndices[p];
            w(c, r, a, h, d, f);
          }

          for (r.push(u); a.indexOf(u) >= 0;) {
            a.splice(a.indexOf(u), 1);
          }

          b.push(u);
        }
      }, N = [], S = [], T = 0, E = n.outputs; T < E.length; T++) {
        var _ = E[T];
        w(_, N, S);
      }

      for (var I = 0, A = b.slice().reverse(); I < A.length; I++) {
        g[(Y = A[I]).id] = Y, Y.id in m || (m[Y.id] = 0);
        var C = m[Y.id],
            P = null == y[Y.outboundLayer.id] ? 0 : y[Y.outboundLayer.id];

        for (C = Math.max(C, P), y[Y.outboundLayer.id] = C, v[Y.outboundLayer.id] = Y.outboundLayer, m[Y.id] = C, h = 0; h < Y.inboundLayers.length; h++) {
          var k = Y.inboundLayers[h],
              O = (u = Y.nodeIndices[h], k.inboundNodes[u]),
              D = null == m[O.id] ? 0 : m[O.id];
          m[O.id] = Math.max(C + 1, D), g[O.id] = O;
        }
      }

      var R = {};

      for (var M in m) {
        (C = m[M]) in R || (R[C] = []), R[C].push(g[M]);
      }

      var L = {};

      for (var z in y) {
        (C = y[z]) in L || (L[C] = []), L[C].push(v[z]);
      }

      var F = Object.keys(L).map(function (e) {
        return parseInt(e, 10);
      }).sort(reverseNumberCompare);
      n.layers = [];

      for (var V = 0, B = F; V < B.length; V++) {
        var $ = L[C = B[V]];
        $.sort(function (e, t) {
          var r = x[e.id],
              n = x[t.id];
          return r < n ? -1 : r > n ? 1 : 0;
        });

        for (var U = 0, W = $; U < W.length; U++) {
          s = W[U], n.layers.push(s);
        }
      }

      n.layersByDepth = L, F = Object.keys(R).map(function (e) {
        return parseInt(e, 10);
      }).sort(reverseNumberCompare);

      for (var G = n.inputs.slice(), q = [], H = 0, j = F; H < j.length; H++) {
        for (var K = 0, X = R[C = j[H]]; K < X.length; K++) {
          var Y;

          if (null != (s = (Y = X[K]).outboundLayer)) {
            for (var Z = 0, J = Y.inputTensors; Z < J.length; Z++) {
              if (_ = J[Z], -1 === G.indexOf(_)) throw new RuntimeError("Graph disconnected: cannot obtain value for tensor " + _ + ' at layer "' + s.name + '". The following previous layers were accessed without issue: ' + q);
            }

            for (var Q = 0, ee = Y.outputTensors; Q < ee.length; Q++) {
              _ = ee[Q], G.push(_);
            }

            q.push(s.name);
          }
        }
      }

      n.nodesByDepth = R;

      for (var te = n.layers.map(function (e) {
        return e.name;
      }), re = function re(e) {
        var t = te.filter(function (t) {
          return t === e;
        }).length;
        if (1 !== t) throw new RuntimeError('The name "' + e + '" is used ' + t + " times in the model. All layer names should be unique. Layer names: " + JSON.stringify(te));
      }, ne = 0, ae = te; ne < ae.length; ne++) {
        re(ae[ne]);
      }

      return n.outboundNodes = [], n.inboundNodes = [], new Node({
        outboundLayer: n,
        inboundLayers: [],
        nodeIndices: [],
        tensorIndices: [],
        inputTensors: n.inputs,
        outputTensors: n.outputs,
        inputMasks: n.inputs.map(function (e) {
          return null;
        }),
        outputMasks: n.outputs.map(function (e) {
          return null;
        }),
        inputShapes: n.inputs.map(function (e) {
          return e.shape;
        }),
        outputShapes: n.outputs.map(function (e) {
          return e.shape;
        })
      }), n.built = !0, n._refCount = 1, n;
    }

    return __extends$1(t, e), t.prototype.assertNotDisposed = function () {
      if (0 === this._refCount) throw new Error("Container '" + this.name + "' is already disposed.");
    }, t.prototype.dispose = function () {
      this.assertNotDisposed();
      var e = {
        refCountAfterDispose: null,
        numDisposedVariables: 0
      };
      if (0 == --this._refCount) for (var t = 0, r = this.layers; t < r.length; t++) {
        var n = r[t];
        e.numDisposedVariables += n.dispose().numDisposedVariables;
      }
      return e.refCountAfterDispose = this._refCount, e;
    }, Object.defineProperty(t.prototype, "trainableWeights", {
      get: function get() {
        if (this._trainableWeights.length > 0) throw new ValueError("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");
        if (!this.trainable) return [];

        for (var e = [], t = 0, r = this.layers; t < r.length; t++) {
          var n = r[t];
          e = e.concat(n.trainableWeights);
        }

        return e;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "nonTrainableWeights", {
      get: function get() {
        for (var e = [], t = 0, r = this.layers; t < r.length; t++) {
          var n = r[t];
          e.push.apply(e, n.nonTrainableWeights);
        }

        if (!this.trainable) {
          for (var a = [], o = 0, i = this.layers; o < i.length; o++) {
            n = i[o], a.push.apply(a, n.trainableWeights);
          }

          return a.concat(e);
        }

        return e;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "weights", {
      get: function get() {
        return this.trainableWeights.concat(this.nonTrainableWeights);
      },
      enumerable: !0,
      configurable: !0
    }), t.prototype.loadWeights = function (e, t, r, n) {
      void 0 === t && (t = !1), void 0 === r && (r = !1), void 0 === n && (n = !0), r ? loadWeightsFromNamedTensorMap(e, this.layers, n) : loadWeightsFromJson(e, this.layers, t);
    }, t.prototype.updatedConfig = function () {
      var e = this.getConfig();
      return {
        className: this.getClassName(),
        config: e,
        kerasVersion: "tfjs-layers " + version$1,
        backend: "TensorFlow.js"
      };
    }, t.prototype.toJSON = function (e, t) {
      void 0 === t && (t = !0);
      var r = convertTsToPythonic(this.updatedConfig());
      return t ? JSON.stringify(r) : r;
    }, t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        e = toList(e);

        for (var n = new FeedDict(), a = 0; a < r.inputs.length; ++a) {
          n.add(r.inputs[a], e[a]);
        }

        return execute(r.outputs, n, t);
      });
    }, t.prototype.computeMask = function (e, t) {
      var r = this;
      return tidy(function () {
        var n;
        return e = toList(e), n = null == t ? pyListRepeat(null, e.length) : toList(t), r.runInternalGraph(e, n)[1];
      });
    }, t.prototype.computeOutputShape = function (e) {
      var t = normalizeShapeList(e);
      if (t.length !== this.inputLayers.length) throw new ValueError("Invalid inputShape argument " + e + ": model has " + this.inputLayers.length + " tensor inputs.");

      for (var r = {}, n = 0; n < t.length; n++) {
        var a = this.inputLayers[n],
            o = t[n];
        r[S = a.name + "_0_0"] = o;
      }

      var i = Object.keys(this.nodesByDepth).map(function (e) {
        return parseInt(e, 10);
      }).sort(reverseNumberCompare);
      if (i.length > 1) for (var s = 0, u = i; s < u.length; s++) {
        for (var l = u[s], p = 0, c = this.nodesByDepth[l]; p < c.length; p++) {
          var h = c[p];

          if (a = h.outboundLayer, -1 === this.inputLayers.map(function (e) {
            return e.id;
          }).indexOf(a.id)) {
            for (var d = [], f = 0; f < h.inboundLayers.length; f++) {
              var m = h.inboundLayers[f],
                  g = h.nodeIndices[f],
                  y = h.tensorIndices[f],
                  v = r[S = m.name + "_" + g + "_" + y];
              d.push(v);
            }

            var x = normalizeShapeList(a.computeOutputShape(singletonOrArray(d))),
                b = a.inboundNodes.indexOf(h);

            for (f = 0; f < x.length; f++) {
              r[S = a.name + "_" + b + "_" + f] = x[f];
            }
          }
        }
      }
      var w = [],
          N = [];

      for (n = 0; n < this.outputLayers.length; n++) {
        a = this.outputLayers[n], b = this.outputLayersNodeIndices[n], y = this.outputLayersTensorIndices[n];
        var S = a.name + "_" + b + "_" + y;
        N.push(S);
      }

      for (n = 0; n < N.length; n++) {
        var T = N[n];
        assert$1(T in r), w.push(r[T]);
      }

      return singletonOrArray(w);
    }, t.prototype.runInternalGraph = function (e, t) {
      null == t && (t = pyListRepeat(null, e.length));

      for (var r = {}, n = 0; n < this.inputs.length; ++n) {
        var a = this.inputs[n],
            o = e[n],
            i = t[n];
        r[a.id] = [o, i];
      }

      for (var s = 0, u = Object.keys(this.nodesByDepth).map(function (e) {
        return parseInt(e, 10);
      }).sort(reverseNumberCompare); s < u.length; s++) {
        for (var l = u[s], p = 0, c = this.nodesByDepth[l]; p < c.length; p++) {
          for (var h = c[p], d = h.outboundLayer, f = h.inputTensors, m = h.outputTensors, g = new Array(), y = 0, v = f; y < v.length; y++) {
            (a = v[y]).id in r && g.push(r[a.id]);
          }

          if (g.length === f.length) {
            var x = {},
                b = void 0,
                w = void 0,
                N = void 0,
                S = void 0;

            if (null != h.callArgs && (x = h.callArgs), 1 === g.length) {
              var T = g[0],
                  E = T[0],
                  _ = T[1];
              null == x.mask && (x.mask = _), N = toList(d.call(E, x)), S = toList(d.computeMask(E, _)), b = [E], w = [_];
            } else b = g.map(function (e) {
              return e[0];
            }), w = g.map(function (e) {
              return e[1];
            }), null == x.mask && (x.mask = w), N = toList(d.call(b, x)), S = toList(d.computeMask(b, w));

            if (d.activityRegularizer) throw new NotImplementedError("Model invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");

            for (n = 0; n < m.length; ++n) {
              a = m[n], o = N[n], i = S[n], r[a.id] = [o, i];
            }
          }
        }
      }

      for (var I = [], A = [], C = [], P = 0, k = this.outputs; P < k.length; P++) {
        assert$1((a = k[P]).id in r, "Could not compute output " + a.name + " : " + a.id);
        var O = r[a.id],
            D = O[0];
        i = O[1], C.push(D.shape), I.push(D), A.push(i);
      }

      return [I, A, C];
    }, t.prototype.buildNodeConversionMap = function (e) {
      for (var r, n = {}, a = 0, o = this.layers; a < o.length; a++) {
        var i = o[a];
        r = i instanceof t ? 1 : 0;

        for (var s = 0; s < i.inboundNodes.length; s++) {
          var u = t.nodeKey(i, s);
          this.containerNodes.has(u) && (n[u] = r, r += 1);
        }
      }

      return n;
    }, t.prototype.getLayer = function (e, t) {
      if (null != t) {
        if (this.layers.length <= t) throw new ValueError("Was asked to retrieve layer at index " + t + ", but model only has " + this.layers.length + " layer(s).");
        return this.layers[t];
      }

      if (null == e) throw new ValueError("Provide either a layer name or layer index");

      for (var r = 0, n = this.layers; r < n.length; r++) {
        var a = n[r];
        if (a.name === e) return a;
      }

      throw new ValueError("No such layer: " + e);
    }, t.prototype.calculateLosses = function () {
      var e = this;
      return tidy(function () {
        for (var r = [], n = 0, a = e.layers; n < a.length; n++) {
          for (var o = a[n], i = 0; i < o.inboundNodes.length; ++i) {
            var s = t.nodeKey(o, i);
            e.containerNodes.has(s) && r.push.apply(r, o.calculateLosses());
          }
        }

        return r;
      });
    }, t.prototype.getConfig = function () {
      for (var e = {
        name: this.name
      }, r = this.buildNodeConversionMap(this.layers), n = [], a = 0, o = this.layers; a < o.length; a++) {
        for (var i = (x = o[a]).getClassName(), s = x.getConfig(), u = [], l = 0; l < x.inboundNodes.length; l++) {
          var p = x.inboundNodes[l],
              c = t.nodeKey(x, l),
              h = {};

          if (this.containerNodes.has(c)) {
            if (p.callArgs) try {
              JSON.stringify(p.callArgs), h = p.callArgs;
            } catch (e) {
              console.warn("Layer " + x.name + " was passed non-serializable keyword arguments: " + p.callArgs + ". They will not be included in the serialized model (and thus will be missing at deserialization time)."), h = {};
            }

            if (p.inboundLayers.length > 0) {
              for (var d = [], f = 0; f < p.inboundLayers.length; f++) {
                var m = p.inboundLayers[f],
                    g = p.nodeIndices[f],
                    y = p.tensorIndices[f];
                null == (w = r[t.nodeKey(m, g)]) && (w = 0), d.push([m.name, w, y, h]);
              }

              u.push(d);
            }
          }
        }

        n.push({
          name: x.name,
          className: i,
          config: s,
          inboundNodes: u
        });
      }

      e.layers = n;
      var v = [];

      for (f = 0; f < this.inputLayers.length; f++) {
        var x = this.inputLayers[f];
        g = this.inputLayersNodeIndices[f], c = t.nodeKey(x, g), this.containerNodes.has(c) && (null !== (w = r[c]) && void 0 !== w || (w = 0), y = this.inputLayersTensorIndices[f], v.push([x.name, w, y]));
      }

      e.inputLayers = v;
      var b = [];

      for (f = 0; f < this.outputLayers.length; f++) {
        var w;
        if (x = this.outputLayers[f], g = this.outputLayersNodeIndices[f], c = t.nodeKey(x, g), this.containerNodes.has(c)) null !== (w = r[c]) && void 0 !== w || (w = 0), y = this.outputLayersTensorIndices[f], b.push([x.name, w, y]);
      }

      return e.outputLayers = b, e;
    }, t.fromConfig = function (e, t, r, n) {
      void 0 === r && (r = {}), void 0 === n && (n = !1);
      var a = {},
          o = {};

      function i(e, t) {
        e.name in o ? o[e.name].push(t) : o[e.name] = [t];
      }

      function s(e, t) {
        for (var r, n = [], o = 0, s = t; o < s.length; o++) {
          var u = s[o],
              l = u[0],
              p = u[1],
              c = u[2];
          if (3 === u.length) r = {};else {
            if (4 !== u.length) throw new ValueError("Improperly formatted model config for layer " + JSON.stringify(e) + ": " + JSON.stringify(u));
            r = u[3];
          }
          if (!(l in a)) return void i(e, t);
          var h = a[l];
          if (h.inboundNodes.length <= p) return void i(e, t);
          var d = h.inboundNodes[p];
          n.push(d.outputTensors[c]);
        }

        n.length > 0 && e.apply(singletonOrArray(n), r);
      }

      function u(e) {
        var r = e.name,
            o = deserialize(e, null != t.customObjects ? t.customObjects : {});
        o.setFastWeightInitDuringBuild(n), a[r] = o;

        for (var s = 0, u = e.inboundNodes; s < u.length; s++) {
          var l = u[s];
          if (!(l instanceof Array)) throw new ValueError("Corrupted configuration, expected array for nodeData: " + l);
          i(o, l);
        }
      }

      for (var l = t.name, p = t.layers, c = 0, h = p; c < h.length; c++) {
        u(m = h[c]);
      }

      for (; !isObjectEmpty(o);) {
        for (var d = 0, f = p; d < f.length; d++) {
          var m = f[d];

          if ((C = a[m.name]).name in o) {
            var g = o[C.name];
            delete o[C.name];

            for (var y = 0, v = g; y < v.length; y++) {
              s(C, v[y]);
            }
          }
        }
      }

      for (var x = [], b = [], w = 0, N = t.inputLayers; w < N.length; w++) {
        var S = (m = N[w])[0],
            T = m[1],
            E = m[2];
        assert$1(S in a);
        var _ = (C = a[S]).inboundNodes[T].outputTensors;
        x.push(_[E]);
      }

      for (var I = 0, A = t.outputLayers; I < A.length; I++) {
        var C;
        S = (m = A[I])[0], T = m[1], E = m[2], assert$1(S in a), _ = (C = a[S]).inboundNodes[T].outputTensors, b.push(_[E]);
      }

      return new e({
        inputs: x,
        outputs: b,
        name: l
      });
    }, Object.defineProperty(t.prototype, "stateful", {
      get: function get() {
        if (this._stateful) throw new ValueError("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");

        for (var e = 0, t = this.layers; e < t.length; e++) {
          if (t[e].stateful) return !0;
        }

        return !1;
      },
      enumerable: !0,
      configurable: !0
    }), t.prototype.resetStates = function () {
      var e = this;
      tidy(function () {
        e.layers.forEach(function (e) {
          e.stateful && e.resetStates();
        });
      });
    }, t;
  }(Layer),
      DEFAULT_VALIDATION_BATCH_SIZE = 32;

  function standardizeDataIteratorOutput(e, t) {
    if (e.outputs.length > 1) throw new NotImplementedError("Support for training a model with multiple output tensors with a dataset object is not implemented yet.");
    util.assert(Array.isArray(t) && 2 === t.length, "Dataset iterator for fitDataset() is expected to generate an Array of length 2: `[xs, ys]`, but instead generates " + t);
    var r = t,
        n = r[0],
        a = r[1];
    if (n instanceof Tensor) return util.assert(1 === e.inputs.length, "Model has multiple " + e.inputs.length + " inputs, hence it expects the input dataset to generate a dictionary of tensors  (with keys " + JSON.stringify(e.inputNames) + ", but received a single tensor."), util.assert(n.shape[0] === a.shape[0], "Mismatch in batch size between x and y tensors (" + n.shape[0] + " vs. " + a.shape[0] + ")"), [n, a];
    var o = void 0;
    n = n;

    for (var i = [], s = 0, u = e.inputNames; s < u.length; s++) {
      var l = u[s];
      if (null == n[l]) throw new ValueError("The feature data generated by the dataset lacks the required input key '" + l + "'.");
      i.push(n[l]), null == o ? o = n[l].shape[0] : util.assert(n[l].shape[0] === o, "Mismatch in batch size between x and y tensors (" + n[l].shape[0] + " vs. " + a.shape[0] + ")");
    }

    return i.concat(a);
  }

  function standardizeTensorValidationData(e) {
    if (3 === e.length) throw new NotImplementedError("Validation with sample weights is not implemented yet.");
    return {
      xs: e[0],
      ys: e[1]
    };
  }

  function fitDataset(e, t, r) {
    return __awaiter$1(this, void 0, void 0, function () {
      var n, a, o, i, s, u, l, p, c, h, d, f, m, g, y, v, x, b, w, N, S, T, E, _, I, A, C;

      return __generator$1(this, function (P) {
        switch (P.label) {
          case 0:
            if (n = null != r.batchesPerEpoch, util.assert(null != e.optimizer, "You must compile a model before training/testing. Use Model.compile(modelCompileConfig)."), util.assert(null != r, "For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."), util.assert(null != r.epochs && r.epochs > 0 && Number.isInteger(r.epochs), "For fitDataset(), config.epochs is expected to be a positive integer, but got " + r.epochs), util.assert(!n || r.batchesPerEpoch > 0 && Number.isInteger(r.batchesPerEpoch), "For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got " + r.batchesPerEpoch), util.assert(null == r.validationSplit, "`validationSplit` is not supported by `fitDataset()`. Use validationData instead."), e.isTraining) throw new Error("Cannot start training because another fit() call is ongoing.");
            e.isTraining = !0, P.label = 1;

          case 1:
            return P.trys.push([1,, 22, 23]), a = null != r.validationData, o = void 0, i = void 0, a && (isDatasetObject(r.validationData) ? util.assert(null == r.validationBatches || r.validationBatches > 0 && Number.isInteger(r.validationBatches), "For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got " + r.validationBatches) : (s = standardizeTensorValidationData(r.validationData), o = s.xs, i = s.ys)), u = e.makeTrainFunction(), l = e.getDedupedMetricsNames(), p = void 0, p = a ? l.slice().concat(l.map(function (e) {
              return "val_" + e;
            })) : l.slice(), c = standardizeCallbacks(r.callbacks), h = null == r.verbose ? 1 : r.verbose, d = configureCallbacks(c, r.yieldEvery, h, r.epochs, null, null, getStepsPerEpoch(t, r), null, a, p), f = d.callbackList, m = d.history, f.setModel(e), e.history = m, [4, f.onTrainBegin()];

          case 2:
            return P.sent(), e.stopTraining_ = !1, g = null == r.initialEpoch ? 0 : r.initialEpoch, [4, t.iterator()];

          case 3:
            y = P.sent(), P.label = 4;

          case 4:
            return g < r.epochs ? (v = {}, [4, f.onEpochBegin(g)]) : [3, 19];

          case 5:
            return P.sent(), x = 0, b = 0, n ? [3, 7] : [4, t.iterator()];

          case 6:
            y = P.sent(), P.label = 7;

          case 7:
            return !n || x < r.batchesPerEpoch ? [4, y.next()] : [3, 17];

          case 8:
            return w = P.sent(), n && w.done ? (console.warn("You provided `batchesPerEpoch` as " + r.batchesPerEpoch + ", but your dataset iterator ran out of data after " + x + " batches; interrupting training. Make sure that your dataset can generate at least `batchesPerEpoch * epochs` batches (in this case, " + r.batchesPerEpoch * r.epochs + " batches). You may need to use the repeat() function when building your dataset."), [3, 17]) : null == w.value ? [3, 11] : (N = standardizeDataIteratorOutput(e, w.value), (S = {}).batch = b, S.size = N[0].shape[0], [4, f.onBatchBegin(b, S)]);

          case 9:
            for (P.sent(), T = u(N), dispose(N), C = 0; C < l.length; ++C) {
              E = l[C], _ = T[C], S[E] = _, keep(_);
            }

            return [4, f.onBatchEnd(b, S)];

          case 10:
            P.sent(), disposeTensorsInLogs(S), b++, x++, P.label = 11;

          case 11:
            return (n ? x >= r.batchesPerEpoch : w.done) ? a ? (I = void 0, isDatasetObject(r.validationData) ? (A = toList, [4, e.evaluateDataset(r.validationData, {
              batches: r.validationBatches
            })]) : [3, 13]) : [3, 15] : [3, 16];

          case 12:
            return I = A.apply(void 0, [P.sent()]), [3, 14];

          case 13:
            I = toList(e.evaluate(o, i, {
              batchSize: null == r.validationBatchSize ? DEFAULT_VALIDATION_BATCH_SIZE : r.validationBatchSize,
              verbose: 0
            })), P.label = 14;

          case 14:
            for (C = 0; C < e.metricsNames.length; ++C) {
              v["val_" + e.metricsNames[C]] = I[C];
            }

            P.label = 15;

          case 15:
            return [3, 17];

          case 16:
            return e.stopTraining_ ? [3, 17] : [3, 7];

          case 17:
            return [4, f.onEpochEnd(g, v)];

          case 18:
            return P.sent(), g++, e.stopTraining_ ? [3, 19] : [3, 4];

          case 19:
            return [4, f.onTrainEnd()];

          case 20:
            return P.sent(), [4, e.history.syncData()];

          case 21:
            return P.sent(), [2, e.history];

          case 22:
            return e.isTraining = !1, [7];

          case 23:
            return [2];
        }
      });
    });
  }

  function getStepsPerEpoch(e, t) {
    var r = null;
    return null != t.batchesPerEpoch ? r = t.batchesPerEpoch : Number.isFinite(e.size) && (r = e.size), r;
  }

  function isDatasetObject(e) {
    return "function" == typeof e.iterator;
  }

  function isLazyIteratorObject(e) {
    return "function" == typeof e.next;
  }

  function evaluateDataset(e, t, r) {
    return __awaiter$1(this, void 0, void 0, function () {
      var n, a, o, i, s, u, l, p, c, h;
      return __generator$1(this, function (d) {
        switch (d.label) {
          case 0:
            if (n = null != (r = r || {}).batches, a = e.testFunction, o = [], r.verbose > 0) throw new NotImplementedError("Verbose mode is not implemented yet.");
            return util.assert(!n || r.batches > 0 && Number.isInteger(r.batches), "Test loop expects `batches` to be a positive integer, but received " + JSON.stringify(r.batches)), isLazyIteratorObject(t) ? (s = t, [3, 3]) : [3, 1];

          case 1:
            return [4, t.iterator()];

          case 2:
            s = d.sent(), d.label = 3;

          case 3:
            i = s, u = 0, l = 0, p = function p() {
              var t, s, p, c, h, d;
              return __generator$1(this, function (f) {
                switch (f.label) {
                  case 0:
                    return [4, i.next()];

                  case 1:
                    if ((t = f.sent()).value) {
                      if (s = standardizeDataIteratorOutput(e, t.value), p = tidy(function () {
                        return a(s);
                      }), dispose(s), 0 === l) for (d = 0; d < p.length; ++d) {
                        o.push(getScalar(0));
                      }

                      for (c = s[0].shape[0], h = function h(e) {
                        var t = p[e],
                            r = o[e];
                        o[e] = tidy(function () {
                          return add(o[e], mul(getScalar(c), t));
                        }), l > 0 && dispose(r);
                      }, d = 0; d < p.length; ++d) {
                        h(d);
                      }

                      dispose(p), u += c, ++l;
                    }

                    return t.done ? (n && console.warn("Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least `batches` batches (in this case, " + r.batches + " batches). You may need to use the repeat() function when building your dataset."), [2, "break"]) : [2];
                }
              });
            }, d.label = 4;

          case 4:
            return !n || l < r.batches ? [5, p()] : [3, 6];

          case 5:
            return "break" === d.sent() ? [3, 6] : [3, 4];

          case 6:
            for (c = function c(e) {
              var t = o[e];
              o[e] = tidy(function () {
                return div(o[e], getScalar(u));
              }), dispose(t);
            }, h = 0; h < o.length; ++h) {
              c(h);
            }

            return [2, singletonOrArray(o)];
        }
      });
    });
  }

  function checkBatchSize(e) {
    util.assert(e > 0 && Number.isInteger(e), "batchSize is required to be a positive integer, but got " + e);
  }

  function sliceArrays(e, t, r) {
    return null == e ? [null] : Array.isArray(e) ? e.map(function (e) {
      return sliceAlongFirstAxis(e, t, r - t);
    }) : sliceAlongFirstAxis(e, t, r - t);
  }

  function sliceArraysByIndices(e, t) {
    return tidy(function () {
      return null == e ? null : Array.isArray(e) ? e.map(function (e) {
        return sliceArraysByIndices(e, t);
      }) : gather$1(e, "int32" === t.dtype ? t : t.toInt());
    });
  }

  function makeBatches(e, t) {
    for (var r = [], n = 0, a = null; n < e;) {
      (a = n + t) >= e && (a = e), r.push([n, a]), n = a;
    }

    return r;
  }

  function fitLoop(e, t, r, n, a, o, i, s, u, l, p, c, h, d, f, m) {
    return __awaiter$1(this, void 0, void 0, function () {
      var g, y, v, x, b, w, N, S;
      return __generator$1(this, function (T) {
        switch (T.label) {
          case 0:
            if (null == a && (a = 32), null == o && (o = 1), null == p && (p = !0), null == h && (h = 0), g = !1, null != u && null != l && (g = !0), null != f && (g = !0, null == d)) throw new ValueError("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");
            return null != (y = e.checkNumSamples(r, a, d, "steps_per_epoch")) && (v = range$1(0, y)), null == i && (i = 1), x = configureCallbacks(s, m, i, o, h, y, d, a, g, c), b = x.callbackList, w = x.history, b.setModel(e), e.history = w, [4, b.onTrainBegin()];

          case 1:
            T.sent(), e.stopTraining_ = !1, N = function N(o) {
              var i, s, c, h, f;
              return __generator$1(this, function (m) {
                switch (m.label) {
                  case 0:
                    return [4, b.onEpochBegin(o)];

                  case 1:
                    if (m.sent(), i = {}, null == d) return [3, 2];
                    throw new NotImplementedError("stepsPerEpoch mode is not implemented yet.");

                  case 2:
                    if ("batch" === p) throw new NotImplementedError("batch shuffling is not implemneted yet");
                    p && util.shuffle(v), s = tensor1d(v), c = makeBatches(y, a), h = function h(o) {
                      var p;
                      return __generator$1(this, function (h) {
                        switch (h.label) {
                          case 0:
                            return p = {}, [4, b.onBatchBegin(o, p)];

                          case 1:
                            return h.sent(), tidy(function () {
                              var h = c[o][0],
                                  d = c[o][1],
                                  f = sliceAlongFirstAxis(s, h, d - h);
                              p.batch = o, p.size = d - h;

                              for (var m = sliceArraysByIndices(r, f), y = t(m), v = 0; v < n.length; ++v) {
                                var x = n[v],
                                    b = y[v];
                                p[x] = b, keep(b);
                              }

                              if (o === c.length - 1 && g) {
                                var w = e.testLoop(u, l, a);

                                for (v = 0; v < n.length; ++v) {
                                  x = n[v], b = w[v], keep(b), i["val_" + x] = b;
                                }
                              }
                            }), [4, b.onBatchEnd(o, p)];

                          case 2:
                            return h.sent(), disposeTensorsInLogs(p), e.stopTraining_ ? [2, "break"] : [2];
                        }
                      });
                    }, f = 0, m.label = 3;

                  case 3:
                    return f < c.length ? [5, h(f)] : [3, 6];

                  case 4:
                    if ("break" === m.sent()) return [3, 6];
                    m.label = 5;

                  case 5:
                    return ++f, [3, 3];

                  case 6:
                    s.dispose(), m.label = 7;

                  case 7:
                    return [4, b.onEpochEnd(o, i)];

                  case 8:
                    return m.sent(), e.stopTraining_ ? [2, "break"] : [2];
                }
              });
            }, S = h, T.label = 2;

          case 2:
            return S < o ? [5, N(S)] : [3, 5];

          case 3:
            if ("break" === T.sent()) return [3, 5];
            T.label = 4;

          case 4:
            return ++S, [3, 2];

          case 5:
            return [4, b.onTrainEnd()];

          case 6:
            return T.sent(), [4, e.history.syncData()];

          case 7:
            return T.sent(), [2, e.history];
        }
      });
    });
  }

  function fitTensors(e, t, r, n) {
    return void 0 === n && (n = {}), __awaiter$1(this, void 0, void 0, function () {
      var a, o, i, s, u, l, p, c, h, d, f, m, g, y, v, x, b, w, N;
      return __generator$1(this, function (S) {
        switch (S.label) {
          case 0:
            if (e.isTraining) throw new Error("Cannot start training because another fit() call is ongoing.");
            e.isTraining = !0, S.label = 1;

          case 1:
            if (S.trys.push([1,, 3, 4]), checkBatchSize(p = null == n.batchSize ? 32 : n.batchSize), c = e.standardizeUserData(t, r, !1, p), a = c[0], o = c[1], h = !1, d = void 0, null != n.validationData && n.validationData.length > 0) {
              if (h = !0, 2 !== n.validationData.length) throw 3 === n.validationData.length ? new NotImplementedError("validationData including sample weights is not supported yet.") : new ValueError("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; " + n.validationData + " is invalid.");
              i = n.validationData[0], s = n.validationData[1], f = e.standardizeUserData(i, s, !0, p), u = f[0], l = f[1], d = u.concat(l);
            } else null != n.validationSplit && n.validationSplit > 0 && n.validationSplit < 1 ? (h = !0, m = Math.floor(a[0].shape[0] * (1 - n.validationSplit)), g = a[0].shape[0], u = sliceArrays(a, m, g), a = sliceArrays(a, 0, m), l = sliceArrays(o, m, g), o = sliceArrays(o, 0, m), d = u.concat(l)) : null != n.validationSteps && (h = !0);

            return y = a.concat(o), e.checkTrainableWeightsConsistency(), v = e.makeTrainFunction(), x = e.getDedupedMetricsNames(), b = void 0, w = void 0, h ? (e.makeTestFunction(), b = e.testFunction, w = x.slice().concat(x.map(function (e) {
              return "val_" + e;
            }))) : (b = null, d = [], w = x.slice()), N = standardizeCallbacks(n.callbacks), [4, fitLoop(e, v, y, x, p, n.epochs, n.verbose, N, b, d, n.shuffle, w, n.initialEpoch, null, null, n.yieldEvery)];

          case 2:
            return [2, S.sent()];

          case 3:
            return e.isTraining = !1, disposeNewTensors(a, t), disposeNewTensors(o, r), disposeNewTensors(u, i), disposeNewTensors(l, s), [7];

          case 4:
            return [2];
        }
      });
    });
  }

  function ensureTensorsRank2OrHigher(e) {
    var t = [];
    e instanceof Tensor && (e = [e]);

    for (var r = 0; r < e.length; ++r) {
      var n = e[r];
      if (1 === n.rank) t.push(expandDims$1(n, 1));else {
        if (0 === n.rank) throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");
        t.push(n);
      }
    }

    return t;
  }

  function disposeNewTensors(e, t) {
    if (null != e) {
      var r = [];
      if (t instanceof Tensor) r.push(t.id);else if (Array.isArray(t)) t.forEach(function (e) {
        return r.push(e.id);
      });else if (null != t) for (var n in t) {
        var a = t[n];
        r.push(a.id);
      }
      var o = [];
      if (e instanceof Tensor) -1 === r.indexOf(e.id) && o.push(e);else if (Array.isArray(e)) e.forEach(function (e) {
        -1 === r.indexOf(e.id) && o.push(e);
      });else if (null != e) for (var i in e) {
        var s = e[i];
        -1 === r.indexOf(s.id) && o.push(s);
      }
      o.forEach(function (e) {
        e.isDisposed || e.dispose();
      });
    }
  }

  function isDataTensor(e) {
    return e instanceof Tensor;
  }

  function isDataArray(e) {
    return Array.isArray(e);
  }

  function isDataDict(e) {
    return !isDataTensor(e) && !isDataArray(e);
  }

  function standardizeInputData(e, t, r, n, a) {
    if (void 0 === n && (n = !0), void 0 === a && (a = ""), null == t || 0 === t.length) {
      if (null != e) {
        var o = !1;
        if (isDataArray(e) && e.length > 0) o = !0;else if (isDataDict(e)) {
          for (var i in e) {
            if (e.hasOwnProperty(i)) {
              o = !0;
              break;
            }
          }
        } else o = !0;
        if (o) throw new ValueError("Error when checking model " + a + " expected no data, but got " + e);
      }

      return [];
    }

    if (null == e) return t.map(function (e) {
      return null;
    });
    var s;

    if (isDataDict(e)) {
      e = e, s = [];

      for (var u = 0, l = t; u < l.length; u++) {
        var p = l[u];
        if (null == e[p]) throw new ValueError('No data provided for "' + p + '". Need data for each key in: ' + t);
        s.push(e[p]);
      }
    } else if (isDataArray(e)) {
      if ((e = e).length !== t.length) throw new ValueError("Error when checking model " + a + ": the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see " + t.length + " Tensor(s), but instead got the following list of Tensor(s): " + e);
      s = e;
    } else {
      if (e = e, t.length > 1) throw new ValueError("The model " + a + " expects " + t.length + " Tensor(s), but only received one Tensor. Found: Tensor with shape " + e.shape);
      s = [e];
    }

    if (s = ensureTensorsRank2OrHigher(s), null != r) for (var c = 0; c < t.length; ++c) {
      if (null != r[c]) {
        var h = s[c];
        if (h.shape.length !== r[c].length) throw new ValueError("Error when checking " + a + ": expected " + t[c] + " to have " + r[c].length + " dimension(s). but got array with shape " + h.shape);

        for (var d = 0; d < r[c].length; ++d) {
          if (0 !== d || n) {
            var f = h.shape[d],
                m = r[c][d];
            if (null != m && m >= 0 && f !== m) throw new ValueError("Error when checking " + a + ": expected " + t[c] + " to have shape [" + r[c] + "], but got array with shape [" + h.shape + "].");
          }
        }
      }
    }
    return s;
  }

  function checkArrayLengths(e, t, r) {
    var n = unique(e.map(function (e) {
      return e.shape[0];
    }));
    n.sort();
    var a = unique(t.map(function (e) {
      return e.shape[0];
    }));
    if (a.sort(), n.length > 1) throw new ValueError("All input Tensors (x) should have the same number of samples. Got array shapes: " + JSON.stringify(e.map(function (e) {
      return e.shape;
    })));
    if (a.length > 1) throw new ValueError("All target Tensors (y) should have the same number of samples. Got array shapes: " + JSON.stringify(t.map(function (e) {
      return e.shape;
    })));
    if (n.length > 0 && a.length > 0 && !util.arraysEqual(n, a)) throw new ValueError("Input Tensors should have the same number of samples as target Tensors. Found " + n[0] + " input sample(s) and " + a[0] + " target sample(s).");
  }

  function checkLossAndTargetCompatibility(e, t, r) {
    for (var n = [meanSquaredError$1, binaryCrossentropy, categoricalCrossentropy], a = 0; a < e.length; ++a) {
      var o = e[a],
          i = t[a],
          s = r[a];

      if (null != i) {
        if (i === categoricalCrossentropy && 1 === o.shape[o.shape.length - 1]) throw new ValueError("You are passing a target array of shape " + o.shape + " while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].");
        if (-1 !== n.indexOf(i)) for (var u = o.shape.slice(1), l = s.slice(1), p = 0; p < u.length; ++p) {
          var c = u[p],
              h = l[p];
          if (null != h && c !== h) throw new ValueError("A target Tensor with shape " + o.shape + " was passed for an output of shape " + s + ", while using a loss function that expects targets to have the same shape as the output.");
        }
      }
    }
  }

  function checkInputData(e, t, r, n, a) {
    var o;

    if (void 0 === n && (n = !0), void 0 === a && (a = ""), Array.isArray(e)) {
      if (e.length !== t.length) throw new ValueError("Error when checking model " + a + ": the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see " + t.length + " Tensor(s), but instead got " + e.length + " Tensors(s).");
      o = e;
    } else {
      if (t.length > 1) throw new ValueError("The model expects " + t.length + " " + a + " Tensors, but only received one Tensor. Found: array with shape " + JSON.stringify(e.shape) + ".");
      o = [e];
    }

    if (null != r) for (var i = 0; i < t.length; ++i) {
      if (null != r[i]) {
        var s = o[i];
        if (s.shape.length !== r[i].length) throw new ValueError("Error when checking " + a + ": expected " + t[i] + " to have " + r[i].length + " dimension(s), but got array with shape " + JSON.stringify(s.shape));

        for (var u = 0; u < r[i].length; ++u) {
          if (0 !== u || n) {
            var l = s.shape[u],
                p = r[i][u];
            if (null != p && p !== l) throw new ValueError("Error when checking " + a + ": expected " + t[i] + " to have shape " + JSON.stringify(r[i]) + " but got array with shape " + JSON.stringify(s.shape) + ".");
          }
        }
      }
    }
  }

  function collectMetrics(e, t) {
    if (null == e || Array.isArray(e) && 0 === e.length) return t.map(function (e) {
      return [];
    });
    if (Array.isArray(e)) return t.map(function (t) {
      return e;
    });

    if (null != e) {
      for (var r = [], n = 0, a = t; n < a.length; n++) {
        var o = a[n],
            i = e.hasOwnProperty(o) ? e[o] : [];
        Array.isArray(i) || (i = [i]), r.push(i);
      }

      return r;
    }

    throw new TypeError("Type of metrics argument not understood. Expected an Array or Object, found: " + e);
  }

  var Model = function (e) {
    function t(t) {
      var r = e.call(this, t) || this;
      return r.isTraining = !1, r;
    }

    return __extends$1(t, e), t.prototype.summary = function (e, t, r) {
      if (void 0 === r && (r = console.log), !this.built) throw new ValueError("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");
      printSummary(this, e, t, r);
    }, t.prototype.compile = function (e) {
      var t = this;
      if (null == e.loss && (e.loss = []), this.loss = e.loss, "string" == typeof e.optimizer) this.optimizer = getOptimizer(e.optimizer);else {
        if (!(e.optimizer instanceof Optimizer)) throw new ValueError("User-defined optimizer must be an instance of tf.Optimizer.");
        this.optimizer = e.optimizer;
      }
      var r = [];
      if (Array.isArray(e.loss) || "string" == typeof e.loss || "function" == typeof e.loss) {
        if (Array.isArray(e.loss)) {
          if (e.loss.length !== this.outputs.length) throw new ValueError("When passing an Array as loss, it should have one entry per model output. The model has " + this.outputs.length + " output(s), but you passed loss=" + e.loss + ".");
          var n = e.loss;
          r = n.map(function (e) {
            return get(e);
          });
        } else {
          var a = get(e.loss);
          this.outputs.forEach(function (e) {
            r.push(a);
          });
        }
      } else {
        for (var o in e.loss = e.loss, e.loss) {
          if (-1 === this.outputNames.indexOf(o)) throw new ValueError('Unknown entry in loss dictionary: "' + o + '". Only expected the following keys: ' + this.outputNames);
        }

        for (var i = 0, s = this.outputNames; i < s.length; i++) {
          var u = s[i];
          null == e.loss[u] && console.warn('Output "' + u + '" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ' + u + " during training"), r.push(get(e.loss[u]));
        }
      }
      this.lossFunctions = r, this.feedOutputNames = [], this.feedOutputShapes = [], this.feedLossFns = [];

      for (var l = 0; l < this.outputs.length; ++l) {
        var p = this.internalOutputShapes[l],
            c = this.outputNames[l];
        this.feedOutputNames.push(c), this.feedOutputShapes.push(p), this.feedLossFns.push(this.lossFunctions[l]);
      }

      var h = [];
      this.metrics = e.metrics, this.metricsNames = ["loss"], this.metricsTensors = [], nameScope("loss", function () {
        for (var e = 0; e < t.outputs.length; ++e) {
          if (-1 === h.indexOf(e)) {
            var r = t.lossFunctions[e];
            t.outputs.length > 1 && (t.metricsTensors.push([r, e]), t.metricsNames.push(t.outputNames[e] + "_loss"));
          }
        }
      });
      var d = collectMetrics(e.metrics, this.outputNames);
      nameScope("metric", function () {
        for (var e = function e(_e2) {
          if (-1 !== h.indexOf(_e2)) return "continue";
          !function (r) {
            for (var n, a, o, i = function i(r) {
              if (-1 !== ["accuracy", "acc", "crossentropy", "ce"].indexOf(r)) {
                var i = t.internalOutputShapes[_e2];
                1 === i[i.length - 1] || t.lossFunctions[_e2] === binaryCrossentropy ? -1 !== ["accuracy", "acc"].indexOf(r) ? a = binaryAccuracy : -1 !== ["crossentropy", "ce"].indexOf(r) && (a = binaryCrossentropy$1) : t.lossFunctions[_e2] === sparseCategoricalCrossentropy ? -1 !== ["accuracy", "acc"].indexOf(r) ? a = sparseCategoricalAccuracy : -1 !== ["crossentropy", "ce"].indexOf(r) && (a = sparseCategoricalCrossentropy$1) : -1 !== ["accuracy", "acc"].indexOf(r) ? a = categoricalAccuracy : -1 !== ["crossentropy", "ce"].indexOf(r) && (a = categoricalCrossentropy$1);
                var s = void 0;
                -1 !== ["accuracy", "acc"].indexOf(r) ? s = "acc" : -1 !== ["crossentropy", "ce"].indexOf(r) && (s = "ce"), o = a, n = "" + s;
              } else {
                var u = get$1(r);
                o = u, n = "" + r;
              }

              var l;
              nameScope(n, function () {
                l = o;
              }), function (e, r, n) {
                t.outputNames.length > 1 && (r = t.outputNames[e] + "_" + r), t.metricsNames.push(r), t.metricsTensors.push([n, e]);
              }(_e2, n, l);
            }, s = 0, u = d[_e2]; s < u.length; s++) {
              i(u[s]);
            }
          }();
        }, r = 0; r < t.outputs.length; ++r) {
          e(r);
        }
      }), this.collectedTrainableWeights = this.trainableWeights;
    }, t.prototype.checkTrainableWeightsConsistency = function () {
      null != this.collectedTrainableWeights && this.trainableWeights.length !== this.collectedTrainableWeights.length && console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?");
    }, t.prototype.evaluate = function (e, t, r) {
      void 0 === r && (r = {});
      var n = null == r.batchSize ? 32 : r.batchSize;
      checkBatchSize(n);
      var a = this.standardizeUserData(e, t, !0, n);

      try {
        var o = a[0].concat(a[1]);
        this.makeTestFunction();
        var i = this.testFunction;
        return singletonOrArray(this.testLoop(i, o, n, r.verbose, r.steps));
      } finally {
        disposeNewTensors(a[0], e), disposeNewTensors(a[1], t);
      }
    }, t.prototype.evaluateDataset = function (e, t) {
      return __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (r) {
          return this.makeTestFunction(), [2, evaluateDataset(this, e, t)];
        });
      });
    }, t.prototype.checkNumSamples = function (e, t, r, n) {
      var a;

      if (void 0 === n && (n = "steps"), null != r) {
        if (a = null, null != t) throw new ValueError("If " + n + " is set, batchSize must be null or undefined.Got batchSize = " + t);
      } else {
        if (null == e) throw new ValueError("Either the input data should have a defined shape, or " + n + " shoud be specified.");
        a = Array.isArray(e) ? e[0].shape[0] : e.shape[0];
      }

      return a;
    }, t.prototype.execute = function (e, t) {
      if (Array.isArray(t) && 0 === t.length) throw new ValueError("`outputs` is an empty Array, which is not allowed.");
      var r = Array.isArray(t),
          n = r ? t : [t],
          a = this.retrieveSymbolicTensors(n),
          o = new FeedDict();

      if (e instanceof Tensor && (e = [e]), Array.isArray(e)) {
        if (e.length !== this.inputs.length) throw new ValueError("The number of inputs provided (" + e.length + ") does not match the number of inputs of this model (" + this.inputs.length + ").");

        for (var i = 0; i < this.inputs.length; ++i) {
          o.add(this.inputs[i], e[i]);
        }
      } else for (var s = 0, u = this.inputs; s < u.length; s++) {
        var l = u[s],
            p = e[l.name];
        if (null == p) throw new ValueError("No value is provided for the model's input " + l.name);
        o.add(l, p);
      }

      var c = execute(a, o);
      return r ? c : c[0];
    }, t.prototype.retrieveSymbolicTensors = function (e) {
      for (var t = pyListRepeat(null, e.length), r = e.length, n = 0, a = this.layers; n < a.length; n++) {
        for (var o = a[n], i = Array.isArray(o.output) ? o.output : [o.output], s = i.map(function (e) {
          return e.name;
        }), u = 0; u < e.length; ++u) {
          var l = s.indexOf(e[u]);
          if (-1 !== l && (t[u] = i[l], r--), 0 === r) break;
        }

        if (0 === r) break;
      }

      if (r > 0) {
        var p = [];
        throw t.forEach(function (t, r) {
          null == t && p.push(e[r]);
        }), new ValueError("Cannot find SymbolicTensors for output name(s): " + JSON.stringify(p));
      }

      return t;
    }, t.prototype.predictLoop = function (e, t, r) {
      var n = this;
      return void 0 === t && (t = 32), void 0 === r && (r = !1), tidy(function () {
        var a = n.checkNumSamples(e);
        if (r) throw new NotImplementedError("Verbose predictLoop() is not implemented yet.");

        for (var o = makeBatches(a, t), i = n.outputs.map(function (e) {
          return [];
        }), s = function s(t) {
          tidy(function () {
            var r = o[t][0],
                a = o[t][1],
                i = sliceArrays(e, r, a),
                s = [];
            if (Array.isArray(i)) for (var u = 0; u < i.length; ++u) {
              s.push({
                key: n.inputs[u],
                value: i[u]
              });
            } else s.push({
              key: n.inputs[0],
              value: i
            });
            var l = new FeedDict(s);
            return execute(n.outputs, l);
          }).forEach(function (e, t) {
            return i[t].push(e);
          });
        }, u = 0; u < o.length; ++u) {
          s(u);
        }

        return singletonOrArray(i.map(function (e) {
          return concat(e, 0);
        }));
      });
    }, t.prototype.predict = function (e, t) {
      void 0 === t && (t = {});
      var r = ensureTensorsRank2OrHigher(e);
      checkInputData(r, this.inputNames, this.feedInputShapes, !1);

      try {
        var n = null == t.batchSize ? 32 : t.batchSize;
        return checkBatchSize(n), this.predictLoop(r, n);
      } finally {
        disposeNewTensors(r, e);
      }
    }, t.prototype.predictOnBatch = function (e) {
      return checkInputData(e, this.inputNames, this.feedInputShapes, !0), this.predictLoop(e, e.shape[0]);
    }, t.prototype.standardizeUserData = function (e, t, r, n) {
      if (void 0 === r && (r = !0), null == this.optimizer) throw new RuntimeError("You must compile a model before training/testing. Use Model.compile(modelCompileArgs).");

      for (var a = [], o = 0; o < this.feedOutputShapes.length; ++o) {
        var i = this.feedOutputShapes[o];
        this.feedLossFns[o] === sparseCategoricalCrossentropy ? a.push(i.slice(0, i.length - 1).concat([1])) : a.push(i);
      }

      if (checkArrayLengths(e = standardizeInputData(e, this.feedInputNames, this.feedInputShapes, !1, "input"), t = standardizeInputData(t, this.feedOutputNames, a, !1, "target"), null), checkLossAndTargetCompatibility(t, this.feedLossFns, this.feedOutputShapes), this.stateful && null != n && n > 0 && e[0].shape[0] % n != 0) throw new ValueError("In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size " + n + ". Found: " + e[0].shape[0] + " sample(s).");
      return [e, t, null];
    }, t.prototype.testLoop = function (e, t, r, n, a) {
      var o = this;
      return void 0 === n && (n = 0), tidy(function () {
        var i = o.checkNumSamples(t, r, a, "steps"),
            s = [];
        if (n > 0) throw new NotImplementedError("Verbose mode is not implemented yet.");
        if (null != a) throw new NotImplementedError("steps mode in testLoop() is not implemented yet");

        for (var u = makeBatches(i, r), l = tensor1d(range$1(0, i)), p = 0; p < u.length; ++p) {
          var c = u[p][0],
              h = u[p][1],
              d = sliceAlongFirstAxis(l, c, h - c),
              f = sliceArraysByIndices(t, d),
              m = e(f);
          if (0 === p) for (var g = 0; g < m.length; ++g) {
            s.push(getScalar(0));
          }

          for (g = 0; g < m.length; ++g) {
            var y = m[g];
            s[g] = add(s[g], mul(getScalar(h - c), y));
          }
        }

        for (g = 0; g < s.length; ++g) {
          s[g] = div(s[g], getScalar(i));
        }

        return s;
      });
    }, t.prototype.getDedupedMetricsNames = function () {
      for (var e = this.metricsNames, t = [], r = 0; r < e.length; ++r) {
        var n = e[r],
            a = n;
        count(e, n) > 1 && (a += "_" + count(e.slice(0, r), n)), t.push(a);
      }

      return t;
    }, t.prototype.makeTrainFunction = function () {
      var e = this;
      return function (t) {
        var r = t.slice(0, e.inputs.length),
            n = t.slice(e.inputs.length, e.inputs.length + e.outputs.length),
            a = [],
            o = e.collectedTrainableWeights.map(function (e) {
          return e.read();
        });
        return [e.optimizer.minimize(function () {
          for (var t = [], o = 0; o < e.inputs.length; ++o) {
            t.push({
              key: e.inputs[o],
              value: r[o]
            });
          }

          var i,
              s = new FeedDict(t),
              u = execute(e.outputs, s, {
            training: !0
          });

          for (o = 0; o < e.lossFunctions.length; ++o) {
            var l = (0, e.lossFunctions[o])(n[o], u[o]);
            mean(l), i = 0 === o ? l : add(i, l);
          }

          for (o = 0; o < e.metricsTensors.length; ++o) {
            var p = e.metricsTensors[o][0],
                c = e.metricsTensors[o][1],
                h = mean(p(n[c], u[c]));
            keep(h), a.push(h);
          }

          return i = mean(i), e.calculateLosses().forEach(function (e) {
            i = add(i, e);
          }), i;
        }, !0, o)].concat(a);
      };
    }, t.prototype.makeTestFunction = function () {
      var e = this;

      this.testFunction = function (t) {
        return tidy(function () {
          for (var r, n = [], a = t.slice(0, e.inputs.length), o = t.slice(e.inputs.length, e.inputs.length + e.outputs.length), i = [], s = 0; s < e.inputs.length; ++s) {
            i.push({
              key: e.inputs[s],
              value: a[s]
            });
          }

          var u = new FeedDict(i),
              l = execute(e.outputs, u);

          for (s = 0; s < e.lossFunctions.length; ++s) {
            var p = e.lossFunctions[s],
                c = mean(p(o[s], l[s]));
            r = 0 === s ? c : add(r, c), n.push(r);
          }

          for (s = 0; s < e.metricsTensors.length; ++s) {
            var h = e.metricsTensors[s][0],
                d = e.metricsTensors[s][1],
                f = mean(h(o[d], l[d]));
            n.push(f);
          }

          return n;
        });
      };
    }, t.prototype.fit = function (e, t, r) {
      return void 0 === r && (r = {}), __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (n) {
          return [2, fitTensors(this, e, t, r)];
        });
      });
    }, t.prototype.fitDataset = function (e, t) {
      return __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (r) {
          return [2, fitDataset(this, e, t)];
        });
      });
    }, t.prototype.trainOnBatch = function (e, t) {
      return __awaiter$1(this, void 0, void 0, function () {
        var r, n, a, o, i, s, u, l, p, c, h;
        return __generator$1(this, function (d) {
          switch (d.label) {
            case 0:
              r = this.standardizeUserData(e, t), n = r[0], a = r[1], o = this.makeTrainFunction(), i = o(n.concat(a)), s = [], u = 0, l = i, d.label = 1;

            case 1:
              return u < l.length ? (p = l[u], h = (c = s).push, [4, p.data()]) : [3, 4];

            case 2:
              h.apply(c, [d.sent()[0]]), d.label = 3;

            case 3:
              return u++, [3, 1];

            case 4:
              return dispose(i), [2, singletonOrArray(s)];
          }
        });
      });
    }, t.prototype.getNamedWeights = function (e) {
      for (var t = {}, r = null != e && e.trainableOnly, n = r ? this.trainableWeights : this.weights, a = this.getWeights(r), o = 0; o < n.length; ++o) {
        r && !n[o].trainable || (t[n[o].originalName] = a[o]);
      }

      return t;
    }, Object.defineProperty(t.prototype, "stopTraining", {
      set: function set(e) {
        this.stopTraining_ = e;
      },
      enumerable: !0,
      configurable: !0
    }), t.prototype.save = function (e, t) {
      return __awaiter$1(this, void 0, void 0, function () {
        var r, n, a, o, i;
        return __generator$1(this, function (s) {
          switch (s.label) {
            case 0:
              if ("string" == typeof e) {
                if (0 === (r = io.getSaveHandlers(e)).length) throw new ValueError("Cannot find any save handlers for URL '" + e + "'");
                if (r.length > 1) throw new ValueError("Found more than one (" + r.length + ") save handlers for URL '" + e + "'");
                e = r[0];
              }

              if (null == e.save) throw new ValueError("Model.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
              return [4, io.encodeWeights(this.getNamedWeights(t))];

            case 1:
              return n = s.sent(), a = !1, o = null, i = this.toJSON(o, a), [2, e.save({
                modelTopology: i,
                weightData: n.data,
                weightSpecs: n.specs
              })];
          }
        });
      });
    }, t.className = "Model", t;
  }(Container);

  function modelFromJSON(e, t) {
    return __awaiter$1(this, void 0, void 0, function () {
      var r, n, a, o, i, s, u, l, p, c;
      return __generator$1(this, function (h) {
        switch (h.label) {
          case 0:
            return "modelTopology" in e || (e = {
              modelTopology: e
            }), null != (r = (e = e).modelTopology).model_config && (r = r.model_config), n = convertPythonicToTs(r), a = deserialize(n, t), null == e.weightsManifest ? [3, 2] : [4, io.loadWeights(e.weightsManifest, e.pathPrefix, a.weights.map(function (e) {
              return e.originalName;
            }))];

          case 1:
            for (o = h.sent(), i = {}, s = 0, u = a.weights; s < u.length; s++) {
              l = u[s], i[l.originalName] = o[l.originalName];
            }

            p = null, c = !0, a.loadWeights(i, p, c), h.label = 2;

          case 2:
            return [2, a];
        }
      });
    });
  }

  function loadModelInternal(e, t) {
    return __awaiter$1(this, void 0, void 0, function () {
      var r;
      return __generator$1(this, function (n) {
        if (null == t && (t = {}), "string" == typeof e) {
          if (0 === (r = io.getLoadHandlers(e)).length) r.push(io.browserHTTPRequest(e, null, null, null, t.onProgress));else if (r.length > 1) throw new ValueError("Found more than one (" + r.length + ") load handlers for URL '" + e + "'");
          e = r[0];
        }

        return [2, loadModelFromIOHandler(e, void 0, t)];
      });
    });
  }

  function loadModelFromIOHandler(e, t, r) {
    return __awaiter$1(this, void 0, void 0, function () {
      var n, a, o, i, s, u, l;
      return __generator$1(this, function (p) {
        switch (p.label) {
          case 0:
            if (null == r && (r = {}), null == e.load) throw new ValueError("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
            return [4, e.load()];

          case 1:
            if (n = p.sent(), null != (a = n.modelTopology).model_config && (a = a.model_config), o = null == r.strict || r.strict, i = null != n.weightData && null != n.weightSpecs && o, s = deserialize(convertPythonicToTs(a), t, i), null != n.weightData) {
              if (null == n.weightSpecs) throw new ValueError("Model artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");
              u = !1, l = !0, s.loadWeights(io.decodeWeights(n.weightData, n.weightSpecs), u, l, o);
            }

            return [2, s];
        }
      });
    });
  }

  serialization.registerClass(Model);

  var Sequential = function (e) {
    function t(t) {
      var r = e.call(this, {
        inputs: [],
        outputs: []
      }) || this;
      if (t = t || {}, r.trainable = !0, r._updatable = !0, r.built = !1, r.name = null != t.name ? t.name : getUid("sequential_"), null != t.layers) for (var n = 0, a = t.layers; n < a.length; n++) {
        var o = a[n];
        r.add(o);
      }
      return r;
    }

    return __extends$1(t, e), t.prototype.checkShape = function (e) {
      if (e.inboundNodes[0].outputTensors[0].shape.some(function (e) {
        return e < 0;
      })) throw new ValueError("Negative dimension size caused by adding layer " + e.name + " with input shape [" + e.inboundNodes[0].inputTensors[0].shape + "]");
    }, t.prototype.add = function (e) {
      var r,
          n = e instanceof t || e instanceof Model;

      if (n) {
        if (1 !== (r = e).outputs.length) throw new ValueError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
        if (1 !== r.inputs.length) throw new ValueError("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.");
      }

      if (0 === this.outputs.length) {
        if (0 === e.inboundNodes.length) {
          if (null == e.batchInputShape) throw new ValueError("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");
          var a = Input({
            batchShape: e.batchInputShape,
            dtype: e.dtype,
            name: e.name + "_input"
          });
          e.apply(a);
        }

        if (n) this.outputs = r.outputs, this.inputs = r.inputs;else {
          if (1 !== e.inboundNodes.length) throw new ValueError("A layer added to a Sequential model must not already be connected somewhere else. Model received layer " + e.name + " which has " + e.inboundNodes.length + " pre-existing inbound connections.");
          if (1 !== e.inboundNodes[0].outputTensors.length) throw new ValueError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
          this.checkShape(e), this.outputs = [e.inboundNodes[0].outputTensors[0]], this.inputs = getSourceInputs(this.outputs[0]);
        }
        this.inboundNodes = [], new Node({
          outboundLayer: this,
          inboundLayers: [],
          nodeIndices: [],
          tensorIndices: [],
          inputTensors: this.inputs,
          outputTensors: this.outputs,
          inputMasks: pyListRepeat(null, this.inputs.length),
          outputMasks: [null],
          inputShapes: this.inputs.map(function (e) {
            return e.shape;
          }),
          outputShapes: this.outputs[0].shape
        });
      } else {
        var o = e.apply(this.outputs[0]);
        if (Array.isArray(o)) throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
        this.checkShape(e), this.outputs = [o], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
      }

      this.layers.push(e), this.built = !1;
    }, t.prototype.pop = function () {
      if (0 === this.layers.length) throw new TypeError("There are no layers in the model.");
      if (this.layers.pop(), 0 === this.layers.length) this.outputs = [], this.inboundNodes = [], this.outboundNodes = [];else {
        var e = this.layers.length - 1;
        this.layers[e].outboundNodes = [], this.outputs = [this.layers[e].output], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
      }
    }, t.prototype.call = function (e, t) {
      return null == this.model && this.build(), this.model.call(e, t);
    }, t.prototype.build = function (e) {
      if (getExactlyOneShape(e), 0 === this.inputs.length || 0 === this.outputs.length) throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");
      this.model = new Model({
        inputs: this.inputs,
        outputs: this.outputs[0],
        name: this.name + "_model"
      }), this.model.trainable = this.trainable, this.model.updatable = this.updatable, this.supportsMasking = this.model.supportsMasking, this.inputLayers = this.model.inputLayers, this.inputLayersNodeIndices = this.model.inputLayersNodeIndices, this.inputLayersTensorIndices = this.model.inputLayersTensorIndices, this.outputLayers = this.model.outputLayers, this.outputLayersNodeIndices = this.model.outputLayersNodeIndices, this.outputLayersTensorIndices = this.model.outputLayersTensorIndices, this.nodesByDepth = this.model.nodesByDepth, this.containerNodes = this.model.containerNodes, this.outputNames = this.model.outputNames, this.inputNames = this.model.inputNames, this.built = !0;
    }, t.prototype.countParams = function () {
      return this.built || this.build(), e.prototype.countParams.call(this);
    }, t.prototype.summary = function (t, r, n) {
      void 0 === n && (n = console.log), this.built || this.build(), e.prototype.summary.call(this, t, r, n);
    }, t.prototype.setWeights = function (e) {
      null == this.model && this.build(), this.model.setWeights(e);
    }, Object.defineProperty(t.prototype, "updatable", {
      get: function get() {
        return this._updatable;
      },
      set: function set(e) {
        this.built && (this.model.updatable = e), this._updatable = e;
      },
      enumerable: !0,
      configurable: !0
    }), t.prototype.evaluate = function (e, t, r) {
      if (void 0 === r && (r = {}), !this.built) throw new RuntimeError("The model needs to be compiled before being used.");
      return this.model.evaluate(e, t, r);
    }, t.prototype.evaluateDataset = function (e, t) {
      return __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (r) {
          if (!this.built) throw new RuntimeError("The model needs to be compiled before being used.");
          return [2, this.model.evaluateDataset(e, t)];
        });
      });
    }, t.prototype.predict = function (e, t) {
      return void 0 === t && (t = {}), null == this.model && this.build(), this.model.predict(e, t);
    }, t.prototype.predictOnBatch = function (e) {
      return null == this.model && this.build(), this.model.predictOnBatch(e);
    }, t.prototype.compile = function (e) {
      this.build(), this.model.compile(e), this.optimizer = this.model.optimizer, this.loss = this.model.loss, this.metrics = this.model.metrics, this.metricsTensors = this.model.metricsTensors, this.metricsNames = this.model.metricsNames;
    }, t.prototype.fit = function (e, t, r) {
      return void 0 === r && (r = {}), __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (n) {
          if (!this.built) throw new RuntimeError("The model needs to be compiled before being used.");
          return [2, this.model.fit(e, t, r)];
        });
      });
    }, t.prototype.fitDataset = function (e, t) {
      return __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (r) {
          if (!this.built) throw new RuntimeError("The model needs to be compiled before being used.");
          return [2, this.model.fitDataset(e, t)];
        });
      });
    }, t.prototype.trainOnBatch = function (e, t) {
      return __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (r) {
          return [2, this.model.trainOnBatch(e, t)];
        });
      });
    }, t.fromConfig = function (e, r, n, a) {
      var o;
      void 0 === n && (n = {}), void 0 === a && (a = !1);
      var i = {};

      if (r instanceof Array) {
        if (null == r[0].className || "Merge" === r[0].className) throw new ValueError("Legacy serialization format not supported yet.");
        o = r;
      } else util.assert(null != r.layers, "When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."), o = r.layers, delete r.layers, i = r;

      var s = new e(i);
      if (!(s instanceof t)) throw new NotImplementedError("Sequential.fromConfig called on non-Sequential input: " + s);

      for (var u = 0, l = o; u < l.length; u++) {
        var p = deserialize(l[u], void 0, a);
        a && p.setFastWeightInitDuringBuild(!0), s.add(p);
      }

      return s;
    }, Object.defineProperty(t.prototype, "stopTraining", {
      set: function set(e) {
        this.model.stopTraining = e;
      },
      enumerable: !0,
      configurable: !0
    }), t.prototype.getConfig = function () {
      for (var e = [], t = 0, r = this.layers; t < r.length; t++) {
        var n = r[t];
        e.push({
          className: n.getClassName(),
          config: n.getConfig()
        });
      }

      return e;
    }, t.className = "Sequential", t;
  }(Model);

  function model(e) {
    return new Model(e);
  }

  function sequential(e) {
    return new Sequential(e);
  }

  function loadModel(e, t) {
    return void 0 === t && (t = !0), deprecationWarn("tf.loadModel() is deprecated and will be removed in TensorFlow.js 1.0. Please switch to tf.loadLayersModel()."), loadModelInternal(e, {
      strict: t
    });
  }

  function loadLayersModel(e, t) {
    return null == t && (t = {}), loadModelInternal(e, t);
  }

  function input(e) {
    return Input(e);
  }

  function registerCallbackConstructor(e, t) {
    CallbackConstructorRegistry.registerCallbackConstructor(e, t);
  }

  serialization.registerClass(Sequential);

  var Activation = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }

    return __extends$1(t, e), t.prototype.getConfig = function () {
      return {};
    }, t;
  }(serialization.Serializable),
      Elu = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }

    return __extends$1(t, e), t.prototype.apply = function (e, t) {
      return void 0 === t && (t = 1), elu$1(e, t);
    }, t.className = "elu", t;
  }(Activation);

  serialization.registerClass(Elu);

  var Selu = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }

    return __extends$1(t, e), t.prototype.apply = function (e) {
      return selu(e);
    }, t.className = "selu", t;
  }(Activation);

  serialization.registerClass(Selu);

  var Relu = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }

    return __extends$1(t, e), t.prototype.apply = function (e) {
      return relu(e);
    }, t.className = "relu", t;
  }(Activation);

  serialization.registerClass(Relu);

  var Relu6 = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }

    return __extends$1(t, e), t.prototype.apply = function (e) {
      return tidy(function () {
        return minimum(getScalar(6), relu(e));
      });
    }, t.className = "relu6", t;
  }(Activation);

  serialization.registerClass(Relu6);

  var Linear = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }

    return __extends$1(t, e), t.prototype.apply = function (e) {
      return e;
    }, t.className = "linear", t;
  }(Activation);

  serialization.registerClass(Linear);

  var Sigmoid = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }

    return __extends$1(t, e), t.prototype.apply = function (e) {
      return sigmoid(e);
    }, t.className = "sigmoid", t;
  }(Activation);

  serialization.registerClass(Sigmoid);

  var HardSigmoid = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }

    return __extends$1(t, e), t.prototype.apply = function (e) {
      return hardSigmoid(e);
    }, t.className = "hardSigmoid", t;
  }(Activation);

  serialization.registerClass(HardSigmoid);

  var Softplus = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }

    return __extends$1(t, e), t.prototype.apply = function (e) {
      return softplus(e);
    }, t.className = "softplus", t;
  }(Activation);

  serialization.registerClass(Softplus);

  var Softsign = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }

    return __extends$1(t, e), t.prototype.apply = function (e) {
      return softsign(e);
    }, t.className = "softsign", t;
  }(Activation);

  serialization.registerClass(Softsign);

  var Tanh = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }

    return __extends$1(t, e), t.prototype.apply = function (e) {
      return tanh$1(e);
    }, t.className = "tanh", t;
  }(Activation);

  serialization.registerClass(Tanh);

  var Softmax = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }

    return __extends$1(t, e), t.prototype.apply = function (e, t) {
      return void 0 === t && (t = -1), softmax(e, t);
    }, t.className = "softmax", t;
  }(Activation);

  function serializeActivation(e) {
    return e.getClassName();
  }

  function deserializeActivation(e, t) {
    return void 0 === t && (t = {}), deserializeKerasObject(e, serialization.SerializationMap.getMap().classNameMap, t, "activation");
  }

  function getActivation(e) {
    return null == e ? deserializeActivation({
      className: "linear",
      config: {}
    }) : "string" == typeof e ? deserializeActivation({
      className: e,
      config: {}
    }) : e instanceof Activation ? e : deserializeActivation(e);
  }

  serialization.registerClass(Softmax);

  var Regularizer = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }

    return __extends$1(t, e), t;
  }(serialization.Serializable),
      L1L2 = function (e) {
    function t(t) {
      var r = e.call(this) || this,
          n = null == t || null == t.l1 ? .01 : t.l1,
          a = null == t || null == t.l2 ? .01 : t.l2;
      return r.hasL1 = 0 !== n, r.hasL2 = 0 !== a, r.l1 = getScalar(n), r.l2 = getScalar(a), r;
    }

    return __extends$1(t, e), t.prototype.apply = function (e) {
      var t = this;
      return tidy(function () {
        var r = zeros([1]);
        return t.hasL1 && (r = add(r, sum$1(mul(t.l1, abs(e))))), t.hasL2 && (r = add(r, sum$1(mul(t.l2, square$1(e))))), r.asScalar();
      });
    }, t.prototype.getConfig = function () {
      return {
        l1: this.l1.dataSync()[0],
        l2: this.l2.dataSync()[0]
      };
    }, t.fromConfig = function (e, t) {
      return new e({
        l1: t.l1,
        l2: t.l2
      });
    }, t.className = "L1L2", t;
  }(Regularizer);

  function l1(e) {
    return new L1L2({
      l1: null != e ? e.l1 : null,
      l2: 0
    });
  }

  function l2(e) {
    return new L1L2({
      l2: null != e ? e.l2 : null,
      l1: 0
    });
  }

  serialization.registerClass(L1L2);
  var REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {
    l1l2: "L1L2"
  };

  function serializeRegularizer(e) {
    return serializeKerasObject(e);
  }

  function deserializeRegularizer(e, t) {
    return void 0 === t && (t = {}), deserializeKerasObject(e, serialization.SerializationMap.getMap().classNameMap, t, "regularizer");
  }

  function getRegularizer(e) {
    return null == e ? null : "string" == typeof e ? deserializeRegularizer({
      className: e in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[e] : e,
      config: {}
    }) : e instanceof Regularizer ? e : deserializeRegularizer(e);
  }

  var ReLU = function (e) {
    function t(t) {
      var r = e.call(this, null == t ? {} : t) || this;
      return r.supportsMasking = !0, null != t && (r.maxValue = t.maxValue), r;
    }

    return __extends$1(t, e), t.prototype.call = function (e, t) {
      e = getExactlyOneTensor(e);
      var r = relu(e);
      return null != this.maxValue && (r = clipByValue(r, 0, this.maxValue)), r;
    }, t.prototype.computeOutputShape = function (e) {
      return e;
    }, t.prototype.getConfig = function () {
      var t = {
        maxValue: this.maxValue
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t.className = "ReLU", t;
  }(Layer);

  serialization.registerClass(ReLU);

  var LeakyReLU = function (e) {
    function t(t) {
      var r = e.call(this, null == t ? {} : t) || this;
      return r.DEFAULT_ALPHA = .3, null == t && (t = {}), r.alpha = null == t.alpha ? r.DEFAULT_ALPHA : t.alpha, r;
    }

    return __extends$1(t, e), t.prototype.call = function (e, t) {
      var r = getExactlyOneTensor(e);
      return leakyRelu(r, this.alpha);
    }, t.prototype.computeOutputShape = function (e) {
      return e;
    }, t.prototype.getConfig = function () {
      var t = {
        alpha: this.alpha
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t.className = "LeakyReLU", t;
  }(Layer);

  serialization.registerClass(LeakyReLU);

  var PReLU = function (e) {
    function t(t) {
      var r = e.call(this, null == t ? {} : t) || this;
      if (r.DEFAULT_ALPHA_INITIALIZER = "zeros", null == t && (t = {}), r.supportsMasking = !0, r.alphaInitializer = getInitializer(t.alphaInitializer || r.DEFAULT_ALPHA_INITIALIZER), r.alphaRegularizer = getRegularizer(t.alphaRegularizer), r.alphaConstraint = getConstraint(t.alphaConstraint), null == t.sharedAxes) r.sharedAxes = null;else if (Array.isArray(t.sharedAxes)) r.sharedAxes = t.sharedAxes;else {
        if ("number" != typeof t.sharedAxes) throw new ValueError("Expected sharedAxes to be a number or an array of numbers, but got " + t.sharedAxes);
        r.sharedAxes = [t.sharedAxes];
      }
      return r;
    }

    return __extends$1(t, e), t.prototype.build = function (e) {
      var t = (e = getExactlyOneShape(e)).slice(1);
      if (null != this.sharedAxes) for (var r = 0, n = this.sharedAxes; r < n.length; r++) {
        t[(o = n[r]) - 1] = 1;
      }
      this.alpha = this.addWeight("alpha", t, "float32", this.alphaInitializer, this.alphaRegularizer, !0, this.alphaConstraint);
      var a = {};
      if (null != this.sharedAxes) for (var o = 1; o < e.length; ++o) {
        a[o] = e[o];
      }
      this.inputSpec = [new InputSpec({
        ndim: e.length,
        axes: a
      })], this.built = !0;
    }, t.prototype.call = function (e, t) {
      return e = getExactlyOneTensor(e), prelu(e, this.alpha.read());
    }, t.prototype.getConfig = function () {
      var t = {
        alphaInitializer: serializeInitializer(this.alphaInitializer),
        alphaRegularizer: serializeRegularizer(this.alphaRegularizer),
        alphaConstraint: serializeConstraint(this.alphaConstraint),
        sharedAxes: this.sharedAxes
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t.className = "PReLU", t;
  }(Layer);

  serialization.registerClass(PReLU);

  var ELU$1 = function (e) {
    function t(t) {
      var r = e.call(this, null == t ? {} : t) || this;
      if (r.DEFAULT_ALPHA = 1, null == t && (t = {}), null != t.alpha && t.alpha !== r.DEFAULT_ALPHA) throw new NotImplementedError("Non-default alpha value (" + t.alpha + ") is not supported by the ELU layer yet.");
      return r.alpha = null == t.alpha ? r.DEFAULT_ALPHA : t.alpha, r;
    }

    return __extends$1(t, e), t.prototype.call = function (e, t) {
      var r = getExactlyOneTensor(e);
      return elu(r);
    }, t.prototype.computeOutputShape = function (e) {
      return e;
    }, t.prototype.getConfig = function () {
      var t = {
        alpha: this.alpha
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t.className = "ELU", t;
  }(Layer);

  serialization.registerClass(ELU$1);

  var ThresholdedReLU = function (e) {
    function t(t) {
      var r = e.call(this, null == t ? {} : t) || this;
      return r.DEFAULT_THETA = 1, null == t && (t = {}), r.theta = null == t.theta ? r.DEFAULT_THETA : t.theta, r.thetaTensor = getScalar(r.theta), r;
    }

    return __extends$1(t, e), t.prototype.call = function (e, t) {
      var r = getExactlyOneTensor(e);
      return r.mul(cast$1(r.greater(this.thetaTensor), "float32"));
    }, t.prototype.computeOutputShape = function (e) {
      return e;
    }, t.prototype.getConfig = function () {
      var t = {
        theta: this.theta
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t.className = "ThresholdedReLU", t;
  }(Layer);

  serialization.registerClass(ThresholdedReLU);

  var Softmax$1 = function (e) {
    function t(t) {
      var r = e.call(this, null == t ? {} : t) || this;
      return r.DEFAULT_AXIS = 1, null == t && (t = {}), r.softmax = new Softmax().apply, r.axis = null == t.axis ? r.DEFAULT_AXIS : t.axis, r;
    }

    return __extends$1(t, e), t.prototype.call = function (e, t) {
      var r = getExactlyOneTensor(e);
      return this.softmax(r, this.axis);
    }, t.prototype.computeOutputShape = function (e) {
      return e;
    }, t.prototype.getConfig = function () {
      var t = {
        axis: this.axis
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t.className = "Softmax", t;
  }(Layer);

  function normalizeArray(e, t, r) {
    if ("number" == typeof e) return pyListRepeat(e, t);
    if (e.length !== t) throw new ValueError("The " + r + " argument must be a tuple of " + t + " integers. Received: " + e.length + " elements.");

    for (var n = 0; n < t; ++n) {
      var a = e[n];
      if (!isInteger(a)) throw new ValueError("The " + r + " argument must be a tuple of " + t + " integers. Received: " + JSON.stringify(e) + " including a non-integer number " + a);
    }

    return e;
  }

  function convOutputLength(e, t, r, n, a) {
    return void 0 === a && (a = 1), null == e ? e : (o = "same" === r ? e : e - (t + (t - 1) * (a - 1)) + 1, Math.floor((o + n - 1) / n));
    var o;
  }

  function deconvLength(e, t, r, n) {
    if (null == e) return null;
    if ("valid" === n) e = e * t + max$1([r - t, 0]);else {
      if ("same" !== n) throw new ValueError("Unsupport padding mode: " + n + ".");
      e *= t;
    }
    return e;
  }

  function preprocessConv2DInput(e, t) {
    return tidy(function () {
      return checkDataFormat(t), "channelsFirst" === t ? transpose(e, [0, 2, 3, 1]) : e;
    });
  }

  function conv1dWithBias(e, t, r, n, a, o, i) {
    return void 0 === n && (n = 1), void 0 === a && (a = "valid"), void 0 === i && (i = 1), tidy(function () {
      if (null == o && (o = imageDataFormat()), checkDataFormat(o), 3 !== e.shape.length) throw new ValueError("The input of a conv1dWithBias operation should be 3, but is " + e.shape.length + " instead.");
      if (3 !== t.shape.length) throw new ValueError("The kernel for a conv1dWithBias operation should be 3, but is " + t.shape.length + " instead");
      if (null != r && 1 !== r.shape.length) throw new ValueError("The bias for a conv1dWithBias operation should be 1, but is " + t.shape.length + " instead");
      if ("channelsFirst" === o && (e = transpose(e, [0, 2, 1])), "causal" === a) throw new NotImplementedError("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
      var s = conv1d(e, t, n, "same" === a ? "same" : "valid", "NWC", i);
      return null != r && (s = biasAdd(s, r)), s;
    });
  }

  function conv2dWithBias(e, t, r, n, a, o, i) {
    return void 0 === n && (n = [1, 1]), void 0 === a && (a = "valid"), tidy(function () {
      if (null == o && (o = imageDataFormat()), checkDataFormat(o), 3 !== e.rank && 4 !== e.rank) throw new ValueError("conv2dWithBias expects input to be of rank 3 or 4, but received " + e.rank + ".");
      if (3 !== t.rank && 4 !== t.rank) throw new ValueError("conv2dWithBias expects kernel to be of rank 3 or 4, but received " + e.rank + ".");
      var s = preprocessConv2DInput(e, o);
      if ("causal" === a) throw new NotImplementedError("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
      return s = conv2d(s, t, n, "same" === a ? "same" : "valid", "NHWC", i), null != r && (s = biasAdd(s, r)), "channelsFirst" === o && (s = transpose(s, [0, 3, 1, 2])), s;
    });
  }

  serialization.registerClass(Softmax$1);

  var BaseConv = function (e) {
    function t(r, n) {
      var a = e.call(this, n) || this;
      if (a.bias = null, a.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", a.DEFAULT_BIAS_INITIALIZER = "zeros", t.verifyArgs(n), a.rank = r, 1 !== a.rank && 2 !== a.rank) throw new NotImplementedError("Convolution layer for rank other than 1 or 2 (" + a.rank + ") is not implemented yet.");
      if (a.kernelSize = normalizeArray(n.kernelSize, r, "kernelSize"), a.strides = normalizeArray(null == n.strides ? 1 : n.strides, r, "strides"), a.padding = null == n.padding ? "valid" : n.padding, checkPaddingMode(a.padding), a.dataFormat = null == n.dataFormat ? "channelsLast" : n.dataFormat, checkDataFormat(a.dataFormat), a.activation = getActivation(n.activation), a.useBias = null == n.useBias || n.useBias, a.biasInitializer = getInitializer(n.biasInitializer || a.DEFAULT_BIAS_INITIALIZER), a.biasConstraint = getConstraint(n.biasConstraint), a.biasRegularizer = getRegularizer(n.biasRegularizer), a.activityRegularizer = getRegularizer(n.activityRegularizer), a.dilationRate = normalizeArray(null == n.dilationRate ? 1 : n.dilationRate, r, "dilationRate"), 1 === a.rank && Array.isArray(a.dilationRate) && 1 !== a.dilationRate.length) throw new ValueError("dilationRate must be a number or an array of a single number for 1D convolution, but received " + JSON.stringify(a.dilationRate));
      if (2 === a.rank) if ("number" == typeof a.dilationRate) a.dilationRate = [a.dilationRate, a.dilationRate];else if (2 !== a.dilationRate.length) throw new ValueError("dilationRate must be a number or array of two numbers for 2D convolution, but received " + JSON.stringify(a.dilationRate));
      return a;
    }

    return __extends$1(t, e), t.verifyArgs = function (e) {
      if (assert$1("kernelSize" in e, "required key 'kernelSize' not in config"), "number" != typeof e.kernelSize && !checkArrayTypeAndLength(e.kernelSize, "number", 1, 2)) throw new ValueError("BaseConv expects config.kernelSize to be number or number[] with length 1 or 2, but received " + JSON.stringify(e.kernelSize) + ".");
    }, t.prototype.getConfig = function () {
      var t = {
        kernelSize: this.kernelSize,
        strides: this.strides,
        padding: this.padding,
        dataFormat: this.dataFormat,
        dilationRate: this.dilationRate,
        activation: serializeActivation(this.activation),
        useBias: this.useBias,
        biasInitializer: serializeInitializer(this.biasInitializer),
        biasRegularizer: serializeRegularizer(this.biasRegularizer),
        activityRegularizer: serializeRegularizer(this.activityRegularizer),
        biasConstraint: serializeConstraint(this.biasConstraint)
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t;
  }(Layer),
      Conv = function (e) {
    function t(r, n) {
      var a = e.call(this, r, n) || this;
      return a.kernel = null, t.verifyArgs(n), a.filters = n.filters, a.kernelInitializer = getInitializer(n.kernelInitializer || a.DEFAULT_KERNEL_INITIALIZER), a.kernelConstraint = getConstraint(n.kernelConstraint), a.kernelRegularizer = getRegularizer(n.kernelRegularizer), a;
    }

    return __extends$1(t, e), t.prototype.build = function (e) {
      e = getExactlyOneShape(e);
      var t = "channelsFirst" === this.dataFormat ? 1 : e.length - 1;
      if (null == e[t]) throw new ValueError("The channel dimension of the input should be defined. Found " + e[t]);
      var r,
          n = e[t],
          a = this.kernelSize.concat([n, this.filters]);
      this.kernel = this.addWeight("kernel", a, null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [{
        ndim: this.rank + 2,
        axes: (r = {}, r[t] = n, r)
      }], this.built = !0;
    }, t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        var t;
        e = getExactlyOneTensor(e);
        var n = null == r.bias ? null : r.bias.read();
        if (1 === r.rank) t = conv1dWithBias(e, r.kernel.read(), n, r.strides[0], r.padding, r.dataFormat, r.dilationRate[0]);else if (2 === r.rank) t = conv2dWithBias(e, r.kernel.read(), n, r.strides, r.padding, r.dataFormat, r.dilationRate);else if (3 === r.rank) throw new NotImplementedError("3D convolution is not implemented yet.");
        return null != r.activation && (t = r.activation.apply(t)), t;
      });
    }, t.prototype.computeOutputShape = function (e) {
      e = getExactlyOneShape(e);

      for (var t = [], r = "channelsLast" === this.dataFormat ? e.slice(1, e.length - 1) : e.slice(2), n = 0; n < r.length; ++n) {
        var a = convOutputLength(r[n], this.kernelSize[n], this.padding, this.strides[n], "number" == typeof this.dilationRate ? this.dilationRate : this.dilationRate[n]);
        t.push(a);
      }

      var o = [e[0]];
      return "channelsLast" === this.dataFormat ? (o = o.concat(t)).push(this.filters) : (o.push(this.filters), o = o.concat(t)), o;
    }, t.prototype.getConfig = function () {
      var t = {
        filters: this.filters,
        kernelInitializer: serializeInitializer(this.kernelInitializer),
        kernelRegularizer: serializeRegularizer(this.kernelRegularizer),
        kernelConstraint: serializeConstraint(this.kernelConstraint)
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t.verifyArgs = function (e) {
      if (!("filters" in e) || "number" != typeof e.filters || e.filters < 1) throw new ValueError("Convolution layer expected config.filters to be a 'number' > 0 but got " + JSON.stringify(e.filters));
    }, t;
  }(BaseConv),
      Conv2D = function (e) {
    function t(r) {
      var n = e.call(this, 2, r) || this;
      return t.verifyArgs(r), n;
    }

    return __extends$1(t, e), t.prototype.getConfig = function () {
      var t = e.prototype.getConfig.call(this);
      return delete t.rank, t;
    }, t.verifyArgs = function (e) {
      if ("number" != typeof e.kernelSize && !checkArrayTypeAndLength(e.kernelSize, "number", 1, 2)) throw new ValueError("Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received " + JSON.stringify(e.kernelSize) + ".");
    }, t.className = "Conv2D", t;
  }(Conv);

  serialization.registerClass(Conv2D);

  var Conv2DTranspose = function (e) {
    function t(t) {
      var r = e.call(this, t) || this;
      if (r.inputSpec = [new InputSpec({
        ndim: 4
      })], "same" !== r.padding && "valid" !== r.padding) throw new ValueError("Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode " + r.padding);
      return r;
    }

    return __extends$1(t, e), t.prototype.build = function (e) {
      if (4 !== (e = getExactlyOneShape(e)).length) throw new ValueError("Input should have rank 4; Received input shape: " + JSON.stringify(e));
      var t = "channelsFirst" === this.dataFormat ? 1 : e.length - 1;
      if (null == e[t]) throw new ValueError("The channel dimension of the inputs should be defined. Found `None`.");
      var r,
          n = e[t],
          a = this.kernelSize.concat([this.filters, n]);
      this.kernel = this.addWeight("kernel", a, "float32", this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [new InputSpec({
        ndim: 4,
        axes: (r = {}, r[t] = n, r)
      })], this.built = !0;
    }, t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        var t = getExactlyOneTensor(e);
        if (4 !== t.shape.length) throw new ValueError("Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-" + t.shape.length);
        var n,
            a,
            o = t.shape,
            i = o[0];
        "channelsFirst" === r.dataFormat ? (n = 2, a = 3) : (n = 1, a = 2);
        var s = o[n],
            u = o[a],
            l = r.kernelSize[0],
            p = r.kernelSize[1],
            c = r.strides[0],
            h = r.strides[1],
            d = [i, deconvLength(s, c, l, r.padding), deconvLength(u, h, p, r.padding), r.filters];
        "channelsLast" !== r.dataFormat && (t = transpose(t, [0, 2, 3, 1]));
        var f = conv2dTranspose(t, r.kernel.read(), d, r.strides, r.padding);
        return "channelsLast" !== r.dataFormat && (f = transpose(f, [0, 3, 1, 2])), null != r.bias && (f = biasAdd(f, r.bias.read(), r.dataFormat)), null != r.activation && (f = r.activation.apply(f)), f;
      });
    }, t.prototype.computeOutputShape = function (e) {
      var t,
          r,
          n,
          a = (e = getExactlyOneShape(e)).slice();
      "channelsFirst" === this.dataFormat ? (t = 1, r = 2, n = 3) : (t = 3, r = 1, n = 2);
      var o = this.kernelSize[0],
          i = this.kernelSize[1],
          s = this.strides[0],
          u = this.strides[1];
      return a[t] = this.filters, a[r] = deconvLength(a[r], s, o, this.padding), a[n] = deconvLength(a[n], u, i, this.padding), a;
    }, t.prototype.getConfig = function () {
      var t = e.prototype.getConfig.call(this);
      return delete t.dilationRate, t;
    }, t.className = "Conv2DTranspose", t;
  }(Conv2D);

  serialization.registerClass(Conv2DTranspose);

  var SeparableConv = function (e) {
    function t(t, r) {
      var n = e.call(this, t, r) || this;
      if (n.DEFAULT_DEPTHWISE_INITIALIZER = "glorotUniform", n.DEFAULT_POINTWISE_INITIALIZER = "glorotUniform", n.depthwiseKernel = null, n.pointwiseKernel = null, null == r.filters) throw new ValueError("The `filters` configuration field is required by SeparableConv, but is unspecified.");
      if (null != r.kernelInitializer || null != r.kernelRegularizer || null != r.kernelConstraint) throw new ValueError("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");
      if (null != r.padding && "same" !== r.padding && "valid" !== r.padding) throw new ValueError("SeparableConv" + n.rank + "D supports only padding modes: 'same' and 'valid', but received " + JSON.stringify(r.padding));
      return n.depthMultiplier = null == r.depthMultiplier ? 1 : r.depthMultiplier, n.depthwiseInitializer = getInitializer(r.depthwiseInitializer || n.DEFAULT_DEPTHWISE_INITIALIZER), n.depthwiseRegularizer = getRegularizer(r.depthwiseRegularizer), n.depthwiseConstraint = getConstraint(r.depthwiseConstraint), n.pointwiseInitializer = getInitializer(r.depthwiseInitializer || n.DEFAULT_POINTWISE_INITIALIZER), n.pointwiseRegularizer = getRegularizer(r.pointwiseRegularizer), n.pointwiseConstraint = getConstraint(r.pointwiseConstraint), n;
    }

    return __extends$1(t, e), t.prototype.build = function (e) {
      if ((e = getExactlyOneShape(e)).length < this.rank + 2) throw new ValueError("Inputs to SeparableConv" + this.rank + "D should have rank " + (this.rank + 2) + ", but received input shape: " + JSON.stringify(e));
      var t,
          r = "channelsFirst" === this.dataFormat ? 1 : e.length - 1;
      if (null == e[r] || e[r] < 0) throw new ValueError("The channel dimension of the inputs should be defined, but found " + JSON.stringify(e[r]));

      for (var n = e[r], a = this.kernelSize.concat([n, this.depthMultiplier]), o = [], i = 0; i < this.rank; ++i) {
        o.push(1);
      }

      o.push(n * this.depthMultiplier, this.filters), this.depthwiseKernel = this.addWeight("depthwise_kernel", a, "float32", this.depthwiseInitializer, this.depthwiseRegularizer, !0, this.depthwiseConstraint), this.pointwiseKernel = this.addWeight("pointwise_kernel", o, "float32", this.pointwiseInitializer, this.pointwiseRegularizer, !0, this.pointwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.inputSpec = [new InputSpec({
        ndim: this.rank + 2,
        axes: (t = {}, t[r] = n, t)
      })], this.built = !0;
    }, t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        var t;
        if (e = getExactlyOneTensor(e), 1 === r.rank) throw new NotImplementedError("1D separable convolution is not implemented yet.");
        return 2 === r.rank && ("channelsFirst" === r.dataFormat && (e = transpose(e, [0, 2, 3, 1])), t = separableConv2d(e, r.depthwiseKernel.read(), r.pointwiseKernel.read(), r.strides, r.padding, r.dilationRate, "NHWC")), r.useBias && (t = biasAdd(t, r.bias.read(), r.dataFormat)), null != r.activation && (t = r.activation.apply(t)), "channelsFirst" === r.dataFormat && (t = transpose(t, [0, 3, 1, 2])), t;
      });
    }, t.prototype.getConfig = function () {
      var t = e.prototype.getConfig.call(this);
      return delete t.rank, delete t.kernelInitializer, delete t.kernelRegularizer, delete t.kernelConstraint, t.depthwiseInitializer = serializeInitializer(this.depthwiseInitializer), t.pointwiseInitializer = serializeInitializer(this.pointwiseInitializer), t.depthwiseRegularizer = serializeRegularizer(this.depthwiseRegularizer), t.pointwiseRegularizer = serializeRegularizer(this.pointwiseRegularizer), t.depthwiseConstraint = serializeConstraint(this.depthwiseConstraint), t.pointwiseConstraint = serializeConstraint(this.pointwiseConstraint), t;
    }, t.className = "SeparableConv", t;
  }(Conv),
      SeparableConv2D = function (e) {
    function t(t) {
      return e.call(this, 2, t) || this;
    }

    return __extends$1(t, e), t.className = "SeparableConv2D", t;
  }(SeparableConv);

  serialization.registerClass(SeparableConv2D);

  var Conv1D = function (e) {
    function t(r) {
      var n = e.call(this, 1, r) || this;
      return t.verifyArgs(r), n.inputSpec = [{
        ndim: 3
      }], n;
    }

    return __extends$1(t, e), t.prototype.getConfig = function () {
      var t = e.prototype.getConfig.call(this);
      return delete t.rank, delete t.dataFormat, t;
    }, t.verifyArgs = function (e) {
      if ("number" != typeof e.kernelSize && !checkArrayTypeAndLength(e.kernelSize, "number", 1, 1)) throw new ValueError("Conv1D expects config.kernelSize to be number or number[] with length 1, but received " + JSON.stringify(e.kernelSize) + ".");
    }, t.className = "Conv1D", t;
  }(Conv);

  serialization.registerClass(Conv1D);

  var Cropping2D = function (e) {
    function t(t) {
      var r = e.call(this, t) || this;
      return "number" == typeof t.cropping ? r.cropping = [[t.cropping, t.cropping], [t.cropping, t.cropping]] : "number" == typeof t.cropping[0] ? r.cropping = [[t.cropping[0], t.cropping[0]], [t.cropping[1], t.cropping[1]]] : r.cropping = t.cropping, r.dataFormat = void 0 === t.dataFormat ? "channelsLast" : t.dataFormat, r.inputSpec = [{
        ndim: 4
      }], r;
    }

    return __extends$1(t, e), t.prototype.computeOutputShape = function (e) {
      return "channelsFirst" === this.dataFormat ? [e[0], e[1], e[2] - this.cropping[0][0] - this.cropping[0][1], e[3] - this.cropping[1][0] - this.cropping[1][1]] : [e[0], e[1] - this.cropping[0][0] - this.cropping[0][1], e[2] - this.cropping[1][0] - this.cropping[1][1], e[3]];
    }, t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        return e = getExactlyOneTensor(e), "channelsLast" === r.dataFormat ? sliceAlongAxis(sliceAlongAxis(e, r.cropping[0][0], e.shape[1] - r.cropping[0][0] - r.cropping[0][1], 2), r.cropping[1][0], e.shape[2] - r.cropping[1][1] - r.cropping[1][0], 3) : sliceAlongAxis(sliceAlongAxis(e, r.cropping[0][0], e.shape[2] - r.cropping[0][0] - r.cropping[0][1], 3), r.cropping[1][0], e.shape[3] - r.cropping[1][1] - r.cropping[1][0], 4);
      });
    }, t.prototype.getConfig = function () {
      var t = {
        cropping: this.cropping,
        dataFormat: this.dataFormat
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t.className = "Cropping2D", t;
  }(Layer);

  serialization.registerClass(Cropping2D);

  var UpSampling2D = function (e) {
    function t(t) {
      var r = e.call(this, t) || this;
      return r.DEFAULT_SIZE = [2, 2], r.inputSpec = [{
        ndim: 4
      }], r.size = null == t.size ? r.DEFAULT_SIZE : t.size, r.dataFormat = null == t.dataFormat ? "channelsLast" : t.dataFormat, r;
    }

    return __extends$1(t, e), t.prototype.computeOutputShape = function (e) {
      if ("channelsFirst" === this.dataFormat) {
        var t = null == e[2] ? null : this.size[0] * e[2],
            r = null == e[3] ? null : this.size[1] * e[3];
        return [e[0], e[1], t, r];
      }

      return t = null == e[1] ? null : this.size[0] * e[1], r = null == e[2] ? null : this.size[1] * e[2], [e[0], t, r, e[3]];
    }, t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        var t = getExactlyOneTensor(e),
            n = t.shape;

        if ("channelsFirst" === r.dataFormat) {
          t = transpose(t, [0, 2, 3, 1]);
          var a = r.size[0] * n[2],
              o = r.size[1] * n[3],
              i = t.resizeNearestNeighbor([a, o]);
          return transpose(i, [0, 3, 1, 2]);
        }

        return a = r.size[0] * n[1], o = r.size[1] * n[2], t.resizeNearestNeighbor([a, o]);
      });
    }, t.prototype.getConfig = function () {
      var t = {
        size: this.size,
        dataFormat: this.dataFormat
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t.className = "UpSampling2D", t;
  }(Layer);

  function depthwiseConv2d$1(e, t, r, n, a, o) {
    return void 0 === r && (r = [1, 1]), void 0 === n && (n = "valid"), tidy(function () {
      null == a && (a = imageDataFormat()), checkDataFormat(a);
      var i = preprocessConv2DInput(e, a);
      if (4 !== e.rank) throw new ValueError("Input for depthwiseConv2d is required to be 4-D, but is instead " + e.rank + "-D");
      if (4 !== t.rank) throw new ValueError("depthwiseKernel is required to be 4-D, but is instead " + t.rank + "-D");
      return i = depthwiseConv2d(i, t, r, "same" === n ? "same" : "valid", "NHWC", o), "channelsFirst" === a && (i = transpose(i, [0, 3, 1, 2])), i;
    });
  }

  serialization.registerClass(UpSampling2D);

  var DepthwiseConv2D = function (e) {
    function t(t) {
      var r = e.call(this, 2, t) || this;
      return r.depthwiseKernel = null, r.depthMultiplier = null == t.depthMultiplier ? 1 : t.depthMultiplier, r.depthwiseInitializer = getInitializer(t.depthwiseInitializer || r.DEFAULT_KERNEL_INITIALIZER), r.depthwiseConstraint = getConstraint(t.depthwiseConstraint), r.depthwiseRegularizer = getRegularizer(t.depthwiseRegularizer), r;
    }

    return __extends$1(t, e), t.prototype.build = function (e) {
      if ((e = getExactlyOneShape(e)).length < 4) throw new ValueError("Inputs to DepthwiseConv2D should have rank 4. Received input shape: " + JSON.stringify(e) + ".");
      var t = "channelsFirst" === this.dataFormat ? 1 : 3;
      if (null == e[t] || e[t] < 0) throw new ValueError("The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (" + e[t] + ").");
      var r = e[t],
          n = [this.kernelSize[0], this.kernelSize[1], r, this.depthMultiplier];
      this.depthwiseKernel = this.addWeight("depthwise_kernel", n, null, this.depthwiseInitializer, this.depthwiseRegularizer, !0, this.depthwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [r * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
    }, t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        var t = depthwiseConv2d$1(e = getExactlyOneTensor(e), r.depthwiseKernel.read(), r.strides, r.padding, r.dataFormat, null);
        return r.useBias && (t = biasAdd(t, r.bias.read(), r.dataFormat)), null != r.activation && (t = r.activation.apply(t)), t;
      });
    }, t.prototype.computeOutputShape = function (e) {
      e = getExactlyOneShape(e);
      var t = "channelsFirst" === this.dataFormat ? e[2] : e[1],
          r = "channelsFirst" === this.dataFormat ? e[3] : e[2],
          n = "channelsFirst" === this.dataFormat ? e[1] * this.depthMultiplier : e[3] * this.depthMultiplier,
          a = convOutputLength(t, this.kernelSize[0], this.padding, this.strides[0]),
          o = convOutputLength(r, this.kernelSize[1], this.padding, this.strides[1]);
      return "channelsFirst" === this.dataFormat ? [e[0], n, a, o] : [e[0], a, o, n];
    }, t.prototype.getConfig = function () {
      var t = e.prototype.getConfig.call(this);
      return t.depthMultiplier = this.depthMultiplier, t.depthwiseInitializer = serializeInitializer(this.depthwiseInitializer), t.depthwiseRegularizer = serializeRegularizer(this.depthwiseRegularizer), t.depthwiseConstraint = serializeConstraint(this.depthwiseRegularizer), t;
    }, t.className = "DepthwiseConv2D", t;
  }(BaseConv);

  serialization.registerClass(DepthwiseConv2D);

  var Dropout = function (e) {
    function t(t) {
      var r = e.call(this, t) || this;
      if (r.rate = Math.max(Math.min(t.rate, 1), 0), r.rateScalar = getScalar(r.rate), r.noiseShape = t.noiseShape, r.seed = t.seed, null != r.seed) throw new NotImplementedError("Non-default seed is not implemented in Dropout layer yet: " + r.seed);
      return r.supportsMasking = !0, r;
    }

    return __extends$1(t, e), t.prototype.getNoiseShape = function (e) {
      if (null == this.noiseShape) return this.noiseShape;

      for (var t = e.shape, r = [], n = 0; n < this.noiseShape.length; ++n) {
        r.push(null == this.noiseShape[n] ? t[n] : this.noiseShape[n]);
      }

      return r;
    }, t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        r.invokeCallHook(e, t);
        var n = getExactlyOneTensor(e);
        if (null != r.noiseShape && !util.arraysEqual(n.shape, r.noiseShape)) throw new NotImplementedError("Non-default noise shape is not implemented in Dropout layer yet: " + JSON.stringify(r.noiseShape));

        if (0 < r.rate && r.rate < 1) {
          var a = null != t.training && t.training,
              o = r.getNoiseShape(n);
          return inTrainPhase(function () {
            return dropout(n, r.rateScalar, o, r.seed);
          }, function () {
            return n;
          }, a);
        }

        return e;
      });
    }, t.prototype.getConfig = function () {
      var t = {
        rate: this.rate,
        noiseShape: this.noiseShape,
        seed: this.seed
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t.prototype.dispose = function () {
      var t = e.prototype.dispose.call(this);
      return this.rateScalar.isDisposed || (this.rateScalar.dispose(), t.numDisposedVariables++), t;
    }, t.className = "Dropout", t;
  }(Layer);

  serialization.registerClass(Dropout);

  var Dense = function (e) {
    function t(t) {
      var r = e.call(this, t) || this;

      if (r.activation = null, r.useBias = !0, r.kernel = null, r.bias = null, r.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", r.DEFAULT_BIAS_INITIALIZER = "zeros", null == t.batchInputShape && null == t.inputShape && null != t.inputDim) {
        var n = null;
        null != t.batchSize && (n = t.batchSize), r.batchInputShape = [n, t.inputDim];
      }

      return r.units = t.units, r.activation = getActivation(t.activation), null != t.useBias && (r.useBias = t.useBias), r.kernelInitializer = getInitializer(t.kernelInitializer || r.DEFAULT_KERNEL_INITIALIZER), r.biasInitializer = getInitializer(t.biasInitializer || r.DEFAULT_BIAS_INITIALIZER), r.kernelConstraint = getConstraint(t.kernelConstraint), r.biasConstraint = getConstraint(t.biasConstraint), r.kernelRegularizer = getRegularizer(t.kernelRegularizer), r.biasRegularizer = getRegularizer(t.biasRegularizer), r.activityRegularizer = getRegularizer(t.activityRegularizer), r.supportsMasking = !0, r.inputSpec = [{
        minNDim: 2
      }], r;
    }

    return __extends$1(t, e), t.prototype.build = function (e) {
      var t,
          r = (e = getExactlyOneShape(e))[e.length - 1];
      null == this.kernel && (this.kernel = this.addWeight("kernel", [r, this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint))), this.inputSpec = [{
        minNDim: 2,
        axes: (t = {}, t[-1] = r, t)
      }], this.built = !0;
    }, t.prototype.computeOutputShape = function (e) {
      var t = (e = getExactlyOneShape(e)).slice();
      return t[t.length - 1] = this.units, t;
    }, t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        r.invokeCallHook(e, t);
        var n = dot$1(getExactlyOneTensor(e), r.kernel.read());
        return null != r.bias && (n = biasAdd(n, r.bias.read())), null != r.activation && (n = r.activation.apply(n)), n;
      });
    }, t.prototype.getConfig = function () {
      var t = {
        units: this.units,
        activation: serializeActivation(this.activation),
        useBias: this.useBias,
        kernelInitializer: serializeInitializer(this.kernelInitializer),
        biasInitializer: serializeInitializer(this.biasInitializer),
        kernelRegularizer: serializeRegularizer(this.kernelRegularizer),
        biasRegularizer: serializeRegularizer(this.biasRegularizer),
        activityRegularizer: serializeRegularizer(this.activityRegularizer),
        kernelConstraint: serializeConstraint(this.kernelConstraint),
        biasConstraint: serializeConstraint(this.biasConstraint)
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t.className = "Dense", t;
  }(Layer);

  serialization.registerClass(Dense);

  var Flatten = function (e) {
    function t(t) {
      var r = e.call(this, t || {}) || this;
      return r.inputSpec = [{
        minNDim: 3
      }], r;
    }

    return __extends$1(t, e), t.prototype.computeOutputShape = function (e) {
      for (var t = 0, r = (e = getExactlyOneShape(e)).slice(1); t < r.length; t++) {
        if (null == r[t]) throw new ValueError('The shape of the input to "Flatten" is not fully defined (got ' + e.slice(1) + '). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.');
      }

      return [e[0], arrayProd(e, 1)];
    }, t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        return r.invokeCallHook(e, t), batchFlatten(getExactlyOneTensor(e));
      });
    }, t.className = "Flatten", t;
  }(Layer);

  serialization.registerClass(Flatten);

  var Activation$1 = function (e) {
    function t(t) {
      var r = e.call(this, t) || this;
      return r.supportsMasking = !0, r.activation = getActivation(t.activation), r;
    }

    return __extends$1(t, e), t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        r.invokeCallHook(e, t);
        var n = getExactlyOneTensor(e);
        return r.activation.apply(n);
      });
    }, t.prototype.getConfig = function () {
      var t = {
        activation: serializeActivation(this.activation)
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t.className = "Activation", t;
  }(Layer);

  serialization.registerClass(Activation$1);

  var RepeatVector = function (e) {
    function t(t) {
      var r = e.call(this, t) || this;
      return r.n = t.n, r.inputSpec = [{
        ndim: 2
      }], r;
    }

    return __extends$1(t, e), t.prototype.computeOutputShape = function (e) {
      return [e[0], this.n, e[1]];
    }, t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        return repeat(e = getExactlyOneTensor(e), r.n);
      });
    }, t.prototype.getConfig = function () {
      var t = {
        n: this.n
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t.className = "RepeatVector", t;
  }(Layer);

  serialization.registerClass(RepeatVector);

  var Reshape = function (e) {
    function t(t) {
      var r = e.call(this, t) || this;
      r.targetShape = t.targetShape;

      for (var n = 0; n < r.targetShape.length; ++n) {
        r.isUnknown(r.targetShape[n]) && (r.targetShape[n] = null);
      }

      return r;
    }

    return __extends$1(t, e), t.prototype.isUnknown = function (e) {
      return e < 0 || null == e;
    }, t.prototype.fixUnknownDimension = function (e, t) {
      for (var r = "Total size of new array must be unchanged.", n = t.slice(), a = 1, o = null, i = 0; i < n.length; ++i) {
        var s = n[i];

        if (this.isUnknown(s)) {
          if (null !== o) throw new ValueError("Can only specifiy one unknown dimension.");
          o = i;
        } else a *= s;
      }

      var u = arrayProd(e);

      if (null !== o) {
        if (0 === a || u % a != 0) throw new ValueError(r);
        n[o] = u / a;
      } else if (u !== a) throw new ValueError(r);

      return n;
    }, t.prototype.computeOutputShape = function (e) {
      for (var t = !1, r = 0; r < e.length; ++r) {
        if (this.isUnknown(e[r])) {
          t = !0;
          break;
        }
      }

      return t ? e.slice(0, 1).concat(this.targetShape) : e.slice(0, 1).concat(this.fixUnknownDimension(e.slice(1), this.targetShape));
    }, t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        r.invokeCallHook(e, t);
        var n = getExactlyOneTensor(e),
            a = n.shape,
            o = a.slice(0, 1).concat(r.fixUnknownDimension(a.slice(1), r.targetShape));
        return n.reshape(o);
      });
    }, t.prototype.getConfig = function () {
      var t = {
        targetShape: this.targetShape
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t.className = "Reshape", t;
  }(Layer);

  serialization.registerClass(Reshape);

  var Permute = function (e) {
    function t(t) {
      var r = e.call(this, t) || this;
      if (null == t.dims) throw new Error("Required configuration field `dims` is missing during Permute constructor call.");
      if (!Array.isArray(t.dims)) throw new Error("Permute constructor requires `dims` to be an Array, but received " + t.dims + " instead.");
      var n = range$1(1, t.dims.length + 1);
      if (!util.arraysEqual(t.dims.slice().sort(), n)) throw new Error("Invalid permutation `dims`: " + JSON.stringify(t.dims) + " `dims` must contain consecutive integers starting from 1.");
      return r.dims = t.dims, r.dimsIncludingBatch = [0].concat(r.dims), r.inputSpec = [new InputSpec({
        ndim: r.dims.length + 1
      })], r;
    }

    return __extends$1(t, e), t.prototype.computeOutputShape = function (e) {
      var t = (e = getExactlyOneShape(e)).slice();
      return this.dims.forEach(function (r, n) {
        t[n + 1] = e[r];
      }), t;
    }, t.prototype.call = function (e, t) {
      return transpose(getExactlyOneTensor(e), this.dimsIncludingBatch);
    }, t.prototype.getConfig = function () {
      var t = {
        dims: this.dims
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t.className = "Permute", t;
  }(Layer);

  serialization.registerClass(Permute);

  var Embedding = function (e) {
    function t(t) {
      var r = e.call(this, t) || this;

      if (r.embeddings = null, r.DEFAULT_EMBEDDINGS_INITIALIZER = "randomUniform", null == t.batchInputShape && null == t.inputShape) {
        var n = null;
        null != t.batchSize && (n = t.batchSize), null == t.inputLength ? r.batchInputShape = [n, null] : r.batchInputShape = [n].concat(toList(t.inputLength));
      }

      return r.inputDim = t.inputDim, r.outputDim = t.outputDim, r.embeddingsInitializer = getInitializer(t.embeddingsInitializer || r.DEFAULT_EMBEDDINGS_INITIALIZER), r.embeddingsRegularizer = getRegularizer(t.embeddingsRegularizer), r.activityRegularizer = getRegularizer(t.activityRegularizer), r.embeddingsConstraint = getConstraint(t.embeddingsConstraint), r.maskZero = t.maskZero, r.supportsMasking = t.maskZero, r.inputLength = t.inputLength, r;
    }

    return __extends$1(t, e), t.prototype.build = function (e) {
      this.embeddings = this.addWeight("embeddings", [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, !0, this.embeddingsConstraint), this.built = !0;
    }, t.prototype.warnOnIncompatibleInputShape = function (e) {}, t.prototype.computeMask = function (e, t) {
      var r = this;
      return tidy(function () {
        return r.maskZero ? (e = getExactlyOneTensor(e), notEqual(e, zerosLike(e))) : null;
      });
    }, t.prototype.computeOutputShape = function (e) {
      if (e = getExactlyOneShape(e), null == this.inputLength) return e.concat([this.outputDim]);
      var t = toList(this.inputLength);
      if (t.length !== e.length - 1) throw new ValueError('"inputLength" is ' + this.inputLength + ", but received input shape has shape " + e);

      for (var r = 0, n = 0; n < t.length; ++n) {
        var a = t[n],
            o = e[n + 1];
        if (null != a && null != o && a !== o) throw new ValueError('"inputLength" is ' + this.inputLength + ", but received input shape has shape " + e);
        null == a && (t[r] = o), r++;
      }

      return [e[0]].concat(t, [this.outputDim]);
    }, t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        r.invokeCallHook(e, t);
        var n = getExactlyOneTensor(e);
        return "int32" !== n.dtype && (n = cast$1(n, "int32")), gather$1(r.embeddings.read(), n.as1D()).reshape(getExactlyOneShape(r.computeOutputShape(n.shape)));
      });
    }, t.prototype.getConfig = function () {
      var t = {
        inputDim: this.inputDim,
        outputDim: this.outputDim,
        embeddingsInitializer: serializeInitializer(this.embeddingsInitializer),
        embeddingsRegularizer: serializeRegularizer(this.embeddingsRegularizer),
        activityRegularizer: serializeRegularizer(this.activityRegularizer),
        embeddingsConstraint: serializeConstraint(this.embeddingsConstraint),
        maskZero: this.maskZero,
        inputLength: this.inputLength
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t.className = "Embedding", t;
  }(Layer);

  serialization.registerClass(Embedding);

  var Merge = function (e) {
    function t(t) {
      var r = e.call(this, t || {}) || this;
      return r.supportsMasking = !0, r;
    }

    return __extends$1(t, e), t.prototype.mergeFunction = function (e) {
      throw new NotImplementedError();
    }, t.prototype.computeElementwiseOpOutputShape = function (e, t) {
      if (null == e || null == t) return null;
      if (e.length < t.length) return this.computeElementwiseOpOutputShape(t, e);
      if (0 === t.length) return e;

      for (var r = e.slice(0, e.length - t.length), n = 0; n < t.length; ++n) {
        var a = e[e.length - t.length + n],
            o = t[n];
        if (null == a || null == o || a < 0 || o < 0) r.push(null);else if (1 === a) r.push(o);else if (1 === o) r.push(a);else {
          if (a !== o) throw new ValueError("Operands could not be broadcast together with shapes " + JSON.stringify(e) + " " + JSON.stringify(t));
          r.push(a);
        }
      }

      return r;
    }, t.prototype.build = function (e) {
      if (Array.isArray(e) && !Array.isArray(e[0]) && (e = [getExactlyOneShape(e)]), (e = e).length < 2) throw new ValueError("A merge layer should be called on an Array of at least 2 inputs. Got " + e.length + " input(s).");

      for (var t = [], r = 0, n = e; r < n.length; r++) {
        null != (i = n[r]) && null !== i[0] && t.push(i[0]);
      }

      if ((t = unique(t)).length > 1) throw new ValueError("Can not merge tensors with different batch sizes. Got tensors with shapes: " + JSON.stringify(e) + ".");

      for (var a = null == e[0] ? null : e[0].slice(1), o = 1; o < e.length; ++o) {
        var i = null == e[o] ? null : e[o].slice(1);
        a = this.computeElementwiseOpOutputShape(a, i);
      }

      var s = e.map(function (e) {
        return e.length;
      });
      -1 === e.indexOf(null) && 1 === unique(s).length ? this.reshapeRequired = !1 : this.reshapeRequired = !0;
    }, t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        if (e = e, r.reshapeRequired) {
          var t = [],
              n = e.map(function (e) {
            return e.rank;
          });

          if (-1 === n.indexOf(null)) {
            for (var a = max$1(n), o = 0, i = e; o < i.length; o++) {
              for (var s = (h = i[o]).rank, u = 0; u < a - s; ++u) {
                h = expandDims$1(h, 1);
              }

              t.push(h);
            }

            return r.mergeFunction(t);
          }

          for (var l = !1, p = 0, c = e; p < c.length; p++) {
            var h;

            if (null == (s = (h = c[p]).rank)) {
              var d = h.shape,
                  f = d[0],
                  m = d.slice(1).concat([f]),
                  g = h.reshape([f].concat(arrayProd(d.slice(1))));
              g = (g = transpose(g, [1, 0])).reshape(m), t.push(g), l = !0;
            } else if (s > 1) {
              var y = range$1(1, s).concat([0]);
              t.push(transpose(h, y)), l = !0;
            } else t.push(h);
          }

          var v = r.mergeFunction(t),
              x = v.rank;
          if (l) if (null == x) {
            var b = v.shape;
            m = [f = b[b.length - 1]].concat(b.slice(0, b.length - 1)), v = transpose(v.reshape([-1, f]), [1, 0]).reshape(m);
          } else x > 1 && (y = [x - 1].concat(range$1(0, x - 1)), v = transpose(v, y));
          return v;
        }

        return r.mergeFunction(e);
      });
    }, t.prototype.computeOutputShape = function (e) {
      var t;
      t = null == (e = e)[0] ? null : e[0].slice(1);

      for (var r = 1; r < e.length; ++r) {
        var n = null == e[r] ? null : e[r].slice(1);
        t = this.computeElementwiseOpOutputShape(t, n);
      }

      for (var a = [], o = 0, i = e; o < i.length; o++) {
        null != (n = i[o]) && null !== n[0] && a.push(n[0]);
      }

      return 1 === (a = unique(a)).length ? a.concat(t) : [null].concat(t);
    }, t.prototype.computeMask = function (e, t) {
      return tidy(function () {
        if (null == t) return null;
        if (!Array.isArray(t)) throw new ValueError("`mask` should be an Array");
        if (!Array.isArray(e)) throw new ValueError("`inputs` should be an Array");
        if (t.length !== e.length) throw new ValueError("The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (" + e.length + " vs " + t.length + ")");
        if (t.every(function (e) {
          return null == e;
        })) return null;

        for (var r = (t = t.map(function (e) {
          return null == e ? e : expandDims(e, 0);
        }))[0], n = 1; n < t.length - 1; ++n) {
          r = logicalAnd(r, t[n]);
        }

        return r;
      });
    }, t;
  }(Layer),
      Add = function (e) {
    function t(t) {
      return e.call(this, t) || this;
    }

    return __extends$1(t, e), t.prototype.mergeFunction = function (e) {
      return tidy(function () {
        for (var t = e[0].clone(), r = 1; r < e.length; ++r) {
          t = add(t, e[r]);
        }

        return t;
      });
    }, t.className = "Add", t;
  }(Merge);

  serialization.registerClass(Add);

  var Multiply = function (e) {
    function t(t) {
      return e.call(this, t) || this;
    }

    return __extends$1(t, e), t.prototype.mergeFunction = function (e) {
      return tidy(function () {
        for (var t = e[0].clone(), r = 1; r < e.length; ++r) {
          t = mul(t, e[r]);
        }

        return t;
      });
    }, t.className = "Multiply", t;
  }(Merge);

  serialization.registerClass(Multiply);

  var Average = function (e) {
    function t(t) {
      return e.call(this, t) || this;
    }

    return __extends$1(t, e), t.prototype.mergeFunction = function (e) {
      return tidy(function () {
        for (var t = e[0].clone(), r = 1; r < e.length; ++r) {
          t = add(t, e[r]);
        }

        return mul(getScalar(1 / e.length), t);
      });
    }, t.className = "Average", t;
  }(Merge);

  serialization.registerClass(Average);

  var Maximum = function (e) {
    function t(t) {
      return e.call(this, t) || this;
    }

    return __extends$1(t, e), t.prototype.mergeFunction = function (e) {
      return tidy(function () {
        for (var t = e[0], r = 1; r < e.length; ++r) {
          t = maximum(t, e[r]);
        }

        return t;
      });
    }, t.className = "Maximum", t;
  }(Merge);

  serialization.registerClass(Maximum);

  var Minimum = function (e) {
    function t(t) {
      return e.call(this, t) || this;
    }

    return __extends$1(t, e), t.prototype.mergeFunction = function (e) {
      return tidy(function () {
        for (var t = e[0], r = 1; r < e.length; ++r) {
          t = minimum(t, e[r]);
        }

        return t;
      });
    }, t.className = "Minimum", t;
  }(Merge);

  serialization.registerClass(Minimum);

  var Concatenate = function (e) {
    function t(t) {
      var r = e.call(this, t) || this;
      return r.DEFAULT_AXIS = -1, null == t && (t = {}), r.axis = null == t.axis ? r.DEFAULT_AXIS : t.axis, r.supportsMasking = !0, r.reshapeRequired = !1, r;
    }

    return __extends$1(t, e), t.prototype.build = function (e) {
      if (!Array.isArray(e) || !Array.isArray(e[0]) || 1 === e.length) throw new ValueError("A `Concatenate` layer should be called on a list of at least 2 inputs");

      for (var t = !0, r = 0, n = e = e; r < n.length; r++) {
        if (null != (p = n[r])) {
          t = !1;
          break;
        }
      }

      if (!t) {
        for (var a = [], o = 0; o < e.length; ++o) {
          var i = e[o].slice();
          i.splice(this.axis, 1);

          for (var s = !1, u = 0, l = a; u < l.length; u++) {
            var p = l[u];

            if (util.arraysEqual(p, i)) {
              s = !0;
              break;
            }
          }

          s || a.push(i);
        }

        if (a.length > 1) throw new ValueError("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: " + JSON.stringify(e));
      }
    }, t.prototype.mergeFunction = function (e) {
      var t = this;
      return tidy(function () {
        return concatenate(e, t.axis);
      });
    }, t.prototype.computeOutputShape = function (e) {
      if (!Array.isArray(e) || !Array.isArray(e[0])) throw new ValueError("A `Concatenate` layer should be called on a list of inputs.");

      for (var t = e, r = t[0].slice(), n = this.axis < 0 ? r.length + this.axis : this.axis, a = 0, o = t.slice(1); a < o.length; a++) {
        var i = o[a];

        if (null == r[n] || null == i[n]) {
          r[n] = null;
          break;
        }

        r[n] += i[n];
      }

      return r;
    }, t.prototype.computeMask = function (e, t) {
      var r = this;
      if (null == t) return null;
      if (!Array.isArray(t)) throw new ValueError("`mask` should be an array for Concatenate");
      if (!Array.isArray(e)) throw new ValueError("`inputs` should be an array for Concatenate");
      if (t.length !== e.length) throw new ValueError("Mismatch in the length of mask (" + t.length + ") and the legnth of inputs (" + e.length + ")");
      return tidy(function () {
        var n = !0;
        if (t.forEach(function (e) {
          null == e || (n = !1);
        }), n) return null;

        for (var a = [], o = 0; o < e.length; ++o) {
          null == t[o] ? a.push(onesLike(e[o]).asType("bool")) : t[o].rank < e[o].rank ? a.push(expandDims(t[o], -1)) : a.push(t[o]);
        }

        var i = concat(a, r.axis);
        return all(i, -1, !1);
      });
    }, t.prototype.getConfig = function () {
      var t = {
        axis: this.axis
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t.className = "Concatenate", t;
  }(Merge);

  function interpretAxis(e, t) {
    for (; e < 0;) {
      e += t;
    }

    return e;
  }

  function batchDot(e, t, r) {
    if (e.shape.length > 3 || t.shape.length > 3) throw new NotImplementedError("batchDot is not implemented for tensors of 4D or higher rank yet");
    if (util.assert(e.shape.length >= 2, "batchDot requires the rank of x to be >= 2, but got " + e.shape.length), util.assert(e.shape.length >= 2, "batchDot requires the rank of y to be >= 2, but got " + t.shape.length), "number" == typeof r && (r = [r, r]), "complex64" === e.dtype || "complex64" === t.dtype) throw new NotImplementedError("batchDot is not implemented for complex64-type Tensors yet.");
    var n = e.shape.length,
        a = t.shape.length;
    null == r && (r = [n - 1, a - 2]);
    var o = r;
    return tidy(function () {
      var r, i;

      if (n > a) {
        r = n - a;

        for (var s = [], u = 0; u < r; ++u) {
          s.push(1);
        }

        t = t.reshape(t.shape.concat(s));
      } else if (a > n) {
        for (r = a - n, s = [], u = 0; u < r; ++u) {
          s.push(1);
        }

        e = e.reshape(e.shape.concat(s));
      } else r = 0;

      if (2 === e.shape.length && 2 === t.shape.length) i = o[0] === o[1] ? e.mulStrict(t).sum(o[0]) : e.transpose([1, 0]).mulStrict(t).sum(o[1]);else {
        var l = o[0] !== e.shape.length - 1,
            p = o[1] === t.shape.length - 1;
        i = e.matMul(t, l, p);
      }

      if (r > 0) {
        var c,
            h = [];

        for (u = c = n > a ? n + a - 3 : n - 1; u < c + r; ++u) {
          h.push(u);
        }

        i = i.squeeze(h);
      }

      return 1 === i.shape.length && (i = i.expandDims(1)), i;
    });
  }

  serialization.registerClass(Concatenate);

  var Dot = function (e) {
    function t(t) {
      var r = e.call(this, t) || this;
      return r.axes = t.axes, r.normalize = null != t.normalize && t.normalize, r.supportsMasking = !0, r.reshapeRequired = !1, r;
    }

    return __extends$1(t, e), t.prototype.build = function (e) {
      util.assert(Array.isArray(e) && 2 === e.length && Array.isArray(e[0]) && Array.isArray(e[1]), "A `Dot` layer should be called on a list of exactly 2 inputs.");
      var t = e[0],
          r = e[1];
      if (t.length > 3 || r.length > 3) throw new NotImplementedError("Dot layer does not support tensors of 4D or higher rank yet.");
      var n = this.interpretAxes(t, r);
      if (t[n[0]] !== r[n[1]]) throw new ValueError("Dimension incompatibility: " + t[n[0]] + " !== " + r[n[1]]);
    }, t.prototype.mergeFunction = function (e) {
      if (2 !== e.length) throw new ValueError("A `Dot` layer must be called on exactly 2 inputs, but received " + e.length + " input(s).");
      var t,
          r = e[0],
          n = e[1];
      return t = Array.isArray(this.axes) ? this.axes.map(function (t, r) {
        return interpretAxis(t, e[r].shape.length);
      }) : [interpretAxis(this.axes, r.shape.length), interpretAxis(this.axes, n.shape.length)], this.normalize && (r = l2Normalize(r, t[0]), n = l2Normalize(n, t[1])), batchDot(r, n, t);
    }, t.prototype.interpretAxes = function (e, t) {
      return Array.isArray(this.axes) ? this.axes : [interpretAxis(this.axes, e.length), interpretAxis(this.axes, t.length)];
    }, t.prototype.computeOutputShape = function (e) {
      util.assert(Array.isArray(e) && 2 === e.length && Array.isArray(e[0]) && Array.isArray(e[1]), "A `Dot` layer should be called on a list of exactly 2 inputs.");
      var t = e[0].slice(),
          r = e[1].slice();
      if (t.length > 3 || r.length > 3) throw new NotImplementedError("Dot layer does not support tensors of 4D or higher rank yet.");
      var n = this.interpretAxes(t, r);
      t.splice(n[0], 1), r.splice(n[1], 1), r.splice(0, 1);
      var a = t.concat(r);
      return 1 === a.length && a.push(1), a;
    }, t.prototype.computeMask = function (e, t) {
      return null;
    }, t.prototype.getConfig = function () {
      var t = {
        axes: this.axes,
        normalize: this.normalize
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t.className = "Dot", t;
  }(Merge);

  function batchNormalization$1(e, t, r, n, a, o) {
    var i;
    if (void 0 === o && (o = .001), 2 === e.rank) i = batchNorm2d(e, t, r, n, a, o);else if (3 === e.rank) i = batchNorm3d(e, t, r, n, a, o);else {
      if (4 !== e.rank) throw new NotImplementedError("batchNormalization is not implemented for array of rank " + e.rank + " yet");
      i = batchNorm4d(e, t, r, n, a, o);
    }
    return i;
  }

  function regularNormalizeBatchInTraining(e, t, r, n, a) {
    return void 0 === a && (a = .001), tidy(function () {
      var o = moments(e, n),
          i = o.mean,
          s = o.variance;
      return [batchNormalization$1(e, i, s, r, t, a), i, s];
    });
  }

  function broadcastNormalizeBatchInTraining(e, t, r, n, a) {
    return void 0 === a && (a = .001), tidy(function () {
      for (var o = moments(e, n), i = o.mean, s = o.variance, u = [], l = 0, p = range$1(0, e.rank); l < p.length; l++) {
        var c = p[l];
        -1 !== n.indexOf(c) ? u.push(1) : u.push(e.shape[c]);
      }

      var h = i.reshape(u),
          d = s.reshape(u),
          f = null == t ? null : t.reshape(u),
          m = null == r ? null : r.reshape(u);
      return [batchNormalization$1(e, h, d, m, f, a), i, s];
    });
  }

  function normalizeBatchInTraining(e, t, r, n, a) {
    return void 0 === a && (a = .001), util.arraysEqual(n.slice().sort(), range$1(0, e.rank - 1)) ? regularNormalizeBatchInTraining(e, t, r, n, a) : broadcastNormalizeBatchInTraining(e, t, r, n, a);
  }

  serialization.registerClass(Dot);

  var BatchNormalization = function (e) {
    function t(t) {
      var r = this;
      return null == t && (t = {}), (r = e.call(this, t) || this).supportsMasking = !0, r.axis = null == t.axis ? -1 : t.axis, r.momentum = null == t.momentum ? .99 : t.momentum, r.epsilon = null == t.epsilon ? .001 : t.epsilon, r.center = null == t.center || t.center, r.scale = null == t.scale || t.scale, r.betaInitializer = getInitializer(t.betaInitializer || "zeros"), r.gammaInitializer = getInitializer(t.gammaInitializer || "ones"), r.movingMeanInitializer = getInitializer(t.movingMeanInitializer || "zeros"), r.movingVarianceInitializer = getInitializer(t.movingVarianceInitializer || "ones"), r.betaConstraint = getConstraint(t.betaConstraint), r.gammaConstraint = getConstraint(t.gammaConstraint), r.betaRegularizer = getRegularizer(t.betaRegularizer), r.gammaRegularizer = getRegularizer(t.gammaRegularizer), r;
    }

    return __extends$1(t, e), t.prototype.build = function (e) {
      e = getExactlyOneShape(e);
      var t = this.axis >= 0 ? this.axis : this.axis + e.length,
          r = e[t];
      if (null == r) throw new ValueError("Axis " + t + " of input tensor should have a defined dimension but the layer received an input with shape " + JSON.stringify(e) + ".");
      this.inputSpec = [new InputSpec({
        ndim: e.length,
        axes: (n = {}, n[t] = r, n)
      })];
      var n,
          a = [r];
      this.scale && (this.gamma = this.addWeight("gamma", a, null, this.gammaInitializer, this.gammaRegularizer, !0, this.gammaConstraint)), this.center && (this.beta = this.addWeight("beta", a, null, this.betaInitializer, this.betaRegularizer, !0, this.betaConstraint)), this.movingMean = this.addWeight("moving_mean", a, null, this.movingMeanInitializer, null, !1), this.movingVariance = this.addWeight("moving_variance", a, null, this.movingVarianceInitializer, null, !1), this.built = !0;
    }, t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        var n = null != t.training && t.training,
            a = getExactlyOneTensor(e),
            o = a.shape,
            i = o.length,
            s = range$1(0, i),
            u = r.axis >= 0 ? r.axis : r.axis + i;
        s.splice(u, 1);
        var l = pyListRepeat(1, i);
        l[u] = o[u];
        var p = s.slice();
        p.sort();
        var c = !util.arraysEqual(p, range$1(0, i).slice(0, i - 1));
        if (!n) return function () {
          if (c) {
            var e = r.movingMean.read().reshape(l),
                t = r.movingVariance.read().reshape(l),
                n = r.center ? r.beta.read().reshape(l) : null,
                o = r.scale ? r.gamma.read().reshape(l) : null;
            return batchNormalization$1(a, e, t, n, o, r.epsilon);
          }

          return batchNormalization$1(a, r.movingMean.read(), r.movingVariance.read(), null == r.beta ? null : r.beta.read(), null == r.gamma ? null : r.gamma.read(), r.epsilon);
        }();

        var h = normalizeBatchInTraining(a, r.gamma.read(), r.beta.read(), s, r.epsilon),
            d = h[0],
            f = h[1],
            m = h[2],
            g = function g(e, t, r) {
          tidy(function () {
            var n = getScalar(1).sub(getScalar(r)),
                a = e.read(),
                o = a.sub(t).mul(n);
            e.write(a.sub(o));
          });
        };

        return g(r.movingMean, f, r.momentum), g(r.movingVariance, m, r.momentum), d;
      });
    }, t.prototype.getConfig = function () {
      var t = {
        axis: this.axis,
        momentum: this.momentum,
        epsilon: this.epsilon,
        center: this.center,
        scale: this.scale,
        betaInitializer: serializeInitializer(this.betaInitializer),
        gammaInitializer: serializeInitializer(this.gammaInitializer),
        movingMeanInitializer: serializeInitializer(this.movingMeanInitializer),
        movingVarianceInitializer: serializeInitializer(this.movingVarianceInitializer),
        betaRegularizer: serializeRegularizer(this.betaRegularizer),
        gammaRegularizer: serializeRegularizer(this.gammaRegularizer),
        betaConstraint: serializeConstraint(this.betaConstraint),
        gammaConstraint: serializeConstraint(this.gammaConstraint)
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t.className = "BatchNormalization", t;
  }(Layer);

  function spatial2dPadding(e, t, r) {
    return tidy(function () {
      if (4 !== e.rank) throw new ValueError("temporalPadding expects input tensor to be 4-D, but received a " + e.rank + "-D tensor.");
      if (null == t && (t = [[1, 1], [1, 1]]), 2 !== t.length || 2 !== t[0].length || 2 !== t[1].length) throw new ValueError("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");
      if (null == r && (r = imageDataFormat()), "channelsLast" !== r && "channelsFirst" !== r) throw new ValueError("Unknown data format: " + r + ". Supported data formats are 'channelsLast' and 'channelsFirst.");
      var n;
      return n = "channelsFirst" === r ? [[0, 0], [0, 0], t[0], t[1]] : [[0, 0], t[0], t[1], [0, 0]], pad(e, n);
    });
  }

  serialization.registerClass(BatchNormalization);

  var ZeroPadding2D = function (e) {
    function t(t) {
      var r = this;
      if (null == t && (t = {}), (r = e.call(this, t) || this).dataFormat = null == t.dataFormat ? imageDataFormat() : t.dataFormat, null == t.padding) r.padding = [[1, 1], [1, 1]];else if ("number" == typeof t.padding) r.padding = [[t.padding, t.padding], [t.padding, t.padding]];else {
        if (t.padding = t.padding, 2 !== t.padding.length) throw new ValueError("ZeroPadding2D expects padding to be a length-2 array, but received a length-" + t.padding.length + " array.");
        var n = void 0,
            a = void 0;
        if ("number" == typeof t.padding[0]) n = [t.padding[0], t.padding[0]], a = [t.padding[1], t.padding[1]];else {
          if (t.padding = t.padding, 2 !== t.padding[0].length) throw new ValueError("ZeroPadding2D expects height padding to be a length-2 array, but received a length-" + t.padding[0].length + " array.");
          if (n = t.padding[0], 2 !== t.padding[1].length) throw new ValueError("ZeroPadding2D expects width padding to be a length-2 array, but received a length-" + t.padding[1].length + " array.");
          a = t.padding[1];
        }
        r.padding = [n, a];
      }
      return r.inputSpec = [new InputSpec({
        ndim: 4
      })], r;
    }

    return __extends$1(t, e), t.prototype.computeOutputShape = function (e) {
      var t, r;
      return e = getExactlyOneShape(e), "channelsFirst" === this.dataFormat ? (t = null != e[2] && e[2] >= 0 ? e[2] + this.padding[0][0] + this.padding[0][1] : null, r = null != e[3] && e[3] >= 0 ? e[3] + this.padding[1][0] + this.padding[1][1] : null, [e[0], e[1], t, r]) : (t = null != e[1] && e[1] >= 0 ? e[1] + this.padding[0][0] + this.padding[0][1] : null, r = null != e[2] && e[2] >= 0 ? e[2] + this.padding[1][0] + this.padding[1][1] : null, [e[0], t, r, e[3]]);
    }, t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        return spatial2dPadding(getExactlyOneTensor(e), r.padding, r.dataFormat);
      });
    }, t.prototype.getConfig = function () {
      var t = {
        padding: this.padding,
        dataFormat: this.dataFormat
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t.className = "ZeroPadding2D", t;
  }(Layer);

  function pool2d(e, t, r, n, a, o) {
    return tidy(function () {
      var i;
      checkDataFormat(a), checkPoolMode(o), checkPaddingMode(n), null == r && (r = [1, 1]), null == n && (n = "valid"), null == a && (a = imageDataFormat()), null == o && (o = "max"), e = preprocessConv2DInput(e, a);
      var s = "same" === n ? "same" : "valid";
      return i = "max" === o ? maxPool(e, t, r, s) : avgPool(e, t, r, s), "channelsFirst" === a && (i = transpose(i, [0, 3, 1, 2])), i;
    });
  }

  serialization.registerClass(ZeroPadding2D);

  var Pooling1D = function (e) {
    function t(t) {
      var r = this;
      if (null == t.poolSize && (t.poolSize = 2), r = e.call(this, t) || this, "number" == typeof t.poolSize) r.poolSize = [t.poolSize];else {
        if (!Array.isArray(t.poolSize) || 1 !== t.poolSize.length || "number" != typeof t.poolSize[0]) throw new ValueError("poolSize for 1D convolutional layer must be a number or an Array of a single number, but received " + JSON.stringify(t.poolSize));
        r.poolSize = t.poolSize;
      }
      if (null == t.strides) r.strides = r.poolSize;else if ("number" == typeof t.strides) r.strides = [t.strides];else {
        if (!Array.isArray(t.strides) || 1 !== t.strides.length || "number" != typeof t.strides[0]) throw new ValueError("strides for 1D convolutional layer must be a number or an Array of a single number, but received " + JSON.stringify(t.strides));
        r.strides = t.strides;
      }
      return r.padding = null == t.padding ? "valid" : t.padding, checkPaddingMode(r.padding), r.inputSpec = [new InputSpec({
        ndim: 3
      })], r;
    }

    return __extends$1(t, e), t.prototype.computeOutputShape = function (e) {
      var t = convOutputLength((e = getExactlyOneShape(e))[1], this.poolSize[0], this.padding, this.strides[0]);
      return [e[0], t, e[2]];
    }, t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        r.invokeCallHook(e, t), e = expandDims$1(getExactlyOneTensor(e), 2);
        var n = r.poolingFunction(getExactlyOneTensor(e), [r.poolSize[0], 1], [r.strides[0], 1], r.padding, "channelsLast");
        return squeeze(n, [2]);
      });
    }, t.prototype.getConfig = function () {
      var t = {
        poolSize: this.poolSize,
        padding: this.padding,
        strides: this.strides
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t;
  }(Layer),
      MaxPooling1D = function (e) {
    function t(t) {
      return e.call(this, t) || this;
    }

    return __extends$1(t, e), t.prototype.poolingFunction = function (e, t, r, n, a) {
      return checkDataFormat(a), checkPaddingMode(n), pool2d(e, t, r, n, a, "max");
    }, t.className = "MaxPooling1D", t;
  }(Pooling1D);

  serialization.registerClass(MaxPooling1D);

  var AveragePooling1D = function (e) {
    function t(t) {
      return e.call(this, t) || this;
    }

    return __extends$1(t, e), t.prototype.poolingFunction = function (e, t, r, n, a) {
      return checkDataFormat(a), checkPaddingMode(n), pool2d(e, t, r, n, a, "avg");
    }, t.className = "AveragePooling1D", t;
  }(Pooling1D);

  serialization.registerClass(AveragePooling1D);

  var Pooling2D = function (e) {
    function t(t) {
      var r = this;
      if (null == t.poolSize && (t.poolSize = [2, 2]), (r = e.call(this, t) || this).poolSize = Array.isArray(t.poolSize) ? t.poolSize : [t.poolSize, t.poolSize], null == t.strides) r.strides = r.poolSize;else if (Array.isArray(t.strides)) {
        if (2 !== t.strides.length) throw new ValueError("If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length " + t.strides.length + ".");
        r.strides = t.strides;
      } else r.strides = [t.strides, t.strides];
      return r.padding = null == t.padding ? "valid" : t.padding, r.dataFormat = null == t.dataFormat ? "channelsLast" : t.dataFormat, checkDataFormat(r.dataFormat), checkPaddingMode(r.padding), r.inputSpec = [new InputSpec({
        ndim: 4
      })], r;
    }

    return __extends$1(t, e), t.prototype.computeOutputShape = function (e) {
      e = getExactlyOneShape(e);
      var t = "channelsFirst" === this.dataFormat ? e[2] : e[1],
          r = "channelsFirst" === this.dataFormat ? e[3] : e[2];
      return t = convOutputLength(t, this.poolSize[0], this.padding, this.strides[0]), r = convOutputLength(r, this.poolSize[1], this.padding, this.strides[1]), "channelsFirst" === this.dataFormat ? [e[0], e[1], t, r] : [e[0], t, r, e[3]];
    }, t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        return r.invokeCallHook(e, t), r.poolingFunction(getExactlyOneTensor(e), r.poolSize, r.strides, r.padding, r.dataFormat);
      });
    }, t.prototype.getConfig = function () {
      var t = {
        poolSize: this.poolSize,
        padding: this.padding,
        strides: this.strides,
        dataFormat: this.dataFormat
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t;
  }(Layer),
      MaxPooling2D = function (e) {
    function t(t) {
      return e.call(this, t) || this;
    }

    return __extends$1(t, e), t.prototype.poolingFunction = function (e, t, r, n, a) {
      return checkDataFormat(a), checkPaddingMode(n), pool2d(e, t, r, n, a, "max");
    }, t.className = "MaxPooling2D", t;
  }(Pooling2D);

  serialization.registerClass(MaxPooling2D);

  var AveragePooling2D = function (e) {
    function t(t) {
      return e.call(this, t) || this;
    }

    return __extends$1(t, e), t.prototype.poolingFunction = function (e, t, r, n, a) {
      return checkDataFormat(a), checkPaddingMode(n), pool2d(e, t, r, n, a, "avg");
    }, t.className = "AveragePooling2D", t;
  }(Pooling2D);

  serialization.registerClass(AveragePooling2D);

  var GlobalPooling1D = function (e) {
    function t(t) {
      var r = e.call(this, t) || this;
      return r.inputSpec = [new InputSpec({
        ndim: 3
      })], r;
    }

    return __extends$1(t, e), t.prototype.computeOutputShape = function (e) {
      return [e[0], e[2]];
    }, t.prototype.call = function (e, t) {
      throw new NotImplementedError();
    }, t;
  }(Layer),
      GlobalAveragePooling1D = function (e) {
    function t(t) {
      return e.call(this, t || {}) || this;
    }

    return __extends$1(t, e), t.prototype.call = function (e, t) {
      return tidy(function () {
        var t = getExactlyOneTensor(e);
        return mean(t, 1);
      });
    }, t.className = "GlobalAveragePooling1D", t;
  }(GlobalPooling1D);

  serialization.registerClass(GlobalAveragePooling1D);

  var GlobalMaxPooling1D = function (e) {
    function t(t) {
      return e.call(this, t || {}) || this;
    }

    return __extends$1(t, e), t.prototype.call = function (e, t) {
      return tidy(function () {
        var t = getExactlyOneTensor(e);
        return max(t, 1);
      });
    }, t.className = "GlobalMaxPooling1D", t;
  }(GlobalPooling1D);

  serialization.registerClass(GlobalMaxPooling1D);

  var GlobalPooling2D = function (e) {
    function t(t) {
      var r = e.call(this, t) || this;
      return r.dataFormat = null == t.dataFormat ? "channelsLast" : t.dataFormat, checkDataFormat(r.dataFormat), r.inputSpec = [new InputSpec({
        ndim: 4
      })], r;
    }

    return __extends$1(t, e), t.prototype.computeOutputShape = function (e) {
      return e = e, "channelsLast" === this.dataFormat ? [e[0], e[3]] : [e[0], e[1]];
    }, t.prototype.call = function (e, t) {
      throw new NotImplementedError();
    }, t.prototype.getConfig = function () {
      var t = {
        dataFormat: this.dataFormat
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t;
  }(Layer),
      GlobalAveragePooling2D = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }

    return __extends$1(t, e), t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        var t = getExactlyOneTensor(e);
        return "channelsLast" === r.dataFormat ? mean(t, [1, 2]) : mean(t, [2, 3]);
      });
    }, t.className = "GlobalAveragePooling2D", t;
  }(GlobalPooling2D);

  serialization.registerClass(GlobalAveragePooling2D);

  var GlobalMaxPooling2D = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }

    return __extends$1(t, e), t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        var t = getExactlyOneTensor(e);
        return "channelsLast" === r.dataFormat ? max(t, [1, 2]) : max(t, [2, 3]);
      });
    }, t.className = "GlobalMaxPooling2D", t;
  }(GlobalPooling2D);

  function standardizeArgs(e, t, r, n) {
    if (Array.isArray(e)) {
      if (null != t || null != r) throw new ValueError("When inputs is an array, neither initialState or constants should be provided");
      null != n && (r = e.slice(e.length - n, e.length), e = e.slice(0, e.length - n)), e.length > 1 && (t = e.slice(1, e.length)), e = e[0];
    }

    function a(e) {
      return null == e || Array.isArray(e) ? e : [e];
    }

    return {
      inputs: e,
      initialState: t = a(t),
      constants: r = a(r)
    };
  }

  function rnn(e, t, r, n, a, o, i, s) {
    return void 0 === n && (n = !1), void 0 === i && (i = !1), void 0 === s && (s = !1), tidy(function () {
      var u = t.shape.length;
      if (u < 3) throw new ValueError("Input should be at least 3D, but is " + u + "D.");
      var l = [1, 0].concat(range$1(2, u));
      if (t = transpose(t, l), null != o) throw new NotImplementedError("The rnn() functoin of the deeplearn.js backend does not support constants yet.");
      i && console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."), null != a && ((a = a.asType("bool").asType("float32")).rank === u - 1 && (a = expandDims(a, -1)), a = transpose(a, l)), n && (t = reverse(t, 0), null != a && (a = reverse(a, 0)));
      var p,
          c,
          h = [],
          d = r,
          f = t.shape[0],
          m = unstack(t);
      null != a && (c = unstack(a));

      for (var g, y = function y(t) {
        var r = m[t],
            n = tidy(function () {
          return e(r, d);
        });
        if (null == a) p = n[0], d = n[1];else {
          var o = tidy(function () {
            var e = c[t],
                r = onesLike(e).sub(e);
            return {
              output: n[0].mul(e).addStrict(d[0].mul(r)),
              newStates: d.map(function (t, a) {
                return n[1][a].mul(e).addStrict(t.mul(r));
              })
            };
          });
          p = o.output, d = o.newStates;
        }
        s && h.push(p);
      }, v = 0; v < f; ++v) {
        y(v);
      }

      return s && (g = stack(h, 1)), [p, g, d];
    });
  }

  serialization.registerClass(GlobalMaxPooling2D);

  var RNN = function (e) {
    function t(t) {
      var r,
          n = e.call(this, t) || this;
      if (null == t.cell) throw new ValueError("cell property is missing for the constructor of RNN.");
      if (null == (r = Array.isArray(t.cell) ? new StackedRNNCells({
        cells: t.cell
      }) : t.cell).stateSize) throw new ValueError("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");
      return n.cell = r, n.returnSequences = null != t.returnSequences && t.returnSequences, n.returnState = null != t.returnState && t.returnState, n.goBackwards = null != t.goBackwards && t.goBackwards, n._stateful = null != t.stateful && t.stateful, n.unroll = null != t.unroll && t.unroll, n.supportsMasking = !0, n.inputSpec = [new InputSpec({
        ndim: 3
      })], n.stateSpec = null, n.states_ = null, n.numConstants = null, n.keptStates = [], n;
    }

    return __extends$1(t, e), t.prototype.getStates = function () {
      return null == this.states_ ? range$1(0, Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1).map(function (e) {
        return null;
      }) : this.states_;
    }, t.prototype.setStates = function (e) {
      this.states_ = e;
    }, t.prototype.computeOutputShape = function (e) {
      isArrayOfShapes(e) && (e = e[0]), e = e;
      var t = this.cell.stateSize;
      Array.isArray(t) || (t = [t]);
      var r,
          n = t[0];

      if (r = this.returnSequences ? [e[0], e[1], n] : [e[0], n], this.returnState) {
        for (var a = [], o = 0, i = t; o < i.length; o++) {
          var s = i[o];
          a.push([e[0], s]);
        }

        return [r].concat(a);
      }

      return r;
    }, t.prototype.computeMask = function (e, t) {
      var r = this;
      return tidy(function () {
        Array.isArray(t) && (t = t[0]);
        var e = r.returnSequences ? t : null;

        if (r.returnState) {
          var n = r.states.map(function (e) {
            return null;
          });
          return [e].concat(n);
        }

        return e;
      });
    }, Object.defineProperty(t.prototype, "states", {
      get: function get() {
        if (null == this.states_) {
          for (var e = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1, t = [], r = 0; r < e; ++r) {
            t.push(null);
          }

          return t;
        }

        return this.states_;
      },
      set: function set(e) {
        this.states_ = e;
      },
      enumerable: !0,
      configurable: !0
    }), t.prototype.build = function (e) {
      if (null != this.numConstants) throw new NotImplementedError("Constants support is not implemented in RNN yet.");
      isArrayOfShapes(e) && (e = e[0]), e = e;
      var t = this.stateful ? e[0] : null,
          r = e[e.length - 1];
      this.inputSpec[0] = new InputSpec({
        shape: [t, null, r]
      });
      var n,
          a = [e[0]].concat(e.slice(2));

      if (this.cell.build(a), n = Array.isArray(this.cell.stateSize) ? this.cell.stateSize : [this.cell.stateSize], null != this.stateSpec) {
        if (!util.arraysEqual(this.stateSpec.map(function (e) {
          return e.shape[e.shape.length - 1];
        }), n)) throw new ValueError("An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=" + this.stateSpec + "; However cell.stateSize is " + this.cell.stateSize);
      } else this.stateSpec = n.map(function (e) {
        return new InputSpec({
          shape: [null, e]
        });
      });

      this.stateful && this.resetStates();
    }, t.prototype.resetStates = function (e, t) {
      var r = this;
      void 0 === t && (t = !1), tidy(function () {
        if (!r.stateful) throw new AttributeError("Cannot call resetStates() on an RNN Layer that is not stateful.");
        var n = r.inputSpec[0].shape[0];
        if (null == n) throw new ValueError("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
        if (null == r.states_) Array.isArray(r.cell.stateSize) ? r.states_ = r.cell.stateSize.map(function (e) {
          return zeros([n, e]);
        }) : r.states_ = [zeros([n, r.cell.stateSize])];else if (null == e) dispose(r.states_), null != r.keptStates && (dispose(r.keptStates), r.keptStates = []), Array.isArray(r.cell.stateSize) ? r.states_ = r.cell.stateSize.map(function (e) {
          return zeros([n, e]);
        }) : r.states_[0] = zeros([n, r.cell.stateSize]);else {
          if (Array.isArray(e) || (e = [e]), e.length !== r.states_.length) throw new ValueError("Layer " + r.name + " expects " + r.states_.length + " state(s), but it received " + e.length + " state value(s). Input received: " + e);
          !0 === t ? r.keptStates.push(r.states_.slice()) : dispose(r.states_);

          for (var a = 0; a < r.states_.length; ++a) {
            var o = e[a],
                i = Array.isArray(r.cell.stateSize) ? r.cell.stateSize[a] : r.cell.stateSize,
                s = [n, i];
            if (!util.arraysEqual(o.shape, s)) throw new ValueError("State " + a + " is incompatible with layer " + r.name + ": expected shape=" + s + ", received shape=" + o.shape);
            r.states_[a] = o;
          }
        }
        r.states_.forEach(function (e) {
          return keep(e);
        });
      });
    }, t.prototype.apply = function (t, r) {
      var n = null == r ? null : r.initialState,
          a = null == r ? null : r.constants;
      null == r && (r = {});
      var o = standardizeArgs(t, n, a, this.numConstants);
      t = o.inputs, n = o.initialState, a = o.constants;
      var i = [],
          s = [];

      if (null != n) {
        r.initialState = n, i = i.concat(n), this.stateSpec = [];

        for (var u = 0, l = n; u < l.length; u++) {
          var p = l[u];
          this.stateSpec.push(new InputSpec({
            shape: p.shape
          }));
        }

        s = s.concat(this.stateSpec);
      }

      if (null != a && (r.constants = a, i = i.concat(a), this.numConstants = a.length), i[0] instanceof SymbolicTensor) {
        var c = [t].concat(i),
            h = this.inputSpec.concat(s),
            d = this.inputSpec;
        this.inputSpec = h;
        var f = e.prototype.apply.call(this, c, r);
        return this.inputSpec = d, f;
      }

      return e.prototype.apply.call(this, t, r);
    }, t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        var n = null == t ? null : t.mask,
            a = null == t ? null : t.training,
            o = null == t ? null : t.initialState;
        e = getExactlyOneTensor(e), null == o && (o = r.stateful ? r.states_ : r.getInitialState(e));
        var i = Array.isArray(r.cell.stateSize) ? r.cell.stateSize.length : 1;
        if (o.length !== i) throw new ValueError("RNN Layer has " + i + " state(s) but was passed " + o.length + " initial state(s).");
        r.unroll && console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");
        var s = {
          training: a
        },
            u = rnn(function (e, t) {
          var n = r.cell.call([e].concat(t), s);
          return [n[0], n.slice(1)];
        }, e, o, r.goBackwards, n, null, r.unroll, r.returnSequences),
            l = u[0],
            p = u[1],
            c = u[2];
        r.stateful && r.resetStates(c, a);
        var h = r.returnSequences ? p : l;
        return r.returnState ? [h].concat(c) : h;
      });
    }, t.prototype.getInitialState = function (e) {
      var t = this;
      return tidy(function () {
        var r = zeros(e.shape);
        return r = expandDims$1(r = sum$1(r, [1, 2])), Array.isArray(t.cell.stateSize) ? t.cell.stateSize.map(function (e) {
          return e > 1 ? tile$1(r, [1, e]) : r;
        }) : t.cell.stateSize > 1 ? [tile$1(r, [1, t.cell.stateSize])] : [r];
      });
    }, Object.defineProperty(t.prototype, "trainableWeights", {
      get: function get() {
        return this.trainable ? this.cell.trainableWeights : [];
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "nonTrainableWeights", {
      get: function get() {
        return this.trainable ? this.cell.nonTrainableWeights : this.cell.weights;
      },
      enumerable: !0,
      configurable: !0
    }), t.prototype.setFastWeightInitDuringBuild = function (t) {
      e.prototype.setFastWeightInitDuringBuild.call(this, t), null != this.cell && this.cell.setFastWeightInitDuringBuild(t);
    }, t.prototype.getConfig = function () {
      var t = {
        returnSequences: this.returnSequences,
        returnState: this.returnState,
        goBackwards: this.goBackwards,
        stateful: this.stateful,
        unroll: this.unroll
      };
      null != this.numConstants && (t.numConstants = this.numConstants);
      var r = this.cell.getConfig();
      t.cell = {
        className: this.cell.getClassName(),
        config: r
      };
      var n = e.prototype.getConfig.call(this);
      return Object.assign(t, n), t;
    }, t.className = "RNN", t;
  }(Layer);

  serialization.registerClass(RNN);

  var RNNCell = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }

    return __extends$1(t, e), t;
  }(Layer),
      SimpleRNNCell = function (e) {
    function t(t) {
      var r = e.call(this, t) || this;
      return r.DEFAULT_ACTIVATION = "tanh", r.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", r.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", r.DEFAULT_BIAS_INITIALIZER = "zeros", r.units = t.units, r.activation = getActivation(null == t.activation ? r.DEFAULT_ACTIVATION : t.activation), r.useBias = null == t.useBias || t.useBias, r.kernelInitializer = getInitializer(t.kernelInitializer || r.DEFAULT_KERNEL_INITIALIZER), r.recurrentInitializer = getInitializer(t.recurrentInitializer || r.DEFAULT_RECURRENT_INITIALIZER), r.biasInitializer = getInitializer(t.biasInitializer || r.DEFAULT_BIAS_INITIALIZER), r.kernelRegularizer = getRegularizer(t.kernelRegularizer), r.recurrentRegularizer = getRegularizer(t.recurrentRegularizer), r.biasRegularizer = getRegularizer(t.biasRegularizer), r.kernelConstraint = getConstraint(t.kernelConstraint), r.recurrentConstraint = getConstraint(t.recurrentConstraint), r.biasConstraint = getConstraint(t.biasConstraint), r.dropout = min$1([1, max$1([0, null == t.dropout ? 0 : t.dropout])]), r.recurrentDropout = min$1([1, max$1([0, null == t.recurrentDropout ? 0 : t.recurrentDropout])]), r.stateSize = r.units, r.dropoutMask = null, r.recurrentDropoutMask = null, r;
    }

    return __extends$1(t, e), t.prototype.build = function (e) {
      e = getExactlyOneShape(e), this.kernel = this.addWeight("kernel", [e[e.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
    }, t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        if (2 !== (e = e).length) throw new ValueError("SimpleRNNCell expects 2 input Tensors, got " + e.length + ".");
        var n = e[1];
        e = e[0];
        var a,
            o = null != t.training && t.training;
        0 < r.dropout && r.dropout < 1 && null == r.dropoutMask && (r.dropoutMask = generateDropoutMask(function () {
          return onesLike(e);
        }, r.dropout, o)), 0 < r.recurrentDropout && r.recurrentDropout < 1 && null == r.recurrentDropoutMask && (r.recurrentDropoutMask = generateDropoutMask(function () {
          return onesLike(n);
        }, r.recurrentDropout, o));
        var i = r.dropoutMask,
            s = r.recurrentDropoutMask;
        a = dot$1(null != i ? mul(e, i) : e, r.kernel.read()), null != r.bias && (a = biasAdd(a, r.bias.read())), null != s && (n = mul(n, s));
        var u = add(a, dot$1(n, r.recurrentKernel.read()));
        return null != r.activation && (u = r.activation.apply(u)), [u, u];
      });
    }, t.prototype.getConfig = function () {
      var t = {
        units: this.units,
        activation: serializeActivation(this.activation),
        useBias: this.useBias,
        kernelInitializer: serializeInitializer(this.kernelInitializer),
        recurrentInitializer: serializeInitializer(this.recurrentInitializer),
        biasInitializer: serializeInitializer(this.biasInitializer),
        kernelRegularizer: serializeRegularizer(this.kernelRegularizer),
        recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),
        biasRegularizer: serializeRegularizer(this.biasRegularizer),
        activityRegularizer: serializeRegularizer(this.activityRegularizer),
        kernelConstraint: serializeConstraint(this.kernelConstraint),
        recurrentConstraint: serializeConstraint(this.recurrentConstraint),
        biasConstraint: serializeConstraint(this.biasConstraint),
        dropout: this.dropout,
        recurrentDropout: this.recurrentDropout
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t.className = "SimpleRNNCell", t;
  }(RNNCell);

  serialization.registerClass(SimpleRNNCell);

  var SimpleRNN = function (e) {
    function t(t) {
      return t.cell = new SimpleRNNCell(t), e.call(this, t) || this;
    }

    return __extends$1(t, e), t.prototype.call = function (t, r) {
      var n = this;
      return tidy(function () {
        null != n.cell.dropoutMask && (dispose(n.cell.dropoutMask), n.cell.dropoutMask = null), null != n.cell.recurrentDropoutMask && (dispose(n.cell.recurrentDropoutMask), n.cell.recurrentDropoutMask = null);
        var a = null == r ? null : r.mask,
            o = null == r ? null : r.training,
            i = null == r ? null : r.initialState;
        return e.prototype.call.call(n, t, {
          mask: a,
          training: o,
          initialState: i
        });
      });
    }, Object.defineProperty(t.prototype, "units", {
      get: function get() {
        return this.cell.units;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "activation", {
      get: function get() {
        return this.cell.activation;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "useBias", {
      get: function get() {
        return this.cell.useBias;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "kernelInitializer", {
      get: function get() {
        return this.cell.kernelInitializer;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "recurrentInitializer", {
      get: function get() {
        return this.cell.recurrentInitializer;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "biasInitializer", {
      get: function get() {
        return this.cell.biasInitializer;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "kernelRegularizer", {
      get: function get() {
        return this.cell.kernelRegularizer;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "recurrentRegularizer", {
      get: function get() {
        return this.cell.recurrentRegularizer;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "biasRegularizer", {
      get: function get() {
        return this.cell.biasRegularizer;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "kernelConstraint", {
      get: function get() {
        return this.cell.kernelConstraint;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "recurrentConstraint", {
      get: function get() {
        return this.cell.recurrentConstraint;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "biasConstraint", {
      get: function get() {
        return this.cell.biasConstraint;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "dropout", {
      get: function get() {
        return this.cell.dropout;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "recurrentDropout", {
      get: function get() {
        return this.cell.recurrentDropout;
      },
      enumerable: !0,
      configurable: !0
    }), t.prototype.getConfig = function () {
      var t = {
        units: this.units,
        activation: serializeActivation(this.activation),
        useBias: this.useBias,
        kernelInitializer: serializeInitializer(this.kernelInitializer),
        recurrentInitializer: serializeInitializer(this.recurrentInitializer),
        biasInitializer: serializeInitializer(this.biasInitializer),
        kernelRegularizer: serializeRegularizer(this.kernelRegularizer),
        recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),
        biasRegularizer: serializeRegularizer(this.biasRegularizer),
        activityRegularizer: serializeRegularizer(this.activityRegularizer),
        kernelConstraint: serializeConstraint(this.kernelConstraint),
        recurrentConstraint: serializeConstraint(this.recurrentConstraint),
        biasConstraint: serializeConstraint(this.biasConstraint),
        dropout: this.dropout,
        recurrentDropout: this.recurrentDropout
      },
          r = e.prototype.getConfig.call(this);
      return delete r.cell, Object.assign(t, r), t;
    }, t.className = "SimpleRNN", t;
  }(RNN);

  serialization.registerClass(SimpleRNN);

  var GRUCell = function (e) {
    function t(t) {
      var r = e.call(this, t) || this;
      return r.DEFAULT_ACTIVATION = "tanh", r.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", r.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", r.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", r.DEFAULT_BIAS_INITIALIZER = "zeros", r.units = t.units, r.activation = getActivation(void 0 === t.activation ? r.DEFAULT_ACTIVATION : t.activation), r.recurrentActivation = getActivation(void 0 === t.recurrentActivation ? r.DEFAULT_RECURRENT_ACTIVATION : t.recurrentActivation), r.useBias = null == t.useBias || t.useBias, r.kernelInitializer = getInitializer(t.kernelInitializer || r.DEFAULT_KERNEL_INITIALIZER), r.recurrentInitializer = getInitializer(t.recurrentInitializer || r.DEFAULT_RECURRENT_INITIALIZER), r.biasInitializer = getInitializer(t.biasInitializer || r.DEFAULT_BIAS_INITIALIZER), r.kernelRegularizer = getRegularizer(t.kernelRegularizer), r.recurrentRegularizer = getRegularizer(t.recurrentRegularizer), r.biasRegularizer = getRegularizer(t.biasRegularizer), r.kernelConstraint = getConstraint(t.kernelConstraint), r.recurrentConstraint = getConstraint(t.recurrentConstraint), r.biasConstraint = getConstraint(t.biasConstraint), r.dropout = min$1([1, max$1([0, null == t.dropout ? 0 : t.dropout])]), r.recurrentDropout = min$1([1, max$1([0, null == t.recurrentDropout ? 0 : t.recurrentDropout])]), r.implementation = t.implementation, r.stateSize = r.units, r.dropoutMask = null, r.recurrentDropoutMask = null, r;
    }

    return __extends$1(t, e), t.prototype.build = function (e) {
      var t = (e = getExactlyOneShape(e))[e.length - 1];
      this.kernel = this.addWeight("kernel", [t, 3 * this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, 3 * this.units], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [3 * this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
    }, t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        if (2 !== (e = e).length) throw new ValueError("GRUCell expects 2 input Tensors (inputs, h, c), got " + e.length + ".");
        var n = null != t.training && t.training,
            a = e[1];
        e = e[0], 0 < r.dropout && r.dropout < 1 && null == r.dropoutMask && (r.dropoutMask = generateDropoutMask(function () {
          return onesLike(e);
        }, r.dropout, n, 3)), 0 < r.recurrentDropout && r.recurrentDropout < 1 && null == r.recurrentDropoutMask && (r.recurrentDropoutMask = generateDropoutMask(function () {
          return onesLike(a);
        }, r.recurrentDropout, n, 3));
        var o,
            i,
            s,
            u = r.dropoutMask,
            l = r.recurrentDropoutMask;
        0 < r.dropout && r.dropout < 1 && (e = mul(e, u[0]));
        var p = dot$1(e, r.kernel.read());
        r.useBias && (p = biasAdd(p, r.bias.read())), 0 < r.recurrentDropout && r.recurrentDropout < 1 && (a = mul(a, l[0]));
        var c = r.recurrentKernel.read(),
            h = split$1(c, [2 * r.units, r.units], c.rank - 1),
            d = h[0],
            f = h[1],
            m = dot$1(a, d),
            g = split$1(p, 3, p.rank - 1),
            y = g[0],
            v = g[1],
            x = g[2],
            b = split$1(m, 2, m.rank - 1),
            w = b[0],
            N = b[1];
        o = r.recurrentActivation.apply(add(y, w)), i = r.recurrentActivation.apply(add(v, N));
        var S = dot$1(mul(i, a), f);
        s = r.activation.apply(add(x, S));
        var T = add(mul(o, a), mul(add(getScalar(1), neg(o)), s));
        return [T, T];
      });
    }, t.prototype.getConfig = function () {
      var t = {
        units: this.units,
        activation: serializeActivation(this.activation),
        recurrentActivation: serializeActivation(this.recurrentActivation),
        useBias: this.useBias,
        kernelInitializer: serializeInitializer(this.kernelInitializer),
        recurrentInitializer: serializeInitializer(this.recurrentInitializer),
        biasInitializer: serializeInitializer(this.biasInitializer),
        kernelRegularizer: serializeRegularizer(this.kernelRegularizer),
        recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),
        biasRegularizer: serializeRegularizer(this.biasRegularizer),
        activityRegularizer: serializeRegularizer(this.activityRegularizer),
        kernelConstraint: serializeConstraint(this.kernelConstraint),
        recurrentConstraint: serializeConstraint(this.recurrentConstraint),
        biasConstraint: serializeConstraint(this.biasConstraint),
        dropout: this.dropout,
        recurrentDropout: this.recurrentDropout,
        implementation: this.implementation
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t.className = "GRUCell", t;
  }(RNNCell);

  serialization.registerClass(GRUCell);

  var GRU = function (e) {
    function t(t) {
      return 0 === t.implementation && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), t.cell = new GRUCell(t), e.call(this, t) || this;
    }

    return __extends$1(t, e), t.prototype.call = function (t, r) {
      var n = this;
      return tidy(function () {
        null != n.cell.dropoutMask && (dispose(n.cell.dropoutMask), n.cell.dropoutMask = null), null != n.cell.recurrentDropoutMask && (dispose(n.cell.recurrentDropoutMask), n.cell.recurrentDropoutMask = null);
        var a = null == r ? null : r.mask,
            o = null == r ? null : r.training,
            i = null == r ? null : r.initialState;
        return e.prototype.call.call(n, t, {
          mask: a,
          training: o,
          initialState: i
        });
      });
    }, Object.defineProperty(t.prototype, "units", {
      get: function get() {
        return this.cell.units;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "activation", {
      get: function get() {
        return this.cell.activation;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "recurrentActivation", {
      get: function get() {
        return this.cell.recurrentActivation;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "useBias", {
      get: function get() {
        return this.cell.useBias;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "kernelInitializer", {
      get: function get() {
        return this.cell.kernelInitializer;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "recurrentInitializer", {
      get: function get() {
        return this.cell.recurrentInitializer;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "biasInitializer", {
      get: function get() {
        return this.cell.biasInitializer;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "kernelRegularizer", {
      get: function get() {
        return this.cell.kernelRegularizer;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "recurrentRegularizer", {
      get: function get() {
        return this.cell.recurrentRegularizer;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "biasRegularizer", {
      get: function get() {
        return this.cell.biasRegularizer;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "kernelConstraint", {
      get: function get() {
        return this.cell.kernelConstraint;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "recurrentConstraint", {
      get: function get() {
        return this.cell.recurrentConstraint;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "biasConstraint", {
      get: function get() {
        return this.cell.biasConstraint;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "dropout", {
      get: function get() {
        return this.cell.dropout;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "recurrentDropout", {
      get: function get() {
        return this.cell.recurrentDropout;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "implementation", {
      get: function get() {
        return this.cell.implementation;
      },
      enumerable: !0,
      configurable: !0
    }), t.prototype.getConfig = function () {
      var t = {
        units: this.units,
        activation: serializeActivation(this.activation),
        recurrentActivation: serializeActivation(this.recurrentActivation),
        useBias: this.useBias,
        kernelInitializer: serializeInitializer(this.kernelInitializer),
        recurrentInitializer: serializeInitializer(this.recurrentInitializer),
        biasInitializer: serializeInitializer(this.biasInitializer),
        kernelRegularizer: serializeRegularizer(this.kernelRegularizer),
        recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),
        biasRegularizer: serializeRegularizer(this.biasRegularizer),
        activityRegularizer: serializeRegularizer(this.activityRegularizer),
        kernelConstraint: serializeConstraint(this.kernelConstraint),
        recurrentConstraint: serializeConstraint(this.recurrentConstraint),
        biasConstraint: serializeConstraint(this.biasConstraint),
        dropout: this.dropout,
        recurrentDropout: this.recurrentDropout,
        implementation: this.implementation
      },
          r = e.prototype.getConfig.call(this);
      return delete r.cell, Object.assign(t, r), t;
    }, t.fromConfig = function (e, t) {
      return 0 === t.implmentation && (t.implementation = 1), new e(t);
    }, t.className = "GRU", t;
  }(RNN);

  serialization.registerClass(GRU);

  var LSTMCell = function (e) {
    function t(t) {
      var r = e.call(this, t) || this;
      return r.DEFAULT_ACTIVATION = "tanh", r.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", r.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", r.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", r.DEFAULT_BIAS_INITIALIZER = "zeros", r.units = t.units, r.activation = getActivation(void 0 === t.activation ? r.DEFAULT_ACTIVATION : t.activation), r.recurrentActivation = getActivation(void 0 === t.recurrentActivation ? r.DEFAULT_RECURRENT_ACTIVATION : t.recurrentActivation), r.useBias = null == t.useBias || t.useBias, r.kernelInitializer = getInitializer(t.kernelInitializer || r.DEFAULT_KERNEL_INITIALIZER), r.recurrentInitializer = getInitializer(t.recurrentInitializer || r.DEFAULT_RECURRENT_INITIALIZER), r.biasInitializer = getInitializer(t.biasInitializer || r.DEFAULT_BIAS_INITIALIZER), r.unitForgetBias = t.unitForgetBias, r.kernelRegularizer = getRegularizer(t.kernelRegularizer), r.recurrentRegularizer = getRegularizer(t.recurrentRegularizer), r.biasRegularizer = getRegularizer(t.biasRegularizer), r.kernelConstraint = getConstraint(t.kernelConstraint), r.recurrentConstraint = getConstraint(t.recurrentConstraint), r.biasConstraint = getConstraint(t.biasConstraint), r.dropout = min$1([1, max$1([0, null == t.dropout ? 0 : t.dropout])]), r.recurrentDropout = min$1([1, max$1([0, null == t.recurrentDropout ? 0 : t.recurrentDropout])]), r.implementation = t.implementation, r.stateSize = [r.units, r.units], r.dropoutMask = null, r.recurrentDropoutMask = null, r;
    }

    return __extends$1(t, e), t.prototype.build = function (e) {
      var t,
          r,
          n = (e = getExactlyOneShape(e))[e.length - 1];

      if (this.kernel = this.addWeight("kernel", [n, 4 * this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, 4 * this.units], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias) {
        if (this.unitForgetBias) {
          var a = this.biasInitializer,
              o = this.units;
          t = new ((r = function (e) {
            function t() {
              return null !== e && e.apply(this, arguments) || this;
            }

            return __extends$1(t, e), t.prototype.apply = function (e, t) {
              var r = a.apply([o]),
                  n = new Ones().apply([o]),
                  i = a.apply([2 * o]);
              return concatAlongFirstAxis(concatAlongFirstAxis(r, n), i);
            }, t;
          }(Initializer)).className = "CustomInit", r)();
        } else t = this.biasInitializer;

        this.bias = this.addWeight("bias", [4 * this.units], null, t, this.biasRegularizer, !0, this.biasConstraint);
      } else this.bias = null;

      this.built = !0;
    }, t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        var n = null != t.training && t.training;
        if (3 !== (e = e).length) throw new ValueError("LSTMCell expects 3 input Tensors (inputs, h, c), got " + e.length + ".");
        var a = e[1],
            o = e[2];
        e = e[0], 0 < r.dropout && r.dropout < 1 && null == r.dropoutMask && (r.dropoutMask = generateDropoutMask(function () {
          return onesLike(e);
        }, r.dropout, n, 4)), 0 < r.recurrentDropout && r.recurrentDropout < 1 && null == r.recurrentDropoutMask && (r.recurrentDropoutMask = generateDropoutMask(function () {
          return onesLike(a);
        }, r.recurrentDropout, n, 4));
        var i,
            s,
            u,
            l,
            p = r.dropoutMask,
            c = r.recurrentDropoutMask;
        0 < r.dropout && r.dropout < 1 && (e = mul(e, p[0]));
        var h = dot$1(e, r.kernel.read());
        0 < r.recurrentDropout && r.recurrentDropout < 1 && (a = mul(a, c[0])), h = add(h, dot$1(a, r.recurrentKernel.read())), r.useBias && (h = biasAdd(h, r.bias.read()));
        var d = split$1(h, 4, h.rank - 1),
            f = d[0],
            m = d[1],
            g = d[2],
            y = d[3];
        i = r.recurrentActivation.apply(f), s = r.recurrentActivation.apply(m), u = add(mul(s, o), mul(i, r.activation.apply(g))), l = r.recurrentActivation.apply(y);
        var v = mul(l, r.activation.apply(u));
        return [v, v, u];
      });
    }, t.prototype.getConfig = function () {
      var t = {
        units: this.units,
        activation: serializeActivation(this.activation),
        recurrentActivation: serializeActivation(this.recurrentActivation),
        useBias: this.useBias,
        kernelInitializer: serializeInitializer(this.kernelInitializer),
        recurrentInitializer: serializeInitializer(this.recurrentInitializer),
        biasInitializer: serializeInitializer(this.biasInitializer),
        unitForgetBias: this.unitForgetBias,
        kernelRegularizer: serializeRegularizer(this.kernelRegularizer),
        recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),
        biasRegularizer: serializeRegularizer(this.biasRegularizer),
        activityRegularizer: serializeRegularizer(this.activityRegularizer),
        kernelConstraint: serializeConstraint(this.kernelConstraint),
        recurrentConstraint: serializeConstraint(this.recurrentConstraint),
        biasConstraint: serializeConstraint(this.biasConstraint),
        dropout: this.dropout,
        recurrentDropout: this.recurrentDropout,
        implementation: this.implementation
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t.className = "LSTMCell", t;
  }(RNNCell);

  serialization.registerClass(LSTMCell);

  var LSTM = function (e) {
    function t(t) {
      return 0 === t.implementation && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), t.cell = new LSTMCell(t), e.call(this, t) || this;
    }

    return __extends$1(t, e), t.prototype.call = function (t, r) {
      var n = this;
      return tidy(function () {
        null != n.cell.dropoutMask && (dispose(n.cell.dropoutMask), n.cell.dropoutMask = null), null != n.cell.recurrentDropoutMask && (dispose(n.cell.recurrentDropoutMask), n.cell.recurrentDropoutMask = null);
        var a = null == r ? null : r.mask,
            o = null == r ? null : r.training,
            i = null == r ? null : r.initialState;
        return e.prototype.call.call(n, t, {
          mask: a,
          training: o,
          initialState: i
        });
      });
    }, Object.defineProperty(t.prototype, "units", {
      get: function get() {
        return this.cell.units;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "activation", {
      get: function get() {
        return this.cell.activation;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "recurrentActivation", {
      get: function get() {
        return this.cell.recurrentActivation;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "useBias", {
      get: function get() {
        return this.cell.useBias;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "kernelInitializer", {
      get: function get() {
        return this.cell.kernelInitializer;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "recurrentInitializer", {
      get: function get() {
        return this.cell.recurrentInitializer;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "biasInitializer", {
      get: function get() {
        return this.cell.biasInitializer;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "unitForgetBias", {
      get: function get() {
        return this.cell.unitForgetBias;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "kernelRegularizer", {
      get: function get() {
        return this.cell.kernelRegularizer;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "recurrentRegularizer", {
      get: function get() {
        return this.cell.recurrentRegularizer;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "biasRegularizer", {
      get: function get() {
        return this.cell.biasRegularizer;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "kernelConstraint", {
      get: function get() {
        return this.cell.kernelConstraint;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "recurrentConstraint", {
      get: function get() {
        return this.cell.recurrentConstraint;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "biasConstraint", {
      get: function get() {
        return this.cell.biasConstraint;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "dropout", {
      get: function get() {
        return this.cell.dropout;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "recurrentDropout", {
      get: function get() {
        return this.cell.recurrentDropout;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "implementation", {
      get: function get() {
        return this.cell.implementation;
      },
      enumerable: !0,
      configurable: !0
    }), t.prototype.getConfig = function () {
      var t = {
        units: this.units,
        activation: serializeActivation(this.activation),
        recurrentActivation: serializeActivation(this.recurrentActivation),
        useBias: this.useBias,
        kernelInitializer: serializeInitializer(this.kernelInitializer),
        recurrentInitializer: serializeInitializer(this.recurrentInitializer),
        biasInitializer: serializeInitializer(this.biasInitializer),
        unitForgetBias: this.unitForgetBias,
        kernelRegularizer: serializeRegularizer(this.kernelRegularizer),
        recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),
        biasRegularizer: serializeRegularizer(this.biasRegularizer),
        activityRegularizer: serializeRegularizer(this.activityRegularizer),
        kernelConstraint: serializeConstraint(this.kernelConstraint),
        recurrentConstraint: serializeConstraint(this.recurrentConstraint),
        biasConstraint: serializeConstraint(this.biasConstraint),
        dropout: this.dropout,
        recurrentDropout: this.recurrentDropout,
        implementation: this.implementation
      },
          r = e.prototype.getConfig.call(this);
      return delete r.cell, Object.assign(t, r), t;
    }, t.fromConfig = function (e, t) {
      return 0 === t.implmentation && (t.implementation = 1), new e(t);
    }, t.className = "LSTM", t;
  }(RNN);

  serialization.registerClass(LSTM);

  var StackedRNNCells = function (e) {
    function t(t) {
      var r = e.call(this, t) || this;
      return r.cells = t.cells, r;
    }

    return __extends$1(t, e), Object.defineProperty(t.prototype, "stateSize", {
      get: function get() {
        for (var e = [], t = 0, r = this.cells.slice().reverse(); t < r.length; t++) {
          var n = r[t];
          Array.isArray(n.stateSize) ? e.push.apply(e, n.stateSize) : e.push(n.stateSize);
        }

        return e;
      },
      enumerable: !0,
      configurable: !0
    }), t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        for (var n = (e = e).slice(1), a = [], o = 0, i = r.cells.slice().reverse(); o < i.length; o++) {
          var s = i[o];
          Array.isArray(s.stateSize) ? a.push(n.splice(0, s.stateSize.length)) : a.push(n.splice(0, 1));
        }

        a.reverse();

        for (var u, l = [], p = 0; p < r.cells.length; ++p) {
          s = r.cells[p], n = a[p], u = 0 === p ? [e[0]].concat(n) : [u[0]].concat(n), u = s.call(u, t), l.push(u.slice(1));
        }

        n = [];

        for (var c = 0, h = l.slice().reverse(); c < h.length; c++) {
          var d = h[c];
          n.push.apply(n, d);
        }

        return [u[0]].concat(n);
      });
    }, t.prototype.build = function (e) {
      var t;
      isArrayOfShapes(e) && (e = e[0]), e = e;

      for (var r = 0, n = this.cells; r < n.length; r++) {
        var a = n[r];
        a.build(e), t = Array.isArray(a.stateSize) ? a.stateSize[0] : a.stateSize, e = [e[0], t];
      }

      this.built = !0;
    }, t.prototype.getConfig = function () {
      for (var t = [], r = 0, n = this.cells; r < n.length; r++) {
        var a = n[r];
        t.push({
          className: this.getClassName(),
          config: a.getConfig()
        });
      }

      var o = {
        cells: t
      },
          i = e.prototype.getConfig.call(this);
      return Object.assign(o, i), o;
    }, t.fromConfig = function (e, t, r) {
      void 0 === r && (r = {});

      for (var n = [], a = 0, o = t.cells; a < o.length; a++) {
        var i = o[a];
        n.push(deserialize(i, r));
      }

      return new e({
        cells: n
      });
    }, Object.defineProperty(t.prototype, "trainableWeights", {
      get: function get() {
        if (!this.trainable) return [];

        for (var e = [], t = 0, r = this.cells; t < r.length; t++) {
          var n = r[t];
          e.push.apply(e, n.trainableWeights);
        }

        return e;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "nonTrainableWeights", {
      get: function get() {
        for (var e = [], t = 0, r = this.cells; t < r.length; t++) {
          var n = r[t];
          e.push.apply(e, n.nonTrainableWeights);
        }

        if (!this.trainable) {
          for (var a = [], o = 0, i = this.cells; o < i.length; o++) {
            n = i[o], a.push.apply(a, n.trainableWeights);
          }

          return a.concat(e);
        }

        return e;
      },
      enumerable: !0,
      configurable: !0
    }), t.prototype.getWeights = function () {
      for (var e = [], t = 0, r = this.cells; t < r.length; t++) {
        var n = r[t];
        e.push.apply(e, n.weights);
      }

      return batchGetValue(e);
    }, t.prototype.setWeights = function (e) {
      for (var t = [], r = 0, n = this.cells; r < n.length; r++) {
        for (var a = n[r], o = a.weights.length, i = e.splice(o), s = 0; s < a.weights.length; ++s) {
          t.push([a.weights[s], i[s]]);
        }
      }

      batchSetValue(t);
    }, t.className = "StackedRNNCells", t;
  }(RNNCell);

  function generateDropoutMask(e, t, r, n) {
    function a() {
      return dropout(e(), getScalar(t));
    }

    if (void 0 === r && (r = null), void 0 === n && (n = 1), n > 1) {
      for (var o = [], i = 0; i < n; i++) {
        o.push(inTrainPhase(a, e, r));
      }

      return o.forEach(function (e) {
        return keep(e);
      }), o;
    }

    return keep(inTrainPhase(a, e, r));
  }

  serialization.registerClass(StackedRNNCells);

  var Wrapper = function (e) {
    function t(t) {
      var r = e.call(this, t) || this;
      return r.layer = t.layer, r;
    }

    return __extends$1(t, e), t.prototype.build = function (e) {
      this.built = !0;
    }, Object.defineProperty(t.prototype, "trainable", {
      get: function get() {
        return null != this.layer && this.layer.trainable;
      },
      set: function set(e) {
        null != this.layer && (this.layer.trainable = e);
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "trainableWeights", {
      get: function get() {
        return this.layer.trainableWeights;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "nonTrainableWeights", {
      get: function get() {
        return this.layer.nonTrainableWeights;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "updates", {
      get: function get() {
        return this.layer._updates;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "losses", {
      get: function get() {
        return this.layer.losses;
      },
      enumerable: !0,
      configurable: !0
    }), t.prototype.getWeights = function () {
      return this.layer.getWeights();
    }, t.prototype.setWeights = function (e) {
      this.layer.setWeights(e);
    }, t.prototype.getConfig = function () {
      var t = {
        layer: {
          className: this.layer.getClassName(),
          config: this.layer.getConfig()
        }
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t.prototype.setFastWeightInitDuringBuild = function (t) {
      e.prototype.setFastWeightInitDuringBuild.call(this, t), null != this.layer && this.layer.setFastWeightInitDuringBuild(t);
    }, t.fromConfig = function (e, t, r) {
      void 0 === r && (r = {});
      var n = deserialize(t.layer, r);
      delete t.layer;
      var a = {
        layer: n
      };
      return Object.assign(a, t), new e(a);
    }, t;
  }(Layer),
      TimeDistributed = function (e) {
    function t(t) {
      var r = e.call(this, t) || this;
      return r.supportsMasking = !0, r;
    }

    return __extends$1(t, e), t.prototype.build = function (t) {
      if ((t = getExactlyOneShape(t)).length < 3) throw new ValueError("TimeDistributed layer expects an input shape >= 3D, but received input shape " + JSON.stringify(t));
      this.inputSpec = [{
        shape: t
      }];
      var r = [t[0]].concat(t.slice(2));
      this.layer.built || (this.layer.build(r), this.layer.built = !0), e.prototype.build.call(this, t);
    }, t.prototype.computeOutputShape = function (e) {
      var t = [(e = getExactlyOneShape(e))[0]].concat(e.slice(2)),
          r = this.layer.computeOutputShape(t),
          n = e[1];
      return [r[0], n].concat(r.slice(1));
    }, t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        return rnn(function (e, n) {
          return [getExactlyOneTensor(r.layer.call(e, t)), []];
        }, e = getExactlyOneTensor(e), [], !1, null, null, !1, !0)[1];
      });
    }, t.className = "TimeDistributed", t;
  }(Wrapper);

  function checkBidirectionalMergeMode(e) {
    checkStringTypeUnionValue(VALID_BIDIRECTIONAL_MERGE_MODES, "BidirectionalMergeMode", e);
  }

  serialization.registerClass(TimeDistributed);

  var Bidirectional = function (e) {
    function t(t) {
      var r = e.call(this, t) || this,
          n = t.layer.getConfig();
      if (r.forwardLayer = deserialize({
        className: t.layer.getClassName(),
        config: n
      }), n.goBackwards = !0 !== n.goBackwards, r.backwardLayer = deserialize({
        className: t.layer.getClassName(),
        config: n
      }), r.forwardLayer.name = "forward_" + r.forwardLayer.name, r.backwardLayer.name = "backward_" + r.backwardLayer.name, checkBidirectionalMergeMode(t.mergeMode), r.mergeMode = t.mergeMode, t.weights) throw new NotImplementedError("weights support is not implemented for Bidirectional layer yet.");
      return r._stateful = t.layer.stateful, r.returnSequences = t.layer.returnSequences, r.returnState = t.layer.returnState, r.supportsMasking = !0, r._trainable = !0, r.inputSpec = t.layer.inputSpec, r.numConstants = null, r;
    }

    return __extends$1(t, e), Object.defineProperty(t.prototype, "trainable", {
      get: function get() {
        return this._trainable;
      },
      set: function set(e) {
        this._trainable = e, null != this.forwardLayer && (this.forwardLayer.trainable = e), null != this.backwardLayer && (this.backwardLayer.trainable = e);
      },
      enumerable: !0,
      configurable: !0
    }), t.prototype.getWeights = function () {
      return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());
    }, t.prototype.setWeights = function (e) {
      var t = e.length,
          r = Math.floor(t / 2);
      this.forwardLayer.setWeights(e.slice(0, r)), this.backwardLayer.setWeights(e.slice(r));
    }, t.prototype.computeOutputShape = function (e) {
      var t,
          r,
          n,
          a = this.forwardLayer.computeOutputShape(e);
      return Array.isArray(a) && Array.isArray(a[0]) || (a = [a]), a = a, this.returnState ? (n = a.slice(1), t = a[0]) : t = a[0], t = t, "concat" === this.mergeMode ? (t[t.length - 1] *= 2, r = [t]) : r = null == this.mergeMode ? [t, t.slice()] : [t], this.returnState ? null == this.mergeMode ? r.concat(n).concat(n.slice()) : [t].concat(n).concat(n.slice()) : singletonOrArray(r);
    }, t.prototype.apply = function (t, r) {
      var n = null == r ? null : r.initialState,
          a = null == r ? null : r.constants;
      null == r && (r = {});
      var o = standardizeArgs(t, n, a, this.numConstants);
      if (t = o.inputs, n = o.initialState, a = o.constants, Array.isArray(t) && (n = t.slice(1), t = t[0]), (null == n || 0 === n.length) && null == a) return e.prototype.apply.call(this, t, r);
      var i = [],
          s = [];

      if (null != n) {
        var u = n.length;
        if (u % 2 > 0) throw new ValueError("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");
        r.initialState = n, i.push.apply(i, n);
        var l = n.map(function (e) {
          return new InputSpec({
            shape: e.shape
          });
        });
        this.forwardLayer.stateSpec = l.slice(0, u / 2), this.backwardLayer.stateSpec = l.slice(u / 2), s.push.apply(s, l);
      }

      if (null != a) throw new NotImplementedError("Support for constants in Bidirectional layers is not implemented yet.");

      for (var p = i[0] instanceof SymbolicTensor, c = 0, h = i; c < h.length; c++) {
        if (h[c] instanceof SymbolicTensor !== p) throw new ValueError("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");
      }

      if (p) {
        var d = [t].concat(i),
            f = this.inputSpec.concat(s),
            m = this.inputSpec;
        this.inputSpec = f;
        var g = e.prototype.apply.call(this, d, r);
        return this.inputSpec = m, g;
      }

      return e.prototype.apply.call(this, t, r);
    }, t.prototype.call = function (e, t) {
      var r = this;
      return tidy(function () {
        if (null != t.mask) throw new NotImplementedError("The support for masking is not implemented for Bidirectional layers yet.");
        var n,
            a,
            o,
            i,
            s = t.initialState;
        if (null == s) n = r.forwardLayer.call(e, t), a = r.backwardLayer.call(e, t);else {
          var u = s.slice(0, s.length / 2),
              l = s.slice(s.length / 2);
          n = r.forwardLayer.call(e, Object.assign(t, {
            initialState: u
          })), a = r.backwardLayer.call(e, Object.assign(t, {
            initialState: l
          }));
        }
        return r.returnState && (Array.isArray(n) && (o = n.slice(1).concat(a.slice(1))), n = n[0], a = a[0]), r.returnSequences && (a = reverse(a, 1)), "concat" === r.mergeMode ? i = concatenate([n, a]) : "sum" === r.mergeMode ? i = add(n, a) : "ave" === r.mergeMode ? i = mul(getScalar(.5), add(n, a)) : "mul" === r.mergeMode ? i = mul(n, a) : null == r.mergeMode && (i = [n, a]), r.returnState ? null == r.mergeMode ? i.concat(o) : [i].concat(o) : i;
      });
    }, t.prototype.resetStates = function (e) {
      this.forwardLayer.resetStates(), this.backwardLayer.resetStates();
    }, t.prototype.build = function (e) {
      var t = this;
      nameScope(this.forwardLayer.name, function () {
        t.forwardLayer.build(e);
      }), nameScope(this.backwardLayer.name, function () {
        t.backwardLayer.build(e);
      }), this.built = !0;
    }, Object.defineProperty(t.prototype, "trainableWeights", {
      get: function get() {
        return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "nonTrainableWeights", {
      get: function get() {
        return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);
      },
      enumerable: !0,
      configurable: !0
    }), t.prototype.setFastWeightInitDuringBuild = function (t) {
      e.prototype.setFastWeightInitDuringBuild.call(this, t), null != this.forwardLayer && this.forwardLayer.setFastWeightInitDuringBuild(t), null != this.backwardLayer && this.backwardLayer.setFastWeightInitDuringBuild(t);
    }, t.prototype.getConfig = function () {
      var t = {
        mergeMode: this.mergeMode
      },
          r = e.prototype.getConfig.call(this);
      return Object.assign(t, r), t;
    }, t.fromConfig = function (e, t) {
      var r = deserialize(t.layer);
      if (delete t.layer, null != t.numConstants) throw new NotImplementedError("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");
      var n = t;
      return n.layer = r, new e(n);
    }, t.className = "Bidirectional", t;
  }(Wrapper);

  function inputLayer(e) {
    return new InputLayer(e);
  }

  function elu$2(e) {
    return new ELU$1(e);
  }

  function reLU(e) {
    return new ReLU(e);
  }

  function leakyReLU(e) {
    return new LeakyReLU(e);
  }

  function prelu$1(e) {
    return new PReLU(e);
  }

  function softmax$1(e) {
    return new Softmax$1(e);
  }

  function thresholdedReLU(e) {
    return new ThresholdedReLU(e);
  }

  function conv1d$2(e) {
    return new Conv1D(e);
  }

  function conv2d$2(e) {
    return new Conv2D(e);
  }

  function conv2dTranspose$1(e) {
    return new Conv2DTranspose(e);
  }

  function separableConv2d$1(e) {
    return new SeparableConv2D(e);
  }

  function cropping2D(e) {
    return new Cropping2D(e);
  }

  function upSampling2d(e) {
    return new UpSampling2D(e);
  }

  function depthwiseConv2d$2(e) {
    return new DepthwiseConv2D(e);
  }

  function activation(e) {
    return new Activation$1(e);
  }

  function dense(e) {
    return new Dense(e);
  }

  function dropout$1(e) {
    return new Dropout(e);
  }

  function flatten$1$1(e) {
    return new Flatten(e);
  }

  function repeatVector(e) {
    return new RepeatVector(e);
  }

  function reshape$1(e) {
    return new Reshape(e);
  }

  function permute(e) {
    return new Permute(e);
  }

  function embedding(e) {
    return new Embedding(e);
  }

  function add$2(e) {
    return new Add(e);
  }

  function average$1(e) {
    return new Average(e);
  }

  function concatenate$2(e) {
    return new Concatenate(e);
  }

  function maximum$2(e) {
    return new Maximum(e);
  }

  function minimum$2(e) {
    return new Minimum(e);
  }

  function multiply$1(e) {
    return new Multiply(e);
  }

  function dot$1$1(e) {
    return new Dot(e);
  }

  function batchNormalization$1$1(e) {
    return new BatchNormalization(e);
  }

  function zeroPadding2d(e) {
    return new ZeroPadding2D(e);
  }

  function averagePooling1d(e) {
    return new AveragePooling1D(e);
  }

  function avgPool1d(e) {
    return averagePooling1d(e);
  }

  function avgPooling1d(e) {
    return averagePooling1d(e);
  }

  function averagePooling2d(e) {
    return new AveragePooling2D(e);
  }

  function avgPool2d(e) {
    return averagePooling2d(e);
  }

  function avgPooling2d(e) {
    return averagePooling2d(e);
  }

  function globalAveragePooling1d(e) {
    return new GlobalAveragePooling1D(e);
  }

  function globalAveragePooling2d(e) {
    return new GlobalAveragePooling2D(e);
  }

  function globalMaxPooling1d(e) {
    return new GlobalMaxPooling1D(e);
  }

  function globalMaxPooling2d(e) {
    return new GlobalMaxPooling2D(e);
  }

  function maxPooling1d(e) {
    return new MaxPooling1D(e);
  }

  function maxPooling2d(e) {
    return new MaxPooling2D(e);
  }

  function gru(e) {
    return new GRU(e);
  }

  function gruCell(e) {
    return new GRUCell(e);
  }

  function lstm(e) {
    return new LSTM(e);
  }

  function lstmCell(e) {
    return new LSTMCell(e);
  }

  function simpleRNN(e) {
    return new SimpleRNN(e);
  }

  function simpleRNNCell(e) {
    return new SimpleRNNCell(e);
  }

  function rnn$1(e) {
    return new RNN(e);
  }

  function stackedRNNCells(e) {
    return new StackedRNNCells(e);
  }

  function bidirectional(e) {
    return new Bidirectional(e);
  }

  function timeDistributed(e) {
    return new TimeDistributed(e);
  }

  serialization.registerClass(Bidirectional);
  var globalMaxPool1d = globalMaxPooling1d,
      globalMaxPool2d = globalMaxPooling2d,
      maxPool1d = maxPooling1d,
      maxPool2d = maxPooling2d,
      exports_layers = Object.freeze({
    inputLayer: inputLayer,
    elu: elu$2,
    reLU: reLU,
    leakyReLU: leakyReLU,
    prelu: prelu$1,
    softmax: softmax$1,
    thresholdedReLU: thresholdedReLU,
    conv1d: conv1d$2,
    conv2d: conv2d$2,
    conv2dTranspose: conv2dTranspose$1,
    separableConv2d: separableConv2d$1,
    cropping2D: cropping2D,
    upSampling2d: upSampling2d,
    depthwiseConv2d: depthwiseConv2d$2,
    activation: activation,
    dense: dense,
    dropout: dropout$1,
    flatten: flatten$1$1,
    repeatVector: repeatVector,
    reshape: reshape$1,
    permute: permute,
    embedding: embedding,
    add: add$2,
    average: average$1,
    concatenate: concatenate$2,
    maximum: maximum$2,
    minimum: minimum$2,
    multiply: multiply$1,
    dot: dot$1$1,
    batchNormalization: batchNormalization$1$1,
    zeroPadding2d: zeroPadding2d,
    averagePooling1d: averagePooling1d,
    avgPool1d: avgPool1d,
    avgPooling1d: avgPooling1d,
    averagePooling2d: averagePooling2d,
    avgPool2d: avgPool2d,
    avgPooling2d: avgPooling2d,
    globalAveragePooling1d: globalAveragePooling1d,
    globalAveragePooling2d: globalAveragePooling2d,
    globalMaxPooling1d: globalMaxPooling1d,
    globalMaxPooling2d: globalMaxPooling2d,
    maxPooling1d: maxPooling1d,
    maxPooling2d: maxPooling2d,
    gru: gru,
    gruCell: gruCell,
    lstm: lstm,
    lstmCell: lstmCell,
    simpleRNN: simpleRNN,
    simpleRNNCell: simpleRNNCell,
    rnn: rnn$1,
    stackedRNNCells: stackedRNNCells,
    bidirectional: bidirectional,
    timeDistributed: timeDistributed,
    globalMaxPool1d: globalMaxPool1d,
    globalMaxPool2d: globalMaxPool2d,
    maxPool1d: maxPool1d,
    maxPool2d: maxPool2d,
    Layer: Layer,
    RNN: RNN,
    RNNCell: RNNCell,
    input: input
  });

  function binaryAccuracy$1(e, t) {
    return binaryAccuracy(e, t);
  }

  function binaryCrossentropy$2(e, t) {
    return binaryCrossentropy$1(e, t);
  }

  function sparseCategoricalAccuracy$1(e, t) {
    return sparseCategoricalAccuracy(e, t);
  }

  function categoricalAccuracy$1(e, t) {
    return categoricalAccuracy(e, t);
  }

  function categoricalCrossentropy$2(e, t) {
    return categoricalCrossentropy$1(e, t);
  }

  function precision$1(e, t) {
    return precision(e, t);
  }

  function recall$1(e, t) {
    return recall(e, t);
  }

  function cosineProximity$1(e, t) {
    return cosineProximity(e, t);
  }

  function meanAbsoluteError$1(e, t) {
    return meanAbsoluteError(e, t);
  }

  function meanAbsolutePercentageError$1(e, t) {
    return meanAbsolutePercentageError(e, t);
  }

  function MAPE$2(e, t) {
    return meanAbsolutePercentageError(e, t);
  }

  function mape$2(e, t) {
    return meanAbsolutePercentageError(e, t);
  }

  function meanSquaredError$1$1(e, t) {
    return meanSquaredError$1(e, t);
  }

  function MSE$2(e, t) {
    return meanSquaredError$1(e, t);
  }

  function mse$2(e, t) {
    return meanSquaredError$1(e, t);
  }

  var exports_metrics = Object.freeze({
    binaryAccuracy: binaryAccuracy$1,
    binaryCrossentropy: binaryCrossentropy$2,
    sparseCategoricalAccuracy: sparseCategoricalAccuracy$1,
    categoricalAccuracy: categoricalAccuracy$1,
    categoricalCrossentropy: categoricalCrossentropy$2,
    precision: precision$1,
    recall: recall$1,
    cosineProximity: cosineProximity$1,
    meanAbsoluteError: meanAbsoluteError$1,
    meanAbsolutePercentageError: meanAbsolutePercentageError$1,
    MAPE: MAPE$2,
    mape: mape$2,
    meanSquaredError: meanSquaredError$1$1,
    MSE: MSE$2,
    mse: mse$2
  }),
      exports_models = Object.freeze({
    modelFromJSON: modelFromJSON
  });

  function l1l2(e) {
    return new L1L2(e);
  }

  function l1$1(e) {
    return l1(e);
  }

  function l2$1(e) {
    return l2(e);
  }

  var exports_regularizers = Object.freeze({
    l1l2: l1l2,
    l1: l1$1,
    l2: l2$1
  }),
      Callback = function (e) {
    function t() {
      var t = null !== e && e.apply(this, arguments) || this;
      return t.model = null, t;
    }

    return __extends$1(t, e), t.prototype.setModel = function (e) {
      if (!(e instanceof Model)) throw new Error("model must be a Model, not some other Container");
      this.model = e;
    }, t;
  }(BaseCallback),
      __assign$2 = Object.assign || function (e) {
    for (var t, r = 1, n = arguments.length; r < n; r++) {
      for (var a in t = arguments[r]) {
        Object.prototype.hasOwnProperty.call(t, a) && (e[a] = t[a]);
      }
    }

    return e;
  };

  function __awaiter$2(e, t, r, n) {
    return new (r || (r = Promise))(function (a, o) {
      function i(e) {
        try {
          u(n.next(e));
        } catch (e) {
          o(e);
        }
      }

      function s(e) {
        try {
          u(n.throw(e));
        } catch (e) {
          o(e);
        }
      }

      function u(e) {
        e.done ? a(e.value) : new r(function (t) {
          t(e.value);
        }).then(i, s);
      }

      u((n = n.apply(e, t || [])).next());
    });
  }

  function __generator$2(e, t) {
    var r,
        n,
        a,
        o,
        i = {
      label: 0,
      sent: function sent() {
        if (1 & a[0]) throw a[1];
        return a[1];
      },
      trys: [],
      ops: []
    };
    return o = {
      next: s(0),
      throw: s(1),
      return: s(2)
    }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {
      return this;
    }), o;

    function s(o) {
      return function (s) {
        return function (o) {
          if (r) throw new TypeError("Generator is already executing.");

          for (; i;) {
            try {
              if (r = 1, n && (a = n[2 & o[0] ? "return" : o[0] ? "throw" : "next"]) && !(a = a.call(n, o[1])).done) return a;

              switch (n = 0, a && (o = [0, a.value]), o[0]) {
                case 0:
                case 1:
                  a = o;
                  break;

                case 4:
                  return i.label++, {
                    value: o[1],
                    done: !1
                  };

                case 5:
                  i.label++, n = o[1], o = [0];
                  continue;

                case 7:
                  o = i.ops.pop(), i.trys.pop();
                  continue;

                default:
                  if (!(a = (a = i.trys).length > 0 && a[a.length - 1]) && (6 === o[0] || 2 === o[0])) {
                    i = 0;
                    continue;
                  }

                  if (3 === o[0] && (!a || o[1] > a[0] && o[1] < a[3])) {
                    i.label = o[1];
                    break;
                  }

                  if (6 === o[0] && i.label < a[1]) {
                    i.label = a[1], a = o;
                    break;
                  }

                  if (a && i.label < a[2]) {
                    i.label = a[2], i.ops.push(o);
                    break;
                  }

                  a[2] && i.ops.pop(), i.trys.pop();
                  continue;
              }

              o = t.call(e, i);
            } catch (e) {
              o = [6, e], n = 0;
            } finally {
              r = a = 0;
            }
          }

          if (5 & o[0]) throw o[1];
          return {
            value: o[0] ? o[1] : void 0,
            done: !0
          };
        }([o, s]);
      };
    }
  }

  var commonjsGlobal$1 = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};

  function createCommonjsModule$1(e, t) {
    return e(t = {
      exports: {}
    }, t.exports), t.exports;
  }

  var aspromise = asPromise;

  function asPromise(e, t) {
    for (var r = new Array(arguments.length - 1), n = 0, a = 2, o = !0; a < arguments.length;) {
      r[n++] = arguments[a++];
    }

    return new Promise(function (a, i) {
      r[n] = function (e) {
        if (o) if (o = !1, e) i(e);else {
          for (var t = new Array(arguments.length - 1), r = 0; r < t.length;) {
            t[r++] = arguments[r];
          }

          a.apply(null, t);
        }
      };

      try {
        e.apply(t || null, r);
      } catch (e) {
        o && (o = !1, i(e));
      }
    });
  }

  var base64_1 = createCommonjsModule$1(function (e, t) {
    var r = t;

    r.length = function (e) {
      var t = e.length;
      if (!t) return 0;

      for (var r = 0; --t % 4 > 1 && "=" === e.charAt(t);) {
        ++r;
      }

      return Math.ceil(3 * e.length) / 4 - r;
    };

    for (var n = new Array(64), a = new Array(123), o = 0; o < 64;) {
      a[n[o] = o < 26 ? o + 65 : o < 52 ? o + 71 : o < 62 ? o - 4 : o - 59 | 43] = o++;
    }

    r.encode = function (e, t, r) {
      for (var a, o = null, i = [], s = 0, u = 0; t < r;) {
        var l = e[t++];

        switch (u) {
          case 0:
            i[s++] = n[l >> 2], a = (3 & l) << 4, u = 1;
            break;

          case 1:
            i[s++] = n[a | l >> 4], a = (15 & l) << 2, u = 2;
            break;

          case 2:
            i[s++] = n[a | l >> 6], i[s++] = n[63 & l], u = 0;
        }

        s > 8191 && ((o || (o = [])).push(String.fromCharCode.apply(String, i)), s = 0);
      }

      return u && (i[s++] = n[a], i[s++] = 61, 1 === u && (i[s++] = 61)), o ? (s && o.push(String.fromCharCode.apply(String, i.slice(0, s))), o.join("")) : String.fromCharCode.apply(String, i.slice(0, s));
    }, r.decode = function (e, t, r) {
      for (var n, o = r, i = 0, s = 0; s < e.length;) {
        var u = e.charCodeAt(s++);
        if (61 === u && i > 1) break;
        if (void 0 === (u = a[u])) throw Error("invalid encoding");

        switch (i) {
          case 0:
            n = u, i = 1;
            break;

          case 1:
            t[r++] = n << 2 | (48 & u) >> 4, n = u, i = 2;
            break;

          case 2:
            t[r++] = (15 & n) << 4 | (60 & u) >> 2, n = u, i = 3;
            break;

          case 3:
            t[r++] = (3 & n) << 6 | u, i = 0;
        }
      }

      if (1 === i) throw Error("invalid encoding");
      return r - o;
    }, r.test = function (e) {
      return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(e);
    };
  }),
      eventemitter = EventEmitter;

  function EventEmitter() {
    this._listeners = {};
  }

  EventEmitter.prototype.on = function (e, t, r) {
    return (this._listeners[e] || (this._listeners[e] = [])).push({
      fn: t,
      ctx: r || this
    }), this;
  }, EventEmitter.prototype.off = function (e, t) {
    if (void 0 === e) this._listeners = {};else if (void 0 === t) this._listeners[e] = [];else for (var r = this._listeners[e], n = 0; n < r.length;) {
      r[n].fn === t ? r.splice(n, 1) : ++n;
    }
    return this;
  }, EventEmitter.prototype.emit = function (e) {
    var t = this._listeners[e];

    if (t) {
      for (var r = [], n = 1; n < arguments.length;) {
        r.push(arguments[n++]);
      }

      for (n = 0; n < t.length;) {
        t[n].fn.apply(t[n++].ctx, r);
      }
    }

    return this;
  };
  var float_1 = factory(factory);

  function factory(e) {
    return "undefined" != typeof Float32Array ? function () {
      var t = new Float32Array([-0]),
          r = new Uint8Array(t.buffer),
          n = 128 === r[3];

      function a(e, n, a) {
        t[0] = e, n[a] = r[0], n[a + 1] = r[1], n[a + 2] = r[2], n[a + 3] = r[3];
      }

      function o(e, n, a) {
        t[0] = e, n[a] = r[3], n[a + 1] = r[2], n[a + 2] = r[1], n[a + 3] = r[0];
      }

      function i(e, n) {
        return r[0] = e[n], r[1] = e[n + 1], r[2] = e[n + 2], r[3] = e[n + 3], t[0];
      }

      function s(e, n) {
        return r[3] = e[n], r[2] = e[n + 1], r[1] = e[n + 2], r[0] = e[n + 3], t[0];
      }

      e.writeFloatLE = n ? a : o, e.writeFloatBE = n ? o : a, e.readFloatLE = n ? i : s, e.readFloatBE = n ? s : i;
    }() : function () {
      function t(e, t, r, n) {
        var a = t < 0 ? 1 : 0;
        if (a && (t = -t), 0 === t) e(1 / t > 0 ? 0 : 2147483648, r, n);else if (isNaN(t)) e(2143289344, r, n);else if (t > 3.4028234663852886e38) e((a << 31 | 2139095040) >>> 0, r, n);else if (t < 1.1754943508222875e-38) e((a << 31 | Math.round(t / 1.401298464324817e-45)) >>> 0, r, n);else {
          var o = Math.floor(Math.log(t) / Math.LN2);
          e((a << 31 | o + 127 << 23 | 8388607 & Math.round(t * Math.pow(2, -o) * 8388608)) >>> 0, r, n);
        }
      }

      function r(e, t, r) {
        var n = e(t, r),
            a = 2 * (n >> 31) + 1,
            o = n >>> 23 & 255,
            i = 8388607 & n;
        return 255 === o ? i ? NaN : a * (1 / 0) : 0 === o ? 1.401298464324817e-45 * a * i : a * Math.pow(2, o - 150) * (i + 8388608);
      }

      e.writeFloatLE = t.bind(null, writeUintLE), e.writeFloatBE = t.bind(null, writeUintBE), e.readFloatLE = r.bind(null, readUintLE), e.readFloatBE = r.bind(null, readUintBE);
    }(), "undefined" != typeof Float64Array ? function () {
      var t = new Float64Array([-0]),
          r = new Uint8Array(t.buffer),
          n = 128 === r[7];

      function a(e, n, a) {
        t[0] = e, n[a] = r[0], n[a + 1] = r[1], n[a + 2] = r[2], n[a + 3] = r[3], n[a + 4] = r[4], n[a + 5] = r[5], n[a + 6] = r[6], n[a + 7] = r[7];
      }

      function o(e, n, a) {
        t[0] = e, n[a] = r[7], n[a + 1] = r[6], n[a + 2] = r[5], n[a + 3] = r[4], n[a + 4] = r[3], n[a + 5] = r[2], n[a + 6] = r[1], n[a + 7] = r[0];
      }

      function i(e, n) {
        return r[0] = e[n], r[1] = e[n + 1], r[2] = e[n + 2], r[3] = e[n + 3], r[4] = e[n + 4], r[5] = e[n + 5], r[6] = e[n + 6], r[7] = e[n + 7], t[0];
      }

      function s(e, n) {
        return r[7] = e[n], r[6] = e[n + 1], r[5] = e[n + 2], r[4] = e[n + 3], r[3] = e[n + 4], r[2] = e[n + 5], r[1] = e[n + 6], r[0] = e[n + 7], t[0];
      }

      e.writeDoubleLE = n ? a : o, e.writeDoubleBE = n ? o : a, e.readDoubleLE = n ? i : s, e.readDoubleBE = n ? s : i;
    }() : function () {
      function t(e, t, r, n, a, o) {
        var i = n < 0 ? 1 : 0;
        if (i && (n = -n), 0 === n) e(0, a, o + t), e(1 / n > 0 ? 0 : 2147483648, a, o + r);else if (isNaN(n)) e(0, a, o + t), e(2146959360, a, o + r);else if (n > 1.7976931348623157e308) e(0, a, o + t), e((i << 31 | 2146435072) >>> 0, a, o + r);else {
          var s;
          if (n < 2.2250738585072014e-308) e((s = n / 5e-324) >>> 0, a, o + t), e((i << 31 | s / 4294967296) >>> 0, a, o + r);else {
            var u = Math.floor(Math.log(n) / Math.LN2);
            1024 === u && (u = 1023), e(4503599627370496 * (s = n * Math.pow(2, -u)) >>> 0, a, o + t), e((i << 31 | u + 1023 << 20 | 1048576 * s & 1048575) >>> 0, a, o + r);
          }
        }
      }

      function r(e, t, r, n, a) {
        var o = e(n, a + t),
            i = e(n, a + r),
            s = 2 * (i >> 31) + 1,
            u = i >>> 20 & 2047,
            l = 4294967296 * (1048575 & i) + o;
        return 2047 === u ? l ? NaN : s * (1 / 0) : 0 === u ? 5e-324 * s * l : s * Math.pow(2, u - 1075) * (l + 4503599627370496);
      }

      e.writeDoubleLE = t.bind(null, writeUintLE, 0, 4), e.writeDoubleBE = t.bind(null, writeUintBE, 4, 0), e.readDoubleLE = r.bind(null, readUintLE, 0, 4), e.readDoubleBE = r.bind(null, readUintBE, 4, 0);
    }(), e;
  }

  function writeUintLE(e, t, r) {
    t[r] = 255 & e, t[r + 1] = e >>> 8 & 255, t[r + 2] = e >>> 16 & 255, t[r + 3] = e >>> 24;
  }

  function writeUintBE(e, t, r) {
    t[r] = e >>> 24, t[r + 1] = e >>> 16 & 255, t[r + 2] = e >>> 8 & 255, t[r + 3] = 255 & e;
  }

  function readUintLE(e, t) {
    return (e[t] | e[t + 1] << 8 | e[t + 2] << 16 | e[t + 3] << 24) >>> 0;
  }

  function readUintBE(e, t) {
    return (e[t] << 24 | e[t + 1] << 16 | e[t + 2] << 8 | e[t + 3]) >>> 0;
  }

  var inquire_1 = inquire;

  function inquire(moduleName) {
    try {
      var mod$$1 = eval("quire".replace(/^/, "re"))(moduleName);
      if (mod$$1 && (mod$$1.length || Object.keys(mod$$1).length)) return mod$$1;
    } catch (e) {}

    return null;
  }

  var utf8_1 = createCommonjsModule$1(function (e, t) {
    var r = t;
    r.length = function (e) {
      for (var t = 0, r = 0, n = 0; n < e.length; ++n) {
        (r = e.charCodeAt(n)) < 128 ? t += 1 : r < 2048 ? t += 2 : 55296 == (64512 & r) && 56320 == (64512 & e.charCodeAt(n + 1)) ? (++n, t += 4) : t += 3;
      }

      return t;
    }, r.read = function (e, t, r) {
      if (r - t < 1) return "";

      for (var n, a = null, o = [], i = 0; t < r;) {
        (n = e[t++]) < 128 ? o[i++] = n : n > 191 && n < 224 ? o[i++] = (31 & n) << 6 | 63 & e[t++] : n > 239 && n < 365 ? (n = ((7 & n) << 18 | (63 & e[t++]) << 12 | (63 & e[t++]) << 6 | 63 & e[t++]) - 65536, o[i++] = 55296 + (n >> 10), o[i++] = 56320 + (1023 & n)) : o[i++] = (15 & n) << 12 | (63 & e[t++]) << 6 | 63 & e[t++], i > 8191 && ((a || (a = [])).push(String.fromCharCode.apply(String, o)), i = 0);
      }

      return a ? (i && a.push(String.fromCharCode.apply(String, o.slice(0, i))), a.join("")) : String.fromCharCode.apply(String, o.slice(0, i));
    }, r.write = function (e, t, r) {
      for (var n, a, o = r, i = 0; i < e.length; ++i) {
        (n = e.charCodeAt(i)) < 128 ? t[r++] = n : n < 2048 ? (t[r++] = n >> 6 | 192, t[r++] = 63 & n | 128) : 55296 == (64512 & n) && 56320 == (64512 & (a = e.charCodeAt(i + 1))) ? (n = 65536 + ((1023 & n) << 10) + (1023 & a), ++i, t[r++] = n >> 18 | 240, t[r++] = n >> 12 & 63 | 128, t[r++] = n >> 6 & 63 | 128, t[r++] = 63 & n | 128) : (t[r++] = n >> 12 | 224, t[r++] = n >> 6 & 63 | 128, t[r++] = 63 & n | 128);
      }

      return r - o;
    };
  }),
      pool_1 = pool$1;

  function pool$1(e, t, r) {
    var n = r || 8192,
        a = n >>> 1,
        o = null,
        i = n;
    return function (r) {
      if (r < 1 || r > a) return e(r);
      i + r > n && (o = e(n), i = 0);
      var s = t.call(o, i, i += r);
      return 7 & i && (i = 1 + (7 | i)), s;
    };
  }

  var longbits = LongBits;

  function LongBits(e, t) {
    this.lo = e >>> 0, this.hi = t >>> 0;
  }

  var zero = LongBits.zero = new LongBits(0, 0);
  zero.toNumber = function () {
    return 0;
  }, zero.zzEncode = zero.zzDecode = function () {
    return this;
  }, zero.length = function () {
    return 1;
  };
  var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";
  LongBits.fromNumber = function (e) {
    if (0 === e) return zero;
    var t = e < 0;
    t && (e = -e);
    var r = e >>> 0,
        n = (e - r) / 4294967296 >>> 0;
    return t && (n = ~n >>> 0, r = ~r >>> 0, ++r > 4294967295 && (r = 0, ++n > 4294967295 && (n = 0))), new LongBits(r, n);
  }, LongBits.from = function (e) {
    if ("number" == typeof e) return LongBits.fromNumber(e);

    if (minimal.isString(e)) {
      if (!minimal.Long) return LongBits.fromNumber(parseInt(e, 10));
      e = minimal.Long.fromString(e);
    }

    return e.low || e.high ? new LongBits(e.low >>> 0, e.high >>> 0) : zero;
  }, LongBits.prototype.toNumber = function (e) {
    if (!e && this.hi >>> 31) {
      var t = 1 + ~this.lo >>> 0,
          r = ~this.hi >>> 0;
      return t || (r = r + 1 >>> 0), -(t + 4294967296 * r);
    }

    return this.lo + 4294967296 * this.hi;
  }, LongBits.prototype.toLong = function (e) {
    return minimal.Long ? new minimal.Long(0 | this.lo, 0 | this.hi, Boolean(e)) : {
      low: 0 | this.lo,
      high: 0 | this.hi,
      unsigned: Boolean(e)
    };
  };
  var charCodeAt = String.prototype.charCodeAt;
  LongBits.fromHash = function (e) {
    return e === zeroHash ? zero : new LongBits((charCodeAt.call(e, 0) | charCodeAt.call(e, 1) << 8 | charCodeAt.call(e, 2) << 16 | charCodeAt.call(e, 3) << 24) >>> 0, (charCodeAt.call(e, 4) | charCodeAt.call(e, 5) << 8 | charCodeAt.call(e, 6) << 16 | charCodeAt.call(e, 7) << 24) >>> 0);
  }, LongBits.prototype.toHash = function () {
    return String.fromCharCode(255 & this.lo, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, 255 & this.hi, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);
  }, LongBits.prototype.zzEncode = function () {
    var e = this.hi >> 31;
    return this.hi = ((this.hi << 1 | this.lo >>> 31) ^ e) >>> 0, this.lo = (this.lo << 1 ^ e) >>> 0, this;
  }, LongBits.prototype.zzDecode = function () {
    var e = -(1 & this.lo);
    return this.lo = ((this.lo >>> 1 | this.hi << 31) ^ e) >>> 0, this.hi = (this.hi >>> 1 ^ e) >>> 0, this;
  }, LongBits.prototype.length = function () {
    var e = this.lo,
        t = (this.lo >>> 28 | this.hi << 4) >>> 0,
        r = this.hi >>> 24;
    return 0 === r ? 0 === t ? e < 16384 ? e < 128 ? 1 : 2 : e < 2097152 ? 3 : 4 : t < 16384 ? t < 128 ? 5 : 6 : t < 2097152 ? 7 : 8 : r < 128 ? 9 : 10;
  };
  var minimal = createCommonjsModule$1(function (e, t) {
    var r = t;

    function n(e, t, r) {
      for (var n = Object.keys(t), a = 0; a < n.length; ++a) {
        void 0 !== e[n[a]] && r || (e[n[a]] = t[n[a]]);
      }

      return e;
    }

    function a(e) {
      function t(e, r) {
        if (!(this instanceof t)) return new t(e, r);
        Object.defineProperty(this, "message", {
          get: function get() {
            return e;
          }
        }), Error.captureStackTrace ? Error.captureStackTrace(this, t) : Object.defineProperty(this, "stack", {
          value: new Error().stack || ""
        }), r && n(this, r);
      }

      return (t.prototype = Object.create(Error.prototype)).constructor = t, Object.defineProperty(t.prototype, "name", {
        get: function get() {
          return e;
        }
      }), t.prototype.toString = function () {
        return this.name + ": " + this.message;
      }, t;
    }

    r.asPromise = aspromise, r.base64 = base64_1, r.EventEmitter = eventemitter, r.float = float_1, r.inquire = inquire_1, r.utf8 = utf8_1, r.pool = pool_1, r.LongBits = longbits, r.global = "undefined" != typeof window && window || void 0 !== commonjsGlobal$1 && commonjsGlobal$1 || "undefined" != typeof self && self || commonjsGlobal$1, r.emptyArray = Object.freeze ? Object.freeze([]) : [], r.emptyObject = Object.freeze ? Object.freeze({}) : {}, r.isNode = Boolean(r.global.process && r.global.process.versions && r.global.process.versions.node), r.isInteger = Number.isInteger || function (e) {
      return "number" == typeof e && isFinite(e) && Math.floor(e) === e;
    }, r.isString = function (e) {
      return "string" == typeof e || e instanceof String;
    }, r.isObject = function (e) {
      return e && "object" == _typeof(e);
    }, r.isset = r.isSet = function (e, t) {
      var r = e[t];
      return !(null == r || !e.hasOwnProperty(t)) && ("object" != _typeof(r) || (Array.isArray(r) ? r.length : Object.keys(r).length) > 0);
    }, r.Buffer = function () {
      try {
        var e = r.inquire("buffer").Buffer;
        return e.prototype.utf8Write ? e : null;
      } catch (e) {
        return null;
      }
    }(), r._Buffer_from = null, r._Buffer_allocUnsafe = null, r.newBuffer = function (e) {
      return "number" == typeof e ? r.Buffer ? r._Buffer_allocUnsafe(e) : new r.Array(e) : r.Buffer ? r._Buffer_from(e) : "undefined" == typeof Uint8Array ? e : new Uint8Array(e);
    }, r.Array = "undefined" != typeof Uint8Array ? Uint8Array : Array, r.Long = r.global.dcodeIO && r.global.dcodeIO.Long || r.global.Long || r.inquire("long"), r.key2Re = /^true|false|0|1$/, r.key32Re = /^-?(?:0|[1-9][0-9]*)$/, r.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/, r.longToHash = function (e) {
      return e ? r.LongBits.from(e).toHash() : r.LongBits.zeroHash;
    }, r.longFromHash = function (e, t) {
      var n = r.LongBits.fromHash(e);
      return r.Long ? r.Long.fromBits(n.lo, n.hi, t) : n.toNumber(Boolean(t));
    }, r.merge = n, r.lcFirst = function (e) {
      return e.charAt(0).toLowerCase() + e.substring(1);
    }, r.newError = a, r.ProtocolError = a("ProtocolError"), r.oneOfGetter = function (e) {
      for (var t = {}, r = 0; r < e.length; ++r) {
        t[e[r]] = 1;
      }

      return function () {
        for (var e = Object.keys(this), r = e.length - 1; r > -1; --r) {
          if (1 === t[e[r]] && void 0 !== this[e[r]] && null !== this[e[r]]) return e[r];
        }
      };
    }, r.oneOfSetter = function (e) {
      return function (t) {
        for (var r = 0; r < e.length; ++r) {
          e[r] !== t && delete this[e[r]];
        }
      };
    }, r.toJSONOptions = {
      longs: String,
      enums: String,
      bytes: String,
      json: !0
    }, r._configure = function () {
      var e = r.Buffer;
      e ? (r._Buffer_from = e.from !== Uint8Array.from && e.from || function (t, r) {
        return new e(t, r);
      }, r._Buffer_allocUnsafe = e.allocUnsafe || function (t) {
        return new e(t);
      }) : r._Buffer_from = r._Buffer_allocUnsafe = null;
    };
  }),
      writer = Writer,
      BufferWriter,
      LongBits$1 = minimal.LongBits,
      base64 = minimal.base64,
      utf8 = minimal.utf8;

  function Op(e, t, r) {
    this.fn = e, this.len = t, this.next = void 0, this.val = r;
  }

  function noop() {}

  function State(e) {
    this.head = e.head, this.tail = e.tail, this.len = e.len, this.next = e.states;
  }

  function Writer() {
    this.len = 0, this.head = new Op(noop, 0, 0), this.tail = this.head, this.states = null;
  }

  function writeByte(e, t, r) {
    t[r] = 255 & e;
  }

  function writeVarint32(e, t, r) {
    for (; e > 127;) {
      t[r++] = 127 & e | 128, e >>>= 7;
    }

    t[r] = e;
  }

  function VarintOp(e, t) {
    this.len = e, this.next = void 0, this.val = t;
  }

  function writeVarint64(e, t, r) {
    for (; e.hi;) {
      t[r++] = 127 & e.lo | 128, e.lo = (e.lo >>> 7 | e.hi << 25) >>> 0, e.hi >>>= 7;
    }

    for (; e.lo > 127;) {
      t[r++] = 127 & e.lo | 128, e.lo = e.lo >>> 7;
    }

    t[r++] = e.lo;
  }

  function writeFixed32(e, t, r) {
    t[r] = 255 & e, t[r + 1] = e >>> 8 & 255, t[r + 2] = e >>> 16 & 255, t[r + 3] = e >>> 24;
  }

  Writer.create = minimal.Buffer ? function () {
    return (Writer.create = function () {
      return new BufferWriter();
    })();
  } : function () {
    return new Writer();
  }, Writer.alloc = function (e) {
    return new minimal.Array(e);
  }, minimal.Array !== Array && (Writer.alloc = minimal.pool(Writer.alloc, minimal.Array.prototype.subarray)), Writer.prototype._push = function (e, t, r) {
    return this.tail = this.tail.next = new Op(e, t, r), this.len += t, this;
  }, VarintOp.prototype = Object.create(Op.prototype), VarintOp.prototype.fn = writeVarint32, Writer.prototype.uint32 = function (e) {
    return this.len += (this.tail = this.tail.next = new VarintOp((e >>>= 0) < 128 ? 1 : e < 16384 ? 2 : e < 2097152 ? 3 : e < 268435456 ? 4 : 5, e)).len, this;
  }, Writer.prototype.int32 = function (e) {
    return e < 0 ? this._push(writeVarint64, 10, LongBits$1.fromNumber(e)) : this.uint32(e);
  }, Writer.prototype.sint32 = function (e) {
    return this.uint32((e << 1 ^ e >> 31) >>> 0);
  }, Writer.prototype.uint64 = function (e) {
    var t = LongBits$1.from(e);
    return this._push(writeVarint64, t.length(), t);
  }, Writer.prototype.int64 = Writer.prototype.uint64, Writer.prototype.sint64 = function (e) {
    var t = LongBits$1.from(e).zzEncode();
    return this._push(writeVarint64, t.length(), t);
  }, Writer.prototype.bool = function (e) {
    return this._push(writeByte, 1, e ? 1 : 0);
  }, Writer.prototype.fixed32 = function (e) {
    return this._push(writeFixed32, 4, e >>> 0);
  }, Writer.prototype.sfixed32 = Writer.prototype.fixed32, Writer.prototype.fixed64 = function (e) {
    var t = LongBits$1.from(e);
    return this._push(writeFixed32, 4, t.lo)._push(writeFixed32, 4, t.hi);
  }, Writer.prototype.sfixed64 = Writer.prototype.fixed64, Writer.prototype.float = function (e) {
    return this._push(minimal.float.writeFloatLE, 4, e);
  }, Writer.prototype.double = function (e) {
    return this._push(minimal.float.writeDoubleLE, 8, e);
  };
  var writeBytes = minimal.Array.prototype.set ? function (e, t, r) {
    t.set(e, r);
  } : function (e, t, r) {
    for (var n = 0; n < e.length; ++n) {
      t[r + n] = e[n];
    }
  };
  Writer.prototype.bytes = function (e) {
    var t = e.length >>> 0;
    if (!t) return this._push(writeByte, 1, 0);

    if (minimal.isString(e)) {
      var r = Writer.alloc(t = base64.length(e));
      base64.decode(e, r, 0), e = r;
    }

    return this.uint32(t)._push(writeBytes, t, e);
  }, Writer.prototype.string = function (e) {
    var t = utf8.length(e);
    return t ? this.uint32(t)._push(utf8.write, t, e) : this._push(writeByte, 1, 0);
  }, Writer.prototype.fork = function () {
    return this.states = new State(this), this.head = this.tail = new Op(noop, 0, 0), this.len = 0, this;
  }, Writer.prototype.reset = function () {
    return this.states ? (this.head = this.states.head, this.tail = this.states.tail, this.len = this.states.len, this.states = this.states.next) : (this.head = this.tail = new Op(noop, 0, 0), this.len = 0), this;
  }, Writer.prototype.ldelim = function () {
    var e = this.head,
        t = this.tail,
        r = this.len;
    return this.reset().uint32(r), r && (this.tail.next = e.next, this.tail = t, this.len += r), this;
  }, Writer.prototype.finish = function () {
    for (var e = this.head.next, t = this.constructor.alloc(this.len), r = 0; e;) {
      e.fn(e.val, t, r), r += e.len, e = e.next;
    }

    return t;
  }, Writer._configure = function (e) {
    BufferWriter = e;
  };
  var writer_buffer = BufferWriter$1;
  (BufferWriter$1.prototype = Object.create(writer.prototype)).constructor = BufferWriter$1;
  var Buffer$1 = minimal.Buffer;

  function BufferWriter$1() {
    writer.call(this);
  }

  BufferWriter$1.alloc = function (e) {
    return (BufferWriter$1.alloc = minimal._Buffer_allocUnsafe)(e);
  };

  var writeBytesBuffer = Buffer$1 && Buffer$1.prototype instanceof Uint8Array && "set" === Buffer$1.prototype.set.name ? function (e, t, r) {
    t.set(e, r);
  } : function (e, t, r) {
    if (e.copy) e.copy(t, r, 0, e.length);else for (var n = 0; n < e.length;) {
      t[r++] = e[n++];
    }
  };

  function writeStringBuffer(e, t, r) {
    e.length < 40 ? minimal.utf8.write(e, t, r) : t.utf8Write(e, r);
  }

  BufferWriter$1.prototype.bytes = function (e) {
    minimal.isString(e) && (e = minimal._Buffer_from(e, "base64"));
    var t = e.length >>> 0;
    return this.uint32(t), t && this._push(writeBytesBuffer, t, e), this;
  }, BufferWriter$1.prototype.string = function (e) {
    var t = Buffer$1.byteLength(e);
    return this.uint32(t), t && this._push(writeStringBuffer, t, e), this;
  };
  var reader = Reader,
      BufferReader,
      LongBits$2 = minimal.LongBits,
      utf8$1 = minimal.utf8;

  function indexOutOfRange(e, t) {
    return RangeError("index out of range: " + e.pos + " + " + (t || 1) + " > " + e.len);
  }

  function Reader(e) {
    this.buf = e, this.pos = 0, this.len = e.length;
  }

  var create_array = "undefined" != typeof Uint8Array ? function (e) {
    if (e instanceof Uint8Array || Array.isArray(e)) return new Reader(e);
    throw Error("illegal buffer");
  } : function (e) {
    if (Array.isArray(e)) return new Reader(e);
    throw Error("illegal buffer");
  };

  function readLongVarint() {
    var e = new LongBits$2(0, 0),
        t = 0;

    if (!(this.len - this.pos > 4)) {
      for (; t < 3; ++t) {
        if (this.pos >= this.len) throw indexOutOfRange(this);
        if (e.lo = (e.lo | (127 & this.buf[this.pos]) << 7 * t) >>> 0, this.buf[this.pos++] < 128) return e;
      }

      return e.lo = (e.lo | (127 & this.buf[this.pos++]) << 7 * t) >>> 0, e;
    }

    for (; t < 4; ++t) {
      if (e.lo = (e.lo | (127 & this.buf[this.pos]) << 7 * t) >>> 0, this.buf[this.pos++] < 128) return e;
    }

    if (e.lo = (e.lo | (127 & this.buf[this.pos]) << 28) >>> 0, e.hi = (e.hi | (127 & this.buf[this.pos]) >> 4) >>> 0, this.buf[this.pos++] < 128) return e;

    if (t = 0, this.len - this.pos > 4) {
      for (; t < 5; ++t) {
        if (e.hi = (e.hi | (127 & this.buf[this.pos]) << 7 * t + 3) >>> 0, this.buf[this.pos++] < 128) return e;
      }
    } else for (; t < 5; ++t) {
      if (this.pos >= this.len) throw indexOutOfRange(this);
      if (e.hi = (e.hi | (127 & this.buf[this.pos]) << 7 * t + 3) >>> 0, this.buf[this.pos++] < 128) return e;
    }

    throw Error("invalid varint encoding");
  }

  function readFixed32_end(e, t) {
    return (e[t - 4] | e[t - 3] << 8 | e[t - 2] << 16 | e[t - 1] << 24) >>> 0;
  }

  function readFixed64() {
    if (this.pos + 8 > this.len) throw indexOutOfRange(this, 8);
    return new LongBits$2(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
  }

  Reader.create = minimal.Buffer ? function (e) {
    return (Reader.create = function (e) {
      return minimal.Buffer.isBuffer(e) ? new BufferReader(e) : create_array(e);
    })(e);
  } : create_array, Reader.prototype._slice = minimal.Array.prototype.subarray || minimal.Array.prototype.slice, Reader.prototype.uint32 = function () {
    var e = 4294967295;
    return function () {
      if (e = (127 & this.buf[this.pos]) >>> 0, this.buf[this.pos++] < 128) return e;
      if (e = (e | (127 & this.buf[this.pos]) << 7) >>> 0, this.buf[this.pos++] < 128) return e;
      if (e = (e | (127 & this.buf[this.pos]) << 14) >>> 0, this.buf[this.pos++] < 128) return e;
      if (e = (e | (127 & this.buf[this.pos]) << 21) >>> 0, this.buf[this.pos++] < 128) return e;
      if (e = (e | (15 & this.buf[this.pos]) << 28) >>> 0, this.buf[this.pos++] < 128) return e;
      if ((this.pos += 5) > this.len) throw this.pos = this.len, indexOutOfRange(this, 10);
      return e;
    };
  }(), Reader.prototype.int32 = function () {
    return 0 | this.uint32();
  }, Reader.prototype.sint32 = function () {
    var e = this.uint32();
    return e >>> 1 ^ -(1 & e) | 0;
  }, Reader.prototype.bool = function () {
    return 0 !== this.uint32();
  }, Reader.prototype.fixed32 = function () {
    if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);
    return readFixed32_end(this.buf, this.pos += 4);
  }, Reader.prototype.sfixed32 = function () {
    if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);
    return 0 | readFixed32_end(this.buf, this.pos += 4);
  }, Reader.prototype.float = function () {
    if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);
    var e = minimal.float.readFloatLE(this.buf, this.pos);
    return this.pos += 4, e;
  }, Reader.prototype.double = function () {
    if (this.pos + 8 > this.len) throw indexOutOfRange(this, 4);
    var e = minimal.float.readDoubleLE(this.buf, this.pos);
    return this.pos += 8, e;
  }, Reader.prototype.bytes = function () {
    var e = this.uint32(),
        t = this.pos,
        r = this.pos + e;
    if (r > this.len) throw indexOutOfRange(this, e);
    return this.pos += e, Array.isArray(this.buf) ? this.buf.slice(t, r) : t === r ? new this.buf.constructor(0) : this._slice.call(this.buf, t, r);
  }, Reader.prototype.string = function () {
    var e = this.bytes();
    return utf8$1.read(e, 0, e.length);
  }, Reader.prototype.skip = function (e) {
    if ("number" == typeof e) {
      if (this.pos + e > this.len) throw indexOutOfRange(this, e);
      this.pos += e;
    } else do {
      if (this.pos >= this.len) throw indexOutOfRange(this);
    } while (128 & this.buf[this.pos++]);

    return this;
  }, Reader.prototype.skipType = function (e) {
    switch (e) {
      case 0:
        this.skip();
        break;

      case 1:
        this.skip(8);
        break;

      case 2:
        this.skip(this.uint32());
        break;

      case 3:
        for (; 4 != (e = 7 & this.uint32());) {
          this.skipType(e);
        }

        break;

      case 5:
        this.skip(4);
        break;

      default:
        throw Error("invalid wire type " + e + " at offset " + this.pos);
    }

    return this;
  }, Reader._configure = function (e) {
    BufferReader = e;
    var t = minimal.Long ? "toLong" : "toNumber";
    minimal.merge(Reader.prototype, {
      int64: function int64() {
        return readLongVarint.call(this)[t](!1);
      },
      uint64: function uint64() {
        return readLongVarint.call(this)[t](!0);
      },
      sint64: function sint64() {
        return readLongVarint.call(this).zzDecode()[t](!1);
      },
      fixed64: function fixed64() {
        return readFixed64.call(this)[t](!0);
      },
      sfixed64: function sfixed64() {
        return readFixed64.call(this)[t](!1);
      }
    });
  };
  var reader_buffer = BufferReader$1;

  function BufferReader$1(e) {
    reader.call(this, e);
  }

  (BufferReader$1.prototype = Object.create(reader.prototype)).constructor = BufferReader$1, minimal.Buffer && (BufferReader$1.prototype._slice = minimal.Buffer.prototype.slice), BufferReader$1.prototype.string = function () {
    var e = this.uint32();
    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + e, this.len));
  };
  var service = Service;

  function Service(e, t, r) {
    if ("function" != typeof e) throw TypeError("rpcImpl must be a function");
    minimal.EventEmitter.call(this), this.rpcImpl = e, this.requestDelimited = Boolean(t), this.responseDelimited = Boolean(r);
  }

  (Service.prototype = Object.create(minimal.EventEmitter.prototype)).constructor = Service, Service.prototype.rpcCall = function e(t, r, n, a, o) {
    if (!a) throw TypeError("request must be specified");
    var i = this;
    if (!o) return minimal.asPromise(e, i, t, r, n, a);
    if (i.rpcImpl) try {
      return i.rpcImpl(t, r[i.requestDelimited ? "encodeDelimited" : "encode"](a).finish(), function (e, r) {
        if (e) return i.emit("error", e, t), o(e);

        if (null !== r) {
          if (!(r instanceof n)) try {
            r = n[i.responseDelimited ? "decodeDelimited" : "decode"](r);
          } catch (e) {
            return i.emit("error", e, t), o(e);
          }
          return i.emit("data", r, t), o(null, r);
        }

        i.end(!0);
      });
    } catch (e) {
      return i.emit("error", e, t), void setTimeout(function () {
        o(e);
      }, 0);
    } else setTimeout(function () {
      o(Error("already ended"));
    }, 0);
  }, Service.prototype.end = function (e) {
    return this.rpcImpl && (e || this.rpcImpl(null, null, null), this.rpcImpl = null, this.emit("end").off()), this;
  };
  var rpc_1 = createCommonjsModule$1(function (e, t) {
    t.Service = service;
  }),
      roots = {},
      indexMinimal = createCommonjsModule$1(function (e, t) {
    var r = t;

    function n() {
      r.Reader._configure(r.BufferReader), r.util._configure();
    }

    r.build = "minimal", r.Writer = writer, r.BufferWriter = writer_buffer, r.Reader = reader, r.BufferReader = reader_buffer, r.util = minimal, r.rpc = rpc_1, r.roots = roots, r.configure = n, r.Writer._configure(r.BufferWriter), n();
  }),
      minimal$1 = indexMinimal,
      minimal_1 = minimal$1.roots,
      minimal_2 = minimal$1.Reader,
      minimal_3 = minimal$1.util,
      $Reader = minimal$1.Reader,
      $util = minimal$1.util,
      $root = minimal$1.roots.default || (minimal$1.roots.default = {});

  $root.tensorflow = function () {
    var e,
        t,
        r = {};
    return r.Any = function () {
      function e(e) {
        if (e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
          null != e[t[r]] && (this[t[r]] = e[t[r]]);
        }
      }

      return e.prototype.typeUrl = "", e.prototype.value = $util.newBuffer([]), e.decode = function (e, t) {
        e instanceof $Reader || (e = $Reader.create(e));

        for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.Any(); e.pos < r;) {
          var a = e.uint32();

          switch (a >>> 3) {
            case 1:
              n.typeUrl = e.string();
              break;

            case 2:
              n.value = e.bytes();
              break;

            default:
              e.skipType(7 & a);
          }
        }

        return n;
      }, e;
    }(), r.DataType = (e = {}, (t = Object.create(e))[e[0] = "DT_INVALID"] = 0, t[e[1] = "DT_FLOAT"] = 1, t[e[2] = "DT_DOUBLE"] = 2, t[e[3] = "DT_INT32"] = 3, t[e[4] = "DT_UINT8"] = 4, t[e[5] = "DT_INT16"] = 5, t[e[6] = "DT_INT8"] = 6, t[e[7] = "DT_STRING"] = 7, t[e[8] = "DT_COMPLEX64"] = 8, t[e[9] = "DT_INT64"] = 9, t[e[10] = "DT_BOOL"] = 10, t[e[11] = "DT_QINT8"] = 11, t[e[12] = "DT_QUINT8"] = 12, t[e[13] = "DT_QINT32"] = 13, t[e[14] = "DT_BFLOAT16"] = 14, t[e[101] = "DT_FLOAT_REF"] = 101, t[e[102] = "DT_DOUBLE_REF"] = 102, t[e[103] = "DT_INT32_REF"] = 103, t[e[104] = "DT_UINT8_REF"] = 104, t[e[105] = "DT_INT16_REF"] = 105, t[e[106] = "DT_INT8_REF"] = 106, t[e[107] = "DT_STRING_REF"] = 107, t[e[108] = "DT_COMPLEX64_REF"] = 108, t[e[109] = "DT_INT64_REF"] = 109, t[e[110] = "DT_BOOL_REF"] = 110, t[e[111] = "DT_QINT8_REF"] = 111, t[e[112] = "DT_QUINT8_REF"] = 112, t[e[113] = "DT_QINT32_REF"] = 113, t[e[114] = "DT_BFLOAT16_REF"] = 114, t), r.TensorShape = function () {
      function e(e) {
        if (this.dim = [], e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
          null != e[t[r]] && (this[t[r]] = e[t[r]]);
        }
      }

      return e.prototype.dim = $util.emptyArray, e.prototype.unknownRank = !1, e.decode = function (e, t) {
        e instanceof $Reader || (e = $Reader.create(e));

        for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.TensorShape(); e.pos < r;) {
          var a = e.uint32();

          switch (a >>> 3) {
            case 2:
              n.dim && n.dim.length || (n.dim = []), n.dim.push($root.tensorflow.TensorShape.Dim.decode(e, e.uint32()));
              break;

            case 3:
              n.unknownRank = e.bool();
              break;

            default:
              e.skipType(7 & a);
          }
        }

        return n;
      }, e.Dim = function () {
        function e(e) {
          if (e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
            null != e[t[r]] && (this[t[r]] = e[t[r]]);
          }
        }

        return e.prototype.size = $util.Long ? $util.Long.fromBits(0, 0, !1) : 0, e.prototype.name = "", e.decode = function (e, t) {
          e instanceof $Reader || (e = $Reader.create(e));

          for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.TensorShape.Dim(); e.pos < r;) {
            var a = e.uint32();

            switch (a >>> 3) {
              case 1:
                n.size = e.int64();
                break;

              case 2:
                n.name = e.string();
                break;

              default:
                e.skipType(7 & a);
            }
          }

          return n;
        }, e;
      }(), e;
    }(), r.Tensor = function () {
      function e(e) {
        if (this.floatVal = [], this.doubleVal = [], this.intVal = [], this.stringVal = [], this.scomplexVal = [], this.int64Val = [], this.boolVal = [], this.uint32Val = [], this.uint64Val = [], e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
          null != e[t[r]] && (this[t[r]] = e[t[r]]);
        }
      }

      return e.prototype.dtype = 0, e.prototype.tensorShape = null, e.prototype.versionNumber = 0, e.prototype.tensorContent = $util.newBuffer([]), e.prototype.floatVal = $util.emptyArray, e.prototype.doubleVal = $util.emptyArray, e.prototype.intVal = $util.emptyArray, e.prototype.stringVal = $util.emptyArray, e.prototype.scomplexVal = $util.emptyArray, e.prototype.int64Val = $util.emptyArray, e.prototype.boolVal = $util.emptyArray, e.prototype.uint32Val = $util.emptyArray, e.prototype.uint64Val = $util.emptyArray, e.decode = function (e, t) {
        e instanceof $Reader || (e = $Reader.create(e));

        for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.Tensor(); e.pos < r;) {
          var a = e.uint32();

          switch (a >>> 3) {
            case 1:
              n.dtype = e.int32();
              break;

            case 2:
              n.tensorShape = $root.tensorflow.TensorShape.decode(e, e.uint32());
              break;

            case 3:
              n.versionNumber = e.int32();
              break;

            case 4:
              n.tensorContent = e.bytes();
              break;

            case 5:
              if (n.floatVal && n.floatVal.length || (n.floatVal = []), 2 == (7 & a)) for (var o = e.uint32() + e.pos; e.pos < o;) {
                n.floatVal.push(e.float());
              } else n.floatVal.push(e.float());
              break;

            case 6:
              if (n.doubleVal && n.doubleVal.length || (n.doubleVal = []), 2 == (7 & a)) for (o = e.uint32() + e.pos; e.pos < o;) {
                n.doubleVal.push(e.double());
              } else n.doubleVal.push(e.double());
              break;

            case 7:
              if (n.intVal && n.intVal.length || (n.intVal = []), 2 == (7 & a)) for (o = e.uint32() + e.pos; e.pos < o;) {
                n.intVal.push(e.int32());
              } else n.intVal.push(e.int32());
              break;

            case 8:
              n.stringVal && n.stringVal.length || (n.stringVal = []), n.stringVal.push(e.bytes());
              break;

            case 9:
              if (n.scomplexVal && n.scomplexVal.length || (n.scomplexVal = []), 2 == (7 & a)) for (o = e.uint32() + e.pos; e.pos < o;) {
                n.scomplexVal.push(e.float());
              } else n.scomplexVal.push(e.float());
              break;

            case 10:
              if (n.int64Val && n.int64Val.length || (n.int64Val = []), 2 == (7 & a)) for (o = e.uint32() + e.pos; e.pos < o;) {
                n.int64Val.push(e.int64());
              } else n.int64Val.push(e.int64());
              break;

            case 11:
              if (n.boolVal && n.boolVal.length || (n.boolVal = []), 2 == (7 & a)) for (o = e.uint32() + e.pos; e.pos < o;) {
                n.boolVal.push(e.bool());
              } else n.boolVal.push(e.bool());
              break;

            case 16:
              if (n.uint32Val && n.uint32Val.length || (n.uint32Val = []), 2 == (7 & a)) for (o = e.uint32() + e.pos; e.pos < o;) {
                n.uint32Val.push(e.uint32());
              } else n.uint32Val.push(e.uint32());
              break;

            case 17:
              if (n.uint64Val && n.uint64Val.length || (n.uint64Val = []), 2 == (7 & a)) for (o = e.uint32() + e.pos; e.pos < o;) {
                n.uint64Val.push(e.uint64());
              } else n.uint64Val.push(e.uint64());
              break;

            default:
              e.skipType(7 & a);
          }
        }

        return n;
      }, e;
    }(), r.AttrValue = function () {
      function e(e) {
        if (e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
          null != e[t[r]] && (this[t[r]] = e[t[r]]);
        }
      }

      var t;
      return e.prototype.list = null, e.prototype.s = $util.newBuffer([]), e.prototype.i = $util.Long ? $util.Long.fromBits(0, 0, !1) : 0, e.prototype.f = 0, e.prototype.b = !1, e.prototype.type = 0, e.prototype.shape = null, e.prototype.tensor = null, e.prototype.placeholder = "", e.prototype.func = null, Object.defineProperty(e.prototype, "value", {
        get: $util.oneOfGetter(t = ["list", "s", "i", "f", "b", "type", "shape", "tensor", "placeholder", "func"]),
        set: $util.oneOfSetter(t)
      }), e.decode = function (e, t) {
        e instanceof $Reader || (e = $Reader.create(e));

        for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.AttrValue(); e.pos < r;) {
          var a = e.uint32();

          switch (a >>> 3) {
            case 1:
              n.list = $root.tensorflow.AttrValue.ListValue.decode(e, e.uint32());
              break;

            case 2:
              n.s = e.bytes();
              break;

            case 3:
              n.i = e.int64();
              break;

            case 4:
              n.f = e.float();
              break;

            case 5:
              n.b = e.bool();
              break;

            case 6:
              n.type = e.int32();
              break;

            case 7:
              n.shape = $root.tensorflow.TensorShape.decode(e, e.uint32());
              break;

            case 8:
              n.tensor = $root.tensorflow.Tensor.decode(e, e.uint32());
              break;

            case 9:
              n.placeholder = e.string();
              break;

            case 10:
              n.func = $root.tensorflow.NameAttrList.decode(e, e.uint32());
              break;

            default:
              e.skipType(7 & a);
          }
        }

        return n;
      }, e.ListValue = function () {
        function e(e) {
          if (this.s = [], this.i = [], this.f = [], this.b = [], this.type = [], this.shape = [], this.tensor = [], this.func = [], e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
            null != e[t[r]] && (this[t[r]] = e[t[r]]);
          }
        }

        return e.prototype.s = $util.emptyArray, e.prototype.i = $util.emptyArray, e.prototype.f = $util.emptyArray, e.prototype.b = $util.emptyArray, e.prototype.type = $util.emptyArray, e.prototype.shape = $util.emptyArray, e.prototype.tensor = $util.emptyArray, e.prototype.func = $util.emptyArray, e.decode = function (e, t) {
          e instanceof $Reader || (e = $Reader.create(e));

          for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.AttrValue.ListValue(); e.pos < r;) {
            var a = e.uint32();

            switch (a >>> 3) {
              case 2:
                n.s && n.s.length || (n.s = []), n.s.push(e.bytes());
                break;

              case 3:
                if (n.i && n.i.length || (n.i = []), 2 == (7 & a)) for (var o = e.uint32() + e.pos; e.pos < o;) {
                  n.i.push(e.int64());
                } else n.i.push(e.int64());
                break;

              case 4:
                if (n.f && n.f.length || (n.f = []), 2 == (7 & a)) for (o = e.uint32() + e.pos; e.pos < o;) {
                  n.f.push(e.float());
                } else n.f.push(e.float());
                break;

              case 5:
                if (n.b && n.b.length || (n.b = []), 2 == (7 & a)) for (o = e.uint32() + e.pos; e.pos < o;) {
                  n.b.push(e.bool());
                } else n.b.push(e.bool());
                break;

              case 6:
                if (n.type && n.type.length || (n.type = []), 2 == (7 & a)) for (o = e.uint32() + e.pos; e.pos < o;) {
                  n.type.push(e.int32());
                } else n.type.push(e.int32());
                break;

              case 7:
                n.shape && n.shape.length || (n.shape = []), n.shape.push($root.tensorflow.TensorShape.decode(e, e.uint32()));
                break;

              case 8:
                n.tensor && n.tensor.length || (n.tensor = []), n.tensor.push($root.tensorflow.Tensor.decode(e, e.uint32()));
                break;

              case 9:
                n.func && n.func.length || (n.func = []), n.func.push($root.tensorflow.NameAttrList.decode(e, e.uint32()));
                break;

              default:
                e.skipType(7 & a);
            }
          }

          return n;
        }, e;
      }(), e;
    }(), r.NameAttrList = function () {
      function e(e) {
        if (this.attr = {}, e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
          null != e[t[r]] && (this[t[r]] = e[t[r]]);
        }
      }

      return e.prototype.name = "", e.prototype.attr = $util.emptyObject, e.decode = function (e, t) {
        e instanceof $Reader || (e = $Reader.create(e));

        for (var r, n = void 0 === t ? e.len : e.pos + t, a = new $root.tensorflow.NameAttrList(); e.pos < n;) {
          var o = e.uint32();

          switch (o >>> 3) {
            case 1:
              a.name = e.string();
              break;

            case 2:
              e.skip().pos++, a.attr === $util.emptyObject && (a.attr = {}), r = e.string(), e.pos++, a.attr[r] = $root.tensorflow.AttrValue.decode(e, e.uint32());
              break;

            default:
              e.skipType(7 & o);
          }
        }

        return a;
      }, e;
    }(), r.NodeDef = function () {
      function e(e) {
        if (this.input = [], this.attr = {}, e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
          null != e[t[r]] && (this[t[r]] = e[t[r]]);
        }
      }

      return e.prototype.name = "", e.prototype.op = "", e.prototype.input = $util.emptyArray, e.prototype.device = "", e.prototype.attr = $util.emptyObject, e.decode = function (e, t) {
        e instanceof $Reader || (e = $Reader.create(e));

        for (var r, n = void 0 === t ? e.len : e.pos + t, a = new $root.tensorflow.NodeDef(); e.pos < n;) {
          var o = e.uint32();

          switch (o >>> 3) {
            case 1:
              a.name = e.string();
              break;

            case 2:
              a.op = e.string();
              break;

            case 3:
              a.input && a.input.length || (a.input = []), a.input.push(e.string());
              break;

            case 4:
              a.device = e.string();
              break;

            case 5:
              e.skip().pos++, a.attr === $util.emptyObject && (a.attr = {}), r = e.string(), e.pos++, a.attr[r] = $root.tensorflow.AttrValue.decode(e, e.uint32());
              break;

            default:
              e.skipType(7 & o);
          }
        }

        return a;
      }, e;
    }(), r.VersionDef = function () {
      function e(e) {
        if (this.badConsumers = [], e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
          null != e[t[r]] && (this[t[r]] = e[t[r]]);
        }
      }

      return e.prototype.producer = 0, e.prototype.minConsumer = 0, e.prototype.badConsumers = $util.emptyArray, e.decode = function (e, t) {
        e instanceof $Reader || (e = $Reader.create(e));

        for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.VersionDef(); e.pos < r;) {
          var a = e.uint32();

          switch (a >>> 3) {
            case 1:
              n.producer = e.int32();
              break;

            case 2:
              n.minConsumer = e.int32();
              break;

            case 3:
              if (n.badConsumers && n.badConsumers.length || (n.badConsumers = []), 2 == (7 & a)) for (var o = e.uint32() + e.pos; e.pos < o;) {
                n.badConsumers.push(e.int32());
              } else n.badConsumers.push(e.int32());
              break;

            default:
              e.skipType(7 & a);
          }
        }

        return n;
      }, e;
    }(), r.GraphDef = function () {
      function e(e) {
        if (this.node = [], e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
          null != e[t[r]] && (this[t[r]] = e[t[r]]);
        }
      }

      return e.prototype.node = $util.emptyArray, e.prototype.versions = null, e.prototype.library = null, e.decode = function (e, t) {
        e instanceof $Reader || (e = $Reader.create(e));

        for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.GraphDef(); e.pos < r;) {
          var a = e.uint32();

          switch (a >>> 3) {
            case 1:
              n.node && n.node.length || (n.node = []), n.node.push($root.tensorflow.NodeDef.decode(e, e.uint32()));
              break;

            case 4:
              n.versions = $root.tensorflow.VersionDef.decode(e, e.uint32());
              break;

            case 2:
              n.library = $root.tensorflow.FunctionDefLibrary.decode(e, e.uint32());
              break;

            default:
              e.skipType(7 & a);
          }
        }

        return n;
      }, e;
    }(), r.CollectionDef = function () {
      function e(e) {
        if (e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
          null != e[t[r]] && (this[t[r]] = e[t[r]]);
        }
      }

      var t;
      return e.prototype.nodeList = null, e.prototype.bytesList = null, e.prototype.int64List = null, e.prototype.floatList = null, e.prototype.anyList = null, Object.defineProperty(e.prototype, "kind", {
        get: $util.oneOfGetter(t = ["nodeList", "bytesList", "int64List", "floatList", "anyList"]),
        set: $util.oneOfSetter(t)
      }), e.decode = function (e, t) {
        e instanceof $Reader || (e = $Reader.create(e));

        for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.CollectionDef(); e.pos < r;) {
          var a = e.uint32();

          switch (a >>> 3) {
            case 1:
              n.nodeList = $root.tensorflow.CollectionDef.NodeList.decode(e, e.uint32());
              break;

            case 2:
              n.bytesList = $root.tensorflow.CollectionDef.BytesList.decode(e, e.uint32());
              break;

            case 3:
              n.int64List = $root.tensorflow.CollectionDef.Int64List.decode(e, e.uint32());
              break;

            case 4:
              n.floatList = $root.tensorflow.CollectionDef.FloatList.decode(e, e.uint32());
              break;

            case 5:
              n.anyList = $root.tensorflow.CollectionDef.AnyList.decode(e, e.uint32());
              break;

            default:
              e.skipType(7 & a);
          }
        }

        return n;
      }, e.NodeList = function () {
        function e(e) {
          if (this.value = [], e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
            null != e[t[r]] && (this[t[r]] = e[t[r]]);
          }
        }

        return e.prototype.value = $util.emptyArray, e.decode = function (e, t) {
          e instanceof $Reader || (e = $Reader.create(e));

          for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.CollectionDef.NodeList(); e.pos < r;) {
            var a = e.uint32();

            switch (a >>> 3) {
              case 1:
                n.value && n.value.length || (n.value = []), n.value.push(e.string());
                break;

              default:
                e.skipType(7 & a);
            }
          }

          return n;
        }, e;
      }(), e.BytesList = function () {
        function e(e) {
          if (this.value = [], e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
            null != e[t[r]] && (this[t[r]] = e[t[r]]);
          }
        }

        return e.prototype.value = $util.emptyArray, e.decode = function (e, t) {
          e instanceof $Reader || (e = $Reader.create(e));

          for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.CollectionDef.BytesList(); e.pos < r;) {
            var a = e.uint32();

            switch (a >>> 3) {
              case 1:
                n.value && n.value.length || (n.value = []), n.value.push(e.bytes());
                break;

              default:
                e.skipType(7 & a);
            }
          }

          return n;
        }, e;
      }(), e.Int64List = function () {
        function e(e) {
          if (this.value = [], e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
            null != e[t[r]] && (this[t[r]] = e[t[r]]);
          }
        }

        return e.prototype.value = $util.emptyArray, e.decode = function (e, t) {
          e instanceof $Reader || (e = $Reader.create(e));

          for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.CollectionDef.Int64List(); e.pos < r;) {
            var a = e.uint32();

            switch (a >>> 3) {
              case 1:
                if (n.value && n.value.length || (n.value = []), 2 == (7 & a)) for (var o = e.uint32() + e.pos; e.pos < o;) {
                  n.value.push(e.int64());
                } else n.value.push(e.int64());
                break;

              default:
                e.skipType(7 & a);
            }
          }

          return n;
        }, e;
      }(), e.FloatList = function () {
        function e(e) {
          if (this.value = [], e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
            null != e[t[r]] && (this[t[r]] = e[t[r]]);
          }
        }

        return e.prototype.value = $util.emptyArray, e.decode = function (e, t) {
          e instanceof $Reader || (e = $Reader.create(e));

          for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.CollectionDef.FloatList(); e.pos < r;) {
            var a = e.uint32();

            switch (a >>> 3) {
              case 1:
                if (n.value && n.value.length || (n.value = []), 2 == (7 & a)) for (var o = e.uint32() + e.pos; e.pos < o;) {
                  n.value.push(e.float());
                } else n.value.push(e.float());
                break;

              default:
                e.skipType(7 & a);
            }
          }

          return n;
        }, e;
      }(), e.AnyList = function () {
        function e(e) {
          if (this.value = [], e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
            null != e[t[r]] && (this[t[r]] = e[t[r]]);
          }
        }

        return e.prototype.value = $util.emptyArray, e.decode = function (e, t) {
          e instanceof $Reader || (e = $Reader.create(e));

          for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.CollectionDef.AnyList(); e.pos < r;) {
            var a = e.uint32();

            switch (a >>> 3) {
              case 1:
                n.value && n.value.length || (n.value = []), n.value.push($root.tensorflow.Any.decode(e, e.uint32()));
                break;

              default:
                e.skipType(7 & a);
            }
          }

          return n;
        }, e;
      }(), e;
    }(), r.SaverDef = function () {
      function e(e) {
        if (e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
          null != e[t[r]] && (this[t[r]] = e[t[r]]);
        }
      }

      var t, r;
      return e.prototype.filenameTensorName = "", e.prototype.saveTensorName = "", e.prototype.restoreOpName = "", e.prototype.maxToKeep = 0, e.prototype.sharded = !1, e.prototype.keepCheckpointEveryNHours = 0, e.prototype.version = 0, e.decode = function (e, t) {
        e instanceof $Reader || (e = $Reader.create(e));

        for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.SaverDef(); e.pos < r;) {
          var a = e.uint32();

          switch (a >>> 3) {
            case 1:
              n.filenameTensorName = e.string();
              break;

            case 2:
              n.saveTensorName = e.string();
              break;

            case 3:
              n.restoreOpName = e.string();
              break;

            case 4:
              n.maxToKeep = e.int32();
              break;

            case 5:
              n.sharded = e.bool();
              break;

            case 6:
              n.keepCheckpointEveryNHours = e.float();
              break;

            case 7:
              n.version = e.int32();
              break;

            default:
              e.skipType(7 & a);
          }
        }

        return n;
      }, e.CheckpointFormatVersion = (t = {}, (r = Object.create(t))[t[0] = "LEGACY"] = 0, r[t[1] = "V1"] = 1, r[t[2] = "V2"] = 2, r), e;
    }(), r.TensorInfo = function () {
      function e(e) {
        if (e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
          null != e[t[r]] && (this[t[r]] = e[t[r]]);
        }
      }

      var t;
      return e.prototype.name = "", e.prototype.cooSparse = null, e.prototype.dtype = 0, e.prototype.tensorShape = null, Object.defineProperty(e.prototype, "encoding", {
        get: $util.oneOfGetter(t = ["name", "cooSparse"]),
        set: $util.oneOfSetter(t)
      }), e.decode = function (e, t) {
        e instanceof $Reader || (e = $Reader.create(e));

        for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.TensorInfo(); e.pos < r;) {
          var a = e.uint32();

          switch (a >>> 3) {
            case 1:
              n.name = e.string();
              break;

            case 4:
              n.cooSparse = $root.tensorflow.TensorInfo.CooSparse.decode(e, e.uint32());
              break;

            case 2:
              n.dtype = e.int32();
              break;

            case 3:
              n.tensorShape = $root.tensorflow.TensorShape.decode(e, e.uint32());
              break;

            default:
              e.skipType(7 & a);
          }
        }

        return n;
      }, e.CooSparse = function () {
        function e(e) {
          if (e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
            null != e[t[r]] && (this[t[r]] = e[t[r]]);
          }
        }

        return e.prototype.valuesTensorName = "", e.prototype.indicesTensorName = "", e.prototype.denseShapeTensorName = "", e.decode = function (e, t) {
          e instanceof $Reader || (e = $Reader.create(e));

          for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.TensorInfo.CooSparse(); e.pos < r;) {
            var a = e.uint32();

            switch (a >>> 3) {
              case 1:
                n.valuesTensorName = e.string();
                break;

              case 2:
                n.indicesTensorName = e.string();
                break;

              case 3:
                n.denseShapeTensorName = e.string();
                break;

              default:
                e.skipType(7 & a);
            }
          }

          return n;
        }, e;
      }(), e;
    }(), r.SignatureDef = function () {
      function e(e) {
        if (this.inputs = {}, this.outputs = {}, e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
          null != e[t[r]] && (this[t[r]] = e[t[r]]);
        }
      }

      return e.prototype.inputs = $util.emptyObject, e.prototype.outputs = $util.emptyObject, e.prototype.methodName = "", e.decode = function (e, t) {
        e instanceof $Reader || (e = $Reader.create(e));

        for (var r, n = void 0 === t ? e.len : e.pos + t, a = new $root.tensorflow.SignatureDef(); e.pos < n;) {
          var o = e.uint32();

          switch (o >>> 3) {
            case 1:
              e.skip().pos++, a.inputs === $util.emptyObject && (a.inputs = {}), r = e.string(), e.pos++, a.inputs[r] = $root.tensorflow.TensorInfo.decode(e, e.uint32());
              break;

            case 2:
              e.skip().pos++, a.outputs === $util.emptyObject && (a.outputs = {}), r = e.string(), e.pos++, a.outputs[r] = $root.tensorflow.TensorInfo.decode(e, e.uint32());
              break;

            case 3:
              a.methodName = e.string();
              break;

            default:
              e.skipType(7 & o);
          }
        }

        return a;
      }, e;
    }(), r.AssetFileDef = function () {
      function e(e) {
        if (e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
          null != e[t[r]] && (this[t[r]] = e[t[r]]);
        }
      }

      return e.prototype.tensorInfo = null, e.prototype.filename = "", e.decode = function (e, t) {
        e instanceof $Reader || (e = $Reader.create(e));

        for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.AssetFileDef(); e.pos < r;) {
          var a = e.uint32();

          switch (a >>> 3) {
            case 1:
              n.tensorInfo = $root.tensorflow.TensorInfo.decode(e, e.uint32());
              break;

            case 2:
              n.filename = e.string();
              break;

            default:
              e.skipType(7 & a);
          }
        }

        return n;
      }, e;
    }(), r.OpDef = function () {
      function e(e) {
        if (this.inputArg = [], this.outputArg = [], this.attr = [], e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
          null != e[t[r]] && (this[t[r]] = e[t[r]]);
        }
      }

      return e.prototype.name = "", e.prototype.inputArg = $util.emptyArray, e.prototype.outputArg = $util.emptyArray, e.prototype.attr = $util.emptyArray, e.prototype.deprecation = null, e.prototype.summary = "", e.prototype.description = "", e.prototype.isCommutative = !1, e.prototype.isAggregate = !1, e.prototype.isStateful = !1, e.prototype.allowsUninitializedInput = !1, e.decode = function (e, t) {
        e instanceof $Reader || (e = $Reader.create(e));

        for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.OpDef(); e.pos < r;) {
          var a = e.uint32();

          switch (a >>> 3) {
            case 1:
              n.name = e.string();
              break;

            case 2:
              n.inputArg && n.inputArg.length || (n.inputArg = []), n.inputArg.push($root.tensorflow.OpDef.ArgDef.decode(e, e.uint32()));
              break;

            case 3:
              n.outputArg && n.outputArg.length || (n.outputArg = []), n.outputArg.push($root.tensorflow.OpDef.ArgDef.decode(e, e.uint32()));
              break;

            case 4:
              n.attr && n.attr.length || (n.attr = []), n.attr.push($root.tensorflow.OpDef.AttrDef.decode(e, e.uint32()));
              break;

            case 8:
              n.deprecation = $root.tensorflow.OpDef.OpDeprecation.decode(e, e.uint32());
              break;

            case 5:
              n.summary = e.string();
              break;

            case 6:
              n.description = e.string();
              break;

            case 18:
              n.isCommutative = e.bool();
              break;

            case 16:
              n.isAggregate = e.bool();
              break;

            case 17:
              n.isStateful = e.bool();
              break;

            case 19:
              n.allowsUninitializedInput = e.bool();
              break;

            default:
              e.skipType(7 & a);
          }
        }

        return n;
      }, e.ArgDef = function () {
        function e(e) {
          if (e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
            null != e[t[r]] && (this[t[r]] = e[t[r]]);
          }
        }

        return e.prototype.name = "", e.prototype.description = "", e.prototype.type = 0, e.prototype.typeAttr = "", e.prototype.numberAttr = "", e.prototype.typeListAttr = "", e.prototype.isRef = !1, e.decode = function (e, t) {
          e instanceof $Reader || (e = $Reader.create(e));

          for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.OpDef.ArgDef(); e.pos < r;) {
            var a = e.uint32();

            switch (a >>> 3) {
              case 1:
                n.name = e.string();
                break;

              case 2:
                n.description = e.string();
                break;

              case 3:
                n.type = e.int32();
                break;

              case 4:
                n.typeAttr = e.string();
                break;

              case 5:
                n.numberAttr = e.string();
                break;

              case 6:
                n.typeListAttr = e.string();
                break;

              case 16:
                n.isRef = e.bool();
                break;

              default:
                e.skipType(7 & a);
            }
          }

          return n;
        }, e;
      }(), e.AttrDef = function () {
        function e(e) {
          if (e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
            null != e[t[r]] && (this[t[r]] = e[t[r]]);
          }
        }

        return e.prototype.name = "", e.prototype.type = "", e.prototype.defaultValue = null, e.prototype.description = "", e.prototype.hasMinimum = !1, e.prototype.minimum = $util.Long ? $util.Long.fromBits(0, 0, !1) : 0, e.prototype.allowedValues = null, e.decode = function (e, t) {
          e instanceof $Reader || (e = $Reader.create(e));

          for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.OpDef.AttrDef(); e.pos < r;) {
            var a = e.uint32();

            switch (a >>> 3) {
              case 1:
                n.name = e.string();
                break;

              case 2:
                n.type = e.string();
                break;

              case 3:
                n.defaultValue = $root.tensorflow.AttrValue.decode(e, e.uint32());
                break;

              case 4:
                n.description = e.string();
                break;

              case 5:
                n.hasMinimum = e.bool();
                break;

              case 6:
                n.minimum = e.int64();
                break;

              case 7:
                n.allowedValues = $root.tensorflow.AttrValue.decode(e, e.uint32());
                break;

              default:
                e.skipType(7 & a);
            }
          }

          return n;
        }, e;
      }(), e.OpDeprecation = function () {
        function e(e) {
          if (e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
            null != e[t[r]] && (this[t[r]] = e[t[r]]);
          }
        }

        return e.prototype.version = 0, e.prototype.explanation = "", e.decode = function (e, t) {
          e instanceof $Reader || (e = $Reader.create(e));

          for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.OpDef.OpDeprecation(); e.pos < r;) {
            var a = e.uint32();

            switch (a >>> 3) {
              case 1:
                n.version = e.int32();
                break;

              case 2:
                n.explanation = e.string();
                break;

              default:
                e.skipType(7 & a);
            }
          }

          return n;
        }, e;
      }(), e;
    }(), r.OpList = function () {
      function e(e) {
        if (this.op = [], e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
          null != e[t[r]] && (this[t[r]] = e[t[r]]);
        }
      }

      return e.prototype.op = $util.emptyArray, e.decode = function (e, t) {
        e instanceof $Reader || (e = $Reader.create(e));

        for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.OpList(); e.pos < r;) {
          var a = e.uint32();

          switch (a >>> 3) {
            case 1:
              n.op && n.op.length || (n.op = []), n.op.push($root.tensorflow.OpDef.decode(e, e.uint32()));
              break;

            default:
              e.skipType(7 & a);
          }
        }

        return n;
      }, e;
    }(), r.MetaGraphDef = function () {
      function e(e) {
        if (this.collectionDef = {}, this.signatureDef = {}, this.assetFileDef = [], e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
          null != e[t[r]] && (this[t[r]] = e[t[r]]);
        }
      }

      return e.prototype.metaInfoDef = null, e.prototype.graphDef = null, e.prototype.saverDef = null, e.prototype.collectionDef = $util.emptyObject, e.prototype.signatureDef = $util.emptyObject, e.prototype.assetFileDef = $util.emptyArray, e.decode = function (e, t) {
        e instanceof $Reader || (e = $Reader.create(e));

        for (var r, n = void 0 === t ? e.len : e.pos + t, a = new $root.tensorflow.MetaGraphDef(); e.pos < n;) {
          var o = e.uint32();

          switch (o >>> 3) {
            case 1:
              a.metaInfoDef = $root.tensorflow.MetaGraphDef.MetaInfoDef.decode(e, e.uint32());
              break;

            case 2:
              a.graphDef = $root.tensorflow.GraphDef.decode(e, e.uint32());
              break;

            case 3:
              a.saverDef = $root.tensorflow.SaverDef.decode(e, e.uint32());
              break;

            case 4:
              e.skip().pos++, a.collectionDef === $util.emptyObject && (a.collectionDef = {}), r = e.string(), e.pos++, a.collectionDef[r] = $root.tensorflow.CollectionDef.decode(e, e.uint32());
              break;

            case 5:
              e.skip().pos++, a.signatureDef === $util.emptyObject && (a.signatureDef = {}), r = e.string(), e.pos++, a.signatureDef[r] = $root.tensorflow.SignatureDef.decode(e, e.uint32());
              break;

            case 6:
              a.assetFileDef && a.assetFileDef.length || (a.assetFileDef = []), a.assetFileDef.push($root.tensorflow.AssetFileDef.decode(e, e.uint32()));
              break;

            default:
              e.skipType(7 & o);
          }
        }

        return a;
      }, e.MetaInfoDef = function () {
        function e(e) {
          if (this.tags = [], e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
            null != e[t[r]] && (this[t[r]] = e[t[r]]);
          }
        }

        return e.prototype.metaGraphVersion = "", e.prototype.strippedOpList = null, e.prototype.anyInfo = null, e.prototype.tags = $util.emptyArray, e.prototype.tensorflowVersion = "", e.prototype.tensorflowGitVersion = "", e.decode = function (e, t) {
          e instanceof $Reader || (e = $Reader.create(e));

          for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.MetaGraphDef.MetaInfoDef(); e.pos < r;) {
            var a = e.uint32();

            switch (a >>> 3) {
              case 1:
                n.metaGraphVersion = e.string();
                break;

              case 2:
                n.strippedOpList = $root.tensorflow.OpList.decode(e, e.uint32());
                break;

              case 3:
                n.anyInfo = $root.tensorflow.Any.decode(e, e.uint32());
                break;

              case 4:
                n.tags && n.tags.length || (n.tags = []), n.tags.push(e.string());
                break;

              case 5:
                n.tensorflowVersion = e.string();
                break;

              case 6:
                n.tensorflowGitVersion = e.string();
                break;

              default:
                e.skipType(7 & a);
            }
          }

          return n;
        }, e;
      }(), e;
    }(), r.SavedModel = function () {
      function e(e) {
        if (this.metaGraphs = [], e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
          null != e[t[r]] && (this[t[r]] = e[t[r]]);
        }
      }

      return e.prototype.savedModelSchemaVersion = $util.Long ? $util.Long.fromBits(0, 0, !1) : 0, e.prototype.metaGraphs = $util.emptyArray, e.decode = function (e, t) {
        e instanceof $Reader || (e = $Reader.create(e));

        for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.SavedModel(); e.pos < r;) {
          var a = e.uint32();

          switch (a >>> 3) {
            case 1:
              n.savedModelSchemaVersion = e.int64();
              break;

            case 2:
              n.metaGraphs && n.metaGraphs.length || (n.metaGraphs = []), n.metaGraphs.push($root.tensorflow.MetaGraphDef.decode(e, e.uint32()));
              break;

            default:
              e.skipType(7 & a);
          }
        }

        return n;
      }, e;
    }(), r.FunctionDefLibrary = function () {
      function e(e) {
        if (this.function = [], this.gradient = [], e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
          null != e[t[r]] && (this[t[r]] = e[t[r]]);
        }
      }

      return e.prototype.function = $util.emptyArray, e.prototype.gradient = $util.emptyArray, e.decode = function (e, t) {
        e instanceof $Reader || (e = $Reader.create(e));

        for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.FunctionDefLibrary(); e.pos < r;) {
          var a = e.uint32();

          switch (a >>> 3) {
            case 1:
              n.function && n.function.length || (n.function = []), n.function.push($root.tensorflow.FunctionDef.decode(e, e.uint32()));
              break;

            case 2:
              n.gradient && n.gradient.length || (n.gradient = []), n.gradient.push($root.tensorflow.GradientDef.decode(e, e.uint32()));
              break;

            default:
              e.skipType(7 & a);
          }
        }

        return n;
      }, e;
    }(), r.FunctionDef = function () {
      function e(e) {
        if (this.attr = {}, this.nodeDef = [], this.ret = {}, e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
          null != e[t[r]] && (this[t[r]] = e[t[r]]);
        }
      }

      return e.prototype.signature = null, e.prototype.attr = $util.emptyObject, e.prototype.nodeDef = $util.emptyArray, e.prototype.ret = $util.emptyObject, e.decode = function (e, t) {
        e instanceof $Reader || (e = $Reader.create(e));

        for (var r, n = void 0 === t ? e.len : e.pos + t, a = new $root.tensorflow.FunctionDef(); e.pos < n;) {
          var o = e.uint32();

          switch (o >>> 3) {
            case 1:
              a.signature = $root.tensorflow.OpDef.decode(e, e.uint32());
              break;

            case 5:
              e.skip().pos++, a.attr === $util.emptyObject && (a.attr = {}), r = e.string(), e.pos++, a.attr[r] = $root.tensorflow.AttrValue.decode(e, e.uint32());
              break;

            case 3:
              a.nodeDef && a.nodeDef.length || (a.nodeDef = []), a.nodeDef.push($root.tensorflow.NodeDef.decode(e, e.uint32()));
              break;

            case 4:
              e.skip().pos++, a.ret === $util.emptyObject && (a.ret = {}), r = e.string(), e.pos++, a.ret[r] = e.string();
              break;

            default:
              e.skipType(7 & o);
          }
        }

        return a;
      }, e;
    }(), r.GradientDef = function () {
      function e(e) {
        if (e) for (var t = Object.keys(e), r = 0; r < t.length; ++r) {
          null != e[t[r]] && (this[t[r]] = e[t[r]]);
        }
      }

      return e.prototype.functionName = "", e.prototype.gradientFunc = "", e.decode = function (e, t) {
        e instanceof $Reader || (e = $Reader.create(e));

        for (var r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.GradientDef(); e.pos < r;) {
          var a = e.uint32();

          switch (a >>> 3) {
            case 1:
              n.functionName = e.string();
              break;

            case 2:
              n.gradientFunc = e.string();
              break;

            default:
              e.skipType(7 & a);
          }
        }

        return n;
      }, e;
    }(), r;
  }();

  var compiled_api = $root,
      compiled_api_1 = compiled_api.tensorflow;

  function getParamValue(e, t, r, n) {
    var a = t.params[e];

    if (a && void 0 !== a.inputIndex) {
      if ("tensor" === a.type) return getTensor(t.inputNames[a.inputIndex], r, n);
      if ("tensors" === a.type) return (0 === a.inputIndex ? 0 === a.inputParamLength ? t.inputNames : t.inputNames.slice(a.inputIndex, -a.inputParamLength) : t.inputNames.splice(a.inputIndex)).map(function (e) {
        return getTensor(e, r, n);
      });
      var o = Array.prototype.slice.call(getTensor(t.inputNames.slice(a.inputIndex)[0], r, n).dataSync());
      return "number" === a.type ? o[0] : o;
    }

    return a && a.value;
  }

  function getTensor(e, t, r) {
    var n = parseNodeName(e),
        a = n[0],
        o = n[1],
        i = r.currentContextIds.find(function (e) {
      return !!t[getNodeNameWithContextId(a, e)];
    });
    return void 0 !== i ? t[getNodeNameWithContextId(a, i)][o] : void 0;
  }

  function getTensorsForCurrentContenxt(e, t, r) {
    return t[getNodeNameWithContextId(e, r.currentContextId)];
  }

  function getNodeNameAndIndex(e, t) {
    var r = parseNodeName(e),
        n = r[0],
        a = r[1];
    return [getNodeNameWithContextId(n, t && t.currentContextId), a];
  }

  function getNodeNameWithContextId(e, t) {
    return t ? e + "-" + t : e;
  }

  function parseNodeName(e) {
    var t = e.lastIndexOf(":");
    return -1 === t ? [e, 0] : [e.substring(0, t), Number(e.substring(t + 1))];
  }

  function split$1$1(e, t) {
    for (var r = [], n = 0; n < e.length; n += t) {
      r.push(e.slice(n, n + t));
    }

    return r;
  }

  var json = [{
    tfOpName: "Add",
    dlOpName: "add",
    category: "arithmetic",
    params: [{
      tfInputIndex: 0,
      dlParamName: "a",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "b",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "AddN",
    dlOpName: "addN",
    category: "arithmetic",
    params: [{
      tfInputIndex: 0,
      tfInputParamLength: 0,
      dlParamName: "tensors",
      type: "tensors"
    }]
  }, {
    tfOpName: "BiasAdd",
    dlOpName: "add",
    category: "arithmetic",
    params: [{
      tfInputIndex: 0,
      dlParamName: "a",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "b",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Sub",
    dlOpName: "sub",
    category: "arithmetic",
    params: [{
      tfInputIndex: 0,
      dlParamName: "a",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "b",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "RealDiv",
    dlOpName: "div",
    category: "arithmetic",
    params: [{
      tfInputIndex: 0,
      dlParamName: "a",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "b",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Div",
    dlOpName: "div",
    category: "arithmetic",
    params: [{
      tfInputIndex: 0,
      dlParamName: "a",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "b",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "FloorDiv",
    dlOpName: "floorDiv",
    category: "arithmetic",
    params: [{
      tfInputIndex: 0,
      dlParamName: "a",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "b",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Mul",
    dlOpName: "mul",
    category: "arithmetic",
    params: [{
      tfInputIndex: 0,
      dlParamName: "a",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "b",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Maximum",
    dlOpName: "maximum",
    category: "arithmetic",
    params: [{
      tfInputIndex: 0,
      dlParamName: "a",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "b",
      type: "tensor"
    }]
  }, {
    tfOpName: "Minimum",
    dlOpName: "minimum",
    category: "arithmetic",
    params: [{
      tfInputIndex: 0,
      dlParamName: "a",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "b",
      type: "tensor"
    }]
  }, {
    tfOpName: "Pow",
    dlOpName: "pow",
    category: "arithmetic",
    params: [{
      tfInputIndex: 0,
      dlParamName: "a",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "b",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "SquaredDifference",
    dlOpName: "squaredDifference",
    category: "arithmetic",
    params: [{
      tfInputIndex: 0,
      dlParamName: "a",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "b",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Mod",
    dlOpName: "mod",
    category: "arithmetic",
    params: [{
      tfInputIndex: 0,
      dlParamName: "a",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "b",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "FloorMod",
    dlOpName: "mod",
    category: "arithmetic",
    params: [{
      tfInputIndex: 0,
      dlParamName: "a",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "b",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }],
      arithmetic = Object.freeze({
    json: json
  }),
      json$1 = [{
    tfOpName: "Abs",
    dlOpName: "abs",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Acos",
    dlOpName: "acos",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Asin",
    dlOpName: "asin",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Atan",
    dlOpName: "atan",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Atan2",
    dlOpName: "atan2",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "y",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Ceil",
    dlOpName: "ceil",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "ClipByValue",
    dlOpName: "clipByValue",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "clip_value_min",
      dlParamName: "clipValueMin",
      type: "number"
    }, {
      tfParamName: "clip_value_max",
      dlParamName: "clipValueMax",
      type: "number"
    }]
  }, {
    tfOpName: "Cos",
    dlOpName: "cos",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Cosh",
    dlOpName: "cosh",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Elu",
    dlOpName: "elu",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Exp",
    dlOpName: "exp",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Floor",
    dlOpName: "floor",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Log",
    dlOpName: "log",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Neg",
    dlOpName: "neg",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Relu",
    dlOpName: "relu",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Relu6",
    dlOpName: "clipByValue",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }, {
      dlParamName: "clipValueMin",
      type: "number",
      defaultValue: 0
    }, {
      dlParamName: "clipValueMax",
      type: "number",
      defaultValue: 6
    }]
  }, {
    tfOpName: "Selu",
    dlOpName: "selu",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Sigmoid",
    dlOpName: "sigmoid",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Sin",
    dlOpName: "sin",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Sinh",
    dlOpName: "sinh",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Sqrt",
    dlOpName: "sqrt",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Rsqrt",
    dlOpName: "rsqrt",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Square",
    dlOpName: "square",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Tan",
    dlOpName: "tan",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Tanh",
    dlOpName: "tanh",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Sign",
    dlOpName: "sign",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Round",
    dlOpName: "round",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Expm1",
    dlOpName: "expm1",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Log1p",
    dlOpName: "log1p",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Reciprocal",
    dlOpName: "reciprocal",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Reciprocal",
    dlOpName: "reciprocal",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Softplus",
    dlOpName: "softplus",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Asinh",
    dlOpName: "asinh",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Acosh",
    dlOpName: "acosh",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Atanh",
    dlOpName: "atanh",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Erf",
    dlOpName: "erf",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Prod",
    dlOpName: "prod",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "axes",
      type: "number[]"
    }, {
      tfParamName: "keep_dims",
      dlParamName: "keepDims",
      type: "bool",
      notSupported: !0
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "LeakyRelu",
    dlOpName: "leakyRelu",
    category: "basic_math",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "alpha",
      dlParamName: "alpha",
      type: "number",
      defaultValue: .2
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }],
      basicMath = Object.freeze({
    json: json$1
  }),
      json$2 = [{
    tfOpName: "LoopCond",
    dlOpName: "loopCond",
    category: "control",
    params: [{
      tfInputIndex: 0,
      dlParamName: "pred",
      type: "tensor"
    }]
  }, {
    tfOpName: "Switch",
    dlOpName: "switch",
    category: "control",
    params: [{
      tfInputIndex: 0,
      dlParamName: "data",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "pred",
      type: "tensor"
    }]
  }, {
    tfOpName: "Merge",
    dlOpName: "merge",
    category: "control",
    params: [{
      tfInputIndex: 0,
      tfInputParamLength: 0,
      dlParamName: "tensors",
      type: "tensors"
    }]
  }, {
    tfOpName: "Enter",
    dlOpName: "enter",
    category: "control",
    params: [{
      tfInputIndex: 0,
      dlParamName: "tensor",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }, {
      tfParamName: "frame_name",
      dlParamName: "frameName",
      type: "string"
    }, {
      tfParamName: "is_constant",
      dlParamName: "isConstant",
      type: "bool"
    }]
  }, {
    tfOpName: "Exit",
    dlOpName: "exit",
    category: "control",
    params: [{
      tfInputIndex: 0,
      dlParamName: "tensor",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "NextIteration",
    dlOpName: "nextIteration",
    category: "control",
    params: [{
      tfInputIndex: 0,
      dlParamName: "tensor",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "TensorArrayV3",
    dlOpName: "tensorArray",
    category: "control",
    params: [{
      tfInputIndex: 0,
      dlParamName: "size",
      type: "number"
    }, {
      tfParamName: "dtype",
      dlParamName: "dtype",
      type: "dtype"
    }, {
      tfParamName: "element_shape",
      dlParamName: "elementShape",
      type: "shape"
    }, {
      tfParamName: "dynamic_size",
      dlParamName: "dynamicSize",
      type: "bool"
    }, {
      tfParamName: "clear_after_read",
      dlParamName: "clearAfterRead",
      type: "bool"
    }, {
      tfParamName: "identical_element_shapes",
      dlParamName: "identicalElementShapes",
      type: "bool"
    }, {
      tfParamName: "tensor_array_name",
      dlParamName: "name",
      type: "string"
    }]
  }, {
    tfOpName: "TensorArrayWriteV3",
    dlOpName: "tensorArrayWrite",
    category: "control",
    params: [{
      tfInputIndex: 0,
      dlParamName: "tensorArrayId",
      type: "number"
    }, {
      tfInputIndex: 1,
      dlParamName: "index",
      type: "number"
    }, {
      tfInputIndex: 2,
      dlParamName: "tensor",
      type: "tensor"
    }, {
      tfInputIndex: 3,
      dlParamName: "flowIn",
      type: "number"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "TensorArrayReadV3",
    dlOpName: "tensorArrayRead",
    category: "control",
    params: [{
      tfInputIndex: 0,
      dlParamName: "tensorArrayId",
      type: "number"
    }, {
      tfInputIndex: 1,
      dlParamName: "index",
      type: "number"
    }, {
      tfInputIndex: 2,
      dlParamName: "flowIn",
      type: "number"
    }, {
      tfParamName: "dtype",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "TensorArrayGatherV3",
    dlOpName: "tensorArrayGather",
    category: "control",
    params: [{
      tfInputIndex: 0,
      dlParamName: "tensorArrayId",
      type: "number"
    }, {
      tfInputIndex: 1,
      dlParamName: "indices",
      type: "number[]"
    }, {
      tfInputIndex: 2,
      dlParamName: "flowIn",
      type: "number"
    }, {
      tfParamName: "dtype",
      dlParamName: "dtype",
      type: "dtype"
    }, {
      tfParamName: "element_shape",
      dlParamName: "elementShape",
      type: "shape"
    }]
  }, {
    tfOpName: "TensorArrayScatterV3",
    dlOpName: "tensorArrayScatter",
    category: "control",
    params: [{
      tfInputIndex: 0,
      dlParamName: "tensorArrayId",
      type: "number"
    }, {
      tfInputIndex: 1,
      dlParamName: "indices",
      type: "number[]"
    }, {
      tfInputIndex: 2,
      dlParamName: "tensor",
      type: "tensor"
    }, {
      tfInputIndex: 3,
      dlParamName: "flowIn",
      type: "number"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype"
    }]
  }, {
    tfOpName: "TensorArrayConcatV3",
    dlOpName: "tensorArrayConcat",
    category: "control",
    params: [{
      tfInputIndex: 0,
      dlParamName: "tensorArrayId",
      type: "number"
    }, {
      tfInputIndex: 1,
      dlParamName: "flowIn",
      type: "number"
    }, {
      tfParamName: "dtype",
      dlParamName: "dtype",
      type: "dtype"
    }, {
      tfParamName: "element_shape_except0",
      dlParamName: "elementShapeExcept0",
      type: "shape",
      notSupported: !0
    }]
  }, {
    tfOpName: "TensorArraySplitV3",
    dlOpName: "tensorArraySplit",
    category: "control",
    params: [{
      tfInputIndex: 0,
      dlParamName: "tensorArrayId",
      type: "number"
    }, {
      tfInputIndex: 1,
      dlParamName: "tensor",
      type: "tensor"
    }, {
      tfInputIndex: 2,
      dlParamName: "lengths",
      type: "number[]"
    }, {
      tfInputIndex: 3,
      dlParamName: "flowIn",
      type: "number"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype"
    }]
  }, {
    tfOpName: "TensorArraySizeV3",
    dlOpName: "tensorArraySize",
    category: "control",
    params: [{
      tfInputIndex: 0,
      dlParamName: "tensorArrayId",
      type: "number"
    }, {
      tfInputIndex: 1,
      dlParamName: "flowIn",
      type: "number"
    }]
  }, {
    tfOpName: "TensorArrayCloseV3",
    dlOpName: "tensorArrayClose",
    category: "control",
    params: [{
      tfInputIndex: 0,
      dlParamName: "tensorArrayId",
      type: "number"
    }]
  }],
      control = Object.freeze({
    json: json$2
  }),
      json$3 = [{
    tfOpName: "AvgPool",
    dlOpName: "avgPool",
    category: "convolution",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "strides",
      dlParamName: "strides",
      type: "number[]"
    }, {
      tfParamName: "padding",
      dlParamName: "pad",
      type: "string"
    }, {
      tfParamName: "data_format",
      dlParamName: "dataFormat",
      type: "string",
      notSupported: !0
    }, {
      tfParamName: "ksize",
      dlParamName: "kernelSize",
      type: "number[]"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "MaxPool",
    dlOpName: "maxPool",
    category: "convolution",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "strides",
      dlParamName: "strides",
      type: "number[]"
    }, {
      tfParamName: "padding",
      dlParamName: "pad",
      type: "string"
    }, {
      tfParamName: "data_format",
      dlParamName: "dataFormat",
      type: "string",
      notSupported: !0
    }, {
      tfParamName: "ksize",
      dlParamName: "kernelSize",
      type: "number[]"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Conv1D",
    dlOpName: "conv1d",
    category: "convolution",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "filter",
      type: "tensor"
    }, {
      tfParamName: "stride",
      dlParamName: "stride",
      type: "number"
    }, {
      tfParamName: "padding",
      dlParamName: "pad",
      type: "string"
    }, {
      tfParamName: "data_format",
      dlParamName: "dataFormat",
      type: "string",
      defaultValue: "NWC"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }, {
      tfParamName: "dilation",
      dlParamName: "dilation",
      type: "number",
      defaultValue: 1
    }]
  }, {
    tfOpName: "Conv2D",
    dlOpName: "conv2d",
    category: "convolution",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "filter",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }, {
      tfParamName: "strides",
      dlParamName: "strides",
      type: "number[]"
    }, {
      tfParamName: "padding",
      dlParamName: "pad",
      type: "string"
    }, {
      tfParamName: "useCudnnOnGpu",
      dlParamName: "useCudnnOnGpu",
      type: "bool"
    }, {
      tfParamName: "data_format",
      dlParamName: "dataFormat",
      type: "string",
      defaultValue: "NHWC"
    }, {
      tfParamName: "dilations",
      dlParamName: "dilations",
      type: "number[]"
    }]
  }, {
    tfOpName: "Conv2DBackpropInput",
    dlOpName: "conv2dTranspose",
    category: "convolution",
    params: [{
      tfInputIndex: 2,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "filter",
      type: "tensor"
    }, {
      tfInputIndex: 0,
      dlParamName: "outputShape",
      type: "number[]"
    }, {
      tfParamName: "strides",
      dlParamName: "strides",
      type: "number[]"
    }, {
      tfParamName: "padding",
      dlParamName: "pad",
      type: "string"
    }, {
      tfParamName: "data_format",
      dlParamName: "dataFormat",
      type: "string",
      notSupported: !0
    }]
  }, {
    tfOpName: "DepthwiseConv2d",
    dlOpName: "depthwiseConv2d",
    category: "convolution",
    params: [{
      tfInputIndex: 0,
      dlParamName: "input",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "filter",
      type: "tensor"
    }, {
      tfParamName: "strides",
      dlParamName: "strides",
      type: "number[]"
    }, {
      tfParamName: "padding",
      dlParamName: "pad",
      type: "string"
    }, {
      tfParamName: "data_format",
      dlParamName: "dataFormat",
      type: "string",
      defaultValue: "NHWC"
    }, {
      tfParamName: "dilations",
      dlParamName: "dilations",
      type: "number[]"
    }]
  }, {
    tfOpName: "DepthwiseConv2dNative",
    dlOpName: "depthwiseConv2d",
    category: "convolution",
    params: [{
      tfInputIndex: 0,
      dlParamName: "input",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "filter",
      type: "tensor"
    }, {
      tfParamName: "strides",
      dlParamName: "strides",
      type: "number[]"
    }, {
      tfParamName: "padding",
      dlParamName: "pad",
      type: "string"
    }, {
      tfParamName: "data_format",
      dlParamName: "dataFormat",
      type: "string",
      defaultValue: "NHWC"
    }, {
      tfParamName: "dilations",
      dlParamName: "dilations",
      type: "number[]"
    }]
  }],
      convolution = Object.freeze({
    json: json$3
  }),
      json$4 = [{
    tfOpName: "Fill",
    dlOpName: "fill",
    category: "creation",
    params: [{
      tfInputIndex: 0,
      dlParamName: "shape",
      type: "number[]"
    }, {
      tfInputIndex: 1,
      dlParamName: "value",
      type: "number"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype"
    }]
  }, {
    tfOpName: "LinSpace",
    dlOpName: "linspace",
    category: "creation",
    params: [{
      tfInputIndex: 0,
      dlParamName: "start",
      type: "number"
    }, {
      tfInputIndex: 1,
      dlParamName: "stop",
      type: "number"
    }, {
      tfInputIndex: 2,
      dlParamName: "num",
      type: "number"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "OneHot",
    dlOpName: "oneHot",
    category: "creation",
    params: [{
      tfInputIndex: 0,
      dlParamName: "indices",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "depth",
      type: "number"
    }, {
      tfInputIndex: 2,
      dlParamName: "onValue",
      type: "number",
      defaultValue: 1
    }, {
      tfInputIndex: 3,
      dlParamName: "offValue",
      type: "number",
      defaultValue: 0
    }, {
      tfParamName: "axis",
      dlParamName: "axis",
      type: "number",
      notSupported: !0
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Ones",
    dlOpName: "ones",
    category: "creation",
    params: [{
      tfInputIndex: 0,
      dlParamName: "shape",
      type: "number[]"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype"
    }]
  }, {
    tfOpName: "OnesLike",
    dlOpName: "onesLike",
    category: "creation",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "dtype",
      dlParamName: "dtype",
      type: "dtype"
    }]
  }, {
    tfOpName: "RandomUniform",
    dlOpName: "randomUniform",
    category: "creation",
    params: [{
      tfInputIndex: 0,
      dlParamName: "shape",
      type: "number[]"
    }, {
      tfParamName: "minval",
      dlParamName: "minval",
      type: "number",
      defaultValue: 0
    }, {
      tfParamName: "maxval",
      dlParamName: "maxval",
      type: "number",
      defaultValue: 1
    }, {
      tfParamName: "dtype",
      dlParamName: "dtype",
      type: "dtype"
    }, {
      tfParamName: "seed",
      dlParamName: "seed",
      type: "number",
      defaultValue: 0
    }, {
      tfParamName: "seed2",
      dlParamName: "seed2",
      type: "number",
      defaultValue: 0,
      notSupported: !0
    }, {
      tfParamName: "T",
      dlParamName: "T",
      type: "number",
      notSupported: !0
    }]
  }, {
    tfOpName: "Range",
    dlOpName: "range",
    category: "creation",
    params: [{
      tfInputIndex: 0,
      dlParamName: "start",
      type: "number"
    }, {
      tfInputIndex: 1,
      dlParamName: "stop",
      type: "number"
    }, {
      tfInputIndex: 2,
      dlParamName: "step",
      type: "number",
      defaultValue: 0
    }, {
      tfParamName: "Tidx",
      dlParamName: "dtype",
      type: "dtype"
    }]
  }, {
    tfOpName: "truncatedNormal",
    dlOpName: "truncatedNormal",
    category: "creation",
    params: [{
      tfInputIndex: 0,
      dlParamName: "shape",
      type: "number[]"
    }, {
      tfParamName: "means",
      dlParamName: "mean",
      type: "number",
      defaultValue: 0
    }, {
      tfParamName: "stddev",
      dlParamName: "stdDev",
      type: "number",
      defaultValue: 1
    }, {
      tfParamName: "seed",
      dlParamName: "seed",
      type: "number"
    }, {
      tfParamName: "seed2",
      dlParamName: "seed2",
      type: "number",
      defaultValue: 0,
      notSupported: !0
    }, {
      tfParamName: "dtype",
      dlParamName: "dtype",
      type: "dtype"
    }, {
      tfParamName: "T",
      dlParamName: "T",
      type: "number",
      notSupported: !0
    }]
  }, {
    tfOpName: "Zeros",
    dlOpName: "zeros",
    category: "creation",
    params: [{
      tfInputIndex: 0,
      dlParamName: "shape",
      type: "number[]"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype"
    }]
  }, {
    tfOpName: "ZerosLike",
    dlOpName: "zerosLike",
    category: "creation",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype"
    }]
  }],
      creation = Object.freeze({
    json: json$4
  }),
      json$5 = [{
    tfOpName: "NonMaxSuppressionV2",
    dlOpName: "nonMaxSuppression",
    category: "dynamic",
    params: [{
      tfInputIndex: 0,
      dlParamName: "boxes",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "scores",
      type: "tensor"
    }, {
      tfInputIndex: 2,
      dlParamName: "maxOutputSize",
      type: "number"
    }, {
      tfInputIndex: 3,
      dlParamName: "iouThreshold",
      type: "number"
    }]
  }, {
    tfOpName: "NonMaxSuppressionV3",
    dlOpName: "nonMaxSuppression",
    category: "dynamic",
    params: [{
      tfInputIndex: 0,
      dlParamName: "boxes",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "scores",
      type: "tensor"
    }, {
      tfInputIndex: 2,
      dlParamName: "maxOutputSize",
      type: "number"
    }, {
      tfInputIndex: 3,
      dlParamName: "iouThreshold",
      type: "number"
    }, {
      tfInputIndex: 4,
      dlParamName: "scoreThreshold",
      type: "number"
    }]
  }, {
    tfOpName: "Where",
    dlOpName: "whereAsync",
    category: "dynamic",
    params: [{
      tfInputIndex: 0,
      dlParamName: "condition",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "ListDiff",
    dlOpName: "setdiff1dAsync",
    category: "dynamic",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "y",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }],
      dynamic = Object.freeze({
    json: json$5
  }),
      json$6 = [{
    tfOpName: "TopKV2",
    dlOpName: "topK",
    category: "evaluation",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "k",
      type: "number"
    }, {
      tfParamName: "sorted",
      dlParamName: "sorted",
      type: "bool"
    }]
  }],
      evaluation = Object.freeze({
    json: json$6
  }),
      json$7 = [{
    tfOpName: "PlaceholderWithDefault",
    dlOpName: "placeholder",
    category: "graph",
    params: [{
      tfInputIndex: 0,
      dlParamName: "default",
      type: "tensor"
    }, {
      tfParamName: "shape",
      dlParamName: "shape",
      type: "shape"
    }, {
      tfParamName: "dtype",
      dlParamName: "dtype",
      type: "dtype"
    }]
  }, {
    tfOpName: "Placeholder",
    dlOpName: "placeholder",
    category: "graph",
    params: [{
      tfParamName: "shape",
      dlParamName: "shape",
      type: "shape"
    }, {
      tfParamName: "dtype",
      dlParamName: "dtype",
      type: "dtype"
    }]
  }, {
    tfOpName: "Const",
    dlOpName: "const",
    category: "graph"
  }, {
    tfOpName: "Identity",
    dlOpName: "identity",
    category: "graph",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }]
  }, {
    tfOpName: "Snapshot",
    dlOpName: "snapshot",
    category: "graph",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }]
  }, {
    tfOpName: "Rank",
    dlOpName: "rank",
    category: "graph",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }]
  }, {
    tfOpName: "Size",
    dlOpName: "size",
    category: "graph",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }]
  }, {
    tfOpName: "Shape",
    dlOpName: "shape",
    category: "graph",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }]
  }, {
    tfOpName: "ShapeN",
    dlOpName: "shapeN",
    category: "graph",
    params: [{
      tfInputIndex: 0,
      tfInputParamLength: 0,
      dlParamName: "x",
      type: "tensors"
    }]
  }, {
    tfOpName: "Print",
    dlOpName: "print",
    category: "graph",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      tfInputParamLength: 1,
      dlParamName: "data",
      type: "tensors"
    }, {
      tfParamName: "message",
      dlParamName: "message",
      type: "string"
    }, {
      tfParamName: "first_n",
      dlParamName: "firstN",
      type: "number",
      notSupprted: !0
    }, {
      tfParamName: "summarize",
      dlParamName: "summarize",
      type: "number",
      defaultValue: 3
    }]
  }, {
    tfOpName: "NoOp",
    dlOpName: "noop",
    category: "graph",
    params: []
  }, {
    tfOpName: "StopGradient",
    dlOpName: "stopGradient",
    category: "graph",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }]
  }, {
    tfOpName: "FakeQuantWithMinMaxVars",
    dlOpName: "fakeQuantWithMinMaxVars",
    category: "graph",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "min",
      dlParamName: "min",
      type: "number"
    }, {
      tfParamName: "max",
      dlParamName: "max",
      type: "number"
    }]
  }],
      graph = Object.freeze({
    json: json$7
  }),
      json$8 = [{
    tfOpName: "ResizeBilinear",
    dlOpName: "resizeBilinear",
    category: "image",
    params: [{
      tfInputIndex: 0,
      dlParamName: "images",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "size",
      type: "number[]"
    }, {
      tfParamName: "align_corners",
      dlParamName: "alignCorners",
      type: "bool"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "ResizeNearestNeighbor",
    dlOpName: "resizeNearestNeighbor",
    category: "image",
    params: [{
      tfInputIndex: 0,
      dlParamName: "images",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "size",
      type: "number[]"
    }, {
      tfParamName: "align_corners",
      dlParamName: "alignCorners",
      type: "bool"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "CropAndResize",
    dlOpName: "cropAndResize",
    category: "image",
    params: [{
      tfInputIndex: 0,
      dlParamName: "image",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "boxes",
      type: "tensor"
    }, {
      tfInputIndex: 2,
      dlParamName: "boxInd",
      type: "tensor"
    }, {
      tfInputIndex: 3,
      dlParamName: "cropSize",
      type: "number[]"
    }, {
      tfParamName: "method",
      dlParamName: "method",
      type: "string"
    }, {
      tfParamName: "extrapolation_value",
      dlParamName: "extrapolationValue",
      type: "number"
    }]
  }],
      image$1 = Object.freeze({
    json: json$8
  }),
      json$9 = [{
    tfOpName: "Equal",
    dlOpName: "equal",
    category: "logical",
    params: [{
      tfInputIndex: 0,
      dlParamName: "a",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "b",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "NotEqual",
    dlOpName: "notEqual",
    category: "logical",
    params: [{
      tfInputIndex: 0,
      dlParamName: "a",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "b",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Greater",
    dlOpName: "greater",
    category: "logical",
    params: [{
      tfInputIndex: 0,
      dlParamName: "a",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "b",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "GreaterEqual",
    dlOpName: "greaterEqual",
    category: "logical",
    params: [{
      tfInputIndex: 0,
      dlParamName: "a",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "b",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Less",
    dlOpName: "less",
    category: "logical",
    params: [{
      tfInputIndex: 0,
      dlParamName: "a",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "b",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "LessEqual",
    dlOpName: "lessEqual",
    category: "logical",
    params: [{
      tfInputIndex: 0,
      dlParamName: "a",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "b",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "LogicalAnd",
    dlOpName: "logicalAnd",
    category: "logical",
    params: [{
      tfInputIndex: 0,
      dlParamName: "a",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "b",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "LogicalNot",
    dlOpName: "logicalNot",
    category: "logical",
    params: [{
      tfInputIndex: 0,
      dlParamName: "a",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "LogicalOr",
    dlOpName: "logicalOr",
    category: "logical",
    params: [{
      tfInputIndex: 0,
      dlParamName: "a",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "b",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Select",
    dlOpName: "where",
    category: "logical",
    params: [{
      tfInputIndex: 0,
      dlParamName: "condition",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "a",
      type: "tensor"
    }, {
      tfInputIndex: 2,
      dlParamName: "b",
      type: "tensor"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }],
      logical = Object.freeze({
    json: json$9
  }),
      json$10 = [{
    tfOpName: "MatMul",
    dlOpName: "matMul",
    category: "matrices",
    params: [{
      tfInputIndex: 0,
      dlParamName: "a",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "b",
      type: "tensor"
    }, {
      tfParamName: "transpose_a",
      dlParamName: "transposeA",
      type: "bool",
      defaultValue: !1
    }, {
      tfParamName: "transpose_b",
      dlParamName: "transposeB",
      type: "bool",
      defaultValue: !1
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "BatchMatMul",
    dlOpName: "matMul",
    category: "matrices",
    params: [{
      tfInputIndex: 0,
      dlParamName: "a",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "b",
      type: "tensor"
    }, {
      tfParamName: "adj_x",
      dlParamName: "transposeA",
      type: "bool",
      defaultValue: !1
    }, {
      tfParamName: "adj_y",
      dlParamName: "transposeB",
      type: "bool",
      defaultValue: !1
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }, {
    tfOpName: "Transpose",
    dlOpName: "transpose",
    category: "matrices",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "perm",
      type: "number[]"
    }, {
      tfParamName: "T",
      dlParamName: "dtype",
      type: "dtype",
      notSupported: !0
    }]
  }],
      matrices = Object.freeze({
    json: json$10
  }),
      json$11 = [{
    tfOpName: "FusedBatchNorm",
    dlOpName: "batchNormalization",
    category: "normalization",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "scale",
      type: "tensor"
    }, {
      tfInputIndex: 2,
      dlParamName: "offset",
      type: "tensor"
    }, {
      tfInputIndex: 3,
      dlParamName: "mean",
      type: "tensor"
    }, {
      tfInputIndex: 4,
      dlParamName: "variance",
      type: "tensor"
    }, {
      tfParamName: "epsilon",
      dlParamName: "epsilon",
      type: "number",
      defaultValue: .001
    }, {
      tfParamName: "data_format",
      dlParamName: "dataFormat",
      type: "string",
      notSupported: !0
    }]
  }, {
    tfOpName: "FusedBatchNormV2",
    dlOpName: "batchNormalization",
    category: "normalization",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "scale",
      type: "tensor"
    }, {
      tfInputIndex: 2,
      dlParamName: "offset",
      type: "tensor"
    }, {
      tfInputIndex: 3,
      dlParamName: "mean",
      type: "tensor"
    }, {
      tfInputIndex: 4,
      dlParamName: "variance",
      type: "tensor"
    }, {
      tfParamName: "epsilon",
      dlParamName: "epsilon",
      type: "number",
      defaultValue: .001
    }, {
      tfParamName: "data_format",
      dlParamName: "dataFormat",
      type: "string",
      notSupported: !0
    }]
  }, {
    tfOpName: "LRN",
    dlOpName: "localResponseNormalization",
    category: "normalization",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "depth_radius",
      dlParamName: "radius",
      type: "number",
      defaultValue: 5
    }, {
      tfParamName: "bias",
      dlParamName: "bias",
      type: "number",
      defaultValue: 1
    }, {
      tfParamName: "alpha",
      dlParamName: "alpha",
      type: "number",
      defaultValue: 1
    }, {
      tfParamName: "beta",
      dlParamName: "beta",
      type: "number",
      defaultValue: .5
    }]
  }, {
    tfOpName: "Softmax",
    dlOpName: "softmax",
    category: "normalization",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }]
  }, {
    tfOpName: "LogSoftmax",
    dlOpName: "logSoftmax",
    category: "normalization",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }]
  }, {
    tfOpName: "SparseToDense",
    dlOpName: "sparseToDense",
    category: "normalization",
    params: [{
      tfInputIndex: 0,
      dlParamName: "sparseIndices",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "outputShape",
      type: "number[]"
    }, {
      tfInputIndex: 2,
      dlParamName: "sparseValues",
      type: "tensor"
    }, {
      tfInputIndex: 3,
      dlParamName: "defaultValue",
      type: "tensor"
    }, {
      tfParamName: "validate_indices",
      dlParamName: "validateIndices",
      type: "bool",
      defaultValue: !0,
      notSupported: !0
    }]
  }],
      normalization = Object.freeze({
    json: json$11
  }),
      json$12 = [{
    tfOpName: "Max",
    dlOpName: "max",
    category: "reduction",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "axis",
      type: "number[]"
    }, {
      tfParamName: "keep_dims",
      dlParamName: "keepDims",
      type: "bool"
    }]
  }, {
    tfOpName: "Mean",
    dlOpName: "mean",
    category: "reduction",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "axis",
      type: "number[]"
    }, {
      tfParamName: "keep_dims",
      dlParamName: "keepDims",
      type: "bool"
    }]
  }, {
    tfOpName: "Min",
    dlOpName: "min",
    category: "reduction",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "axis",
      type: "number[]"
    }, {
      tfParamName: "keep_dims",
      dlParamName: "keepDims",
      type: "bool"
    }]
  }, {
    tfOpName: "Sum",
    dlOpName: "sum",
    category: "reduction",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "axis",
      type: "number[]"
    }, {
      tfParamName: "keep_dims",
      dlParamName: "keepDims",
      type: "bool"
    }]
  }, {
    tfOpName: "All",
    dlOpName: "all",
    category: "reduction",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "axis",
      type: "number[]"
    }, {
      tfParamName: "keep_dims",
      dlParamName: "keepDims",
      type: "bool"
    }]
  }, {
    tfOpName: "Any",
    dlOpName: "any",
    category: "reduction",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "axis",
      type: "number[]"
    }, {
      tfParamName: "keep_dims",
      dlParamName: "keepDims",
      type: "bool"
    }]
  }, {
    tfOpName: "ArgMax",
    dlOpName: "argMax",
    category: "reduction",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "axis",
      type: "number"
    }]
  }, {
    tfOpName: "ArgMin",
    dlOpName: "argMin",
    category: "reduction",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "axis",
      type: "number"
    }]
  }, {
    tfOpName: "Prod",
    dlOpName: "prod",
    category: "reduction",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "axis",
      type: "number[]"
    }, {
      tfParamName: "keep_dims",
      dlParamName: "keepDims",
      type: "bool"
    }]
  }],
      reduction = Object.freeze({
    json: json$12
  }),
      json$13 = [{
    tfOpName: "ConcatV2",
    dlOpName: "concat",
    category: "slice_join",
    params: [{
      tfInputIndex: 0,
      tfInputParamLength: 1,
      dlParamName: "tensors",
      type: "tensors"
    }, {
      tfInputIndex: -1,
      dlParamName: "axis",
      type: "number"
    }]
  }, {
    tfOpName: "Concat",
    dlOpName: "concat",
    category: "slice_join",
    params: [{
      tfInputIndex: 1,
      tfInputParamLength: 1,
      dlParamName: "tensors",
      type: "tensors"
    }, {
      tfInputIndex: 0,
      dlParamName: "axis",
      type: "number"
    }]
  }, {
    tfOpName: "GatherV2",
    dlOpName: "gather",
    category: "slice_join",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "indices",
      type: "tensor"
    }, {
      tfInputIndex: 2,
      dlParamName: "axis",
      type: "number",
      defaultValue: 0
    }]
  }, {
    tfOpName: "Gather",
    dlOpName: "gather",
    category: "slice_join",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "indices",
      type: "tensor"
    }, {
      tfParamName: "axis",
      dlParamName: "axis",
      type: "number",
      defaultValue: 0
    }, {
      tfParamName: "validate_indices",
      dlParamName: "validateIndices",
      type: "bool",
      notSupported: !0
    }]
  }, {
    tfOpName: "Reverse",
    dlOpName: "reverse",
    category: "slice_join",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "dims",
      type: "bool",
      notSupported: !0
    }]
  }, {
    tfOpName: "ReverseV2",
    dlOpName: "reverse",
    category: "slice_join",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "axis",
      type: "number[]"
    }]
  }, {
    tfOpName: "Slice",
    dlOpName: "slice",
    category: "slice_join",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "begin",
      type: "number[]"
    }, {
      tfInputIndex: 2,
      dlParamName: "size",
      type: "number[]"
    }]
  }, {
    tfOpName: "StridedSlice",
    dlOpName: "stridedSlice",
    category: "slice_join",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "begin",
      type: "number[]"
    }, {
      tfInputIndex: 2,
      dlParamName: "end",
      type: "number[]"
    }, {
      tfInputIndex: 3,
      dlParamName: "strides",
      type: "number[]"
    }, {
      tfParamName: "begin_mask",
      dlParamName: "beginMask",
      type: "number",
      defaultValue: 0
    }, {
      tfParamName: "end_mask",
      dlParamName: "endMask",
      type: "number",
      defaultValue: 0
    }, {
      tfParamName: "new_axis_mask",
      dlParamName: "newAxisMask",
      type: "number",
      defaultValue: 0
    }, {
      tfParamName: "ellipsis_mask",
      dlParamName: "ellipsisMask",
      type: "number",
      defaultValue: 0
    }, {
      tfParamName: "shrink_axis_mask",
      dlParamName: "shrinkAxisMask",
      type: "number",
      defaultValue: 0
    }]
  }, {
    tfOpName: "Pack",
    dlOpName: "stack",
    category: "slice_join",
    params: [{
      tfInputIndex: 0,
      tfInputParamLength: 0,
      dlParamName: "tensors",
      type: "tensors"
    }, {
      tfParamName: "axis",
      dlParamName: "axis",
      type: "number",
      defaultValue: 0
    }]
  }, {
    tfOpName: "Unpack",
    dlOpName: "unstack",
    category: "slice_join",
    params: [{
      tfInputIndex: 0,
      tfInputParamLength: 0,
      dlParamName: "tensor",
      type: "tensor"
    }, {
      tfParamName: "axis",
      dlParamName: "axis",
      type: "number",
      defaultValue: 0
    }, {
      tfParamName: "num",
      dlParamName: "num",
      type: "number",
      defaultValue: 0,
      notSupported: !0
    }]
  }, {
    tfOpName: "Tile",
    dlOpName: "tile",
    category: "slice_join",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "reps",
      type: "number[]"
    }]
  }, {
    tfOpName: "Split",
    dlOpName: "split",
    category: "slice_join",
    params: [{
      tfInputIndex: 0,
      dlParamName: "axis",
      type: "number",
      defaultValue: 0
    }, {
      tfInputIndex: 1,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "num_split",
      dlParamName: "numOrSizeSplits",
      type: "number",
      defaultValue: 1
    }]
  }, {
    tfOpName: "SplitV",
    dlOpName: "split",
    category: "slice_join",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "numOrSizeSplits",
      type: "number[]"
    }, {
      tfInputIndex: 2,
      dlParamName: "axis",
      type: "number",
      defaultValue: 0
    }]
  }, {
    tfOpName: "ScatterNd",
    dlOpName: "scatterNd",
    category: "slice_join",
    params: [{
      tfInputIndex: 0,
      dlParamName: "indices",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "values",
      type: "tensor"
    }, {
      tfInputIndex: 2,
      dlParamName: "shape",
      type: "number[]"
    }]
  }, {
    tfOpName: "GatherNd",
    dlOpName: "gatherNd",
    category: "slice_join",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "indices",
      type: "tensor"
    }]
  }, {
    tfOpName: "SparseToDense",
    dlOpName: "sparseToDense",
    category: "slice_join",
    params: [{
      tfInputIndex: 0,
      dlParamName: "sparseIndices",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "outputShape",
      type: "number[]"
    }, {
      tfInputIndex: 2,
      dlParamName: "sparseValues",
      type: "tensor"
    }, {
      tfInputIndex: 3,
      dlParamName: "defaultValue",
      type: "tensor"
    }, {
      tfParamName: "validate_indices",
      dlParamName: "validateIndices",
      type: "bool",
      defaultValue: !1,
      notSupported: !0
    }]
  }],
      sliceJoin = Object.freeze({
    json: json$13
  }),
      json$14 = [{
    tfOpName: "FFT",
    dlOpName: "fft",
    category: "spectral",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }]
  }, {
    tfOpName: "IFFT",
    dlOpName: "ifft",
    category: "spectral",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }]
  }, {
    tfOpName: "RFFT",
    dlOpName: "rfft",
    category: "spectral",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "fft_length",
      type: "number",
      unsupported: !0
    }]
  }, {
    tfOpName: "IRFFT",
    dlOpName: "irfft",
    category: "spectral",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "fft_length",
      type: "number",
      unsupported: !0
    }]
  }],
      spectral = Object.freeze({
    json: json$14
  }),
      json$15 = [{
    tfOpName: "Cast",
    dlOpName: "cast",
    category: "transformation",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "SrcT",
      dlParamName: "sdtype",
      type: "dtype",
      notSupported: !0
    }, {
      tfParamName: "DstT",
      dlParamName: "dtype",
      type: "dtype"
    }]
  }, {
    tfOpName: "ExpandDims",
    dlOpName: "expandDims",
    category: "transformation",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      tfParamNameDeprecated: "dim",
      dlParamName: "axis",
      type: "number"
    }]
  }, {
    tfOpName: "Pad",
    dlOpName: "pad",
    category: "transformation",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "padding",
      type: "number[]"
    }, {
      tfParamName: "constant_value",
      dlParamName: "constantValue",
      type: "number",
      defaultValue: 0
    }]
  }, {
    tfOpName: "PadV2",
    dlOpName: "pad",
    category: "transformation",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "padding",
      type: "number[]"
    }, {
      tfInputIndex: 2,
      dlParamName: "constantValue",
      type: "number",
      defaultValue: 0
    }]
  }, {
    tfOpName: "Reshape",
    dlOpName: "reshape",
    category: "transformation",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "shape",
      type: "number[]"
    }]
  }, {
    tfOpName: "Squeeze",
    dlOpName: "squeeze",
    category: "transformation",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "axis",
      tfParamNameDeprecated: "squeeze_dims",
      dlParamName: "axis",
      type: "number[]"
    }]
  }, {
    tfOpName: "SpaceToBatchND",
    dlOpName: "spaceToBatchND",
    category: "transformation",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "blockShape",
      type: "number[]"
    }, {
      tfInputIndex: 2,
      dlParamName: "paddings",
      type: "number[]"
    }]
  }, {
    tfOpName: "BatchToSpaceND",
    dlOpName: "batchToSpaceND",
    category: "transformation",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfInputIndex: 1,
      dlParamName: "blockShape",
      type: "number[]"
    }, {
      tfInputIndex: 2,
      dlParamName: "crops",
      type: "number[]"
    }]
  }, {
    tfOpName: "DepthToSpace",
    dlOpName: "depthToSpace",
    category: "transformation",
    params: [{
      tfInputIndex: 0,
      dlParamName: "x",
      type: "tensor"
    }, {
      tfParamName: "block_size",
      dlParamName: "blockSize",
      type: "number"
    }, {
      tfParamName: "data_format",
      dlParamName: "dataFormat",
      type: "string"
    }]
  }],
      transformation = Object.freeze({
    json: json$15
  }),
      CONTROL_FLOW_OPS = ["Switch", "Merge", "Enter", "Exit", "NextIteration"],
      DYNAMIC_SHAPE_OPS = ["NonMaxSuppressionV2", "NonMaxSuppressionV3", "Where"],
      OperationMapper = function () {
    function e() {
      var e = [arithmetic, basicMath, control, convolution, creation, dynamic, evaluation, logical, image$1, graph, matrices, normalization, reduction, sliceJoin, spectral, transformation],
          t = [].concat.apply([], e.map(function (e) {
        return e.json;
      }));
      this.opMappers = t.reduce(function (e, t) {
        return e[t.tfOpName] = t, e;
      }, {});
    }

    return Object.defineProperty(e, "Instance", {
      get: function get() {
        return this._instance || (this._instance = new this());
      },
      enumerable: !0,
      configurable: !0
    }), e.prototype.isControlFlow = function (e) {
      return CONTROL_FLOW_OPS.some(function (t) {
        return t === e.op;
      });
    }, e.prototype.isDynamicShape = function (e) {
      return DYNAMIC_SHAPE_OPS.some(function (t) {
        return t === e.op;
      });
    }, e.prototype.transformGraph = function (e) {
      var t = this,
          r = !1,
          n = !1,
          a = [],
          o = [],
          i = e.node.reduce(function (e, i) {
        return e[i.name] = t.mapNode(i), t.isControlFlow(i) && (r = !0), t.isDynamicShape(i) && (n = !0), "Placeholder" === i.op && a.push(e[i.name]), "Const" === i.op && o.push(e[i.name]), e;
      }, {}),
          s = [],
          u = [];
      return Object.keys(i).forEach(function (e) {
        var t = i[e];
        t.inputNames.forEach(function (e) {
          var r = getNodeNameAndIndex(e)[0];
          t.inputs.push(i[r]), i[r].children.push(t);
        }), 0 === t.inputs.length && s.push(t);
      }), Object.keys(i).forEach(function (e) {
        var t = i[e];
        0 === t.children.length && u.push(t);
      }), {
        nodes: i,
        inputs: s,
        outputs: u,
        weights: o,
        placeholders: a,
        withControlFlow: r,
        withDynamicShape: n
      };
    }, e.prototype.mapNode = function (e) {
      var t = this,
          r = this.opMappers[e.op];
      if (void 0 === r) throw new Error("Tensorflow Op is not supported: " + e.op);
      var n = {
        name: e.name,
        op: r.dlOpName,
        category: r.category,
        inputNames: (e.input || []).map(function (e) {
          return e.startsWith("^") ? e.substr(1) : e;
        }),
        inputs: [],
        children: [],
        params: {}
      };
      return r.params && (n.params = r.params.reduce(function (r, n) {
        var a = n.tfInputIndex,
            o = n.tfInputParamLength,
            i = n.type,
            s = void 0;
        if (void 0 === a) switch (n.type) {
          case "string":
            void 0 === (s = t.getStringParam(e.attr, n.tfParamName, n.defaultValue)) && n.tfParamNameDeprecated && (s = t.getStringParam(e.attr, n.tfParamNameDeprecated, n.defaultValue));
            break;

          case "number":
            void 0 === (s = t.getNumberParam(e.attr, n.tfParamName, n.defaultValue || 0)) && n.tfParamNameDeprecated && (s = t.getNumberParam(e.attr, n.tfParamNameDeprecated, n.defaultValue));
            break;

          case "number[]":
            void 0 === (s = t.getNumericArrayParam(e.attr, n.tfParamName, n.defaultValue)) && n.tfParamNameDeprecated && (s = t.getNumericArrayParam(e.attr, n.tfParamNameDeprecated, n.defaultValue));
            break;

          case "bool":
            void 0 === (s = t.getBoolParam(e.attr, n.tfParamName, n.defaultValue)) && n.tfParamNameDeprecated && (s = t.getBoolParam(e.attr, n.tfParamNameDeprecated, n.defaultValue));
            break;

          case "shape":
            void 0 === (s = t.getTensorShapeParam(e.attr, n.tfParamName, n.defaultValue)) && n.tfParamNameDeprecated && (s = t.getTensorShapeParam(e.attr, n.tfParamNameDeprecated, n.defaultValue));
            break;

          case "dtype":
            void 0 === (s = t.getDtypeParam(e.attr, n.tfParamName, n.defaultValue)) && n.tfParamNameDeprecated && (s = t.getDtypeParam(e.attr, n.tfParamNameDeprecated, n.defaultValue));
            break;

          case "tensor":
          case "tensors":
            break;

          default:
            throw new Error("Unsupported param type: " + n.type + " for op: " + e.op);
        }
        return r[n.dlParamName] = {
          value: s,
          inputIndex: a,
          type: i,
          inputParamLength: o
        }, r;
      }, {})), n;
    }, e.prototype.getStringParam = function (e, t, r, n) {
      void 0 === n && (n = !1);
      var a = e[t];

      if (void 0 !== a) {
        var o = String.fromCharCode.apply(null, a.s);
        return n ? o : o.toLowerCase();
      }

      return r;
    }, e.prototype.getBoolParam = function (e, t, r) {
      var n = e[t];
      return n ? n.b : r;
    }, e.prototype.getNumberParam = function (e, t, r) {
      var n = e[t],
          a = n ? n[n.value] : r;
      return "number" == typeof a ? a : a.toInt();
    }, e.prototype.getDtypeParam = function (e, t, r) {
      var n = e[t];
      if (n && n.type) switch (n.type) {
        case compiled_api_1.DataType.DT_FLOAT:
          return "float32";

        case compiled_api_1.DataType.DT_INT32:
          return "int32";

        case compiled_api_1.DataType.DT_BOOL:
          return "bool";

        default:
          return r;
      }
      return r;
    }, e.prototype.getTensorShapeParam = function (e, t, r) {
      var n = e[t];
      return n && n.shape ? n.shape.dim.map(function (e) {
        return "number" == typeof e.size ? e.size : e.size.toInt();
      }) : r;
    }, e.prototype.getNumericArrayParam = function (e, t, r) {
      var n = e[t];
      return n ? (n.list.f && n.list.f.length ? n.list.f : n.list.i).map(function (e) {
        return "number" == typeof e ? e : e.toInt();
      }) : r;
    }, e;
  }(),
      executeOp = function executeOp(e, t, r) {
    switch (e.op) {
      case "add":
        return [add(getParamValue("a", e, t, r), getParamValue("b", e, t, r))];

      case "addN":
        return [addN(getParamValue("tensors", e, t, r))];

      case "mod":
        return [mod(getParamValue("a", e, t, r), getParamValue("b", e, t, r))];

      case "mul":
        return [mul(getParamValue("a", e, t, r), getParamValue("b", e, t, r))];

      case "div":
        return [div(getParamValue("a", e, t, r), getParamValue("b", e, t, r))];

      case "floorDiv":
        return [floorDiv(getParamValue("a", e, t, r), getParamValue("b", e, t, r))];

      case "sub":
        return [sub(getParamValue("a", e, t, r), getParamValue("b", e, t, r))];

      case "minimum":
        return [minimum(getParamValue("a", e, t, r), getParamValue("b", e, t, r))];

      case "maximum":
        return [maximum(getParamValue("a", e, t, r), getParamValue("b", e, t, r))];

      case "pow":
        return [pow(getParamValue("a", e, t, r), getParamValue("b", e, t, r))];

      case "squaredDifference":
        return [squaredDifference(getParamValue("a", e, t, r), getParamValue("b", e, t, r))];

      default:
        throw TypeError("Node type " + e.op + " is not implemented");
    }
  },
      executeOp$1 = function executeOp$1(e, t, r) {
    switch (e.op) {
      case "abs":
        return [abs(getParamValue("x", e, t, r))];

      case "acos":
        return [acos(getParamValue("x", e, t, r))];

      case "acosh":
        return [acosh(getParamValue("x", e, t, r))];

      case "asin":
        return [asin(getParamValue("x", e, t, r))];

      case "asinh":
        return [asinh(getParamValue("x", e, t, r))];

      case "atan":
        return [atan(getParamValue("x", e, t, r))];

      case "atan2":
        return [atan2(getParamValue("x", e, t, r), getParamValue("y", e, t, r))];

      case "atanh":
        return [atanh(getParamValue("x", e, t, r))];

      case "ceil":
        return [ceil(getParamValue("x", e, t, r))];

      case "cos":
        return [cos(getParamValue("x", e, t, r))];

      case "cosh":
        return [cosh(getParamValue("x", e, t, r))];

      case "elu":
        return [elu(getParamValue("x", e, t, r))];

      case "erf":
        return [erf(getParamValue("x", e, t, r))];

      case "exp":
        return [exp(getParamValue("x", e, t, r))];

      case "expm1":
        return [expm1(getParamValue("x", e, t, r))];

      case "floor":
        return [floor(getParamValue("x", e, t, r))];

      case "log":
        return [log$1(getParamValue("x", e, t, r))];

      case "log1p":
        return [log1p(getParamValue("x", e, t, r))];

      case "neg":
        return [neg(getParamValue("x", e, t, r))];

      case "reciprocal":
        return [reciprocal(getParamValue("x", e, t, r))];

      case "relu":
        return [relu(getParamValue("x", e, t, r))];

      case "round":
        return [round(getParamValue("x", e, t, r))];

      case "selu":
        return [selu(getParamValue("x", e, t, r))];

      case "sigmoid":
        return [sigmoid(getParamValue("x", e, t, r))];

      case "sin":
        return [sin(getParamValue("x", e, t, r))];

      case "sign":
        return [sign(getParamValue("x", e, t, r))];

      case "sinh":
        return [sinh(getParamValue("x", e, t, r))];

      case "softplus":
        return [softplus(getParamValue("x", e, t, r))];

      case "sqrt":
        return [sqrt(getParamValue("x", e, t, r))];

      case "square":
        return [square(getParamValue("x", e, t, r))];

      case "tanh":
        return [tanh$1(getParamValue("x", e, t, r))];

      case "tan":
        return [tan(getParamValue("x", e, t, r))];

      case "clipByValue":
        return [clipByValue(getParamValue("x", e, t, r), getParamValue("clipValueMin", e, t, r), getParamValue("clipValueMax", e, t, r))];

      case "rsqrt":
        return [div(scalar(1, "float32"), sqrt(getTensor(e.inputNames[0], t, r)))];

      case "prod":
        return [prod(getParamValue("x", e, t, r), getParamValue("axes", e, t, r))];

      case "leakyRelu":
        return [leakyRelu(getParamValue("x", e, t, r), getParamValue("alpha", e, t, r))];

      default:
        throw TypeError("Node type " + e.op + " is not implemented");
    }
  },
      TensorArray = function () {
    function e(t, r, n, a, o, i, s) {
      this.name = t, this.dtype = r, this.maxSize = n, this.elementShape = a, this.identicalElementShapes = o, this.dynamicSize = i, this.clearAfterRead = s, this.tensors = [], this.closed_ = !1, this.id = e.nextId++;
    }

    return Object.defineProperty(e.prototype, "closed", {
      get: function get() {
        return this.closed_;
      },
      enumerable: !0,
      configurable: !0
    }), e.prototype.clearAndClose = function () {
      this.tensors.forEach(function (e) {
        return e.tensor.dispose();
      }), this.tensors = [], this.closed_ = !0;
    }, e.prototype.size = function () {
      return this.tensors.length;
    }, e.prototype.read = function (e) {
      if (this.closed_) throw new Error("TensorArray " + this.name + " has already been closed.");
      if (e < 0 || e >= this.tensors.length) throw new Error("Tried to read from index " + e + ", but array size is: " + this.tensors.length);
      var t = this.tensors[e];
      if (t.cleared) throw new Error("TensorArray " + this.name + ": Could not read index " + e + " twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).");
      return this.clearAfterRead && (t.cleared = !0), t.read = !0, t.tensor;
    }, e.prototype.readMany = function (e) {
      var t = this;
      return e.map(function (e) {
        return t.read(e);
      });
    }, e.prototype.write = function (e, t) {
      if (this.closed_) throw new Error("TensorArray " + this.name + " has already been closed.");
      if (e < 0 || !this.dynamicSize && e >= this.maxSize) throw new Error("Tried to write to index " + e + ", but array is not resizeable and size is: " + this.maxSize);
      var r = this.tensors[e] || {};
      if (t.dtype !== this.dtype) throw new Error("TensorArray " + this.name + ": Could not write to TensorArray index " + e + ",\n          because the value dtype is " + t.dtype + ", but TensorArray dtype is " + this.dtype + ".");
      if (0 !== this.size() || null != this.elementShape && 0 !== this.elementShape.length || (this.elementShape = t.shape), this.assertShapesMatch(this.elementShape, t.shape, "TensorArray " + this.name + ": Could not write to TensorArray index " + e + "."), r && r.read) throw new Error("TensorArray " + this.name + ": Could not write to TensorArray index " + e + ", because it has already been read.");
      if (r && r.written) throw new Error("TensorArray " + this.name + ": Could not write to TensorArray index " + e + ", because it has already been written.");
      r.tensor = t, r.written = !0, this.tensors[e] = r;
    }, e.prototype.writeMany = function (e, t) {
      var r = this;
      if (e.length !== t.length) throw new Error("TensorArray " + this.name + ": could not write multiple tensors,because the index size: " + e.length + " is not the same as tensors size: " + t.length + ".");
      e.forEach(function (e, n) {
        return r.write(e, t[n]);
      });
    }, e.prototype.gather = function (e, t) {
      if (t && t !== this.dtype) throw new Error("TensorArray dtype is " + this.dtype + " but gather requested dtype " + t);

      if (!e) {
        e = [];

        for (var r = 0; r < this.size(); r++) {
          e.push(r);
        }
      }

      if (0 === e.length) return tensor([], [0].concat(this.elementShape));
      var n = this.readMany(e);
      return this.assertShapesMatch(this.elementShape, n[0].shape, "TensorArray shape mismatch: "), stack(n, 0);
    }, e.prototype.concat = function (e) {
      if (e && e !== this.dtype) throw new Error("TensorArray dtype is " + this.dtype + " but concat requested dtype " + e);
      if (0 === this.size()) return tensor([], [0].concat(this.elementShape));

      for (var t = [], r = 0; r < this.size(); r++) {
        t.push(r);
      }

      var n = this.readMany(t);
      return this.assertShapesMatch(this.elementShape, n[0].shape, "TensorArray shape mismatch: tensor array shape (" + this.elementShape + ") vs first tensor shape (" + n[0].shape + ")"), concat(n, 0);
    }, e.prototype.scatter = function (e, t) {
      if (t.dtype !== this.dtype) throw new Error("TensorArray dtype is " + this.dtype + " but tensor has dtype " + t.dtype);
      if (e.length !== t.shape[0]) throw new Error("Expected len(indices) == tensor.shape[0], but saw: " + e.length + " vs. " + t.shape[0]);
      var r = Math.max.apply(Math, e);
      if (!this.dynamicSize && r >= this.maxSize) throw new Error("Max index must be < array size (" + r + "  vs. " + this.maxSize + ")");
      this.writeMany(e, unstack(t, 0));
    }, e.prototype.split = function (e, t) {
      var r = this;
      if (t.dtype !== this.dtype) throw new Error("TensorArray dtype is " + this.dtype + " but tensor has dtype " + t.dtype);
      var n = 0,
          a = e.map(function (e) {
        return n += e;
      });
      if (n !== t.shape[0]) throw new Error("Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        " + n + ", and tensor's shape is: " + t.shape);
      if (!this.dynamicSize && e.length !== this.maxSize) throw new Error("TensorArray's size is not equal to the size of lengths (" + this.maxSize + " vs. " + e.length + "), and the TensorArray is not marked as dynamically resizeable");
      var o = 0 === n ? 0 : t.size / n,
          i = [];
      tidy(function () {
        t = t.reshape([1, n, o]);

        for (var s = 0; s < e.length; ++s) {
          var u = [0, 0 === s ? 0 : a[s - 1], 0],
              l = [1, e[s], o];
          i[s] = slice(t, u, l).reshape(r.elementShape);
        }

        return i;
      });

      for (var s = [], u = 0; u < e.length; u++) {
        s[u] = u;
      }

      this.writeMany(s, i);
    }, e.prototype.assertShapesMatch = function (e, t, r) {
      void 0 === r && (r = ""), util.assert(this.arraysEqual(e, t), r + " Shapes " + e + " and " + t + " must match");
    }, e.prototype.arraysEqual = function (e, t) {
      if (e.length !== t.length) return !1;

      for (var r = 0; r < e.length; r++) {
        if (-1 !== e[r] && -1 !== t[r] && e[r] !== t[r]) return !1;
      }

      return !0;
    }, e.nextId = 0, e;
  }();

  function executeOp$2(e, t, r) {
    return __awaiter$2(this, void 0, void 0, function () {
      var n, a, o, i, s, u, l, p, c, h, d, f, m, g, y, v, x, b, w, N, S, T, E, _, I, A, C, P, k, O, D, R, M, L;

      return __generator$2(this, function (z) {
        switch (z.label) {
          case 0:
            switch (e.op) {
              case "loopCond":
                return [3, 1];

              case "switch":
                return [3, 2];

              case "merge":
                return [3, 4];

              case "enter":
                return [3, 5];

              case "exit":
                return [3, 6];

              case "nextIteration":
                return [3, 7];

              case "tensorArray":
                return [3, 8];

              case "tensorArrayWrite":
                return [3, 9];

              case "tensorArrayRead":
                return [3, 10];

              case "tensorArrayGather":
                return [3, 11];

              case "tensorArrayScatter":
                return [3, 12];

              case "tensorArrayConcat":
                return [3, 13];

              case "tensorArraySplit":
                return [3, 14];

              case "tensorArraySize":
                return [3, 15];

              case "tensorArrayClose":
                return [3, 16];
            }

            return [3, 17];

          case 1:
            return [2, [getParamValue("pred", e, t, r).clone()]];

          case 2:
            return n = getParamValue("pred", e, t, r), a = getParamValue("data", e, t, r), [4, n.data()];

          case 3:
            return [2, z.sent()[0] ? [void 0, a.clone()] : [a.clone(), void 0]];

          case 4:
            return [2, (o = e.inputNames.find(function (e) {
              return void 0 !== getTensor(e, t, r);
            })) ? [getTensor(o, t, r).clone()] : void 0];

          case 5:
            return i = getParamValue("frameName", e, t, r), s = getParamValue("tensor", e, t, r), r.enterFrame(i), [2, [s.clone()]];

          case 6:
            return u = getParamValue("tensor", e, t, r), r.exitFrame(), [2, [u.clone()]];

          case 7:
            return l = getParamValue("tensor", e, t, r), r.nextIteration(), [2, [l.clone()]];

          case 8:
            return p = getParamValue("size", e, t, r), c = getParamValue("dtype", e, t, r), h = getParamValue("elementShape", e, t, r), d = getParamValue("dynamicSize", e, t, r), f = getParamValue("clearAfterRead", e, t, r), m = getParamValue("identicalElementShapes", e, t, r), g = getParamValue("name", e, t, r), y = new TensorArray(g, c, p, h, m, d, f), r.addTensorArray(y), [2, [scalar(y.id), scalar(1)]];

          case 9:
            return v = getParamValue("tensorArrayId", e, t, r), x = getParamValue("index", e, t, r), b = getParamValue("tensor", e, t, r), r.getTensorArray(v).write(x, b), [2, [scalar(1)]];

          case 10:
            return w = getParamValue("tensorArrayId", e, t, r), N = getParamValue("index", e, t, r), [2, [r.getTensorArray(w).read(N)]];

          case 11:
            return S = getParamValue("tensorArrayId", e, t, r), T = getParamValue("indices", e, t, r), E = getParamValue("dtype", e, t, r), [2, [r.getTensorArray(S).gather(T, E)]];

          case 12:
            return _ = getParamValue("tensorArrayId", e, t, r), I = getParamValue("indices", e, t, r), A = getParamValue("tensor", e, t, r), r.getTensorArray(_).scatter(I, A), [2, [scalar(1)]];

          case 13:
            return C = getParamValue("tensorArrayId", e, t, r), P = r.getTensorArray(C), k = getParamValue("dtype", e, t, r), [2, [P.concat(k)]];

          case 14:
            return O = getParamValue("tensorArrayId", e, t, r), D = getParamValue("tensor", e, t, r), R = getParamValue("lengths", e, t, r), r.getTensorArray(O).split(R, D), [2, [scalar(1)]];

          case 15:
            return M = getParamValue("tensorArrayId", e, t, r), [2, [scalar(r.getTensorArray(M).size(), "int32")]];

          case 16:
            return L = getParamValue("tensorArrayId", e, t, r), r.getTensorArray(L).clearAndClose(), [2, []];

          case 17:
            throw TypeError("Node type " + e.op + " is not implemented");
        }
      });
    });
  }

  var executeOp$3 = function executeOp$3(e, t, r) {
    switch (e.op) {
      case "conv1d":
        var n = getParamValue("stride", e, t, r),
            a = getParamValue("pad", e, t, r),
            o = getParamValue("dataFormat", e, t, r).toUpperCase(),
            i = getParamValue("dilation", e, t, r);
        return [conv1d(getParamValue("x", e, t, r), getParamValue("filter", e, t, r), n, a, o, i)];

      case "conv2d":
        n = getParamValue("strides", e, t, r), a = getParamValue("pad", e, t, r), o = getParamValue("dataFormat", e, t, r).toUpperCase();
        var s = getParamValue("dilations", e, t, r);
        return [conv2d(getParamValue("x", e, t, r), getParamValue("filter", e, t, r), [n[1], n[2]], a, o, [s[0], s[1]])];

      case "conv2dTranspose":
        var u = getParamValue("outputShape", e, t, r);
        return n = getParamValue("strides", e, t, r), a = getParamValue("pad", e, t, r), [conv2dTranspose(getParamValue("x", e, t, r), getParamValue("filter", e, t, r), u, [n[1], n[2]], a)];

      case "depthwiseConv2d":
        return n = getParamValue("strides", e, t, r), a = getParamValue("pad", e, t, r), s = getParamValue("dilations", e, t, r), o = getParamValue("dataFormat", e, t, r).toUpperCase(), [depthwiseConv2d(getParamValue("input", e, t, r), getParamValue("filter", e, t, r), [n[1], n[2]], a, o, [s[0], s[1]])];

      case "avgPool":
        n = getParamValue("strides", e, t, r), a = getParamValue("pad", e, t, r);
        var l = getParamValue("kernelSize", e, t, r);
        return [avgPool(getParamValue("x", e, t, r), [l[1], l[2]], [n[1], n[2]], a)];

      case "maxPool":
        return n = getParamValue("strides", e, t, r), a = getParamValue("pad", e, t, r), l = getParamValue("kernelSize", e, t, r), [maxPool(getParamValue("x", e, t, r), [l[1], l[2]], [n[1], n[2]], a)];

      default:
        throw TypeError("Node type " + e.op + " is not implemented");
    }
  },
      executeOp$4 = function executeOp$4(e, t, r) {
    switch (e.op) {
      case "fill":
        var n = getParamValue("shape", e, t, r),
            a = getParamValue("dtype", e, t, r);
        return [fill(n, getParamValue("value", e, t, r), a)];

      case "linspace":
        var o = getParamValue("start", e, t, r);
        return [linspace(o, getParamValue("stop", e, t, r), getParamValue("num", e, t, r))];

      case "oneHot":
        var i = getParamValue("indices", e, t, r),
            s = getParamValue("depth", e, t, r),
            u = getParamValue("onValue", e, t, r),
            l = getParamValue("offValue", e, t, r);
        return [oneHot(i, s, u, l)];

      case "ones":
        return [ones$1(getParamValue("shape", e, t, r), getParamValue("dtype", e, t, r))];

      case "onesLike":
        return [onesLike(getParamValue("x", e, t, r))];

      case "randomUniform":
        return [randomUniform(getParamValue("shape", e, t, r), getParamValue("minval", e, t, r), getParamValue("maxval", e, t, r), getParamValue("dtype", e, t, r))];

      case "range":
        return [range(o = getParamValue("start", e, t, r), getParamValue("stop", e, t, r), getParamValue("step", e, t, r), getParamValue("dtype", e, t, r))];

      case "truncatedNormal":
        n = getParamValue("shape", e, t, r);
        var p = getParamValue("mean", e, t, r),
            c = getParamValue("stdDev", e, t, r),
            h = getParamValue("seed", e, t, r);
        return [truncatedNormal(n, p, c, getParamValue("dtype", e, t, r), h)];

      case "zeros":
        return [zeros(getParamValue("shape", e, t, r), getParamValue("dtype", e, t, r))];

      case "zerosLike":
        return [zerosLike(getParamValue("x", e, t, r))];

      default:
        throw TypeError("Node type " + e.op + " is not implemented");
    }
  };

  function executeOp$5(e, t, r) {
    return __awaiter$2(this, void 0, void 0, function () {
      var n, a, o, i, s;
      return __generator$2(this, function (u) {
        switch (u.label) {
          case 0:
            switch (e.op) {
              case "nonMaxSuppression":
                return [3, 1];

              case "whereAsync":
                return [3, 3];

              case "setdiff1dAsync":
                return [3, 5];
            }

            return [3, 7];

          case 1:
            return n = getParamValue("boxes", e, t, r), a = getParamValue("scores", e, t, r), o = getParamValue("maxOutputSize", e, t, r), i = getParamValue("iouThreshold", e, t, r), s = getParamValue("scoreThreshold", e, t, r), [4, image_ops.nonMaxSuppressionAsync(n, a, o, i, s)];

          case 2:
            return [2, [u.sent()]];

          case 3:
            return [4, whereAsync(getParamValue("condition", e, t, r))];

          case 4:
            return [2, [u.sent()]];

          case 5:
            return [4, setdiff1dAsync(getParamValue("x", e, t, r), getParamValue("y", e, t, r))];

          case 6:
            return [2, u.sent()];

          case 7:
            throw TypeError("Node type " + e.op + " is not implemented");
        }
      });
    });
  }

  var executeOp$6 = function executeOp$6(e, t, r) {
    switch (e.op) {
      case "topK":
        var n = getParamValue("x", e, t, r),
            a = getParamValue("k", e, t, r),
            o = getParamValue("sorted", e, t, r),
            i = topk(n, a, o);
        return [i.values, i.indices];

      default:
        throw TypeError("Node type " + e.op + " is not implemented");
    }
  },
      executeOp$7 = function executeOp$7(e, t, r) {
    switch (e.op) {
      case "const":
        return t[e.name];

      case "placeholder":
        var n = getParamValue("default", e, t, r);
        return [getTensor(e.name, t, r) || n];

      case "identity":
      case "stopGradient":
      case "fakeQuantWithMinMaxVars":
      case "snapshot":
        return [getParamValue("x", e, t, r).clone()];

      case "shape":
        return [tensor1d(getParamValue("x", e, t, r).shape, "int32")];

      case "shapeN":
        return getParamValue("x", e, t, r).map(function (e) {
          return tensor1d(e.shape);
        });

      case "size":
        return [scalar(getParamValue("x", e, t, r).size, "int32")];

      case "rank":
        return [scalar(getParamValue("x", e, t, r).rank, "int32")];

      case "noop":
        return [];

      case "print":
        var a = getParamValue("x", e, t, r),
            o = getParamValue("data", e, t, r),
            i = getParamValue("message", e, t, r),
            s = getParamValue("summarize", e, t, r);
        console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."), console.log(i);

        for (var u = 0; u < o.length; u++) {
          console.log(Array.prototype.slice.call(o[0].dataSync()).slice(0, s));
        }

        return [a];

      default:
        throw TypeError("Node type " + e.op + " is not implemented");
    }
  },
      executeOp$8 = function executeOp$8(e, t, r) {
    switch (e.op) {
      case "resizeBilinear":
        var n = getParamValue("images", e, t, r),
            a = getParamValue("size", e, t, r),
            o = getParamValue("alignCorners", e, t, r);
        return [image_ops.resizeBilinear(n, [a[0], a[1]], o)];

      case "resizeNearestNeighbor":
        return n = getParamValue("images", e, t, r), a = getParamValue("size", e, t, r), o = getParamValue("alignCorners", e, t, r), [image_ops.resizeNearestNeighbor(n, [a[0], a[1]], o)];

      case "cropAndResize":
        var i = getParamValue("image", e, t, r),
            s = getParamValue("boxes", e, t, r),
            u = getParamValue("boxInd", e, t, r),
            l = getParamValue("cropSize", e, t, r),
            p = getParamValue("method", e, t, r),
            c = getParamValue("extrapolationValue", e, t, r);
        return [image_ops.cropAndResize(i, s, u, l, p, c)];

      default:
        throw TypeError("Node type " + e.op + " is not implemented");
    }
  },
      executeOp$9 = function executeOp$9(e, t, r) {
    switch (e.op) {
      case "equal":
        return [equal(getParamValue("a", e, t, r), getParamValue("b", e, t, r))];

      case "notEqual":
        return [notEqual(getParamValue("a", e, t, r), getParamValue("b", e, t, r))];

      case "greater":
        return [greater(getParamValue("a", e, t, r), getParamValue("b", e, t, r))];

      case "greaterEqual":
        return [greaterEqual(getParamValue("a", e, t, r), getParamValue("b", e, t, r))];

      case "less":
        return [less(getParamValue("a", e, t, r), getParamValue("b", e, t, r))];

      case "lessEqual":
        return [lessEqual(getParamValue("a", e, t, r), getParamValue("b", e, t, r))];

      case "logicalAnd":
        return [logicalAnd(getParamValue("a", e, t, r), getParamValue("b", e, t, r))];

      case "logicalNot":
        return [logicalNot(getParamValue("a", e, t, r))];

      case "logicalOr":
        return [logicalOr(getParamValue("a", e, t, r), getParamValue("b", e, t, r))];

      case "where":
        return [where(getParamValue("condition", e, t, r), getParamValue("a", e, t, r), getParamValue("b", e, t, r))];

      default:
        throw TypeError("Node type " + e.op + " is not implemented");
    }
  },
      executeOp$10 = function executeOp$10(e, t, r) {
    switch (e.op) {
      case "matMul":
        return [matMul(getParamValue("a", e, t, r), getParamValue("b", e, t, r), getParamValue("transposeA", e, t, r), getParamValue("transposeB", e, t, r))];

      case "transpose":
        return [transpose(getParamValue("x", e, t, r), getParamValue("perm", e, t, r))];

      default:
        throw TypeError("Node type " + e.op + " is not implemented");
    }
  },
      executeOp$11 = function executeOp$11(e, t, r) {
    switch (e.op) {
      case "batchNormalization":
        return [batchNorm(getParamValue("x", e, t, r), getParamValue("mean", e, t, r), getParamValue("variance", e, t, r), getParamValue("offset", e, t, r), getParamValue("scale", e, t, r), getParamValue("epsilon", e, t, r))];

      case "localResponseNormalization":
        return [localResponseNormalization(getParamValue("x", e, t, r), getParamValue("radius", e, t, r), getParamValue("bias", e, t, r), getParamValue("alpha", e, t, r), getParamValue("beta", e, t, r))];

      case "softmax":
        return [softmax(getParamValue("x", e, t, r))];

      case "logSoftmax":
        return [logSoftmax(getParamValue("x", e, t, r))];

      case "sparseToDense":
        return [sparseToDense(getParamValue("sparseIndices", e, t, r), getParamValue("outputShape", e, t, r), getParamValue("sparseValues", e, t, r), getParamValue("defaultValue", e, t, r))];

      default:
        throw TypeError("Node type " + e.op + " is not implemented");
    }
  },
      executeOp$12 = function executeOp$12(e, t, r) {
    switch (e.op) {
      case "max":
        var n = getParamValue("axis", e, t, r),
            a = getParamValue("keepDims", e, t, r);
        return [max(getParamValue("x", e, t, r), n, a)];

      case "mean":
        return n = getParamValue("axis", e, t, r), a = getParamValue("keepDims", e, t, r), [mean(getParamValue("x", e, t, r), n, a)];

      case "min":
        return n = getParamValue("axis", e, t, r), a = getParamValue("keepDims", e, t, r), [min(getParamValue("x", e, t, r), n, a)];

      case "sum":
        return n = getParamValue("axis", e, t, r), a = getParamValue("keepDims", e, t, r), [sum$1(getParamValue("x", e, t, r), n, a)];

      case "all":
        return n = getParamValue("axis", e, t, r), a = getParamValue("keepDims", e, t, r), [all(getParamValue("x", e, t, r), n, a)];

      case "any":
        return n = getParamValue("axis", e, t, r), a = getParamValue("keepDims", e, t, r), [any(getParamValue("x", e, t, r), n, a)];

      case "argMax":
        return n = getParamValue("axis", e, t, r), [argMax(getParamValue("x", e, t, r), n)];

      case "argMin":
        return n = getParamValue("axis", e, t, r), [argMin(getParamValue("x", e, t, r), n)];

      case "prod":
        return n = getParamValue("axis", e, t, r), a = getParamValue("keepDims", e, t, r), [prod(getParamValue("x", e, t, r), n, a)];

      default:
        throw TypeError("Node type " + e.op + " is not implemented");
    }
  },
      executeOp$13 = function executeOp$13(e, t, r) {
    switch (e.op) {
      case "concat":
        var n = getParamValue("axis", e, t, r),
            a = getParamValue("tensors", e, t, r);
        return [concat(a, n)];

      case "gather":
        n = getParamValue("axis", e, t, r);
        var o = getParamValue("x", e, t, r),
            i = getParamValue("indices", e, t, r);
        return [gather(o, i, n)];

      case "reverse":
        return n = getParamValue("axis", e, t, r), o = getParamValue("x", e, t, r), [reverse(o, n)];

      case "slice":
        var s = getParamValue("begin", e, t, r),
            u = getParamValue("size", e, t, r);
        return [slice(getParamValue("x", e, t, r), s, u)];

      case "stridedSlice":
        s = getParamValue("begin", e, t, r);
        var l = getParamValue("end", e, t, r),
            p = getParamValue("strides", e, t, r),
            c = getParamValue("beginMask", e, t, r),
            h = getParamValue("endMask", e, t, r),
            d = getParamValue("ellipsisMask", e, t, r),
            f = getParamValue("newAxisMask", e, t, r),
            m = getParamValue("shrinkAxisMask", e, t, r),
            g = getParamValue("x", e, t, r);
        if (1 === s.length && g.shape.length > 1) for (var y = 1; y < g.shape.length; y++) {
          s.push(0), l.push(g.shape[y]), p.push(p[0]);
        }
        return [stridedSlice(g, s, l, p, c, h, d, f, m)];

      case "stack":
        return tidy(function () {
          var n = getParamValue("axis", e, t, r),
              a = getParamValue("tensors", e, t, r),
              o = a[0].shape,
              i = a[0].squeeze().shape,
              s = a.map(function (e) {
            var t = util.arraysEqual(e.shape, o);
            if (!t && !util.arraysEqual(e.squeeze().shape, i)) throw new Error("the input tensors shape does not match");
            return t ? e : e.reshape(o);
          });
          return [stack(s, n)];
        });

      case "unstack":
        return tidy(function () {
          var n = getParamValue("axis", e, t, r),
              a = getParamValue("tensor", e, t, r);
          return unstack(a, n);
        });

      case "tile":
        var v = getParamValue("reps", e, t, r);
        return [tile(getParamValue("x", e, t, r), v)];

      case "split":
        n = getParamValue("axis", e, t, r);
        var x = getParamValue("numOrSizeSplits", e, t, r);
        return split$1(getParamValue("x", e, t, r), x, n);

      case "scatterNd":
        i = getParamValue("indices", e, t, r);
        var b = getParamValue("values", e, t, r),
            w = getParamValue("shape", e, t, r);
        return [scatterND(i, b, w)];

      case "gatherNd":
        var N = getParamValue("x", e, t, r);
        return i = getParamValue("indices", e, t, r), [gatherND(N, i)];

      case "sparseToDense":
        i = getParamValue("sparseIndices", e, t, r), w = getParamValue("outputShape", e, t, r);
        var S = getParamValue("sparseValues", e, t, r),
            T = getParamValue("defaultValue", e, t, r);
        return [sparseToDense(i, S, w, T)];

      default:
        throw TypeError("Node type " + e.op + " is not implemented");
    }
  },
      executeOp$14 = function executeOp$14(e, t, r) {
    switch (e.op) {
      case "fft":
        return [fft(getParamValue("x", e, t, r))];

      case "ifft":
        return [ifft(getParamValue("x", e, t, r))];

      case "rfft":
        return [rfft(getParamValue("x", e, t, r))];

      case "irfft":
        return [irfft(getParamValue("x", e, t, r))];

      default:
        throw TypeError("Node type " + e.op + " is not implemented");
    }
  },
      executeOp$15 = function executeOp$15(e, t, r) {
    switch (e.op) {
      case "cast":
        return [cast(getParamValue("x", e, t, r), getParamValue("dtype", e, t, r))];

      case "expandDims":
        var n = getParamValue("axis", e, t, r);
        return [expandDims(getParamValue("x", e, t, r), n)];

      case "squeeze":
        return n = getParamValue("axis", e, t, r), [squeeze(getParamValue("x", e, t, r), n)];

      case "reshape":
        return [reshape(getParamValue("x", e, t, r), getParamValue("shape", e, t, r))];

      case "pad":
        return [pad(getParamValue("x", e, t, r), split$1$1(getParamValue("padding", e, t, r), 2), getParamValue("constantValue", e, t, r))];

      case "spaceToBatchND":
        var a = getParamValue("blockShape", e, t, r),
            o = split$1$1(getParamValue("paddings", e, t, r), 2);
        return [spaceToBatchND(getParamValue("x", e, t, r), a, o)];

      case "batchToSpaceND":
        a = getParamValue("blockShape", e, t, r);
        var i = split$1$1(getParamValue("crops", e, t, r), 2);
        return [batchToSpaceND(getParamValue("x", e, t, r), a, i)];

      case "depthToSpace":
        var s = getParamValue("blockSize", e, t, r),
            u = getParamValue("dataFormat", e, t, r).toUpperCase();
        return [depthToSpace(getParamValue("x", e, t, r), s, u)];

      default:
        throw TypeError("Node type " + e.op + " is not implemented");
    }
  };

  function executeOp$16(e, t, r) {
    switch (e.category) {
      case "arithmetic":
        return executeOp(e, t, r);

      case "basic_math":
        return executeOp$1(e, t, r);

      case "control":
        return executeOp$2(e, t, r);

      case "convolution":
        return executeOp$3(e, t, r);

      case "creation":
        return executeOp$4(e, t, r);

      case "dynamic":
        return executeOp$5(e, t, r);

      case "evaluation":
        return executeOp$6(e, t, r);

      case "image":
        return executeOp$8(e, t, r);

      case "graph":
        return executeOp$7(e, t, r);

      case "logical":
        return executeOp$9(e, t, r);

      case "matrices":
        return executeOp$10(e, t, r);

      case "normalization":
        return executeOp$11(e, t, r);

      case "reduction":
        return executeOp$12(e, t, r);

      case "slice_join":
        return executeOp$13(e, t, r);

      case "spectral":
        return executeOp$14(e, t, r);

      case "transformation":
        return executeOp$15(e, t, r);

      default:
        throw TypeError("Node type " + e.op + " is not implemented");
    }
  }

  var ExecutionContext = function () {
    function e(e, t) {
      this.weightMap = e, this.tensorArrayMap = t, this.rootContext = {
        id: 0,
        frameName: "",
        iterationId: 0
      }, this.contexts = [this.rootContext], this.lastId = 0, this.generateCurrentContextIds();
    }

    return e.prototype.newFrame = function (e, t) {
      return {
        id: e,
        frameName: t,
        iterationId: 0
      };
    }, Object.defineProperty(e.prototype, "currentContext", {
      get: function get() {
        return this.contexts;
      },
      set: function set(e) {
        this.contexts !== e && (this.contexts = e, this.generateCurrentContextIds());
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(e.prototype, "currentContextId", {
      get: function get() {
        return this._currentContextIds[0];
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(e.prototype, "currentContextIds", {
      get: function get() {
        return this._currentContextIds;
      },
      enumerable: !0,
      configurable: !0
    }), e.prototype.generateCurrentContextIds = function () {
      for (var e = [], t = 0; t < this.contexts.length - 1; t++) {
        var r = this.contexts.slice(0, this.contexts.length - t);
        e.push(this.contextIdforContexts(r));
      }

      e.push(""), this._currentContextIds = e;
    }, e.prototype.contextIdforContexts = function (e) {
      return e ? e.map(function (e) {
        return 0 === e.id && 0 === e.iterationId ? "" : e.frameName + "-" + e.iterationId;
      }).join("/") : "";
    }, e.prototype.enterFrame = function (e) {
      this.contexts && (this.lastId++, this.contexts = this.contexts.slice(), this.contexts.push(this.newFrame(this.lastId, e)), this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)));
    }, e.prototype.exitFrame = function () {
      if (!(this.contexts && this.contexts.length > 1)) throw new Error("Cannot exit frame, the context is empty");
      this.contexts = this.contexts.slice(), this.contexts.splice(-1), this.currentContextIds.shift();
    }, e.prototype.nextIteration = function () {
      if (!(this.contexts && this.contexts.length > 0)) throw new Error("Cannot increase frame iteration, the context is empty");
      this.contexts = this.contexts.slice(), this.lastId++;
      var e = Object.assign({}, this.contexts[this.contexts.length - 1]);
      e.iterationId += 1, e.id = this.lastId, this.contexts.splice(-1, 1, e), this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));
    }, e.prototype.getWeight = function (e) {
      return this.weightMap[e];
    }, e.prototype.addTensorArray = function (e) {
      this.tensorArrayMap[e.id] = e;
    }, e.prototype.getTensorArray = function (e) {
      return this.tensorArrayMap[e];
    }, e;
  }(),
      GraphExecutor = function () {
    function e(e) {
      this.graph = e, this.compiledMap = new Map(), this._weightMap = {}, this.SEPERATOR = ",", this.placeholders = e.placeholders, this._outputs = e.outputs, this.compile();
    }

    return Object.defineProperty(e.prototype, "weightMap", {
      get: function get() {
        return this._weightMap;
      },
      set: function set(e) {
        var t = Object.keys(e).map(function (t) {
          return e[t].map(function (e) {
            return e.id;
          });
        });
        this.weightIds = [].concat.apply([], t), this._weightMap = e;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(e.prototype, "inputs", {
      get: function get() {
        return this.placeholders.map(function (e) {
          return {
            name: e.name,
            shape: e.params.shape ? e.params.shape.value : void 0,
            dtype: e.params.dtype ? e.params.dtype.value : void 0
          };
        });
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(e.prototype, "outputs", {
      get: function get() {
        return this._outputs.map(function (e) {
          return {
            name: e.name,
            shape: e.params.shape ? e.params.shape.value : void 0,
            dtype: e.params.dtype ? e.params.dtype.value : void 0
          };
        });
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(e.prototype, "inputNodes", {
      get: function get() {
        return this.placeholders.map(function (e) {
          return e.name;
        });
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(e.prototype, "outputNodes", {
      get: function get() {
        return this.outputs.map(function (e) {
          return e.name;
        });
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(e.prototype, "isControlFlowModel", {
      get: function get() {
        return this.graph.withControlFlow;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(e.prototype, "isDynamicShapeModel", {
      get: function get() {
        return this.graph.withDynamicShape;
      },
      enumerable: !0,
      configurable: !0
    }), e.prototype.compile = function (e) {
      if (!this.graph.withControlFlow && !this.graph.withDynamicShape) {
        var t = [],
            r = e || this.graph.placeholders,
            n = r.map(function (e) {
          return e.name;
        }).sort().join(this.SEPERATOR);

        if (!this.compiledMap.get(n)) {
          for (var a = r.concat(this.graph.weights), o = {}; a.length > 0;) {
            var i = a.pop();
            o[i.name] = !0, t.push(i), i.children.forEach(function (e) {
              !o[e.name] && e.inputNames.every(function (e) {
                var t = getNodeNameAndIndex(e)[0];
                return o[t];
              }) && a.push(e);
            });
          }

          this.compiledMap.set(n, t);
        }
      }
    }, e.prototype.execute = function (e, t, r) {
      var n = this;
      void 0 === t && (t = !0);
      var a = Object.keys(e).sort();
      this.checkInput(e, t), this.checkInputShapeAndType(e, t), this.compile(a.map(function (e) {
        return n.graph.nodes[e];
      }));
      var o = this.calculateOutputs(r);
      this.checkOutput(this.compiledMap.get(a.join(this.SEPERATOR)), o);
      var i = {};
      return tidy(function () {
        for (var t = new ExecutionContext(n._weightMap, i), r = __assign$2({}, n.weightMap, e), s = n.getFrozenTensorIds(r), u = {}, l = n.compiledMap.get(a.join(n.SEPERATOR)), p = 0; p < l.length; p++) {
          var c = l[p];
          if (r[c.name] || (r[c.name] = executeOp$16(c, r, t), n.checkTensorForDisposal(c.name, c, r, t, s, o, u)), o.every(function (e) {
            return !!r[e];
          })) break;
        }

        return n.findOutputs(r, t, o);
      });
    }, e.prototype.getFrozenTensorIds = function (e) {
      var t = [].concat.apply([], Object.keys(e).map(function (t) {
        return e[t];
      }).map(function (e) {
        return e.map(function (e) {
          return e.id;
        });
      }));
      return new Set(t);
    }, e.prototype.checkTensorForDisposal = function (e, t, r, n, a, o, i) {
      "control" !== t.category && -1 === o.indexOf(e) && (r[e].forEach(function (e) {
        null != e && (i[e.id] = (i[e.id] || 0) + t.children.length);
      }), t.inputs.forEach(function (e) {
        if ("control" !== e.category) {
          var t = getTensorsForCurrentContenxt(e.name, r, n);
          null != t && t.forEach(function (e) {
            if (e && !a.has(e.id)) {
              var t = i[e.id];
              1 === t ? (e.dispose(), delete i[e.id]) : null != t && i[e.id]--;
            }
          });
        }
      }));
    }, e.prototype.executeAsync = function (e, t) {
      return __awaiter$2(this, void 0, void 0, function () {
        var r,
            n,
            a,
            o,
            i,
            s,
            u,
            l,
            p = this;
        return __generator$2(this, function (c) {
          switch (c.label) {
            case 0:
              return this.checkInput(e, !1), this.checkInputShapeAndType(e, !1), r = {}, n = new ExecutionContext(this._weightMap, r), a = this.calculateOutputs(t), [4, this.executeWithControlFlow(e, n, a)];

            case 1:
              return o = c.sent(), i = this.findOutputs(o, n, t), s = Object.keys(i).map(function (e) {
                return i[e].id;
              }), u = Object.keys(e).map(function (t) {
                return e[t].map(function (e) {
                  return e.id;
                });
              }), l = [].concat.apply([], u), Object.keys(o).forEach(function (e) {
                o[e].forEach(function (e) {
                  e && -1 === s.indexOf(e.id) && -1 === l.indexOf(e.id) && -1 === p.weightIds.indexOf(e.id) && e.dispose();
                });
              }), [2, i];
          }
        });
      });
    }, e.prototype.executeWithControlFlow = function (e, t, r) {
      return __awaiter$2(this, void 0, void 0, function () {
        var n,
            a,
            o,
            i,
            s,
            u,
            l,
            p,
            c = this;
        return __generator$2(this, function (h) {
          switch (h.label) {
            case 0:
              n = Object.keys(e), a = n.map(function (e) {
                return c.graph.nodes[e];
              }), o = a.concat(this.graph.weights).map(function (e) {
                return {
                  node: e,
                  contexts: t.currentContext
                };
              }), i = __assign$2({}, this.weightMap, e), s = {}, u = this.getFrozenTensorIds(i), l = {}, h.label = 1;

            case 1:
              return o.length > 0 ? (p = this.processStack(a, o, t, i, l, u, r, s), [4, Promise.all(p)]) : [3, 3];

            case 2:
              return h.sent(), [3, 1];

            case 3:
              return [2, i];
          }
        });
      });
    }, e.prototype.processStack = function (e, t, r, n, a, o, i, s) {
      for (var u = this, l = [], p = function p() {
        var p = t.pop();
        r.currentContext = p.contexts;
        var h = "";

        if ("enter" === p.node.op && getParamValue("isConstant", p.node, n, r) && (h = getNodeNameAndIndex(p.node.name, r)[0]), -1 === e.indexOf(p.node)) {
          var d = executeOp$16(p.node, n, r);
          h || (h = getNodeNameAndIndex(p.node.name, r)[0]);
          var f = r.currentContext;
          d instanceof Promise ? l.push(d.then(function (e) {
            return n[h] = e, r.currentContext = f, u.checkTensorForDisposal(h, p.node, n, r, o, i, s), u.processChildNodes(p.node, t, r, n, a), e;
          })) : (n[h] = d, c.checkTensorForDisposal(h, p.node, n, r, o, i, s), c.processChildNodes(p.node, t, r, n, a));
        } else c.processChildNodes(p.node, t, r, n, a);
      }, c = this; t.length > 0;) {
        p();
      }

      return l;
    }, e.prototype.processChildNodes = function (e, t, r, n, a) {
      e.children.forEach(function (e) {
        var o = getNodeNameAndIndex(e.name, r)[0];
        a[o] || ("merge" === e.op ? e.inputNames.some(function (e) {
          return !!getTensor(e, n, r);
        }) && (a[o] = !0, t.push({
          contexts: r.currentContext,
          node: e
        })) : e.inputNames.every(function (e) {
          return !!getTensor(e, n, r);
        }) && (a[o] = !0, t.push({
          contexts: r.currentContext,
          node: e
        })));
      });
    }, e.prototype.calculateOutputs = function (e) {
      return !e || e instanceof Array || (e = [e]), e || this.graph.outputs.map(function (e) {
        return e.name;
      });
    }, e.prototype.findOutputs = function (e, t, r) {
      return this.calculateOutputs(r).reduce(function (r, n) {
        return r[n] = getTensor(n, e, t), r;
      }, {});
    }, e.prototype.dispose = function () {
      var e = this;
      Object.keys(this.weightMap).forEach(function (t) {
        return e.weightMap[t].forEach(function (e) {
          return e.dispose();
        });
      });
    }, e.prototype.checkInputShapeAndType = function (e, t) {
      void 0 === t && (t = !0), this.placeholders.forEach(function (r) {
        var n = e[r.name];

        if (t || n) {
          var a = n[0];

          if (r.params.shape && r.params.shape.value) {
            var o = r.params.shape.value,
                i = o.length === a.shape.length && a.shape.every(function (e, t) {
              return -1 === o[t] || o[t] === e;
            });
            util.assert(i, "The shape of dict['" + r.name + "'] provided in model.execute(dict) must be [" + o + "], but was [" + a.shape + "]");
          }

          r.params.dtype && r.params.dtype.value && util.assert(a.dtype === r.params.dtype.value, "The dtype of dict['" + r.name + "'] provided in model.execute(dict) must be " + r.params.dtype.value + ", but was " + a.dtype);
        }
      });
    }, e.prototype.checkInput = function (e, t) {
      var r = this;
      void 0 === t && (t = !0);
      var n = Object.keys(e),
          a = [],
          o = [];
      this.inputNodes.forEach(function (e) {
        -1 === n.indexOf(e) && a.push(e);
      }), n.forEach(function (e) {
        -1 === r.inputNodes.indexOf(e) && o.push(e);
      });
      var i = o.filter(function (e) {
        return !r.graph.nodes[e];
      });
      if (a.length > 0 && t) throw new Error("The dict provided in model.execute(dict) has the keys [" + n + "], but is missing the required keys: [" + a + "].");
      if (o.length > 0 && t) throw new Error("The dict provided in model.execute(dict) has unused keys: [" + o + "]. Please provide only the following keys: [" + this.inputNodes + "].");
      if (i.length > 0) throw new Error("The dict provided in model.execute(dict) has keys: [" + i + "] not part of model graph.");
    }, e.prototype.checkOutput = function (e, t) {
      var r = e.map(function (e) {
        return e.name;
      }),
          n = [];
      if (t.forEach(function (e) {
        var t = parseNodeName(e)[0];
        -1 === r.indexOf(t) && n.push(t);
      }), n.length > 0) throw new Error("The following outputs are not generated by the execution: [" + n + "].");
    }, e;
  }(),
      TFHUB_SEARCH_PARAM = "?tfjs-format=file",
      DEFAULT_MODEL_NAME = "tensorflowjs_model.pb",
      DEFAULT_MANIFEST_NAME = "weights_manifest.json",
      FrozenModel = function () {
    function e(e, t, r, n, a) {
      this.modelUrl = e, this.weightManifestUrl = t, this.requestOption = r, this.weightPrefix = n, this.onProgress = a, this.version = "n/a";
    }

    return Object.defineProperty(e.prototype, "modelVersion", {
      get: function get() {
        return this.version;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(e.prototype, "inputNodes", {
      get: function get() {
        return this.executor.inputNodes;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(e.prototype, "outputNodes", {
      get: function get() {
        return this.executor.outputNodes;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(e.prototype, "inputs", {
      get: function get() {
        return this.executor.inputs;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(e.prototype, "outputs", {
      get: function get() {
        return this.executor.outputs;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(e.prototype, "weights", {
      get: function get() {
        return this.executor.weightMap;
      },
      enumerable: !0,
      configurable: !0
    }), e.prototype.findIOHandler = function () {
      var e = [this.modelUrl, this.weightManifestUrl];
      if (this.requestOption || this.weightPrefix) this.handler = io.browserHTTPRequest(e, this.requestOption, this.weightPrefix, null, this.onProgress);else {
        var t = io.getLoadHandlers(e, this.onProgress);
        if (0 === t.length) t.push(io.browserHTTPRequest(e, this.requestOption, this.weightPrefix, null, this.onProgress));else if (t.length > 1) throw new Error("Found more than one (" + t.length + ") load handlers for URL '" + [e] + "'");
        this.handler = t[0];
      }
    }, e.prototype.load = function () {
      return __awaiter$2(this, void 0, void 0, function () {
        var e, t, r;
        return __generator$2(this, function (n) {
          switch (n.label) {
            case 0:
              if (this.findIOHandler(), null == this.handler.load) throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
              return [4, this.handler.load()];

            case 1:
              return e = n.sent(), t = compiled_api_1.GraphDef.decode(new Uint8Array(e.modelTopology)), this.version = t.versions.producer + "." + t.versions.minConsumer, r = io.decodeWeights(e.weightData, e.weightSpecs), this.executor = new GraphExecutor(OperationMapper.Instance.transformGraph(t)), this.executor.weightMap = this.convertTensorMapToTensorsMap(r), [2, !0];
          }
        });
      });
    }, e.prototype.predict = function (e, t) {
      return this.execute_(e, !0, this.outputNodes);
    }, e.prototype.constructTensorMap = function (e) {
      var t = e instanceof Tensor ? [e] : e;
      if (t.length !== this.inputNodes.length) throw new Error("Input tensor count mismatch,the frozen model has " + this.inputNodes.length + " placeholders, while there are " + t.length + " input tensors.");
      return this.inputNodes.reduce(function (e, r, n) {
        return e[r] = t[n], e;
      }, {});
    }, e.prototype.execute = function (e, t) {
      return this.execute_(e, !1, t);
    }, e.prototype.execute_ = function (e, t, r) {
      if (void 0 === t && (t = !0), r = r || this.outputNodes, (e instanceof Tensor || Array.isArray(e)) && (e = this.constructTensorMap(e)), this.executor.isControlFlowModel || this.executor.isDynamicShapeModel) throw new Error("The model contains control flow or dynamic shape ops, please use executeAsync method");
      var n = this.executor.execute(this.convertTensorMapToTensorsMap(e), t, r),
          a = Object.keys(n);
      return Array.isArray(r) && r.length > 1 ? r.map(function (e) {
        return n[e];
      }) : n[a[0]];
    }, e.prototype.executeAsync = function (e, t) {
      return __awaiter$2(this, void 0, void 0, function () {
        var r, n;
        return __generator$2(this, function (a) {
          switch (a.label) {
            case 0:
              if (!this.executor.isControlFlowModel && !this.executor.isDynamicShapeModel) throw new Error("The model does not contain control flow or dynamic shape ops, please use execute method for better performance.");
              return t = t || this.outputNodes, (e instanceof Tensor || Array.isArray(e)) && (e = this.constructTensorMap(e)), [4, this.executor.executeAsync(this.convertTensorMapToTensorsMap(e), t)];

            case 1:
              return r = a.sent(), n = Object.keys(r), [2, Array.isArray(t) && t.length > 1 ? t.map(function (e) {
                return r[e];
              }) : r[n[0]]];
          }
        });
      });
    }, e.prototype.convertTensorMapToTensorsMap = function (e) {
      return Object.keys(e).reduce(function (t, r) {
        return t[r] = [e[r]], t;
      }, {});
    }, e.prototype.dispose = function () {
      this.executor.dispose();
    }, e;
  }(),
      tensorflow_json;

  function loadFrozenModel(e, t, r, n) {
    return __awaiter$2(this, void 0, void 0, function () {
      var a;
      return __generator$2(this, function (o) {
        switch (o.label) {
          case 0:
            return [4, (a = new FrozenModel(e, t, r, null, n)).load()];

          case 1:
            return o.sent(), [2, a];
        }
      });
    });
  }

  function loadTfHubModule(e, t, r) {
    return __awaiter$2(this, void 0, void 0, function () {
      return __generator$2(this, function (n) {
        return e.endsWith("/") || (e += "/"), [2, loadFrozenModel("" + e + DEFAULT_MODEL_NAME + TFHUB_SEARCH_PARAM, "" + e + DEFAULT_MANIFEST_NAME + TFHUB_SEARCH_PARAM, t, r)];
      });
    });
  }

  !function (e) {
    !function (e) {
      e[e.DT_INVALID = 0] = "DT_INVALID", e[e.DT_FLOAT = 1] = "DT_FLOAT", e[e.DT_DOUBLE = 2] = "DT_DOUBLE", e[e.DT_INT32 = 3] = "DT_INT32", e[e.DT_UINT8 = 4] = "DT_UINT8", e[e.DT_INT16 = 5] = "DT_INT16", e[e.DT_INT8 = 6] = "DT_INT8", e[e.DT_STRING = 7] = "DT_STRING", e[e.DT_COMPLEX64 = 8] = "DT_COMPLEX64", e[e.DT_INT64 = 9] = "DT_INT64", e[e.DT_BOOL = 10] = "DT_BOOL", e[e.DT_QINT8 = 11] = "DT_QINT8", e[e.DT_QUINT8 = 12] = "DT_QUINT8", e[e.DT_QINT32 = 13] = "DT_QINT32", e[e.DT_BFLOAT16 = 14] = "DT_BFLOAT16", e[e.DT_FLOAT_REF = 101] = "DT_FLOAT_REF", e[e.DT_DOUBLE_REF = 102] = "DT_DOUBLE_REF", e[e.DT_INT32_REF = 103] = "DT_INT32_REF", e[e.DT_UINT8_REF = 104] = "DT_UINT8_REF", e[e.DT_INT16_REF = 105] = "DT_INT16_REF", e[e.DT_INT8_REF = 106] = "DT_INT8_REF", e[e.DT_STRING_REF = 107] = "DT_STRING_REF", e[e.DT_COMPLEX64_REF = 108] = "DT_COMPLEX64_REF", e[e.DT_INT64_REF = 109] = "DT_INT64_REF", e[e.DT_BOOL_REF = 110] = "DT_BOOL_REF", e[e.DT_QINT8_REF = 111] = "DT_QINT8_REF", e[e.DT_QUINT8_REF = 112] = "DT_QUINT8_REF", e[e.DT_QINT32_REF = 113] = "DT_QINT32_REF", e[e.DT_BFLOAT16_REF = 114] = "DT_BFLOAT16_REF";
    }(e.DataType || (e.DataType = {})), function (e) {
      !function (e) {
        e[e.LEGACY = 0] = "LEGACY", e[e.V1 = 1] = "V1", e[e.V2 = 2] = "V2";
      }(e.CheckpointFormatVersion || (e.CheckpointFormatVersion = {}));
    }(e.SaverDef || (e.SaverDef = {}));
  }(tensorflow_json || (tensorflow_json = {}));

  var CONTROL_FLOW_OPS$1 = ["Switch", "Merge", "Enter", "Exit", "NextIteration"],
      DYNAMIC_SHAPE_OPS$1 = ["NonMaxSuppressionV2", "NonMaxSuppressionV3", "Where"],
      OperationMapper$1 = function () {
    function e() {
      var e = [arithmetic, basicMath, control, convolution, creation, dynamic, evaluation, logical, image$1, graph, matrices, normalization, reduction, sliceJoin, spectral, transformation],
          t = [].concat.apply([], e.map(function (e) {
        return e.json;
      }));
      this.opMappers = t.reduce(function (e, t) {
        return e[t.tfOpName] = t, e;
      }, {});
    }

    return Object.defineProperty(e, "Instance", {
      get: function get() {
        return this._instance || (this._instance = new this());
      },
      enumerable: !0,
      configurable: !0
    }), e.prototype.isControlFlow = function (e) {
      return CONTROL_FLOW_OPS$1.some(function (t) {
        return t === e.op;
      });
    }, e.prototype.isDynamicShape = function (e) {
      return DYNAMIC_SHAPE_OPS$1.some(function (t) {
        return t === e.op;
      });
    }, e.prototype.transformGraph = function (e) {
      var t = this,
          r = !1,
          n = !1,
          a = [],
          o = [],
          i = e.node.reduce(function (e, i) {
        return e[i.name] = t.mapNode(i), t.isControlFlow(i) && (r = !0), t.isDynamicShape(i) && (n = !0), "Placeholder" === i.op && a.push(e[i.name]), "Const" === i.op && o.push(e[i.name]), e;
      }, {}),
          s = [],
          u = [];
      return Object.keys(i).forEach(function (e) {
        var t = i[e];
        t.inputNames.forEach(function (e) {
          var r = getNodeNameAndIndex(e)[0];
          t.inputs.push(i[r]), i[r].children.push(t);
        }), 0 === t.inputs.length && s.push(t);
      }), Object.keys(i).forEach(function (e) {
        var t = i[e];
        0 === t.children.length && u.push(t);
      }), {
        nodes: i,
        inputs: s,
        outputs: u,
        weights: o,
        placeholders: a,
        withControlFlow: r,
        withDynamicShape: n
      };
    }, e.prototype.mapNode = function (e) {
      var t = this,
          r = this.opMappers[e.op];
      if (void 0 === r) throw new Error("Tensorflow Op is not supported: " + e.op);
      var n = {
        name: e.name,
        op: r.dlOpName,
        category: r.category,
        inputNames: (e.input || []).map(function (e) {
          return e.startsWith("^") ? e.substr(1) : e;
        }),
        inputs: [],
        children: [],
        params: {}
      };
      return r.params && (n.params = r.params.reduce(function (r, n) {
        var a = n.tfInputIndex,
            o = n.tfInputParamLength,
            i = n.type,
            s = void 0;
        if (void 0 === a) switch (n.type) {
          case "string":
            void 0 === (s = t.getStringParam(e.attr, n.tfParamName, n.defaultValue)) && n.tfParamNameDeprecated && (s = t.getStringParam(e.attr, n.tfParamNameDeprecated, n.defaultValue));
            break;

          case "number":
            void 0 === (s = t.getNumberParam(e.attr, n.tfParamName, n.defaultValue || 0)) && n.tfParamNameDeprecated && (s = t.getNumberParam(e.attr, n.tfParamNameDeprecated, n.defaultValue));
            break;

          case "number[]":
            void 0 === (s = t.getNumericArrayParam(e.attr, n.tfParamName, n.defaultValue)) && n.tfParamNameDeprecated && (s = t.getNumericArrayParam(e.attr, n.tfParamNameDeprecated, n.defaultValue));
            break;

          case "bool":
            void 0 === (s = t.getBoolParam(e.attr, n.tfParamName, n.defaultValue)) && n.tfParamNameDeprecated && (s = t.getBoolParam(e.attr, n.tfParamNameDeprecated, n.defaultValue));
            break;

          case "shape":
            void 0 === (s = t.getTensorShapeParam(e.attr, n.tfParamName, n.defaultValue)) && n.tfParamNameDeprecated && (s = t.getTensorShapeParam(e.attr, n.tfParamNameDeprecated, n.defaultValue));
            break;

          case "dtype":
            void 0 === (s = t.getDtypeParam(e.attr, n.tfParamName, n.defaultValue)) && n.tfParamNameDeprecated && (s = t.getDtypeParam(e.attr, n.tfParamNameDeprecated, n.defaultValue));
            break;

          case "tensor":
          case "tensors":
            break;

          default:
            throw new Error("Unsupported param type: " + n.type + " for op: " + e.op);
        }
        return r[n.dlParamName] = {
          value: s,
          inputIndex: a,
          type: i,
          inputParamLength: o
        }, r;
      }, {})), n;
    }, e.prototype.decodeBase64 = function (e) {
      if ("undefined" != typeof atob) return atob(e);
      if ("undefined" != typeof Buffer) return new Buffer(e, "base64").toString();
      throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()");
    }, e.prototype.getStringParam = function (e, t, r, n) {
      void 0 === n && (n = !1);
      var a = e[t];

      if (void 0 !== a) {
        var o = Array.isArray(a.s) ? String.fromCharCode.apply(null, a.s) : this.decodeBase64(a.s);
        return n ? o : o.toLowerCase();
      }

      return r;
    }, e.prototype.getBoolParam = function (e, t, r) {
      var n = e[t];
      return n ? n.b : r;
    }, e.prototype.getNumberParam = function (e, t, r) {
      var n = e[t] || {},
          a = n.i ? n.i : n.f ? n.f : r;
      return "number" == typeof a ? a : parseInt(a, 10);
    }, e.prototype.getDtypeParam = function (e, t, r) {
      var n = e[t];

      if (n && n.type) {
        var a = n.type;

        switch ("string" == typeof n.type && (a = tensorflow_json.DataType[n.type]), a) {
          case tensorflow_json.DataType.DT_FLOAT:
            return "float32";

          case tensorflow_json.DataType.DT_INT32:
            return "int32";

          case tensorflow_json.DataType.DT_BOOL:
            return "bool";

          default:
            return r;
        }
      }

      return r;
    }, e.prototype.getTensorShapeParam = function (e, t, r) {
      var n = e[t];

      if (n && n.shape) {
        if (n.shape.unknownRank) return;
        if (null != n.shape.dim) return n.shape.dim.map(function (e) {
          return "number" == typeof e.size ? e.size : parseInt(e.size, 10);
        });
      }

      return r;
    }, e.prototype.getNumericArrayParam = function (e, t, r) {
      var n = e[t];
      return n ? (n.list.f && n.list.f.length ? n.list.f : n.list.i).map(function (e) {
        return "number" == typeof e ? e : parseInt(e, 10);
      }) : r;
    }, e;
  }(),
      FrozenModel$1 = function () {
    function e(e, t, r, n) {
      this.modelUrl = e, this.requestOption = t, this.weightPrefix = r, this.onProgress = n, this.version = "n/a";
    }

    return Object.defineProperty(e.prototype, "modelVersion", {
      get: function get() {
        return this.version;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(e.prototype, "inputNodes", {
      get: function get() {
        return this.executor.inputNodes;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(e.prototype, "outputNodes", {
      get: function get() {
        return this.executor.outputNodes;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(e.prototype, "inputs", {
      get: function get() {
        return this.executor.inputs;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(e.prototype, "outputs", {
      get: function get() {
        return this.executor.outputs;
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(e.prototype, "weights", {
      get: function get() {
        return this.executor.weightMap;
      },
      enumerable: !0,
      configurable: !0
    }), e.prototype.findIOHandler = function () {
      var e = this.modelUrl;
      if (this.requestOption || this.weightPrefix) this.handler = io.browserHTTPRequest(e, this.requestOption, this.weightPrefix, null, this.onProgress);else {
        var t = io.getLoadHandlers(e, this.onProgress);
        if (0 === t.length) t.push(io.browserHTTPRequest(e, this.requestOption, this.weightPrefix, null, this.onProgress));else if (t.length > 1) throw new Error("Found more than one (" + t.length + ") load handlers for URL '" + [e] + "'");
        this.handler = t[0];
      }
    }, e.prototype.load = function () {
      return __awaiter$2(this, void 0, void 0, function () {
        var e, t, r;
        return __generator$2(this, function (n) {
          switch (n.label) {
            case 0:
              if (this.findIOHandler(), null == this.handler.load) throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
              return [4, this.handler.load()];

            case 1:
              return e = n.sent(), t = e.modelTopology, this.version = t.versions.producer + "." + t.versions.minConsumer, r = io.decodeWeights(e.weightData, e.weightSpecs), this.executor = new GraphExecutor(OperationMapper$1.Instance.transformGraph(t)), this.executor.weightMap = this.convertTensorMapToTensorsMap(r), [2, !0];
          }
        });
      });
    }, e.prototype.predict = function (e, t) {
      return this.execute_(e, !0, this.outputNodes);
    }, e.prototype.constructTensorMap = function (e) {
      var t = e instanceof Tensor ? [e] : e;
      if (t.length !== this.inputNodes.length) throw new Error("Input tensor count mismatch,the frozen model has " + this.inputNodes.length + " placeholders, while there are " + t.length + " input tensors.");
      return this.inputNodes.reduce(function (e, r, n) {
        return e[r] = t[n], e;
      }, {});
    }, e.prototype.execute = function (e, t) {
      return this.execute_(e, !1, t);
    }, e.prototype.execute_ = function (e, t, r) {
      if (void 0 === t && (t = !0), r = r || this.outputNodes, (e instanceof Tensor || Array.isArray(e)) && (e = this.constructTensorMap(e)), this.executor.isControlFlowModel || this.executor.isDynamicShapeModel) throw new Error("The model contains control flow or dynamic shape ops, please use executeAsync method");
      var n = this.executor.execute(this.convertTensorMapToTensorsMap(e), t, r),
          a = Object.keys(n);
      return Array.isArray(r) && r.length > 1 ? r.map(function (e) {
        return n[e];
      }) : n[a[0]];
    }, e.prototype.executeAsync = function (e, t) {
      return __awaiter$2(this, void 0, void 0, function () {
        var r, n;
        return __generator$2(this, function (a) {
          switch (a.label) {
            case 0:
              if (!this.executor.isControlFlowModel && !this.executor.isDynamicShapeModel) throw new Error("The model does not contain control flow or dynamic shape ops, please use execute method for better performance.");
              return t = t || this.outputNodes, (e instanceof Tensor || Array.isArray(e)) && (e = this.constructTensorMap(e)), [4, this.executor.executeAsync(this.convertTensorMapToTensorsMap(e), t)];

            case 1:
              return r = a.sent(), n = Object.keys(r), [2, Array.isArray(t) && t.length > 1 ? t.map(function (e) {
                return r[e];
              }) : r[n[0]]];
          }
        });
      });
    }, e.prototype.convertTensorMapToTensorsMap = function (e) {
      return Object.keys(e).reduce(function (t, r) {
        return t[r] = [e[r]], t;
      }, {});
    }, e.prototype.dispose = function () {
      this.executor.dispose();
    }, e;
  }();

  function loadFrozenModel$1(e, t, r) {
    return __awaiter$2(this, void 0, void 0, function () {
      var n;
      return __generator$2(this, function (a) {
        switch (a.label) {
          case 0:
            return [4, (n = new FrozenModel$1(e, t, null, r)).load()];

          case 1:
            return a.sent(), [2, n];
        }
      });
    });
  }

  var version$2 = "0.8.4";

  function loadFrozenModel$2(e, t, r, n) {
    return deprecationWarn("tf.loadFrozenModel() is going away. Use tf.loadGraphModel() instead, and note the positional argument changes."), e && e.endsWith(".json") ? loadFrozenModel$1(e, r, n) : (null != e && null == t && (t = getWeightsManifestUrl(e)), loadFrozenModel(e, t, r, n));
  }

  function getWeightsManifestUrl(e) {
    var t;
    return null != e && (t = e.substr(0, e.lastIndexOf("/")) + "/" + DEFAULT_MANIFEST_NAME), t;
  }

  function loadGraphModel(e, t) {
    if (void 0 === t && (t = {}), null == t && (t = {}), t.fromTFHub) return loadTfHubModule(e, t.requestInit, t.onProgress);
    var r = void 0;
    return e && e.endsWith(".json") ? loadFrozenModel$1(e, t.requestInit, t.onProgress) : (null != e && null == r && (r = getWeightsManifestUrl(e)), loadFrozenModel(e, r, t.requestInit, t.onProgress));
  }

  var _extendStatics$2 = function extendStatics$2(e, t) {
    return (_extendStatics$2 = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (e, t) {
      e.__proto__ = t;
    } || function (e, t) {
      for (var r in t) {
        t.hasOwnProperty(r) && (e[r] = t[r]);
      }
    })(e, t);
  };

  function __extends$2(e, t) {
    function r() {
      this.constructor = e;
    }

    _extendStatics$2(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r());
  }

  function __awaiter$3(e, t, r, n) {
    return new (r || (r = Promise))(function (a, o) {
      function i(e) {
        try {
          u(n.next(e));
        } catch (e) {
          o(e);
        }
      }

      function s(e) {
        try {
          u(n.throw(e));
        } catch (e) {
          o(e);
        }
      }

      function u(e) {
        e.done ? a(e.value) : new r(function (t) {
          t(e.value);
        }).then(i, s);
      }

      u((n = n.apply(e, t || [])).next());
    });
  }

  function __generator$3(e, t) {
    var r,
        n,
        a,
        o,
        i = {
      label: 0,
      sent: function sent() {
        if (1 & a[0]) throw a[1];
        return a[1];
      },
      trys: [],
      ops: []
    };
    return o = {
      next: s(0),
      throw: s(1),
      return: s(2)
    }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {
      return this;
    }), o;

    function s(o) {
      return function (s) {
        return function (o) {
          if (r) throw new TypeError("Generator is already executing.");

          for (; i;) {
            try {
              if (r = 1, n && (a = 2 & o[0] ? n.return : o[0] ? n.throw || ((a = n.return) && a.call(n), 0) : n.next) && !(a = a.call(n, o[1])).done) return a;

              switch (n = 0, a && (o = [2 & o[0], a.value]), o[0]) {
                case 0:
                case 1:
                  a = o;
                  break;

                case 4:
                  return i.label++, {
                    value: o[1],
                    done: !1
                  };

                case 5:
                  i.label++, n = o[1], o = [0];
                  continue;

                case 7:
                  o = i.ops.pop(), i.trys.pop();
                  continue;

                default:
                  if (!(a = (a = i.trys).length > 0 && a[a.length - 1]) && (6 === o[0] || 2 === o[0])) {
                    i = 0;
                    continue;
                  }

                  if (3 === o[0] && (!a || o[1] > a[0] && o[1] < a[3])) {
                    i.label = o[1];
                    break;
                  }

                  if (6 === o[0] && i.label < a[1]) {
                    i.label = a[1], a = o;
                    break;
                  }

                  if (a && i.label < a[2]) {
                    i.label = a[2], i.ops.push(o);
                    break;
                  }

                  a[2] && i.ops.pop(), i.trys.pop();
                  continue;
              }

              o = t.call(e, i);
            } catch (e) {
              o = [6, e], n = 0;
            } finally {
              r = a = 0;
            }
          }

          if (5 & o[0]) throw o[1];
          return {
            value: o[0] ? o[1] : void 0,
            done: !0
          };
        }([o, s]);
      };
    }
  }

  var commonjsGlobal$2 = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};

  function unwrapExports(e) {
    return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
  }

  function createCommonjsModule$2(e, t) {
    return e(t = {
      exports: {}
    }, t.exports), t.exports;
  }

  var alea$1 = createCommonjsModule$2(function (e) {
    !function (e, t, r) {
      function n(e, t) {
        return t.c = e.c, t.s0 = e.s0, t.s1 = e.s1, t.s2 = e.s2, t;
      }

      function a(e, t) {
        var r = new function (e) {
          var t,
              r = this,
              n = (t = 4022871197, function (e) {
            e = e.toString();

            for (var r = 0; r < e.length; r++) {
              var n = .02519603282416938 * (t += e.charCodeAt(r));
              n -= t = n >>> 0, t = (n *= t) >>> 0, t += 4294967296 * (n -= t);
            }

            return 2.3283064365386963e-10 * (t >>> 0);
          });
          r.next = function () {
            var e = 2091639 * r.s0 + 2.3283064365386963e-10 * r.c;
            return r.s0 = r.s1, r.s1 = r.s2, r.s2 = e - (r.c = 0 | e);
          }, r.c = 1, r.s0 = n(" "), r.s1 = n(" "), r.s2 = n(" "), r.s0 -= n(e), r.s0 < 0 && (r.s0 += 1), r.s1 -= n(e), r.s1 < 0 && (r.s1 += 1), r.s2 -= n(e), r.s2 < 0 && (r.s2 += 1), n = null;
        }(e),
            a = t && t.state,
            o = r.next;
        return o.int32 = function () {
          return 4294967296 * r.next() | 0;
        }, o.double = function () {
          return o() + 1.1102230246251565e-16 * (2097152 * o() | 0);
        }, o.quick = o, a && ("object" == _typeof(a) && n(a, r), o.state = function () {
          return n(r, {});
        }), o;
      }

      t && t.exports ? t.exports = a : this.alea = a;
    }(0, e);
  }),
      xor128$1 = createCommonjsModule$2(function (e) {
    !function (e, t, r) {
      function n(e, t) {
        return t.x = e.x, t.y = e.y, t.z = e.z, t.w = e.w, t;
      }

      function a(e, t) {
        var r = new function (e) {
          var t = this,
              r = "";
          t.x = 0, t.y = 0, t.z = 0, t.w = 0, t.next = function () {
            var e = t.x ^ t.x << 11;
            return t.x = t.y, t.y = t.z, t.z = t.w, t.w ^= t.w >>> 19 ^ e ^ e >>> 8;
          }, e === (0 | e) ? t.x = e : r += e;

          for (var n = 0; n < r.length + 64; n++) {
            t.x ^= 0 | r.charCodeAt(n), t.next();
          }
        }(e),
            a = t && t.state,
            o = function o() {
          return (r.next() >>> 0) / 4294967296;
        };

        return o.double = function () {
          do {
            var e = ((r.next() >>> 11) + (r.next() >>> 0) / 4294967296) / (1 << 21);
          } while (0 === e);

          return e;
        }, o.int32 = r.next, o.quick = o, a && ("object" == _typeof(a) && n(a, r), o.state = function () {
          return n(r, {});
        }), o;
      }

      t && t.exports ? t.exports = a : this.xor128 = a;
    }(0, e);
  }),
      xorwow$1 = createCommonjsModule$2(function (e) {
    !function (e, t, r) {
      function n(e, t) {
        return t.x = e.x, t.y = e.y, t.z = e.z, t.w = e.w, t.v = e.v, t.d = e.d, t;
      }

      function a(e, t) {
        var r = new function (e) {
          var t = this,
              r = "";
          t.next = function () {
            var e = t.x ^ t.x >>> 2;
            return t.x = t.y, t.y = t.z, t.z = t.w, t.w = t.v, (t.d = t.d + 362437 | 0) + (t.v = t.v ^ t.v << 4 ^ e ^ e << 1) | 0;
          }, t.x = 0, t.y = 0, t.z = 0, t.w = 0, t.v = 0, e === (0 | e) ? t.x = e : r += e;

          for (var n = 0; n < r.length + 64; n++) {
            t.x ^= 0 | r.charCodeAt(n), n == r.length && (t.d = t.x << 10 ^ t.x >>> 4), t.next();
          }
        }(e),
            a = t && t.state,
            o = function o() {
          return (r.next() >>> 0) / 4294967296;
        };

        return o.double = function () {
          do {
            var e = ((r.next() >>> 11) + (r.next() >>> 0) / 4294967296) / (1 << 21);
          } while (0 === e);

          return e;
        }, o.int32 = r.next, o.quick = o, a && ("object" == _typeof(a) && n(a, r), o.state = function () {
          return n(r, {});
        }), o;
      }

      t && t.exports ? t.exports = a : this.xorwow = a;
    }(0, e);
  }),
      xorshift7$1 = createCommonjsModule$2(function (e) {
    !function (e, t, r) {
      function n(e, t) {
        return t.x = e.x.slice(), t.i = e.i, t;
      }

      function a(e, t) {
        null == e && (e = +new Date());

        var r = new function (e) {
          var t = this;
          t.next = function () {
            var e,
                r,
                n = t.x,
                a = t.i;
            return e = n[a], r = (e ^= e >>> 7) ^ e << 24, r ^= (e = n[a + 1 & 7]) ^ e >>> 10, r ^= (e = n[a + 3 & 7]) ^ e >>> 3, r ^= (e = n[a + 4 & 7]) ^ e << 7, e = n[a + 7 & 7], r ^= (e ^= e << 13) ^ e << 9, n[a] = r, t.i = a + 1 & 7, r;
          }, function (e, t) {
            var r,
                n = [];
            if (t === (0 | t)) n[0] = t;else for (t = "" + t, r = 0; r < t.length; ++r) {
              n[7 & r] = n[7 & r] << 15 ^ t.charCodeAt(r) + n[r + 1 & 7] << 13;
            }

            for (; n.length < 8;) {
              n.push(0);
            }

            for (r = 0; r < 8 && 0 === n[r]; ++r) {
              ;
            }

            for (8 == r ? n[7] = -1 : n[r], e.x = n, e.i = 0, r = 256; r > 0; --r) {
              e.next();
            }
          }(t, e);
        }(e),
            a = t && t.state,
            o = function o() {
          return (r.next() >>> 0) / 4294967296;
        };

        return o.double = function () {
          do {
            var e = ((r.next() >>> 11) + (r.next() >>> 0) / 4294967296) / (1 << 21);
          } while (0 === e);

          return e;
        }, o.int32 = r.next, o.quick = o, a && (a.x && n(a, r), o.state = function () {
          return n(r, {});
        }), o;
      }

      t && t.exports ? t.exports = a : this.xorshift7 = a;
    }(0, e);
  }),
      xor4096$1 = createCommonjsModule$2(function (e) {
    !function (e, t, r) {
      function n(e, t) {
        return t.i = e.i, t.w = e.w, t.X = e.X.slice(), t;
      }

      function a(e, t) {
        null == e && (e = +new Date());

        var r = new function (e) {
          var t = this;
          t.next = function () {
            var e,
                r,
                n = t.w,
                a = t.X,
                o = t.i;
            return t.w = n = n + 1640531527 | 0, r = a[o + 34 & 127], e = a[o = o + 1 & 127], r ^= r << 13, e ^= e << 17, r ^= r >>> 15, e ^= e >>> 12, r = a[o] = r ^ e, t.i = o, r + (n ^ n >>> 16) | 0;
          }, function (e, t) {
            var r,
                n,
                a,
                o,
                i,
                s = [],
                u = 128;

            for (t === (0 | t) ? (n = t, t = null) : (t += "\0", n = 0, u = Math.max(u, t.length)), a = 0, o = -32; o < u; ++o) {
              t && (n ^= t.charCodeAt((o + 32) % t.length)), 0 === o && (i = n), n ^= n << 10, n ^= n >>> 15, n ^= n << 4, n ^= n >>> 13, o >= 0 && (i = i + 1640531527 | 0, a = 0 == (r = s[127 & o] ^= n + i) ? a + 1 : 0);
            }

            for (a >= 128 && (s[127 & (t && t.length || 0)] = -1), a = 127, o = 512; o > 0; --o) {
              n = s[a + 34 & 127], r = s[a = a + 1 & 127], n ^= n << 13, r ^= r << 17, n ^= n >>> 15, r ^= r >>> 12, s[a] = n ^ r;
            }

            e.w = i, e.X = s, e.i = a;
          }(t, e);
        }(e),
            a = t && t.state,
            o = function o() {
          return (r.next() >>> 0) / 4294967296;
        };

        return o.double = function () {
          do {
            var e = ((r.next() >>> 11) + (r.next() >>> 0) / 4294967296) / (1 << 21);
          } while (0 === e);

          return e;
        }, o.int32 = r.next, o.quick = o, a && (a.X && n(a, r), o.state = function () {
          return n(r, {});
        }), o;
      }

      t && t.exports ? t.exports = a : this.xor4096 = a;
    }(0, e);
  }),
      tychei$1 = createCommonjsModule$2(function (e) {
    !function (e, t, r) {
      function n(e, t) {
        return t.a = e.a, t.b = e.b, t.c = e.c, t.d = e.d, t;
      }

      function a(e, t) {
        var r = new function (e) {
          var t = this,
              r = "";
          t.next = function () {
            var e = t.b,
                r = t.c,
                n = t.d,
                a = t.a;
            return e = e << 25 ^ e >>> 7 ^ r, r = r - n | 0, n = n << 24 ^ n >>> 8 ^ a, a = a - e | 0, t.b = e = e << 20 ^ e >>> 12 ^ r, t.c = r = r - n | 0, t.d = n << 16 ^ r >>> 16 ^ a, t.a = a - e | 0;
          }, t.a = 0, t.b = 0, t.c = -1640531527, t.d = 1367130551, e === Math.floor(e) ? (t.a = e / 4294967296 | 0, t.b = 0 | e) : r += e;

          for (var n = 0; n < r.length + 20; n++) {
            t.b ^= 0 | r.charCodeAt(n), t.next();
          }
        }(e),
            a = t && t.state,
            o = function o() {
          return (r.next() >>> 0) / 4294967296;
        };

        return o.double = function () {
          do {
            var e = ((r.next() >>> 11) + (r.next() >>> 0) / 4294967296) / (1 << 21);
          } while (0 === e);

          return e;
        }, o.int32 = r.next, o.quick = o, a && ("object" == _typeof(a) && n(a, r), o.state = function () {
          return n(r, {});
        }), o;
      }

      t && t.exports ? t.exports = a : this.tychei = a;
    }(0, e);
  }),
      seedrandom$2 = createCommonjsModule$2(function (e) {
    !function (t, r) {
      var n,
          a = (0, eval)("this"),
          o = 256,
          i = 6,
          s = "random",
          u = r.pow(o, i),
          l = r.pow(2, 52),
          p = 2 * l,
          c = o - 1;

      function h(e, h, g) {
        var y = [],
            v = f(function e(t, r) {
          var n,
              a = [],
              o = _typeof(t);

          if (r && "object" == o) for (n in t) {
            try {
              a.push(e(t[n], r - 1));
            } catch (e) {}
          }
          return a.length ? a : "string" == o ? t : t + "\0";
        }((h = 1 == h ? {
          entropy: !0
        } : h || {}).entropy ? [e, m(t)] : null == e ? function () {
          try {
            var e;
            return n && (e = n.randomBytes) ? e = e(o) : (e = new Uint8Array(o), (a.crypto || a.msCrypto).getRandomValues(e)), m(e);
          } catch (e) {
            var r = a.navigator,
                i = r && r.plugins;
            return [+new Date(), a, i, a.screen, m(t)];
          }
        }() : e, 3), y),
            x = new function (e) {
          var t,
              r = e.length,
              n = this,
              a = 0,
              i = n.i = n.j = 0,
              s = n.S = [];

          for (r || (e = [r++]); a < o;) {
            s[a] = a++;
          }

          for (a = 0; a < o; a++) {
            s[a] = s[i = c & i + e[a % r] + (t = s[a])], s[i] = t;
          }

          (n.g = function (e) {
            for (var t, r = 0, a = n.i, i = n.j, s = n.S; e--;) {
              t = s[a = c & a + 1], r = r * o + s[c & (s[a] = s[i = c & i + t]) + (s[i] = t)];
            }

            return n.i = a, n.j = i, r;
          })(o);
        }(y),
            b = function b() {
          for (var e = x.g(i), t = u, r = 0; e < l;) {
            e = (e + r) * o, t *= o, r = x.g(1);
          }

          for (; e >= p;) {
            e /= 2, t /= 2, r >>>= 1;
          }

          return (e + r) / t;
        };

        return b.int32 = function () {
          return 0 | x.g(4);
        }, b.quick = function () {
          return x.g(4) / 4294967296;
        }, b.double = b, f(m(x.S), t), (h.pass || g || function (e, t, n, a) {
          return a && (a.S && d(a, x), e.state = function () {
            return d(x, {});
          }), n ? (r[s] = e, t) : e;
        })(b, v, "global" in h ? h.global : this == r, h.state);
      }

      function d(e, t) {
        return t.i = e.i, t.j = e.j, t.S = e.S.slice(), t;
      }

      function f(e, t) {
        for (var r, n = e + "", a = 0; a < n.length;) {
          t[c & a] = c & (r ^= 19 * t[c & a]) + n.charCodeAt(a++);
        }

        return m(t);
      }

      function m(e) {
        return String.fromCharCode.apply(0, e);
      }

      if (r["seed" + s] = h, f(r.random(), t), e.exports) {
        e.exports = h;

        try {
          n = require("crypto");
        } catch (e) {}
      }
    }([], Math);
  });
  seedrandom$2.alea = alea$1, seedrandom$2.xor128 = xor128$1, seedrandom$2.xorwow = xorwow$1, seedrandom$2.xorshift7 = xorshift7$1, seedrandom$2.xor4096 = xor4096$1, seedrandom$2.tychei = tychei$1;
  var seedrandom$1$1 = seedrandom$2,
      seedrandom_1$1 = seedrandom$1$1.alea,
      util$1 = createCommonjsModule$2(function (e, t) {
    function r(e) {
      for (var t = e.length, r = 0, n = 0; t > 0;) {
        n = Math.random() * t | 0, r = e[--t], e[t] = e[n], e[n] = r;
      }
    }

    function n(e, t) {
      if (!e) throw new Error("string" == typeof t ? t : t());
    }

    function a(e, t) {
      if (void 0 === t && (t = []), Array.isArray(e) || l(e)) for (var r = 0; r < e.length; ++r) {
        a(e[r], t);
      } else t.push(e);
      return t;
    }

    function o(e, t) {
      if (e === t) return !0;
      if (null == e || null == t) return !1;
      if (e.length !== t.length) return !1;

      for (var r = 0; r < e.length; r++) {
        if (e[r] !== t[r]) return !1;
      }

      return !0;
    }

    function i(e) {
      return e % 1 == 0;
    }

    function s(e, t) {
      var r = t.length;
      return n((e = null == e ? t.map(function (e, t) {
        return t;
      }) : [].concat(e)).every(function (e) {
        return e >= -r && e < r;
      }), "All values in axis param must be in range [-" + r + ", " + r + ") but got axis " + e), n(e.every(function (e) {
        return i(e);
      }), "All values in axis param must be integers but got axis " + e), e.map(function (e) {
        return e < 0 ? r + e : e;
      });
    }

    function u(e, t) {
      for (var r = 0; r < e.length; r++) {
        var n = e[r];
        if (isNaN(n) || !isFinite(n)) throw Error("A tensor of type " + t + " being uploaded contains " + n + ".");
      }
    }

    function l(e) {
      return e instanceof Float32Array || e instanceof Int32Array || e instanceof Uint8Array;
    }

    function p(e) {
      return "string" == typeof e || e instanceof String;
    }

    function c(e) {
      return "boolean" == typeof e;
    }

    function h(e) {
      return "number" == typeof e;
    }

    function d(e, t) {
      if (null == t || "float32" === t || "complex64" === t) return new Float32Array(e);
      if ("int32" === t) return new Int32Array(e);
      if ("bool" === t) return new Uint8Array(e);
      throw new Error("Unknown data type " + t);
    }

    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.shuffle = r, t.clamp = function (e, t, r) {
      return Math.max(e, Math.min(t, r));
    }, t.nearestLargerEven = function (e) {
      return e % 2 == 0 ? e : e + 1;
    }, t.sum = function (e) {
      for (var t = 0, r = 0; r < e.length; r++) {
        t += e[r];
      }

      return t;
    }, t.randUniform = function (e, t) {
      var r = Math.random();
      return t * r + (1 - r) * e;
    }, t.distSquared = function (e, t) {
      for (var r = 0, n = 0; n < e.length; n++) {
        var a = Number(e[n]) - Number(t[n]);
        r += a * a;
      }

      return r;
    }, t.assert = n, t.assertShapesMatch = function (e, t, r) {
      void 0 === r && (r = ""), n(o(e, t), r + " Shapes " + e + " and " + t + " must match");
    }, t.assertNonNull = function (e) {
      n(null != e, "The input to the tensor constructor must be a non-null value.");
    }, t.flatten = a, t.sizeFromShape = function (e) {
      if (0 === e.length) return 1;

      for (var t = e[0], r = 1; r < e.length; r++) {
        t *= e[r];
      }

      return t;
    }, t.isScalarShape = function (e) {
      return 0 === e.length;
    }, t.arraysEqual = o, t.isInt = i, t.tanh = function (e) {
      if (null != Math.tanh) return Math.tanh(e);
      if (e === 1 / 0) return 1;
      if (e === -1 / 0) return -1;
      var t = Math.exp(2 * e);
      return (t - 1) / (t + 1);
    }, t.sizeToSquarishShape = function (e) {
      var t = Math.ceil(Math.sqrt(e));
      return [t, Math.ceil(e / t)];
    }, t.createShuffledIndices = function (e) {
      for (var t = new Uint32Array(e), n = 0; n < e; ++n) {
        t[n] = n;
      }

      return r(t), t;
    }, t.rightPad = function (e, t) {
      return t <= e.length ? e : e + " ".repeat(t - e.length);
    }, t.repeatedTry = function (e, t, r) {
      return void 0 === t && (t = function t(e) {
        return 0;
      }), new Promise(function (n, a) {
        var o = 0,
            i = function i() {
          if (e()) n();else {
            var s = t(++o);
            null != r && o >= r ? a() : setTimeout(i, s);
          }
        };

        i();
      });
    }, t.inferFromImplicitShape = function (e, t) {
      for (var r = 1, n = -1, a = 0; a < e.length; ++a) {
        if (e[a] >= 0) r *= e[a];else if (-1 === e[a]) {
          if (-1 !== n) throw Error("Shapes can only have 1 implicit size. Found -1 at dim " + n + " and dim " + a);
          n = a;
        } else if (e[a] < 0) throw Error("Shapes can not be < 0. Found " + e[a] + " at dim " + a);
      }

      if (-1 === n) {
        if (t > 0 && t !== r) throw Error("Size(" + t + ") must match the product of shape " + e);
        return e;
      }

      if (0 === r) throw Error("Cannot infer the missing size in [" + e + "] when there are 0 elements");
      if (t % r != 0) throw Error("The implicit shape can't be a fractional number. Got " + t + " / " + r);
      var o = e.slice();
      return o[n] = t / r, o;
    }, t.parseAxisParam = s, t.squeezeShape = function (e, t) {
      for (var r = [], n = [], a = null == t ? null : s(t, e).sort(), o = 0, i = 0; i < e.length; ++i) {
        if (null != a) {
          if (a[o] === i && 1 !== e[i]) throw new Error("Can't squeeze axis " + i + " since its dim '" + e[i] + "' is not 1");
          (null == a[o] || a[o] > i) && 1 === e[i] && (r.push(e[i]), n.push(i)), a[o] <= i && o++;
        }

        1 !== e[i] && (r.push(e[i]), n.push(i));
      }

      return {
        newShape: r,
        keptDims: n
      };
    }, t.getTypedArrayFromDType = function (e, t) {
      var r = null;
      if (null == e || "float32" === e) r = new Float32Array(t);else if ("int32" === e) r = new Int32Array(t);else {
        if ("bool" !== e) throw new Error("Unknown data type " + e);
        r = new Uint8Array(t);
      }
      return r;
    }, t.getArrayFromDType = function (e, t) {
      var r = null;
      if (null == e || "float32" === e) r = new Float32Array(t);else if ("int32" === e) r = new Int32Array(t);else if ("bool" === e) r = new Uint8Array(t);else {
        if ("string" !== e) throw new Error("Unknown data type " + e);
        r = new Array(t);
      }
      return r;
    }, t.checkComputationForErrors = function (e, t, r) {
      if ("float32" === t) for (var n = 0; n < e.length; n++) {
        var a = e[n];
        if (isNaN(a) || !isFinite(a)) throw Error("The result of the '" + r + "' is " + a + ".");
      }
    }, t.checkConversionForErrors = u, t.hasEncodingLoss = function (e, t) {
      return !("complex64" === t || "float32" === t && "complex64" !== e || "int32" === t && "float32" !== e && "complex64" !== e || "bool" === t && "bool" === e);
    }, t.isTypedArray = l, t.bytesPerElement = function (e) {
      if ("float32" === e || "int32" === e) return 4;
      if ("complex64" === e) return 8;
      if ("bool" === e) return 1;
      throw new Error("Unknown dtype " + e);
    }, t.bytesFromStringArray = function (e) {
      if (null == e) return 0;
      var t = 0;
      return e.forEach(function (e) {
        return t += 2 * e.length;
      }), t;
    }, t.isString = p, t.isBoolean = c, t.isNumber = h, t.inferDtype = function e(t) {
      return Array.isArray(t) ? e(t[0]) : t instanceof Float32Array ? "float32" : t instanceof Int32Array || t instanceof Uint8Array ? "int32" : h(t) ? "float32" : p(t) ? "string" : c(t) ? "bool" : "float32";
    }, t.isFunction = function (e) {
      return !!(e && e.constructor && e.call && e.apply);
    }, t.nearestDivisor = function (e, t) {
      for (var r = t; r < e; ++r) {
        if (e % r == 0) return r;
      }

      return e;
    }, t.computeStrides = function (e) {
      var t = e.length;
      if (t < 2) return [];
      var r = new Array(t - 1);
      r[t - 2] = e[t - 1];

      for (var n = t - 3; n >= 0; --n) {
        r[n] = r[n + 1] * e[n + 1];
      }

      return r;
    }, t.toTypedArray = function (e, t, r) {
      if ("string" === t) throw new Error("Cannot convert a string[] to a TypedArray");
      if (Array.isArray(e) && (e = a(e)), r && u(e, t), function (e, t) {
        return e instanceof Float32Array && "float32" === t || e instanceof Int32Array && "int32" === t || e instanceof Uint8Array && "bool" === t;
      }(e, t)) return e;
      if (null == t || "float32" === t || "complex64" === t) return new Float32Array(e);
      if ("int32" === t) return new Int32Array(e);

      if ("bool" === t) {
        for (var n = new Uint8Array(e.length), o = 0; o < n.length; ++o) {
          0 !== Math.round(e[o]) && (n[o] = 1);
        }

        return n;
      }

      throw new Error("Unknown data type " + t);
    }, t.toNestedArray = function (e, t) {
      if (0 === e.length) return t[0];
      var r = e.reduce(function (e, t) {
        return e * t;
      });
      if (0 === r) return [];
      if (r !== t.length) throw new Error("[" + e + "] does not match the input size.");
      return function e(t, r, n) {
        var a = new Array();
        if (1 === r.length) for (var o = r[0], i = 0; i < o; i++) {
          a[i] = n[t + i];
        } else {
          o = r[0];
          var s = r.slice(1),
              u = s.reduce(function (e, t) {
            return e * t;
          });

          for (i = 0; i < o; i++) {
            a[i] = e(t + i * u, s, n);
          }
        }
        return a;
      }(0, e, t);
    }, t.makeOnesTypedArray = function (e, t) {
      for (var r = d(e, t), n = 0; n < r.length; n++) {
        r[n] = 1;
      }

      return r;
    }, t.makeZerosTypedArray = d, t.now = function () {
      if ("undefined" != typeof performance) return performance.now();

      if ("undefined" != typeof process) {
        var e = process.hrtime();
        return 1e3 * e[0] + e[1] / 1e6;
      }

      throw new Error("Cannot measure time in this environment. You should run tf.js in the browser or in Node.js");
    }, t.monitorPromisesProgress = function (e, t, r, a) {
      !function (e) {
        n(null != e && Array.isArray(e) && e.length > 0, "promises must be a none empty array");
      }(e), function (e, t) {
        n(e >= 0 && e <= 1, "Progress fraction must be in range [0, 1], but got startFraction " + e), n(t >= 0 && t <= 1, "Progress fraction must be in range [0, 1], but got endFraction " + t), n(t >= e, "startFraction must be no more than endFraction, but got startFraction " + e + " and endFraction " + t);
      }(r = null == r ? 0 : r, a = null == a ? 1 : a);
      var o = 0;
      return Promise.all(e.map(function (n) {
        return n.then(function (n) {
          var i = r + ++o / e.length * (a - r);
          return t(i), n;
        }), n;
      }));
    };
  });
  unwrapExports(util$1);
  var util_1 = util$1.shuffle,
      util_2 = util$1.clamp,
      util_3 = util$1.nearestLargerEven,
      util_4 = util$1.sum,
      util_5 = util$1.randUniform,
      util_6 = util$1.distSquared,
      util_7 = util$1.assert,
      util_8 = util$1.assertShapesMatch,
      util_9 = util$1.assertNonNull,
      util_10 = util$1.flatten,
      util_11 = util$1.sizeFromShape,
      util_12 = util$1.isScalarShape,
      util_13 = util$1.arraysEqual,
      util_14 = util$1.isInt,
      util_15 = util$1.tanh,
      util_16 = util$1.sizeToSquarishShape,
      util_17 = util$1.createShuffledIndices,
      util_18 = util$1.rightPad,
      util_19 = util$1.repeatedTry,
      util_20 = util$1.inferFromImplicitShape,
      util_21 = util$1.parseAxisParam,
      util_22 = util$1.squeezeShape,
      util_23 = util$1.getTypedArrayFromDType,
      util_24 = util$1.getArrayFromDType,
      util_25 = util$1.checkComputationForErrors,
      util_26 = util$1.checkConversionForErrors,
      util_27 = util$1.hasEncodingLoss,
      util_28 = util$1.isTypedArray,
      util_29 = util$1.bytesPerElement,
      util_30 = util$1.bytesFromStringArray,
      util_31 = util$1.isString,
      util_32 = util$1.isBoolean,
      util_33 = util$1.isNumber,
      util_34 = util$1.inferDtype,
      util_35 = util$1.isFunction,
      util_36 = util$1.nearestDivisor,
      util_37 = util$1.computeStrides,
      util_38 = util$1.toTypedArray,
      util_39 = util$1.toNestedArray,
      util_40 = util$1.makeOnesTypedArray,
      util_41 = util$1.makeZerosTypedArray,
      util_42 = util$1.now,
      util_43 = util$1.monitorPromisesProgress,
      tensor_format = createCommonjsModule$2(function (e, t) {
    Object.defineProperty(t, "__esModule", {
      value: !0
    });
    var r = 7;

    function n(e, t) {
      var n;
      return n = Array.isArray(e) ? parseFloat(e[0].toFixed(r)) + " + " + parseFloat(e[1].toFixed(r)) + "j" : util$1.isString(e) ? "'" + e + "'" : parseFloat(e.toFixed(r)).toString(), util$1.rightPad(n, t);
    }

    function a(e) {
      for (var t = [], r = 0; r < e.length; r += 2) {
        t.push([e[r], e[r + 1]]);
      }

      return t;
    }

    t.tensorToString = function (e, t, r, o) {
      var i = util$1.computeStrides(t),
          s = function (e, t, r, o) {
        var i = util$1.sizeFromShape(t),
            s = o[o.length - 1],
            u = new Array(s).fill(0),
            l = t.length,
            p = "complex64" === r ? a(e) : e;
        if (l > 1) for (var c = 0; c < i / s; c++) {
          for (var h = c * s, d = 0; d < s; d++) {
            u[d] = Math.max(u[d], n(p[h + d], 0).length);
          }
        }
        return u;
      }(e, t, r, i),
          u = t.length,
          l = function e(t, r, o, i, s, u) {
        void 0 === u && (u = !0);
        var l = "complex64" === o ? 2 : 1,
            p = r[0],
            c = r.length;
        if (0 === c) return "complex64" === o ? [n(a(t)[0], 0)] : [t[0].toString()];

        if (1 === c) {
          if (p > 20) {
            var h = 3 * l,
                d = Array.from(t.slice(0, h)),
                f = Array.from(t.slice(p - 3 * l, p));
            return "complex64" === o && (d = a(d), f = a(f)), ["[" + d.map(function (e, t) {
              return n(e, s[t]);
            }).join(", ") + ", ..., " + f.map(function (e, t) {
              return n(e, s[p - 3 + t]);
            }).join(", ") + "]"];
          }

          return ["[" + ("complex64" === o ? a(t) : Array.from(t)).map(function (e, t) {
            return n(e, s[t]);
          }).join(", ") + "]"];
        }

        var m = r.slice(1),
            g = i.slice(1),
            y = i[0] * l,
            v = [];

        if (p > 20) {
          for (var x = 0; x < 3; x++) {
            var b = (w = x * y) + y;
            v.push.apply(v, e(t.slice(w, b), m, o, g, s, !1));
          }

          v.push("...");

          for (x = p - 3; x < p; x++) {
            b = (w = x * y) + y;
            v.push.apply(v, e(t.slice(w, b), m, o, g, s, x === p - 1));
          }
        } else for (x = 0; x < p; x++) {
          var w;
          b = (w = x * y) + y;
          v.push.apply(v, e(t.slice(w, b), m, o, g, s, x === p - 1));
        }

        var N = 2 === c ? "," : "";
        v[0] = "[" + v[0] + N;

        for (x = 1; x < v.length - 1; x++) {
          v[x] = " " + v[x] + N;
        }

        var S = ",\n";

        for (x = 2; x < c; x++) {
          S += "\n";
        }

        return v[v.length - 1] = " " + v[v.length - 1] + "]" + (u ? "" : S), v;
      }(e, t, r, i, s),
          p = ["Tensor"];

      return o && (p.push("  dtype: " + r), p.push("  rank: " + u), p.push("  shape: [" + t + "]"), p.push("  values:")), p.push(l.map(function (e) {
        return "    " + e;
      }).join("\n")), p.join("\n");
    };
  });
  unwrapExports(tensor_format);
  var tensor_format_1 = tensor_format.tensorToString,
      tensor$1 = createCommonjsModule$2(function (e, t) {
    var r,
        n = commonjsGlobal$2 && commonjsGlobal$2.__extends || (r = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (e, t) {
      e.__proto__ = t;
    } || function (e, t) {
      for (var r in t) {
        t.hasOwnProperty(r) && (e[r] = t[r]);
      }
    }, function (e, t) {
      function n() {
        this.constructor = e;
      }

      r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n());
    }),
        a = commonjsGlobal$2 && commonjsGlobal$2.__awaiter || function (e, t, r, n) {
      return new (r || (r = Promise))(function (a, o) {
        function i(e) {
          try {
            u(n.next(e));
          } catch (e) {
            o(e);
          }
        }

        function s(e) {
          try {
            u(n.throw(e));
          } catch (e) {
            o(e);
          }
        }

        function u(e) {
          e.done ? a(e.value) : new r(function (t) {
            t(e.value);
          }).then(i, s);
        }

        u((n = n.apply(e, t || [])).next());
      });
    },
        o = commonjsGlobal$2 && commonjsGlobal$2.__generator || function (e, t) {
      var r,
          n,
          a,
          o,
          i = {
        label: 0,
        sent: function sent() {
          if (1 & a[0]) throw a[1];
          return a[1];
        },
        trys: [],
        ops: []
      };
      return o = {
        next: s(0),
        throw: s(1),
        return: s(2)
      }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {
        return this;
      }), o;

      function s(o) {
        return function (s) {
          return function (o) {
            if (r) throw new TypeError("Generator is already executing.");

            for (; i;) {
              try {
                if (r = 1, n && (a = 2 & o[0] ? n.return : o[0] ? n.throw || ((a = n.return) && a.call(n), 0) : n.next) && !(a = a.call(n, o[1])).done) return a;

                switch (n = 0, a && (o = [2 & o[0], a.value]), o[0]) {
                  case 0:
                  case 1:
                    a = o;
                    break;

                  case 4:
                    return i.label++, {
                      value: o[1],
                      done: !1
                    };

                  case 5:
                    i.label++, n = o[1], o = [0];
                    continue;

                  case 7:
                    o = i.ops.pop(), i.trys.pop();
                    continue;

                  default:
                    if (!(a = (a = i.trys).length > 0 && a[a.length - 1]) && (6 === o[0] || 2 === o[0])) {
                      i = 0;
                      continue;
                    }

                    if (3 === o[0] && (!a || o[1] > a[0] && o[1] < a[3])) {
                      i.label = o[1];
                      break;
                    }

                    if (6 === o[0] && i.label < a[1]) {
                      i.label = a[1], a = o;
                      break;
                    }

                    if (a && i.label < a[2]) {
                      i.label = a[2], i.ops.push(o);
                      break;
                    }

                    a[2] && i.ops.pop(), i.trys.pop();
                    continue;
                }

                o = t.call(e, i);
              } catch (e) {
                o = [6, e], n = 0;
              } finally {
                r = a = 0;
              }
            }

            if (5 & o[0]) throw o[1];
            return {
              value: o[0] ? o[1] : void 0,
              done: !0
            };
          }([o, s]);
        };
      }
    };

    Object.defineProperty(t, "__esModule", {
      value: !0
    });

    var i = util$1,
        s = function () {
      function e(e, t, r) {
        if (this.dtype = t, this.shape = e.slice(), this.size = util$1.sizeFromShape(e), null != r) {
          var n = r.length;
          util$1.assert(n === this.size, "Length of values '" + n + "' does not match the size inferred by the shape '" + this.size + "'.");
        }

        if ("complex64" === t) throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");
        this.values = r || util$1.getArrayFromDType(t, util$1.sizeFromShape(this.shape)), this.strides = i.computeStrides(e);
      }

      return e.prototype.set = function (e) {
        for (var t = [], r = 1; r < arguments.length; r++) {
          t[r - 1] = arguments[r];
        }

        0 === t.length && (t = [0]), util$1.assert(t.length === this.rank, "The number of provided coordinates (" + t.length + ") must match the rank (" + this.rank + ")");
        var n = this.locToIndex(t);
        this.values[n] = e;
      }, e.prototype.get = function () {
        for (var e = [], t = 0; t < arguments.length; t++) {
          e[t] = arguments[t];
        }

        0 === e.length && (e = [0]);

        for (var r = e[e.length - 1], n = 0; n < e.length - 1; ++n) {
          r += this.strides[n] * e[n];
        }

        return this.values[r];
      }, e.prototype.locToIndex = function (e) {
        if (0 === this.rank) return 0;
        if (1 === this.rank) return e[0];

        for (var t = e[e.length - 1], r = 0; r < e.length - 1; ++r) {
          t += this.strides[r] * e[r];
        }

        return t;
      }, e.prototype.indexToLoc = function (e) {
        if (0 === this.rank) return [];
        if (1 === this.rank) return [e];

        for (var t = new Array(this.shape.length), r = 0; r < t.length - 1; ++r) {
          t[r] = Math.floor(e / this.strides[r]), e -= t[r] * this.strides[r];
        }

        return t[t.length - 1] = e, t;
      }, Object.defineProperty(e.prototype, "rank", {
        get: function get() {
          return this.shape.length;
        },
        enumerable: !0,
        configurable: !0
      }), e.prototype.toTensor = function () {
        return c.make(this.shape, {
          values: this.values
        }, this.dtype);
      }, e;
    }();

    t.TensorBuffer = s;
    var u = null,
        l = null,
        p = null;
    t.setTensorTracker = function (e) {
      u = e;
    }, t.setOpHandler = function (e) {
      l = e;
    }, t.setDeprecationWarningFn = function (e) {
      p = e;
    };

    var c = function () {
      function e(e, t, r, n) {
        this.isDisposedInternal = !1, this.shape = e.slice(), this.dtype = t || "float32", this.size = util$1.sizeFromShape(e), this.strides = i.computeStrides(e), this.dataId = null != n ? n : {}, this.id = u().nextTensorId(), this.rankType = this.rank < 5 ? this.rank.toString() : "higher", u().registerTensor(this), null != r && u().write(this.dataId, r);
      }

      return e.make = function (t, r, n) {
        return new e(t, n, r.values, r.dataId);
      }, e.prototype.flatten = function () {
        return this.throwIfDisposed(), this.as1D();
      }, e.prototype.asScalar = function () {
        return this.throwIfDisposed(), util$1.assert(1 === this.size, "The array must have only 1 element."), this.reshape([]);
      }, e.prototype.as1D = function () {
        return this.throwIfDisposed(), this.reshape([this.size]);
      }, e.prototype.as2D = function (e, t) {
        return this.throwIfDisposed(), this.reshape([e, t]);
      }, e.prototype.as3D = function (e, t, r) {
        return this.throwIfDisposed(), this.reshape([e, t, r]);
      }, e.prototype.as4D = function (e, t, r, n) {
        return this.throwIfDisposed(), this.reshape([e, t, r, n]);
      }, e.prototype.as5D = function (e, t, r, n, a) {
        return this.throwIfDisposed(), this.reshape([e, t, r, n, a]);
      }, e.prototype.asType = function (e) {
        return this.throwIfDisposed(), l.cast(this, e);
      }, Object.defineProperty(e.prototype, "rank", {
        get: function get() {
          return this.shape.length;
        },
        enumerable: !0,
        configurable: !0
      }), e.prototype.get = function () {
        for (var e = [], t = 0; t < arguments.length; t++) {
          e[t] = arguments[t];
        }

        p("Tensor.get() is deprecated. Use Tensor.array() and native array indexing instead."), util$1.assert(e.length === this.rank, "Number of coordinates in get() must match the rank of the tensor"), util$1.assert("complex64" !== this.dtype, "Tensor.get() is not supported for complex64 tensors yet."), this.throwIfDisposed(), 0 === e.length && (e = [0]);

        for (var r = e[e.length - 1], n = 0; n < e.length - 1; ++n) {
          r += this.strides[n] * e[n];
        }

        return this.dataSync()[r];
      }, e.prototype.buffer = function () {
        return p("Tensor.buffer() is renamed to Tensor.bufferSync() in TensorFlow.js 1.0 and Tensor.buffer() will become an async function."), l.buffer(this.shape, this.dtype, this.dataSync());
      }, e.prototype.bufferSync = function () {
        return l.buffer(this.shape, this.dtype, this.dataSync());
      }, e.prototype.array = function () {
        return a(this, void 0, void 0, function () {
          var e, t;
          return o(this, function (r) {
            switch (r.label) {
              case 0:
                return e = i.toNestedArray, t = [this.shape], [4, this.data()];

              case 1:
                return [2, e.apply(void 0, t.concat([r.sent()]))];
            }
          });
        });
      }, e.prototype.arraySync = function () {
        return i.toNestedArray(this.shape, this.dataSync());
      }, e.prototype.data = function () {
        return a(this, void 0, void 0, function () {
          return o(this, function (e) {
            return this.throwIfDisposed(), [2, u().read(this.dataId)];
          });
        });
      }, e.prototype.dataSync = function () {
        return this.throwIfDisposed(), u().readSync(this.dataId);
      }, e.prototype.dispose = function () {
        this.isDisposed || (u().disposeTensor(this), this.isDisposedInternal = !0);
      }, Object.defineProperty(e.prototype, "isDisposed", {
        get: function get() {
          return this.isDisposedInternal;
        },
        enumerable: !0,
        configurable: !0
      }), e.prototype.throwIfDisposed = function () {
        if (this.isDisposed) throw new Error("Tensor is disposed.");
      }, e.prototype.toFloat = function () {
        return this.asType("float32");
      }, e.prototype.toInt = function () {
        return this.asType("int32");
      }, e.prototype.toBool = function () {
        return this.asType("bool");
      }, e.prototype.print = function (e) {
        return void 0 === e && (e = !1), l.print(this, e);
      }, e.prototype.reshape = function (e) {
        return this.throwIfDisposed(), l.reshape(this, e);
      }, e.prototype.reshapeAs = function (e) {
        return this.throwIfDisposed(), this.reshape(e.shape);
      }, e.prototype.expandDims = function (e) {
        return void 0 === e && (e = 0), l.expandDims(this, e);
      }, e.prototype.cumsum = function (e, t, r) {
        return void 0 === e && (e = 0), void 0 === t && (t = !1), void 0 === r && (r = !1), l.cumsum(this, e, t, r);
      }, e.prototype.squeeze = function (e) {
        return this.throwIfDisposed(), l.squeeze(this, e);
      }, e.prototype.clone = function () {
        return this.throwIfDisposed(), l.clone(this);
      }, e.prototype.oneHot = function (e, t, r) {
        return this.throwIfDisposed(), l.oneHot(this, e, t, r);
      }, e.prototype.toString = function (e) {
        void 0 === e && (e = !1);
        var t = this.dataSync();
        return tensor_format.tensorToString(t, this.shape, this.dtype, e);
      }, e.prototype.tile = function (e) {
        return this.throwIfDisposed(), l.tile(this, e);
      }, e.prototype.gather = function (e, t) {
        return void 0 === t && (t = 0), this.throwIfDisposed(), l.gather(this, e, t);
      }, e.prototype.matMul = function (e, t, r) {
        return void 0 === t && (t = !1), void 0 === r && (r = !1), this.throwIfDisposed(), l.matMul(this, e, t, r);
      }, e.prototype.dot = function (e) {
        return this.throwIfDisposed(), l.dot(this, e);
      }, e.prototype.norm = function (e, t, r) {
        return void 0 === e && (e = "euclidean"), void 0 === t && (t = null), void 0 === r && (r = !1), this.throwIfDisposed(), l.norm(this, e, t, r);
      }, e.prototype.slice = function (e, t) {
        return this.throwIfDisposed(), l.slice(this, e, t);
      }, e.prototype.reverse = function (e) {
        return this.throwIfDisposed(), l.reverse(this, e);
      }, e.prototype.concat = function (t, r) {
        return void 0 === r && (r = 0), this.throwIfDisposed(), t instanceof e && (t = [t]), l.concat([this].concat(t), r);
      }, e.prototype.split = function (e, t) {
        return void 0 === t && (t = 0), this.throwIfDisposed(), l.split(this, e, t);
      }, e.prototype.stack = function (e, t) {
        return void 0 === t && (t = 0), l.stack([this, e], t);
      }, e.prototype.unstack = function (e) {
        return void 0 === e && (e = 0), l.unstack(this, e);
      }, e.prototype.pad = function (e, t) {
        return void 0 === t && (t = 0), l.pad(this, e, t);
      }, e.prototype.batchNormalization = function (e, t, r, n, a) {
        return void 0 === r && (r = .001), p("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon"), this.batchNorm(e, t, a, n, r);
      }, e.prototype.batchNorm = function (e, t, r, n, a) {
        return void 0 === a && (a = .001), this.throwIfDisposed(), l.batchNorm(this, e, t, r, n, a);
      }, e.prototype.all = function (e, t) {
        return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), l.all(this, e, t);
      }, e.prototype.any = function (e, t) {
        return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), l.any(this, e, t);
      }, e.prototype.logSumExp = function (e, t) {
        return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), l.logSumExp(this, e, t);
      }, e.prototype.sum = function (e, t) {
        return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), l.sum(this, e, t);
      }, e.prototype.prod = function (e, t) {
        return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), l.prod(this, e, t);
      }, e.prototype.mean = function (e, t) {
        return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), l.mean(this, e, t);
      }, e.prototype.min = function (e, t) {
        return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), l.min(this, e, t);
      }, e.prototype.max = function (e, t) {
        return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), l.max(this, e, t);
      }, e.prototype.argMin = function (e) {
        return void 0 === e && (e = null), this.throwIfDisposed(), l.argMin(this, e);
      }, e.prototype.argMax = function (e) {
        return void 0 === e && (e = null), this.throwIfDisposed(), l.argMax(this, e);
      }, e.prototype.cast = function (e) {
        return this.throwIfDisposed(), l.cast(this, e);
      }, e.prototype.add = function (e) {
        return this.throwIfDisposed(), l.add(this, e);
      }, e.prototype.addStrict = function (e) {
        return this.throwIfDisposed(), l.addStrict(this, e);
      }, e.prototype.atan2 = function (e) {
        return this.throwIfDisposed(), l.atan2(this, e);
      }, e.prototype.sub = function (e) {
        return this.throwIfDisposed(), l.sub(this, e);
      }, e.prototype.subStrict = function (e) {
        return this.throwIfDisposed(), l.subStrict(this, e);
      }, e.prototype.pow = function (e) {
        return this.throwIfDisposed(), l.pow(this, e);
      }, e.prototype.powStrict = function (e) {
        return this.throwIfDisposed(), l.powStrict(this, e);
      }, e.prototype.mul = function (e) {
        return this.throwIfDisposed(), l.mul(this, e);
      }, e.prototype.mulStrict = function (e) {
        return this.throwIfDisposed(), l.mulStrict(this, e);
      }, e.prototype.div = function (e) {
        return this.throwIfDisposed(), l.div(this, e);
      }, e.prototype.floorDiv = function (e) {
        return this.throwIfDisposed(), l.floorDiv(this, e);
      }, e.prototype.divStrict = function (e) {
        return this.throwIfDisposed(), l.divStrict(this, e);
      }, e.prototype.minimum = function (e) {
        return this.throwIfDisposed(), l.minimum(this, e);
      }, e.prototype.minimumStrict = function (e) {
        return this.throwIfDisposed(), l.minimumStrict(this, e);
      }, e.prototype.maximum = function (e) {
        return this.throwIfDisposed(), l.maximum(this, e);
      }, e.prototype.maximumStrict = function (e) {
        return this.throwIfDisposed(), l.maximumStrict(this, e);
      }, e.prototype.mod = function (e) {
        return this.throwIfDisposed(), l.mod(this, e);
      }, e.prototype.modStrict = function (e) {
        return this.throwIfDisposed(), l.modStrict(this, e);
      }, e.prototype.squaredDifference = function (e) {
        return this.throwIfDisposed(), l.squaredDifference(this, e);
      }, e.prototype.squaredDifferenceStrict = function (e) {
        return this.throwIfDisposed(), l.squaredDifferenceStrict(this, e);
      }, e.prototype.transpose = function (e) {
        return this.throwIfDisposed(), l.transpose(this, e);
      }, e.prototype.notEqual = function (e) {
        return this.throwIfDisposed(), l.notEqual(this, e);
      }, e.prototype.notEqualStrict = function (e) {
        return this.throwIfDisposed(), l.notEqualStrict(this, e);
      }, e.prototype.less = function (e) {
        return this.throwIfDisposed(), l.less(this, e);
      }, e.prototype.lessStrict = function (e) {
        return this.throwIfDisposed(), l.lessStrict(this, e);
      }, e.prototype.equal = function (e) {
        return this.throwIfDisposed(), l.equal(this, e);
      }, e.prototype.equalStrict = function (e) {
        return this.throwIfDisposed(), l.equalStrict(this, e);
      }, e.prototype.lessEqual = function (e) {
        return this.throwIfDisposed(), l.lessEqual(this, e);
      }, e.prototype.lessEqualStrict = function (e) {
        return this.throwIfDisposed(), l.lessEqualStrict(this, e);
      }, e.prototype.greater = function (e) {
        return this.throwIfDisposed(), l.greater(this, e);
      }, e.prototype.greaterStrict = function (e) {
        return this.throwIfDisposed(), l.greaterStrict(this, e);
      }, e.prototype.greaterEqual = function (e) {
        return this.throwIfDisposed(), l.greaterEqual(this, e);
      }, e.prototype.greaterEqualStrict = function (e) {
        return this.throwIfDisposed(), l.greaterEqualStrict(this, e);
      }, e.prototype.logicalAnd = function (e) {
        return this.throwIfDisposed(), l.logicalAnd(this, e);
      }, e.prototype.logicalOr = function (e) {
        return this.throwIfDisposed(), l.logicalOr(this, e);
      }, e.prototype.logicalNot = function () {
        return this.throwIfDisposed(), l.logicalNot(this);
      }, e.prototype.logicalXor = function (e) {
        return this.throwIfDisposed(), l.logicalXor(this, e);
      }, e.prototype.where = function (e, t) {
        return this.throwIfDisposed(), l.where(e, this, t);
      }, e.prototype.neg = function () {
        return this.throwIfDisposed(), l.neg(this);
      }, e.prototype.ceil = function () {
        return this.throwIfDisposed(), l.ceil(this);
      }, e.prototype.floor = function () {
        return this.throwIfDisposed(), l.floor(this);
      }, e.prototype.sign = function () {
        return this.throwIfDisposed(), l.sign(this);
      }, e.prototype.exp = function () {
        return this.throwIfDisposed(), l.exp(this);
      }, e.prototype.expm1 = function () {
        return this.throwIfDisposed(), l.expm1(this);
      }, e.prototype.log = function () {
        return this.throwIfDisposed(), l.log(this);
      }, e.prototype.log1p = function () {
        return this.throwIfDisposed(), l.log1p(this);
      }, e.prototype.sqrt = function () {
        return this.throwIfDisposed(), l.sqrt(this);
      }, e.prototype.rsqrt = function () {
        return this.throwIfDisposed(), l.rsqrt(this);
      }, e.prototype.square = function () {
        return this.throwIfDisposed(), l.square(this);
      }, e.prototype.reciprocal = function () {
        return this.throwIfDisposed(), l.reciprocal(this);
      }, e.prototype.abs = function () {
        return this.throwIfDisposed(), l.abs(this);
      }, e.prototype.clipByValue = function (e, t) {
        return this.throwIfDisposed(), l.clipByValue(this, e, t);
      }, e.prototype.relu = function () {
        return this.throwIfDisposed(), l.relu(this);
      }, e.prototype.elu = function () {
        return this.throwIfDisposed(), l.elu(this);
      }, e.prototype.selu = function () {
        return this.throwIfDisposed(), l.selu(this);
      }, e.prototype.leakyRelu = function (e) {
        return void 0 === e && (e = .2), this.throwIfDisposed(), l.leakyRelu(this, e);
      }, e.prototype.prelu = function (e) {
        return this.throwIfDisposed(), l.prelu(this, e);
      }, e.prototype.sigmoid = function () {
        return this.throwIfDisposed(), l.sigmoid(this);
      }, e.prototype.logSigmoid = function () {
        return this.throwIfDisposed(), l.logSigmoid(this);
      }, e.prototype.softplus = function () {
        return this.throwIfDisposed(), l.softplus(this);
      }, e.prototype.zerosLike = function () {
        return this.throwIfDisposed(), l.zerosLike(this);
      }, e.prototype.onesLike = function () {
        return this.throwIfDisposed(), l.onesLike(this);
      }, e.prototype.sin = function () {
        return this.throwIfDisposed(), l.sin(this);
      }, e.prototype.cos = function () {
        return this.throwIfDisposed(), l.cos(this);
      }, e.prototype.tan = function () {
        return this.throwIfDisposed(), l.tan(this);
      }, e.prototype.asin = function () {
        return this.throwIfDisposed(), l.asin(this);
      }, e.prototype.acos = function () {
        return this.throwIfDisposed(), l.acos(this);
      }, e.prototype.atan = function () {
        return this.throwIfDisposed(), l.atan(this);
      }, e.prototype.sinh = function () {
        return this.throwIfDisposed(), l.sinh(this);
      }, e.prototype.cosh = function () {
        return this.throwIfDisposed(), l.cosh(this);
      }, e.prototype.tanh = function () {
        return this.throwIfDisposed(), l.tanh(this);
      }, e.prototype.asinh = function () {
        return this.throwIfDisposed(), l.asinh(this);
      }, e.prototype.acosh = function () {
        return this.throwIfDisposed(), l.acosh(this);
      }, e.prototype.atanh = function () {
        return this.throwIfDisposed(), l.atanh(this);
      }, e.prototype.erf = function () {
        return this.throwIfDisposed(), l.erf(this);
      }, e.prototype.round = function () {
        return this.throwIfDisposed(), l.round(this);
      }, e.prototype.step = function (e) {
        return void 0 === e && (e = 0), this.throwIfDisposed(), l.step(this, e);
      }, e.prototype.softmax = function (e) {
        return void 0 === e && (e = -1), this.throwIfDisposed(), l.softmax(this, e);
      }, e.prototype.logSoftmax = function (e) {
        return void 0 === e && (e = -1), this.throwIfDisposed(), l.logSoftmax(this, e);
      }, e.prototype.resizeBilinear = function (e, t) {
        return void 0 === t && (t = !1), this.throwIfDisposed(), l.image.resizeBilinear(this, e, t);
      }, e.prototype.resizeNearestNeighbor = function (e, t) {
        return void 0 === t && (t = !1), this.throwIfDisposed(), l.image.resizeNearestNeighbor(this, e, t);
      }, e.prototype.conv1d = function (e, t, r, n, a, o) {
        return void 0 === n && (n = "NWC"), void 0 === a && (a = 1), this.throwIfDisposed(), l.conv1d(this, e, t, r, n, a, o);
      }, e.prototype.conv2d = function (e, t, r, n, a, o) {
        return void 0 === n && (n = "NHWC"), void 0 === a && (a = [1, 1]), this.throwIfDisposed(), l.conv2d(this, e, t, r, n, a, o);
      }, e.prototype.conv2dTranspose = function (e, t, r, n, a) {
        return this.throwIfDisposed(), l.conv2dTranspose(this, e, t, r, n, a);
      }, e.prototype.depthwiseConv2D = function (e, t, r, n, a, o) {
        return void 0 === n && (n = "NHWC"), void 0 === a && (a = [1, 1]), this.throwIfDisposed(), l.depthwiseConv2d(this, e, t, r, n, a, o);
      }, e.prototype.separableConv2d = function (e, t, r, n, a, o) {
        return void 0 === a && (a = [1, 1]), void 0 === o && (o = "NHWC"), this.throwIfDisposed(), l.separableConv2d(this, e, t, r, n, a, o);
      }, e.prototype.avgPool = function (e, t, r, n) {
        return this.throwIfDisposed(), l.avgPool(this, e, t, r, n);
      }, e.prototype.maxPool = function (e, t, r, n) {
        return this.throwIfDisposed(), l.maxPool(this, e, t, r, n);
      }, e.prototype.localResponseNormalization = function (e, t, r, n) {
        return void 0 === e && (e = 5), void 0 === t && (t = 1), void 0 === r && (r = 1), void 0 === n && (n = .5), l.localResponseNormalization(this, e, t, r, n);
      }, e.prototype.pool = function (e, t, r, n, a) {
        return this.throwIfDisposed(), l.pool(this, e, t, r, n, a);
      }, e.prototype.variable = function (e, t, r) {
        return void 0 === e && (e = !0), this.throwIfDisposed(), h.variable(this, e, t, r);
      }, e.prototype.unsortedSegmentSum = function (e, t) {
        return this.throwIfDisposed(), l.unsortedSegmentSum(this, e, t);
      }, e.prototype.batchToSpaceND = function (e, t) {
        return this.throwIfDisposed(), l.batchToSpaceND(this, e, t);
      }, e.prototype.spaceToBatchND = function (e, t) {
        return this.throwIfDisposed(), l.spaceToBatchND(this, e, t);
      }, e.prototype.topk = function (e, t) {
        return void 0 === e && (e = 1), void 0 === t && (t = !0), this.throwIfDisposed(), l.topk(this, e, t);
      }, e.prototype.stridedSlice = function (e, t, r, n, a, o, i, s) {
        return void 0 === n && (n = 0), void 0 === a && (a = 0), void 0 === o && (o = 0), void 0 === i && (i = 0), void 0 === s && (s = 0), this.throwIfDisposed(), l.stridedSlice(this, e, t, r, n, a, o, i, s);
      }, e.prototype.depthToSpace = function (e, t) {
        return this.throwIfDisposed(), l.depthToSpace(this, e, t);
      }, e.prototype.fft = function () {
        return this.throwIfDisposed(), l.spectral.fft(this);
      }, e.prototype.ifft = function () {
        return this.throwIfDisposed(), l.spectral.ifft(this);
      }, e.prototype.rfft = function () {
        return this.throwIfDisposed(), l.spectral.rfft(this);
      }, e.prototype.irfft = function () {
        return this.throwIfDisposed(), l.spectral.irfft(this);
      }, e;
    }();

    t.Tensor = c, Object.defineProperty(c, Symbol.hasInstance, {
      value: function value(e) {
        return !!e && null != e.dataId && null != e.shape && null != e.dtype;
      }
    });

    var h = function (e) {
      function t(t, r, n) {
        void 0 === r && (r = !0);
        var a = e.call(this, t.shape, t.dtype, null, t.dataId) || this;
        a.trainable = r, a.name = n, null == a.name && (a.name = u().nextVariableId().toString());

        try {
          u().registerVariable(a);
        } catch (e) {
          throw u().disposeTensor(a), e;
        }

        return a;
      }

      return n(t, e), t.variable = function (e, r, n, a) {
        return void 0 === r && (r = !0), null != a && a !== e.dtype && (e = e.asType(a)), new t(e, r, n);
      }, t.prototype.assign = function (e) {
        if (e.dtype !== this.dtype) throw new Error("dtype of the new value (" + e.dtype + ") and previous value (" + this.dtype + ") must match");
        if (!util$1.arraysEqual(e.shape, this.shape)) throw new Error("shape of the new value (" + e.shape + ") and previous value (" + this.shape + ") must match");
        u().disposeTensor(this), this.dataId = e.dataId, u().registerTensor(this);
      }, t;
    }(c);

    t.Variable = h, Object.defineProperty(h, Symbol.hasInstance, {
      value: function value(e) {
        return e instanceof c && null != e.assign && e.assign instanceof Function;
      }
    });
    var d = h.variable;
    t.variable = d;
  });
  unwrapExports(tensor$1);
  var tensor_1 = tensor$1.TensorBuffer,
      tensor_2 = tensor$1.setTensorTracker,
      tensor_3 = tensor$1.setOpHandler,
      tensor_4 = tensor$1.setDeprecationWarningFn,
      tensor_5 = tensor$1.Tensor,
      tensor_6 = tensor$1.Variable,
      tensor_7 = tensor$1.variable,
      types = createCommonjsModule$2(function (e, t) {
    var r, n, a, o;
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), function (e) {
      e.R0 = "R0", e.R1 = "R1", e.R2 = "R2", e.R3 = "R3", e.R4 = "R4", e.R5 = "R5", e.R6 = "R6";
    }(t.Rank || (t.Rank = {})), function (e) {
      e.float32 = "float32", e.int32 = "int32", e.bool = "int32", e.complex64 = "complex64";
    }(r || (r = {})), function (e) {
      e.float32 = "float32", e.int32 = "int32", e.bool = "bool", e.complex64 = "complex64";
    }(n || (n = {})), function (e) {
      e.float32 = "float32", e.int32 = "float32", e.bool = "float32", e.complex64 = "complex64";
    }(a || (a = {})), function (e) {
      e.float32 = "complex64", e.int32 = "complex64", e.bool = "complex64", e.complex64 = "complex64";
    }(o || (o = {}));
    var i = {
      float32: a,
      int32: r,
      bool: n,
      complex64: o
    };

    function s(e, t) {
      if ("string" === e || "string" === t) {
        if ("string" === e && "string" === t) return "string";
        throw new Error("Can not upcast " + e + " with " + t);
      }

      return i[e][t];
    }

    t.upcastType = s, t.sumOutType = function (e) {
      return s(e, "int32");
    };
  });
  unwrapExports(types);
  var types_1 = types.Rank,
      types_2 = types.upcastType,
      types_3 = types.sumOutType,
      tensor_util = createCommonjsModule$2(function (e, t) {
    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.makeTypesMatch = function (e, t) {
      if (e.dtype === t.dtype) return [e, t];
      var r = types.upcastType(e.dtype, t.dtype);
      return [e.cast(r), t.cast(r)];
    }, t.assertTypesMatch = function (e, t) {
      util$1.assert(e.dtype === t.dtype, "The dtypes of the first(" + e.dtype + ") and second(" + t.dtype + ") input must match");
    }, t.isTensorInList = function (e, t) {
      for (var r = 0; r < t.length; r++) {
        if (t[r].id === e.id) return !0;
      }

      return !1;
    }, t.flattenNameArrayMap = function (e, t) {
      var r = [];
      if (e instanceof tensor$1.Tensor) r.push(e);else for (var n = e, a = 0; a < t.length; a++) {
        r.push(n[t[a]]);
      }
      return r;
    }, t.unflattenToNameArrayMap = function (e, t) {
      if (e.length !== t.length) throw new Error("Cannot unflatten Tensor[], keys and arrays are not of same length.");

      for (var r = {}, n = 0; n < e.length; n++) {
        r[e[n]] = t[n];
      }

      return r;
    }, t.getTensorsInContainer = function (e) {
      var t = [];
      return function e(t, r, n) {
        if (null != t) if (t instanceof tensor$1.Tensor) r.push(t);else if (a = t, Array.isArray(a) || "object" == _typeof(a)) {
          var a,
              o = t;

          for (var i in o) {
            var s = o[i];
            n.has(s) || (n.add(s), e(s, r, n));
          }
        }
      }(e, t, new Set()), t;
    };
  });
  unwrapExports(tensor_util);
  var tensor_util_1 = tensor_util.makeTypesMatch,
      tensor_util_2 = tensor_util.assertTypesMatch,
      tensor_util_3 = tensor_util.isTensorInList,
      tensor_util_4 = tensor_util.flattenNameArrayMap,
      tensor_util_5 = tensor_util.unflattenToNameArrayMap,
      tensor_util_6 = tensor_util.getTensorsInContainer;

  function deepMapInternal(e, t, r, n) {
    if (void 0 === r && (r = new Map()), void 0 === n && (n = new Set()), null == e) return null;
    if (n.has(e)) throw new Error("Circular references are not supported.");
    if (r.has(e)) return r.get(e);
    var a = t(e);
    if (a.recurse && null !== a.value) throw new Error("A deep map function may not return both a value and recurse=true.");

    if (a.recurse) {
      if (isIterable$1(e)) {
        var o = Array.isArray(e) ? [] : {};

        for (var i in n.add(e), e) {
          var s = deepMapInternal(e[i], t, r, n);
          o[i] = s;
        }

        return n.delete(e), o;
      }

      throw new Error("Can't recurse into non-iterable type: " + e);
    }

    return r.set(e, a.value), a.value;
  }

  function deepZip(e, t) {
    return void 0 === t && (t = zipToList), deepZipInternal(e, t);
  }

  function deepZipInternal(e, t, r) {
    void 0 === r && (r = new Set());
    var n = e[0];
    if (r.has(n)) throw new Error("Circular references are not supported.");
    var a = t(e);
    if (a.recurse && null !== a.value) throw new Error("A deep zip function may not return both a value and recurse=true.");

    if (a.recurse) {
      if (isIterable$1(n)) {
        var o = Array.isArray(n) ? [] : {};
        r.add(n);

        var i = function i(n) {
          var a = deepZipInternal(e.map(function (e) {
            return e[n];
          }), t, r);
          o[n] = a;
        };

        for (var s in n) {
          i(s);
        }

        return r.delete(n), o;
      }

      throw new Error("Can't recurse into non-iterable type: " + n);
    }

    return a.value;
  }

  function zipToList(e) {
    return null === e ? null : isIterable$1(e[0]) ? {
      value: null,
      recurse: !0
    } : {
      value: e,
      recurse: !1
    };
  }

  function deepMapAndAwaitAll(e, t) {
    return __awaiter$3(this, void 0, void 0, function () {
      var r, n, a, o, i, s;
      return __generator$3(this, function (u) {
        switch (u.label) {
          case 0:
            r = new Map(), deepMapInternal(e, t, r), n = 0, a = Array.from(r.keys()), u.label = 1;

          case 1:
            return n < a.length ? (o = a[n], (i = r.get(o)) instanceof Promise ? [4, i] : [3, 3]) : [3, 4];

          case 2:
            s = u.sent(), r.set(o, s), u.label = 3;

          case 3:
            return n++, [3, 1];

          case 4:
            return [2, deepMapInternal(e, t, r)];
        }
      });
    });
  }

  function isIterable$1(e) {
    return null != e && (Array.isArray(e) || "object" == _typeof(e) && !(e instanceof Tensor));
  }

  function isNumericArray(e) {
    if (null == e) return !1;
    if (!Array.isArray(e)) return !1;

    for (var t in e) {
      if ("number" != typeof e[t]) return !1;
    }

    return !0;
  }

  var RingBuffer = function () {
    function e(e) {
      if (this.capacity = e, this.begin = 0, this.end = 0, e < 1) throw new RangeError("Can't create ring buffer of capacity < 1.");
      this.data = new Array(e), this.doubledCapacity = 2 * e;
    }

    return e.prototype.wrap = function (e) {
      for (; e < 0;) {
        e += this.doubledCapacity;
      }

      return e % this.doubledCapacity;
    }, e.prototype.get = function (e) {
      if (e < 0) throw new RangeError("Can't get item at a negative index.");
      return this.data[e % this.capacity];
    }, e.prototype.set = function (e, t) {
      if (e < 0) throw new RangeError("Can't set item at a negative index.");
      this.data[e % this.capacity] = t;
    }, e.prototype.length = function () {
      var e = this.end - this.begin;
      return e < 0 && (e = this.doubledCapacity + e), e;
    }, e.prototype.isFull = function () {
      return this.length() === this.capacity;
    }, e.prototype.isEmpty = function () {
      return 0 === this.length();
    }, e.prototype.push = function (e) {
      if (this.isFull()) throw new RangeError("Ring buffer is full.");
      this.set(this.end, e), this.end = this.wrap(this.end + 1);
    }, e.prototype.pushAll = function (e) {
      for (var t = 0, r = e; t < r.length; t++) {
        var n = r[t];
        this.push(n);
      }
    }, e.prototype.pop = function () {
      if (this.isEmpty()) throw new RangeError("Ring buffer is empty.");
      this.end = this.wrap(this.end - 1);
      var e = this.get(this.end);
      return this.set(this.end, void 0), e;
    }, e.prototype.unshift = function (e) {
      if (this.isFull()) throw new RangeError("Ring buffer is full.");
      this.begin = this.wrap(this.begin - 1), this.set(this.begin, e);
    }, e.prototype.shift = function () {
      if (this.isEmpty()) throw new RangeError("Ring buffer is empty.");
      var e = this.get(this.begin);
      return this.set(this.begin, void 0), this.begin = this.wrap(this.begin + 1), e;
    }, e.prototype.shuffleExcise = function (e) {
      if (this.isEmpty()) throw new RangeError("Ring buffer is empty.");
      var t = this.wrap(this.begin + e),
          r = this.get(t);
      return this.set(t, this.pop()), r;
    }, e;
  }(),
      GrowingRingBuffer = function (e) {
    function t() {
      return e.call(this, t.INITIAL_CAPACITY) || this;
    }

    return __extends$2(t, e), t.prototype.isFull = function () {
      return !1;
    }, t.prototype.push = function (t) {
      e.prototype.isFull.call(this) && this.expand(), e.prototype.push.call(this, t);
    }, t.prototype.unshift = function (t) {
      e.prototype.isFull.call(this) && this.expand(), e.prototype.unshift.call(this, t);
    }, t.prototype.expand = function () {
      for (var e = 2 * this.capacity, t = new Array(e), r = this.length(), n = 0; n < r; n++) {
        t[n] = this.get(this.wrap(this.begin + n));
      }

      this.data = t, this.capacity = e, this.doubledCapacity = 2 * this.capacity, this.begin = 0, this.end = r;
    }, t.INITIAL_CAPACITY = 32, t;
  }(RingBuffer);

  function iteratorFromItems(e) {
    return new ArrayIterator(e);
  }

  function iteratorFromFunction(e) {
    return new FunctionCallIterator(e);
  }

  function iteratorFromConcatenated(e, t) {
    return new ChainedIterator(e, t);
  }

  function iteratorFromZipped(e, t) {
    return void 0 === t && (t = ZipMismatchMode.FAIL), new ZipIterator(e, t);
  }

  var ZipMismatchMode,
      LazyIterator = function () {
    function e() {}

    return e.prototype.collect = function (e, t) {
      return void 0 === e && (e = 1e3), void 0 === t && (t = 100), __awaiter$3(this, void 0, void 0, function () {
        var r, n, a, o;
        return __generator$3(this, function (i) {
          switch (i.label) {
            case 0:
              return r = t > 0 ? this.prefetch(t) : this, n = [], a = 0, [4, r.next()];

            case 1:
              o = i.sent(), i.label = 2;

            case 2:
              return o.done ? [3, 4] : (n.push(o.value), ++a >= e ? [2, n] : [4, r.next()]);

            case 3:
              return o = i.sent(), [3, 2];

            case 4:
              return [2, n];
          }
        });
      });
    }, e.prototype.resolveFully = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        var e;
        return __generator$3(this, function (t) {
          switch (t.label) {
            case 0:
              return [4, this.next()];

            case 1:
              e = t.sent(), t.label = 2;

            case 2:
              return e.done ? [3, 4] : [4, this.next()];

            case 3:
              return e = t.sent(), [3, 2];

            case 4:
              return [2];
          }
        });
      });
    }, e.prototype.resolveWhile = function (e) {
      return __awaiter$3(this, void 0, void 0, function () {
        var t, r;
        return __generator$3(this, function (n) {
          switch (n.label) {
            case 0:
              return [4, this.next()];

            case 1:
              t = n.sent(), r = e(t.value), n.label = 2;

            case 2:
              return t.done || !r ? [3, 4] : [4, this.next()];

            case 3:
              return t = n.sent(), r = e(t.value), [3, 2];

            case 4:
              return [2];
          }
        });
      });
    }, e.prototype.handleErrors = function (e) {
      return new ErrorHandlingLazyIterator(this, e);
    }, e.prototype.filter = function (e) {
      return new FilterIterator(this, e);
    }, e.prototype.map = function (e) {
      return new MapIterator(this, e);
    }, e.prototype.mapAsync = function (e) {
      return new AsyncMapIterator(this, e);
    }, e.prototype.serialMapAsync = function (e) {
      return new AsyncMapIterator(this, e).serial();
    }, e.prototype.flatmap = function (e) {
      return new FlatmapIterator(this, e);
    }, e.prototype.forEachAsync = function (e) {
      return __awaiter$3(this, void 0, void 0, function () {
        return __generator$3(this, function (t) {
          return [2, this.map(e).resolveFully()];
        });
      });
    }, e.prototype.serialForEach = function (e) {
      return __awaiter$3(this, void 0, void 0, function () {
        return __generator$3(this, function (t) {
          return [2, this.serialMapAsync(e).resolveWhile(function (e) {
            return !0 === e;
          })];
        });
      });
    }, e.prototype.rowMajorBatch = function (e, t) {
      return void 0 === t && (t = !0), new RowMajorBatchIterator(this, e, t);
    }, e.prototype.columnMajorBatch = function (e, t, r) {
      return void 0 === t && (t = !0), void 0 === r && (r = zipToList), this.rowMajorBatch(e, t).map(function (e) {
        return deepZip(e, r);
      });
    }, e.prototype.concatenate = function (e, t) {
      return new ChainedIterator(iteratorFromItems([this, e]), t);
    }, e.prototype.take = function (e) {
      return e < 0 || null == e ? this : new TakeIterator(this, e);
    }, e.prototype.skip = function (e) {
      return e < 0 || null == e ? this : new SkipIterator(this, e);
    }, e.prototype.prefetch = function (e) {
      return new PrefetchIterator(this, e);
    }, e.prototype.shuffle = function (e, t) {
      return new ShuffleIterator(this, e, t);
    }, e.prototype.serial = function () {
      return new SerialIterator(this);
    }, e;
  }(),
      ArrayIterator = function (e) {
    function t(t) {
      var r = e.call(this) || this;
      return r.items = t, r.trav = 0, r;
    }

    return __extends$2(t, e), t.prototype.summary = function () {
      return "Array of " + this.items.length + " items";
    }, t.prototype.next = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        var e, t;
        return __generator$3(this, function (r) {
          return this.trav >= this.items.length ? [2, {
            value: null,
            done: !0
          }] : (e = this.items[this.trav], t = e instanceof Tensor ? clone(e) : e, this.trav++, [2, {
            value: t,
            done: !1
          }]);
        });
      });
    }, t;
  }(LazyIterator),
      FunctionCallIterator = function (e) {
    function t(t) {
      var r = e.call(this) || this;
      return r.nextFn = t, r;
    }

    return __extends$2(t, e), t.prototype.summary = function () {
      return "Function call";
    }, t.prototype.next = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        return __generator$3(this, function (e) {
          try {
            return [2, this.nextFn()];
          } catch (e) {
            throw e.message = "Error thrown while iterating through a dataset: " + e.message, e;
          }

          return [2];
        });
      });
    }, t;
  }(LazyIterator),
      SerialIterator = function (e) {
    function t(t) {
      var r = e.call(this) || this;
      return r.upstream = t, r.lastRead = Promise.resolve({
        value: null,
        done: !1
      }), r;
    }

    return __extends$2(t, e), t.prototype.summary = function () {
      return this.upstream.summary() + " -> Serial";
    }, t.prototype.next = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        var e = this;
        return __generator$3(this, function (t) {
          return this.lastRead = this.lastRead.then(function () {
            return e.serialNext();
          }), [2, this.lastRead];
        });
      });
    }, t.prototype.serialNext = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        return __generator$3(this, function (e) {
          return [2, this.upstream.next()];
        });
      });
    }, t;
  }(LazyIterator),
      SkipIterator = function (e) {
    function t(t, r) {
      var n = e.call(this) || this;
      return n.upstream = t, n.maxCount = r, n.count = 0, n.lastRead = Promise.resolve({
        value: null,
        done: !1
      }), n;
    }

    return __extends$2(t, e), t.prototype.summary = function () {
      return this.upstream.summary() + " -> Skip";
    }, t.prototype.next = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        var e = this;
        return __generator$3(this, function (t) {
          return this.lastRead = this.lastRead.then(function () {
            return e.serialNext();
          }), [2, this.lastRead];
        });
      });
    }, t.prototype.serialNext = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        var e;
        return __generator$3(this, function (t) {
          switch (t.label) {
            case 0:
              return this.count++ < this.maxCount ? [4, this.upstream.next()] : [3, 2];

            case 1:
              return (e = t.sent()).done ? [2, e] : (dispose(e.value), [3, 0]);

            case 2:
              return [2, this.upstream.next()];
          }
        });
      });
    }, t;
  }(LazyIterator),
      TakeIterator = function (e) {
    function t(t, r) {
      var n = e.call(this) || this;
      return n.upstream = t, n.maxCount = r, n.count = 0, n;
    }

    return __extends$2(t, e), t.prototype.summary = function () {
      return this.upstream.summary() + " -> Take";
    }, t.prototype.next = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        return __generator$3(this, function (e) {
          return this.count++ >= this.maxCount ? [2, {
            value: null,
            done: !0
          }] : [2, this.upstream.next()];
        });
      });
    }, t;
  }(LazyIterator),
      RowMajorBatchIterator = function (e) {
    function t(t, r, n) {
      void 0 === n && (n = !0);
      var a = e.call(this) || this;
      return a.upstream = t, a.batchSize = r, a.enableSmallLastBatch = n, a.lastRead = Promise.resolve({
        value: null,
        done: !1
      }), a;
    }

    return __extends$2(t, e), t.prototype.summary = function () {
      return this.upstream.summary() + " -> RowMajorBatch";
    }, t.prototype.next = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        var e = this;
        return __generator$3(this, function (t) {
          return this.lastRead = this.lastRead.then(function () {
            return e.serialNext();
          }), [2, this.lastRead];
        });
      });
    }, t.prototype.serialNext = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        var e, t;
        return __generator$3(this, function (r) {
          switch (r.label) {
            case 0:
              e = [], r.label = 1;

            case 1:
              return e.length < this.batchSize ? [4, this.upstream.next()] : [3, 3];

            case 2:
              return (t = r.sent()).done ? this.enableSmallLastBatch && e.length > 0 ? [2, {
                value: e,
                done: !1
              }] : [2, {
                value: null,
                done: !0
              }] : (e.push(t.value), [3, 1]);

            case 3:
              return [2, {
                value: e,
                done: !1
              }];
          }
        });
      });
    }, t;
  }(LazyIterator),
      FilterIterator = function (e) {
    function t(t, r) {
      var n = e.call(this) || this;
      return n.upstream = t, n.predicate = r, n.lastRead = Promise.resolve({
        value: null,
        done: !1
      }), n;
    }

    return __extends$2(t, e), t.prototype.summary = function () {
      return this.upstream.summary() + " -> Filter";
    }, t.prototype.next = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        var e = this;
        return __generator$3(this, function (t) {
          return this.lastRead = this.lastRead.then(function () {
            return e.serialNext();
          }), [2, this.lastRead];
        });
      });
    }, t.prototype.serialNext = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        var e;
        return __generator$3(this, function (t) {
          switch (t.label) {
            case 0:
              return [4, this.upstream.next()];

            case 1:
              return (e = t.sent()).done || this.predicate(e.value) ? [2, e] : (dispose(e.value), [3, 0]);

            case 2:
              return [2];
          }
        });
      });
    }, t;
  }(LazyIterator),
      MapIterator = function (e) {
    function t(t, r) {
      var n = e.call(this) || this;
      return n.upstream = t, n.transform = r, n;
    }

    return __extends$2(t, e), t.prototype.summary = function () {
      return this.upstream.summary() + " -> Map";
    }, t.prototype.next = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        var e, t, r, n, a, o, i;
        return __generator$3(this, function (s) {
          switch (s.label) {
            case 0:
              return [4, this.upstream.next()];

            case 1:
              if ((e = s.sent()).done) return [2, {
                value: null,
                done: !0
              }];

              for (t = tensor_util_6(e.value), r = this.transform(e.value), n = tensor_util_6(r), a = 0, o = t; a < o.length; a++) {
                i = o[a], tensor_util_3(i, n) || i.dispose();
              }

              return [2, {
                value: r,
                done: !1
              }];
          }
        });
      });
    }, t;
  }(LazyIterator),
      ErrorHandlingLazyIterator = function (e) {
    function t(t, r) {
      var n = e.call(this) || this;
      return n.upstream = t, n.handler = r, n.count = 0, n.lastRead = Promise.resolve({
        value: null,
        done: !1
      }), n;
    }

    return __extends$2(t, e), t.prototype.summary = function () {
      return this.upstream.summary() + " -> handleErrors";
    }, t.prototype.next = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        var e = this;
        return __generator$3(this, function (t) {
          return this.lastRead = this.lastRead.then(function () {
            return e.serialNext();
          }), [2, this.lastRead];
        });
      });
    }, t.prototype.serialNext = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        var e;
        return __generator$3(this, function (t) {
          switch (t.label) {
            case 0:
              t.label = 1;

            case 1:
              return t.trys.push([1, 3,, 4]), [4, this.upstream.next()];

            case 2:
              return [2, t.sent()];

            case 3:
              return e = t.sent(), this.handler(e) ? [3, 4] : [2, {
                value: null,
                done: !0
              }];

            case 4:
              return [3, 0];

            case 5:
              return [2];
          }
        });
      });
    }, t;
  }(LazyIterator),
      AsyncMapIterator = function (e) {
    function t(t, r) {
      var n = e.call(this) || this;
      return n.upstream = t, n.transform = r, n;
    }

    return __extends$2(t, e), t.prototype.summary = function () {
      return this.upstream.summary() + " -> AsyncMap";
    }, t.prototype.next = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        var e, t, r, n, a, o, i;
        return __generator$3(this, function (s) {
          switch (s.label) {
            case 0:
              return [4, this.upstream.next()];

            case 1:
              return (e = s.sent()).done ? [2, {
                value: null,
                done: !0
              }] : (t = tensor_util_6(e.value), [4, this.transform(e.value)]);

            case 2:
              for (r = s.sent(), n = tensor_util_6(r), a = 0, o = t; a < o.length; a++) {
                i = o[a], tensor_util_3(i, n) || i.dispose();
              }

              return [2, {
                value: r,
                done: !1
              }];
          }
        });
      });
    }, t;
  }(LazyIterator),
      OneToManyIterator = function (e) {
    function t() {
      var t = e.call(this) || this;
      return t.outputQueue = new GrowingRingBuffer(), t.lastRead = Promise.resolve({
        value: null,
        done: !1
      }), t;
    }

    return __extends$2(t, e), t.prototype.next = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        var e = this;
        return __generator$3(this, function (t) {
          return this.lastRead = this.lastRead.then(function () {
            return e.serialNext();
          }), [2, this.lastRead];
        });
      });
    }, t.prototype.serialNext = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        return __generator$3(this, function (e) {
          switch (e.label) {
            case 0:
              return 0 !== this.outputQueue.length() ? [3, 2] : [4, this.pump()];

            case 1:
              return e.sent() ? [3, 0] : [2, {
                value: null,
                done: !0
              }];

            case 2:
              return [2, {
                value: this.outputQueue.shift(),
                done: !1
              }];
          }
        });
      });
    }, t;
  }(LazyIterator),
      FlatmapIterator = function (e) {
    function t(t, r) {
      var n = e.call(this) || this;
      return n.upstream = t, n.transform = r, n;
    }

    return __extends$2(t, e), t.prototype.summary = function () {
      return this.upstream.summary() + " -> Flatmap";
    }, t.prototype.pump = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        var e, t, r, n, a, o, i;
        return __generator$3(this, function (s) {
          switch (s.label) {
            case 0:
              return [4, this.upstream.next()];

            case 1:
              if ((e = s.sent()).done) return [2, !1];

              for (t = tensor_util_6(e.value), r = this.transform(e.value), n = tensor_util_6(r), this.outputQueue.pushAll(r), a = 0, o = t; a < o.length; a++) {
                i = o[a], tensor_util_3(i, n) || i.dispose();
              }

              return [2, !0];
          }
        });
      });
    }, t;
  }(OneToManyIterator),
      ChainedIterator = function (e) {
    function t(t, r) {
      var n = e.call(this) || this;
      return n.baseErrorHandler = r, n.lastRead = null, n.iterator = null, n.moreIterators = t, n;
    }

    return __extends$2(t, e), t.prototype.summary = function () {
      return "TODO: fill in upstream of chained summaries -> Chained";
    }, t.prototype.next = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        return __generator$3(this, function (e) {
          return this.lastRead = this.readFromChain(this.lastRead), [2, this.lastRead];
        });
      });
    }, t.prototype.readFromChain = function (e) {
      return __awaiter$3(this, void 0, void 0, function () {
        var t, r;
        return __generator$3(this, function (n) {
          switch (n.label) {
            case 0:
              return [4, e];

            case 1:
              return n.sent(), null != this.iterator ? [3, 3] : [4, this.moreIterators.next()];

            case 2:
              if ((t = n.sent()).done) return [2, {
                value: null,
                done: !0
              }];
              this.iterator = t.value, null != this.baseErrorHandler && (this.iterator = this.iterator.handleErrors(this.baseErrorHandler)), n.label = 3;

            case 3:
              return [4, this.iterator.next()];

            case 4:
              return (r = n.sent()).done ? (this.iterator = null, [2, this.readFromChain(e)]) : [2, r];
          }
        });
      });
    }, t;
  }(LazyIterator),
      t;

  t = ZipMismatchMode || (ZipMismatchMode = {}), t[t.FAIL = 0] = "FAIL", t[t.SHORTEST = 1] = "SHORTEST", t[t.LONGEST = 2] = "LONGEST";

  var ZipIterator = function (e) {
    function t(t, r) {
      void 0 === r && (r = ZipMismatchMode.FAIL);
      var n = e.call(this) || this;
      return n.iterators = t, n.mismatchMode = r, n.count = 0, n.currentPromise = null, n;
    }

    return __extends$2(t, e), t.prototype.summary = function () {
      return "{TODO: fill in upstream of zip summaries} -> Zip";
    }, t.prototype.nextState = function (e) {
      return __awaiter$3(this, void 0, void 0, function () {
        function t(e) {
          return e instanceof LazyIterator ? {
            value: e.next().then(function (e) {
              return r++, e.done && n++, e.value;
            }),
            recurse: !1
          } : {
            value: null,
            recurse: !0
          };
        }

        var r, n, a;
        return __generator$3(this, function (o) {
          switch (o.label) {
            case 0:
              return [4, e];

            case 1:
              return o.sent(), r = 0, n = 0, [4, deepMapAndAwaitAll(this.iterators, t)];

            case 2:
              if (a = o.sent(), r === n) return [2, {
                value: null,
                done: !0
              }];
              if (n > 0) switch (this.mismatchMode) {
                case ZipMismatchMode.FAIL:
                  throw new Error("Zipped streams should have the same length. Mismatched at element " + this.count + ".");

                case ZipMismatchMode.SHORTEST:
                  return [2, {
                    value: null,
                    done: !0
                  }];

                case ZipMismatchMode.LONGEST:
              }
              return this.count++, [2, {
                value: a,
                done: !1
              }];
          }
        });
      });
    }, t.prototype.next = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        return __generator$3(this, function (e) {
          switch (e.label) {
            case 0:
              return this.currentPromise = this.nextState(this.currentPromise), [4, this.currentPromise];

            case 1:
              return [2, e.sent()];
          }
        });
      });
    }, t;
  }(LazyIterator),
      PrefetchIterator = function (e) {
    function t(t, r) {
      var n = e.call(this) || this;
      return n.upstream = t, n.bufferSize = r, n.buffer = new RingBuffer(r), n;
    }

    return __extends$2(t, e), t.prototype.summary = function () {
      return this.upstream.summary() + " -> Prefetch";
    }, t.prototype.refill = function () {
      for (; !this.buffer.isFull();) {
        var e = this.upstream.next();
        this.buffer.push(e);
      }
    }, t.prototype.next = function () {
      return this.refill(), this.buffer.shift();
    }, t;
  }(LazyIterator),
      ShuffleIterator = function (e) {
    function t(t, r, n) {
      var a = e.call(this, t, r) || this;
      return a.upstream = t, a.windowSize = r, a.upstreamExhausted = !1, a.random = seedrandom_1$1(n || util.now().toString()), a.lastRead = Promise.resolve({
        value: null,
        done: !1
      }), a;
    }

    return __extends$2(t, e), t.prototype.next = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        var e = this;
        return __generator$3(this, function (t) {
          return this.lastRead = this.lastRead.then(function () {
            return e.serialNext();
          }), [2, this.lastRead];
        });
      });
    }, t.prototype.randomInt = function (e) {
      return Math.floor(this.random() * e);
    }, t.prototype.chooseIndex = function () {
      return this.randomInt(this.buffer.length());
    }, t.prototype.serialNext = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        var e, t;
        return __generator$3(this, function (r) {
          switch (r.label) {
            case 0:
              this.upstreamExhausted || this.refill(), r.label = 1;

            case 1:
              return this.buffer.isEmpty() ? [3, 3] : (e = this.chooseIndex(), [4, this.buffer.shuffleExcise(e)]);

            case 2:
              return (t = r.sent()).done ? (this.upstreamExhausted = !0, [3, 1]) : (this.refill(), [2, t]);

            case 3:
              return [2, {
                value: null,
                done: !0
              }];
          }
        });
      });
    }, t;
  }(PrefetchIterator),
      Dataset = function () {
    function e() {
      this.size = null;
    }

    return e.prototype.batch = function (e, t) {
      var r = this;
      void 0 === t && (t = !0);
      var n = this;
      return util.assert(e > 0, "batchSize need to be positive, but it is\n      " + e), datasetFromIteratorFn(function () {
        return __awaiter$3(r, void 0, void 0, function () {
          return __generator$3(this, function (r) {
            switch (r.label) {
              case 0:
                return [4, n.iterator()];

              case 1:
                return [2, r.sent().columnMajorBatch(e, t, deepBatchConcat)];
            }
          });
        });
      }, this.size === 1 / 0 || null == this.size ? this.size : t ? Math.ceil(this.size / e) : Math.floor(this.size / e));
    }, e.prototype.concatenate = function (e) {
      var t = this,
          r = this;
      return datasetFromIteratorFn(function () {
        return __awaiter$3(t, void 0, void 0, function () {
          var t, n;
          return __generator$3(this, function (a) {
            switch (a.label) {
              case 0:
                return [4, r.iterator()];

              case 1:
                return n = (t = a.sent()).concatenate, [4, e.iterator()];

              case 2:
                return [2, n.apply(t, [a.sent()])];
            }
          });
        });
      }, this.size === 1 / 0 || e.size === 1 / 0 ? 1 / 0 : null != this.size && null != e.size ? this.size + e.size : null);
    }, e.prototype.filter = function (e) {
      var t = this,
          r = this;
      return datasetFromIteratorFn(function () {
        return __awaiter$3(t, void 0, void 0, function () {
          return __generator$3(this, function (t) {
            switch (t.label) {
              case 0:
                return [4, r.iterator()];

              case 1:
                return [2, t.sent().filter(function (t) {
                  return tidy(function () {
                    return e(t);
                  });
                })];
            }
          });
        });
      }, this.size === 1 / 0 ? 1 / 0 : null);
    }, e.prototype.forEachAsync = function (e) {
      return __awaiter$3(this, void 0, void 0, function () {
        return __generator$3(this, function (t) {
          switch (t.label) {
            case 0:
              return [4, this.iterator()];

            case 1:
              return [2, t.sent().forEachAsync(e)];
          }
        });
      });
    }, e.prototype.forEach = function (e) {
      return __awaiter$3(this, void 0, void 0, function () {
        return __generator$3(this, function (t) {
          return deprecationWarn("dataset.forEach() is deprecated and will be removed. Please use dataset.forEachAsync() instead"), [2, this.forEachAsync(e)];
        });
      });
    }, e.prototype.map = function (e) {
      var t = this,
          r = this;
      return datasetFromIteratorFn(function () {
        return __awaiter$3(t, void 0, void 0, function () {
          return __generator$3(this, function (t) {
            switch (t.label) {
              case 0:
                return [4, r.iterator()];

              case 1:
                return [2, t.sent().map(function (t) {
                  return tidy(function () {
                    return e(t);
                  });
                })];
            }
          });
        });
      }, this.size);
    }, e.prototype.mapAsync = function (e) {
      var t = this,
          r = this;
      return datasetFromIteratorFn(function () {
        return __awaiter$3(t, void 0, void 0, function () {
          return __generator$3(this, function (t) {
            switch (t.label) {
              case 0:
                return [4, r.iterator()];

              case 1:
                return [2, t.sent().mapAsync(e)];
            }
          });
        });
      }, this.size);
    }, e.prototype.prefetch = function (e) {
      var t = this,
          r = this;
      return datasetFromIteratorFn(function () {
        return __awaiter$3(t, void 0, void 0, function () {
          return __generator$3(this, function (t) {
            switch (t.label) {
              case 0:
                return [4, r.iterator()];

              case 1:
                return [2, t.sent().prefetch(e)];
            }
          });
        });
      }, this.size);
    }, e.prototype.repeat = function (e) {
      var t = this,
          r = this;
      return datasetFromIteratorFn(function () {
        return __awaiter$3(t, void 0, void 0, function () {
          var t = this;
          return __generator$3(this, function (n) {
            return [2, iteratorFromConcatenated(iteratorFromFunction(function () {
              return __awaiter$3(t, void 0, void 0, function () {
                var e;
                return __generator$3(this, function (t) {
                  switch (t.label) {
                    case 0:
                      return e = {}, [4, r.iterator()];

                    case 1:
                      return [2, (e.value = t.sent(), e.done = !1, e)];
                  }
                });
              });
            }).take(e))];
          });
        });
      }, null != this.size && e > 0 ? this.size * e : 0 === e ? 0 : null != this.size && (void 0 === e || e < 0) ? 1 / 0 : null);
    }, e.prototype.skip = function (e) {
      var t = this,
          r = this;
      return datasetFromIteratorFn(function () {
        return __awaiter$3(t, void 0, void 0, function () {
          return __generator$3(this, function (t) {
            switch (t.label) {
              case 0:
                return [4, r.iterator()];

              case 1:
                return [2, t.sent().skip(e)];
            }
          });
        });
      }, null != this.size && e >= 0 && this.size >= e ? this.size - e : null != this.size && (this.size < e || void 0 === e || e < 0) ? 0 : null);
    }, e.prototype.shuffle = function (e, t, r) {
      var n = this;
      void 0 === r && (r = !0);
      var a = this,
          o = seedrandom_1$1(t || util.now().toString());
      return datasetFromIteratorFn(function () {
        return __awaiter$3(n, void 0, void 0, function () {
          var t;
          return __generator$3(this, function (n) {
            switch (n.label) {
              case 0:
                return t = o.int32(), r && (t += o.int32()), [4, a.iterator()];

              case 1:
                return [2, n.sent().shuffle(e, t.toString())];
            }
          });
        });
      }, this.size);
    }, e.prototype.take = function (e) {
      var t = this,
          r = this;
      return datasetFromIteratorFn(function () {
        return __awaiter$3(t, void 0, void 0, function () {
          return __generator$3(this, function (t) {
            switch (t.label) {
              case 0:
                return [4, r.iterator()];

              case 1:
                return [2, t.sent().take(e)];
            }
          });
        });
      }, null != this.size && this.size > e ? e : null != this.size && this.size <= e ? this.size : null);
    }, e.prototype.toArray = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        return __generator$3(this, function (e) {
          switch (e.label) {
            case 0:
              return [4, this.iterator()];

            case 1:
              return [2, e.sent().collect()];
          }
        });
      });
    }, e;
  }();

  function datasetFromIteratorFn(e, t) {
    return void 0 === t && (t = null), new (function (r) {
      function n() {
        var e = null !== r && r.apply(this, arguments) || this;
        return e.size = t, e;
      }

      return __extends$2(n, r), n.prototype.iterator = function () {
        return __awaiter$3(this, void 0, void 0, function () {
          return __generator$3(this, function (t) {
            return [2, e()];
          });
        });
      }, n;
    }(Dataset))();
  }

  function array(e) {
    var t = this;
    return datasetFromIteratorFn(function () {
      return __awaiter$3(t, void 0, void 0, function () {
        return __generator$3(this, function (t) {
          return [2, iteratorFromItems(e)];
        });
      });
    }, e.length);
  }

  function zip(e) {
    var t,
        r = this;
    if (!isIterable$1(e)) throw new Error("The argument to zip() must be an object or array.");
    if (Array.isArray(e)) for (var n = 0; n < e.length; n++) {
      t = null == t ? e[n].size : Math.min(t, e[n].size);
    } else if (e instanceof Object) for (var a in e) {
      t = null == t ? e[a].size : Math.min(t, e[a].size);
    }
    return datasetFromIteratorFn(function () {
      return __awaiter$3(r, void 0, void 0, function () {
        return __generator$3(this, function (t) {
          switch (t.label) {
            case 0:
              return [4, deepMapAndAwaitAll(e, function (e) {
                if (e instanceof Dataset) return {
                  value: e.iterator(),
                  recurse: !1
                };
                if (isIterable$1(e)) return {
                  value: null,
                  recurse: !0
                };
                throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.");
              })];

            case 1:
              return [2, iteratorFromZipped(t.sent(), ZipMismatchMode.SHORTEST)];
          }
        });
      });
    }, t);
  }

  function deepBatchConcat(e) {
    if (null === e) return null;
    var t = e[0];
    return "string" == typeof t ? {
      value: e,
      recurse: !1
    } : isIterable$1(t) ? isNumericArray(t) ? {
      value: batchConcat(e),
      recurse: !1
    } : {
      value: null,
      recurse: !0
    } : {
      value: batchConcat(e),
      recurse: !1
    };
  }

  function batchConcat(e) {
    if (0 === e.length) throw new Error("Can't make a batch of zero elements.");
    if (e[0] instanceof Tensor) return stack(e);
    if (Array.isArray(e[0])) return batchConcatArrays(e);
    var t = e;
    return Tensor.make([t.length], {
      values: new Float32Array(t)
    });
  }

  function batchConcatArrays(e) {
    for (var t = e[0].length, r = [e.length, e[0].length], n = new Float32Array(e.length * t), a = 0, o = 0, i = e; o < i.length; o++) {
      var s = i[o];
      if (s.length !== t) throw new Error("Elements must have the same shape to be batched");
      n.set(s, a), a += t;
    }

    return Tensor.make(r, {
      values: n
    });
  }

  var TextLineDataset = function (e) {
    function t(t) {
      var r = e.call(this) || this;
      return r.input = t, r;
    }

    return __extends$2(t, e), t.prototype.iterator = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        var e;
        return __generator$3(this, function (t) {
          switch (t.label) {
            case 0:
              return [4, this.input.iterator()];

            case 1:
              return e = t.sent(), [2, e.decodeUTF8().split("\n")];
          }
        });
      });
    }, t;
  }(Dataset),
      CODE_QUOTE = '"',
      STATE_OUT = Symbol("out"),
      STATE_FIELD = Symbol("field"),
      STATE_QUOTE = Symbol("quote"),
      STATE_QUOTE_AFTER_QUOTE = Symbol("quoteafterquote"),
      STATE_WITHIN_QUOTE_IN_QUOTE = Symbol("quoteinquote"),
      CSVDataset = function (e) {
    function t(t, r) {
      var n = e.call(this) || this;
      return n.input = t, n.hasHeader = !0, n.fullColumnNames = null, n.columnNamesValidated = !1, n.columnConfigs = null, n.configuredColumnsOnly = !1, n.delimiter = ",", n.base = new TextLineDataset(t), r || (r = {}), n.hasHeader = !1 !== r.hasHeader, n.fullColumnNames = r.columnNames, n.columnConfigs = r.columnConfigs, n.configuredColumnsOnly = r.configuredColumnsOnly, n.delimiter = r.delimiter ? r.delimiter : ",", n;
    }

    return __extends$2(t, e), t.prototype.columnNames = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        return __generator$3(this, function (e) {
          switch (e.label) {
            case 0:
              return this.columnNamesValidated ? [3, 2] : [4, this.setColumnNames()];

            case 1:
              e.sent(), e.label = 2;

            case 2:
              return [2, this.configuredColumnsOnly ? Object.keys(this.columnConfigs) : this.fullColumnNames];
          }
        });
      });
    }, t.prototype.setColumnNames = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        var e, t, r, n, a, o;
        return __generator$3(this, function (i) {
          switch (i.label) {
            case 0:
              return [4, this.maybeReadHeaderLine()];

            case 1:
              if (e = i.sent(), !this.fullColumnNames && !e) throw new Error("Column names must be provided if there is no header line.");
              if (this.fullColumnNames && e && util.assert(e.length === this.fullColumnNames.length, "The length of provided columnNames (" + this.fullColumnNames.length.toString() + ") does not match the length of the header line read from file (" + e.length.toString() + ")."), this.fullColumnNames || (this.fullColumnNames = e), t = this.fullColumnNames.reduce(function (e, t) {
                return e[t] = e[t] + 1 || 1, e;
              }, {}), r = Object.keys(t).filter(function (e) {
                return t[e] > 1;
              }), util.assert(0 === r.length, "Duplicate column names found: " + r.toString()), this.columnConfigs) for (n = 0, a = Object.keys(this.columnConfigs); n < a.length; n++) {
                if (o = a[n], -1 === this.fullColumnNames.indexOf(o)) throw new Error('The key "' + o + '" provided in columnConfigs does not match any of the column names (' + this.fullColumnNames.toString() + ").");
              }
              return this.columnNamesValidated = !0, [2];
          }
        });
      });
    }, t.prototype.maybeReadHeaderLine = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        var e;
        return __generator$3(this, function (t) {
          switch (t.label) {
            case 0:
              return this.hasHeader ? [4, this.base.iterator()] : [3, 3];

            case 1:
              return [4, t.sent().next()];

            case 2:
              if ((e = t.sent()).done) throw new Error("No data was found for CSV parsing.");
              return [2, e.value.split(this.delimiter)];

            case 3:
              return [2, null];
          }
        });
      });
    }, t.prototype.iterator = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        var e,
            t = this;
        return __generator$3(this, function (r) {
          switch (r.label) {
            case 0:
              return this.columnNamesValidated ? [3, 2] : [4, this.setColumnNames()];

            case 1:
              r.sent(), r.label = 2;

            case 2:
              return [4, this.base.iterator()];

            case 3:
              return e = r.sent(), this.hasHeader && (e = e.skip(1)), [2, e.map(function (e) {
                return t.makeDataElement(e);
              })];
          }
        });
      });
    }, t.prototype.makeDataElement = function (e) {
      for (var t = this.parseRow(e), r = {}, n = {}, a = 0; a < this.fullColumnNames.length; a++) {
        var o = this.fullColumnNames[a],
            i = this.columnConfigs ? this.columnConfigs[o] : null;

        if (!this.configuredColumnsOnly || i) {
          var s = t[a],
              u = null;
          if ("" === s) {
            if (i && void 0 !== i.default) u = i.default;else {
              if (i && (i.required || i.isLabel)) throw new Error("Required column " + o + " is empty in this line: " + e);
              u = void 0;
            }
          } else {
            var l = Number(s);
            if (isNaN(l)) u = i && "bool" === i.dtype ? this.getBoolean(s) : s;else if (i && i.dtype) switch (i.dtype) {
              case "float32":
                u = l;
                break;

              case "int32":
                u = Math.floor(l);
                break;

              case "bool":
                u = this.getBoolean(s);
                break;

              default:
                u = l;
            } else u = l;
          }
          i && i.isLabel ? n[o] = u : r[o] = u;
        }
      }

      return 0 === Object.keys(n).length ? r : [r, n];
    }, t.prototype.getBoolean = function (e) {
      return "1" === e || "true" === e.toLowerCase() ? 1 : 0;
    }, t.prototype.parseRow = function (e) {
      for (var t = [], r = 0, n = e.length, a = STATE_FIELD, o = 0; o < n; o++) {
        switch (a) {
          case STATE_OUT:
            switch (e.charAt(o)) {
              case CODE_QUOTE:
                r = o + 1, a = STATE_QUOTE;
                break;

              case this.delimiter:
                t.push(""), a = STATE_OUT, r = o + 1;
                break;

              default:
                a = STATE_FIELD, r = o;
            }

            break;

          case STATE_FIELD:
            switch (e.charAt(o)) {
              case this.delimiter:
                t.push(e.substring(r, o)), a = STATE_OUT, r = o + 1;
            }

            break;

          case STATE_QUOTE:
            switch (e.charAt(o)) {
              case CODE_QUOTE:
                a = STATE_QUOTE_AFTER_QUOTE;
            }

            break;

          case STATE_QUOTE_AFTER_QUOTE:
            switch (e.charAt(o)) {
              case this.delimiter:
                t.push(e.substring(r, o - 1)), a = STATE_OUT, r = o + 1;
                break;

              case CODE_QUOTE:
                a = STATE_QUOTE;
                break;

              default:
                a = STATE_WITHIN_QUOTE_IN_QUOTE;
            }

            break;

          case STATE_WITHIN_QUOTE_IN_QUOTE:
            switch (e.charAt(o)) {
              case CODE_QUOTE:
                a = STATE_QUOTE;
            }

        }
      }

      return a === STATE_QUOTE_AFTER_QUOTE ? t.push(e.substring(r, n - 1)) : t.push(e.substring(r)), t;
    }, t;
  }(Dataset),
      DataSource = function DataSource() {},
      StringIterator = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }

    return __extends$2(t, e), t.prototype.split = function (e) {
      return new SplitIterator(this, e);
    }, t;
  }(LazyIterator),
      SplitIterator = function (e) {
    function t(t, r) {
      var n = e.call(this) || this;
      return n.upstream = t, n.impl = new SplitIteratorImpl(t, r), n;
    }

    return __extends$2(t, e), t.prototype.summary = function () {
      return this.impl.summary();
    }, t.prototype.next = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        return __generator$3(this, function (e) {
          return [2, this.impl.next()];
        });
      });
    }, t;
  }(StringIterator),
      SplitIteratorImpl = function (e) {
    function t(t, r) {
      var n = e.call(this) || this;
      return n.upstream = t, n.separator = r, n.carryover = "", n;
    }

    return __extends$2(t, e), t.prototype.summary = function () {
      return this.upstream.summary() + " -> Split('" + this.separator + "')";
    }, t.prototype.pump = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        var e, t, r, n, a;
        return __generator$3(this, function (o) {
          switch (o.label) {
            case 0:
              return [4, this.upstream.next()];

            case 1:
              if ((e = o.sent()).done) return "" === this.carryover ? [2, !1] : (this.outputQueue.push(this.carryover), this.carryover = "", [2, !0]);

              for ((t = e.value.split(this.separator))[0] = this.carryover + t[0], r = 0, n = t.slice(0, -1); r < n.length; r++) {
                a = n[r], this.outputQueue.push(a);
              }

              return this.carryover = t[t.length - 1], [2, !0];
          }
        });
      });
    }, t;
  }(OneToManyIterator),
      ByteChunkIterator = function (e) {
    function t() {
      return null !== e && e.apply(this, arguments) || this;
    }

    return __extends$2(t, e), t.prototype.decodeUTF8 = function () {
      return new Utf8Iterator(this);
    }, t;
  }(LazyIterator),
      Utf8Iterator = function (e) {
    function t(t) {
      var r = e.call(this) || this;
      return r.upstream = t, r.impl = new Utf8IteratorImpl(t), r;
    }

    return __extends$2(t, e), t.prototype.summary = function () {
      return this.impl.summary();
    }, t.prototype.next = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        return __generator$3(this, function (e) {
          return [2, this.impl.next()];
        });
      });
    }, t;
  }(StringIterator),
      Utf8IteratorImpl = function (e) {
    function t(t) {
      var r = e.call(this) || this;
      if (r.upstream = t, ENV.get("IS_BROWSER")) r.decoder = new TextDecoder("utf-8");else {
        var n = require("string_decoder").StringDecoder;

        r.decoder = new n("utf8");
      }
      return r;
    }

    return __extends$2(t, e), t.prototype.summary = function () {
      return this.upstream.summary() + " -> Utf8";
    }, t.prototype.pump = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        var e, t, r;
        return __generator$3(this, function (n) {
          switch (n.label) {
            case 0:
              return [4, this.upstream.next()];

            case 1:
              return (e = n.sent()).done ? [2, !1] : (t = e.value, r = ENV.get("IS_BROWSER") ? this.decoder.decode(t, {
                stream: !0
              }) : this.decoder.write(Buffer.from(t.buffer)), this.outputQueue.push(r), [2, !0]);
          }
        });
      });
    }, t;
  }(OneToManyIterator),
      FileChunkIterator = function (e) {
    function t(t, r) {
      void 0 === r && (r = {});
      var n = e.call(this) || this;
      return n.file = t, n.options = r, util.assert(t instanceof Uint8Array || !!ENV.get("IS_BROWSER") && (t instanceof File || t instanceof Blob), "FileChunkIterator only supports File, Blob and Uint8Array right now."), n.offset = r.offset || 0, n.chunkSize = r.chunkSize || 1048576, n;
    }

    return __extends$2(t, e), t.prototype.summary = function () {
      return "FileChunks " + this.file;
    }, t.prototype.next = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        var e,
            t,
            r = this;
        return __generator$3(this, function (n) {
          switch (n.label) {
            case 0:
              return this.offset >= (this.file instanceof Uint8Array ? this.file.byteLength : this.file.size) ? [2, {
                value: null,
                done: !0
              }] : (e = new Promise(function (e, t) {
                var n = r.offset + r.chunkSize;
                if (r.file instanceof Uint8Array) e(new Uint8Array(r.file.slice(r.offset, n)));else {
                  var a = new FileReader();
                  a.onload = function (r) {
                    var n = a.result;
                    if (n instanceof ArrayBuffer && (n = new Uint8Array(n)), !(n instanceof Uint8Array)) return t(new TypeError("FileReader returned unknown type."));
                    e(n);
                  }, a.onabort = function (e) {
                    return t(new Error("Aborted"));
                  }, a.onerror = function (e) {
                    return t(new Error(e.type));
                  };
                  var o = r.file.slice(r.offset, n);
                  a.readAsArrayBuffer(o);
                }
                r.offset = n;
              }), t = {}, [4, e]);

            case 1:
              return [2, (t.value = n.sent(), t.done = !1, t)];
          }
        });
      });
    }, t;
  }(ByteChunkIterator);

  function urlChunkIterator(e, t) {
    return void 0 === t && (t = {}), __awaiter$3(this, void 0, void 0, function () {
      var r, n, a, o;
      return __generator$3(this, function (i) {
        switch (i.label) {
          case 0:
            return ENV.get("IS_BROWSER") ? [4, fetch(e)] : [3, 5];

          case 1:
            return (r = i.sent()).ok ? [4, r.blob()] : [3, 3];

          case 2:
            return n = i.sent(), [2, new FileChunkIterator(n, t)];

          case 3:
            throw new Error(r.statusText);

          case 4:
            return [3, 9];

          case 5:
            if (a = require("node-fetch"), "string" != typeof e) throw new Error("URL must be a string. Request objects are not supported in the node.js environment yet.");
            return [4, a(e)];

          case 6:
            return (r = i.sent()).ok ? [4, r.buffer()] : [3, 8];

          case 7:
            return o = i.sent(), [2, new FileChunkIterator(o, t)];

          case 8:
            throw new Error(r.statusText);

          case 9:
            return [2];
        }
      });
    });
  }

  function isLocalPath(e) {
    return "string" == typeof e && "file://" === e.substr(0, 7);
  }

  var FileDataSource = function (e) {
    function t(t, r) {
      void 0 === r && (r = {});
      var n = e.call(this) || this;
      return n.input = t, n.options = r, n;
    }

    return __extends$2(t, e), t.prototype.iterator = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        var e;
        return __generator$3(this, function (t) {
          return isLocalPath(this.input) && ENV.get("IS_NODE") && (e = require("fs"), this.input = e.readFileSync(this.input.substr(7))), [2, new FileChunkIterator(this.input, this.options)];
        });
      });
    }, t;
  }(DataSource),
      URLDataSource = function (e) {
    function t(t, r) {
      void 0 === r && (r = {});
      var n = e.call(this) || this;
      return n.url = t, n.fileOptions = r, n;
    }

    return __extends$2(t, e), t.prototype.iterator = function () {
      return __awaiter$3(this, void 0, void 0, function () {
        return __generator$3(this, function (e) {
          return isLocalPath(this.url) ? [2, new FileDataSource(this.url, this.fileOptions).iterator()] : [2, urlChunkIterator(this.url, this.fileOptions)];
        });
      });
    }, t;
  }(DataSource);

  function csv(e, t) {
    return void 0 === t && (t = {}), new CSVDataset(new URLDataSource(e), t);
  }

  function generator(e) {
    var t = this,
        r = iteratorFromFunction(e);
    return datasetFromIteratorFn(function () {
      return __awaiter$3(t, void 0, void 0, function () {
        return __generator$3(this, function (e) {
          return [2, r];
        });
      });
    });
  }

  var version$3 = "0.2.3",
      tfData_esm = Object.freeze({
    array: array,
    Dataset: Dataset,
    zip: zip,
    CSVDataset: CSVDataset,
    TextLineDataset: TextLineDataset,
    csv: csv,
    generator: generator,
    FileDataSource: FileDataSource,
    URLDataSource: URLDataSource,
    version_data: version$3
  }),
      version$4 = "0.15.3",
      version$5 = {
    "tfjs-core": version,
    "tfjs-data": version$3,
    "tfjs-layers": version$1,
    "tfjs-converter": version$2,
    tfjs: version$4
  };
  exports.data = tfData_esm, exports.version = version$5, exports.setBackend = setBackend, exports.getBackend = getBackend, exports.disposeVariables = disposeVariables, exports.memory = memory, exports.version_core = version, exports.nextFrame = nextFrame, exports.enableProdMode = enableProdMode, exports.disableDeprecationWarnings = disableDeprecationWarnings, exports.deprecationWarn = deprecationWarn, exports.browser = browser, exports.environment = environment, exports.io = io, exports.math = math, exports.serialization = serialization, exports.test_util = test_util, exports.util = util, exports.webgl = webgl, exports.AdadeltaOptimizer = AdadeltaOptimizer, exports.AdagradOptimizer = AdagradOptimizer, exports.AdamOptimizer = AdamOptimizer, exports.AdamaxOptimizer = AdamaxOptimizer, exports.MomentumOptimizer = MomentumOptimizer, exports.Optimizer = Optimizer, exports.RMSPropOptimizer = RMSPropOptimizer, exports.SGDOptimizer = SGDOptimizer, exports.Tensor = Tensor, exports.TensorBuffer = TensorBuffer, exports.variable = variable, exports.Variable = Variable, exports.ENV = ENV, exports.Environment = Environment, exports.KernelBackend = KernelBackend, exports.DataStorage = DataStorage, exports.image = image_ops, exports.linalg = linalg_ops, exports.losses = loss_ops, exports.spectral = spectral_ops, exports.fused = fused_ops, exports.op = op, exports.batchNormalization2d = batchNormalization2d, exports.batchNormalization3d = batchNormalization3d, exports.batchNormalization4d = batchNormalization4d, exports.batchNormalization = batchNormalization, exports.batchNorm = batchNorm, exports.batchNorm2d = batchNorm2d, exports.batchNorm3d = batchNorm3d, exports.batchNorm4d = batchNorm4d, exports.complex = complex, exports.real = real, exports.imag = imag, exports.concat = concat, exports.concat1d = concat1d, exports.concat2d = concat2d, exports.concat3d = concat3d, exports.concat4d = concat4d, exports.split = split$1, exports.conv1d = conv1d, exports.conv2d = conv2d, exports.conv3d = conv3d, exports.conv2dDerFilter = conv2dDerFilter, exports.depthwiseConv2d = depthwiseConv2d, exports.separableConv2d = separableConv2d, exports.conv2dTranspose = conv2dTranspose, exports.matMul = matMul, exports.dot = dot, exports.outerProduct = outerProduct, exports.reverse = reverse, exports.reverse1d = reverse1d, exports.reverse2d = reverse2d, exports.reverse3d = reverse3d, exports.reverse4d = reverse4d, exports.maxPool = maxPool, exports.avgPool = avgPool, exports.pool = pool, exports.slice = slice, exports.slice1d = slice1d, exports.slice2d = slice2d, exports.slice3d = slice3d, exports.slice4d = slice4d, exports.abs = abs, exports.acos = acos, exports.acosh = acosh, exports.asin = asin, exports.asinh = asinh, exports.atan = atan, exports.atanh = atanh, exports.ceil = ceil, exports.clipByValue = clipByValue, exports.cos = cos, exports.cosh = cosh, exports.erf = erf, exports.exp = exp, exports.expm1 = expm1, exports.floor = floor, exports.log = log$1, exports.log1p = log1p, exports.logSigmoid = logSigmoid, exports.neg = neg, exports.reciprocal = reciprocal, exports.round = round, exports.rsqrt = rsqrt, exports.sigmoid = sigmoid, exports.sign = sign, exports.sin = sin, exports.sinh = sinh, exports.softplus = softplus, exports.sqrt = sqrt, exports.square = square, exports.step = step, exports.tan = tan, exports.tanh = tanh$1, exports.all = all, exports.any = any, exports.argMax = argMax, exports.argMin = argMin, exports.logSumExp = logSumExp, exports.max = max, exports.mean = mean, exports.min = min, exports.moments = moments, exports.sum = sum$1, exports.prod = prod, exports.equal = equal, exports.equalStrict = equalStrict, exports.greater = greater, exports.greaterEqual = greaterEqual, exports.greaterEqualStrict = greaterEqualStrict, exports.greaterStrict = greaterStrict, exports.less = less, exports.lessEqual = lessEqual, exports.lessEqualStrict = lessEqualStrict, exports.lessStrict = lessStrict, exports.notEqual = notEqual, exports.notEqualStrict = notEqualStrict, exports.add = add, exports.addN = addN, exports.addStrict = addStrict, exports.atan2 = atan2, exports.div = div, exports.divStrict = divStrict, exports.floorDiv = floorDiv, exports.maximum = maximum, exports.maximumStrict = maximumStrict, exports.minimum = minimum, exports.minimumStrict = minimumStrict, exports.mod = mod, exports.modStrict = modStrict, exports.mul = mul, exports.mulStrict = mulStrict, exports.pow = pow, exports.powStrict = powStrict, exports.squaredDifference = squaredDifference, exports.squaredDifferenceStrict = squaredDifferenceStrict, exports.sub = sub, exports.subStrict = subStrict, exports.elu = elu, exports.leakyRelu = leakyRelu, exports.prelu = prelu, exports.relu = relu, exports.selu = selu, exports.logicalAnd = logicalAnd, exports.logicalNot = logicalNot, exports.logicalOr = logicalOr, exports.logicalXor = logicalXor, exports.where = where, exports.whereAsync = whereAsync, exports.buffer = buffer, exports.toPixels = toPixels$1, exports.print = print, exports.batchToSpaceND = batchToSpaceND, exports.cast = cast, exports.clone = clone, exports.cumsum = cumsum, exports.depthToSpace = depthToSpace, exports.expandDims = expandDims, exports.eye = eye, exports.fromPixels = fromPixels$1, exports.multinomial = multinomial, exports.oneHot = oneHot, exports.pad = pad, exports.pad1d = pad1d, exports.pad2d = pad2d, exports.pad3d = pad3d, exports.pad4d = pad4d, exports.rand = rand, exports.randomNormal = randomNormal, exports.randomUniform = randomUniform, exports.reshape = reshape, exports.spaceToBatchND = spaceToBatchND, exports.squeeze = squeeze, exports.stack = stack, exports.tile = tile, exports.truncatedNormal = truncatedNormal, exports.unstack = unstack, exports.setdiff1dAsync = setdiff1dAsync, exports.fill = fill, exports.linspace = linspace, exports.ones = ones$1, exports.range = range, exports.scalar = scalar, exports.tensor = tensor, exports.tensor1d = tensor1d, exports.tensor2d = tensor2d, exports.tensor3d = tensor3d, exports.tensor4d = tensor4d, exports.tensor5d = tensor5d, exports.tensor6d = tensor6d, exports.zeros = zeros, exports.onesLike = onesLike, exports.zerosLike = zerosLike, exports.transpose = transpose, exports.softmax = softmax, exports.logSoftmax = logSoftmax, exports.localResponseNormalization = localResponseNormalization, exports.norm = norm, exports.gather = gather, exports.unsortedSegmentSum = unsortedSegmentSum, exports.basicLSTMCell = basicLSTMCell, exports.multiRNNCell = multiRNNCell, exports.movingAverage = movingAverage, exports.stridedSlice = stridedSlice, exports.topk = topk, exports.scatterND = scatterND, exports.fft = fft, exports.ifft = ifft, exports.rfft = rfft, exports.irfft = irfft, exports.sparseToDense = sparseToDense, exports.gatherND = gatherND, exports.train = train, exports.tidy = tidy, exports.keep = keep, exports.dispose = dispose, exports.time = time, exports.profile = profile, exports.customGrad = customGrad, exports.grad = grad, exports.grads = grads, exports.valueAndGrad = valueAndGrad, exports.valueAndGrads = valueAndGrads, exports.variableGrads = variableGrads, exports.constraints = exports_constraints, exports.initializers = exports_initializers, exports.layers = exports_layers, exports.metrics = exports_metrics, exports.models = exports_models, exports.regularizers = exports_regularizers, exports.CallbackList = CallbackList, exports.CustomCallback = CustomCallback, exports.History = History, exports.Callback = Callback, exports.InputSpec = InputSpec, exports.SymbolicTensor = SymbolicTensor, exports.Model = Model, exports.input = input, exports.loadLayersModel = loadLayersModel, exports.loadModel = loadModel, exports.model = model, exports.registerCallbackConstructor = registerCallbackConstructor, exports.sequential = sequential, exports.RNN = RNN, exports.Sequential = Sequential, exports.LayerVariable = LayerVariable, exports.version_layers = version$1, exports.loadFrozenModel = loadFrozenModel$2, exports.loadGraphModel = loadGraphModel, exports.FrozenModel = FrozenModel, exports.loadTfHubModule = loadTfHubModule, exports.GraphModel = FrozenModel, exports.FrozenModelJSON = FrozenModel$1, exports.version_converter = version$2, Object.defineProperty(exports, "__esModule", {
    value: !0
  });
});
},{"crypto":"node_modules/crypto-browserify/index.js","string_decoder":"node_modules/string_decoder/lib/string_decoder.js","node-fetch":"node_modules/node-fetch/browser.js","fs":"node_modules/parcel-bundler/src/builtins/_empty.js","process":"node_modules/process/browser.js","buffer":"node_modules/buffer/index.js"}],"src/js/index.js":[function(require,module,exports) {
"use strict";

require("core-js/modules/es6.array.copy-within");

require("core-js/modules/es6.array.fill");

require("core-js/modules/es6.array.find");

require("core-js/modules/es6.array.find-index");

require("core-js/modules/es6.array.from");

require("core-js/modules/es7.array.includes");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.array.of");

require("core-js/modules/es6.array.sort");

require("core-js/modules/es6.array.species");

require("core-js/modules/es6.date.to-json");

require("core-js/modules/es6.date.to-primitive");

require("core-js/modules/es6.function.has-instance");

require("core-js/modules/es6.function.name");

require("core-js/modules/es6.map");

require("core-js/modules/es6.math.acosh");

require("core-js/modules/es6.math.asinh");

require("core-js/modules/es6.math.atanh");

require("core-js/modules/es6.math.cbrt");

require("core-js/modules/es6.math.clz32");

require("core-js/modules/es6.math.cosh");

require("core-js/modules/es6.math.expm1");

require("core-js/modules/es6.math.fround");

require("core-js/modules/es6.math.hypot");

require("core-js/modules/es6.math.imul");

require("core-js/modules/es6.math.log1p");

require("core-js/modules/es6.math.log10");

require("core-js/modules/es6.math.log2");

require("core-js/modules/es6.math.sign");

require("core-js/modules/es6.math.sinh");

require("core-js/modules/es6.math.tanh");

require("core-js/modules/es6.math.trunc");

require("core-js/modules/es6.number.constructor");

require("core-js/modules/es6.number.epsilon");

require("core-js/modules/es6.number.is-finite");

require("core-js/modules/es6.number.is-integer");

require("core-js/modules/es6.number.is-nan");

require("core-js/modules/es6.number.is-safe-integer");

require("core-js/modules/es6.number.max-safe-integer");

require("core-js/modules/es6.number.min-safe-integer");

require("core-js/modules/es6.number.parse-float");

require("core-js/modules/es6.number.parse-int");

require("core-js/modules/es6.object.assign");

require("core-js/modules/es7.object.define-getter");

require("core-js/modules/es7.object.define-setter");

require("core-js/modules/es7.object.entries");

require("core-js/modules/es6.object.freeze");

require("core-js/modules/es6.object.get-own-property-descriptor");

require("core-js/modules/es7.object.get-own-property-descriptors");

require("core-js/modules/es6.object.get-own-property-names");

require("core-js/modules/es6.object.get-prototype-of");

require("core-js/modules/es7.object.lookup-getter");

require("core-js/modules/es7.object.lookup-setter");

require("core-js/modules/es6.object.prevent-extensions");

require("core-js/modules/es6.object.is");

require("core-js/modules/es6.object.is-frozen");

require("core-js/modules/es6.object.is-sealed");

require("core-js/modules/es6.object.is-extensible");

require("core-js/modules/es6.object.keys");

require("core-js/modules/es6.object.seal");

require("core-js/modules/es6.object.set-prototype-of");

require("core-js/modules/es7.object.values");

require("core-js/modules/es6.promise");

require("core-js/modules/es7.promise.finally");

require("core-js/modules/es6.reflect.apply");

require("core-js/modules/es6.reflect.construct");

require("core-js/modules/es6.reflect.define-property");

require("core-js/modules/es6.reflect.delete-property");

require("core-js/modules/es6.reflect.get");

require("core-js/modules/es6.reflect.get-own-property-descriptor");

require("core-js/modules/es6.reflect.get-prototype-of");

require("core-js/modules/es6.reflect.has");

require("core-js/modules/es6.reflect.is-extensible");

require("core-js/modules/es6.reflect.own-keys");

require("core-js/modules/es6.reflect.prevent-extensions");

require("core-js/modules/es6.reflect.set");

require("core-js/modules/es6.reflect.set-prototype-of");

require("core-js/modules/es6.regexp.constructor");

require("core-js/modules/es6.regexp.flags");

require("core-js/modules/es6.regexp.match");

require("core-js/modules/es6.regexp.replace");

require("core-js/modules/es6.regexp.split");

require("core-js/modules/es6.regexp.search");

require("core-js/modules/es6.regexp.to-string");

require("core-js/modules/es6.set");

require("core-js/modules/es6.symbol");

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.string.anchor");

require("core-js/modules/es6.string.big");

require("core-js/modules/es6.string.blink");

require("core-js/modules/es6.string.bold");

require("core-js/modules/es6.string.code-point-at");

require("core-js/modules/es6.string.ends-with");

require("core-js/modules/es6.string.fixed");

require("core-js/modules/es6.string.fontcolor");

require("core-js/modules/es6.string.fontsize");

require("core-js/modules/es6.string.from-code-point");

require("core-js/modules/es6.string.includes");

require("core-js/modules/es6.string.italics");

require("core-js/modules/es6.string.iterator");

require("core-js/modules/es6.string.link");

require("core-js/modules/es7.string.pad-start");

require("core-js/modules/es7.string.pad-end");

require("core-js/modules/es6.string.raw");

require("core-js/modules/es6.string.repeat");

require("core-js/modules/es6.string.small");

require("core-js/modules/es6.string.starts-with");

require("core-js/modules/es6.string.strike");

require("core-js/modules/es6.string.sub");

require("core-js/modules/es6.string.sup");

require("core-js/modules/es6.typed.array-buffer");

require("core-js/modules/es6.typed.int8-array");

require("core-js/modules/es6.typed.uint8-array");

require("core-js/modules/es6.typed.uint8-clamped-array");

require("core-js/modules/es6.typed.int16-array");

require("core-js/modules/es6.typed.uint16-array");

require("core-js/modules/es6.typed.int32-array");

require("core-js/modules/es6.typed.uint32-array");

require("core-js/modules/es6.typed.float32-array");

require("core-js/modules/es6.typed.float64-array");

require("core-js/modules/es6.weak-map");

require("core-js/modules/es6.weak-set");

require("core-js/modules/es7.array.flat-map");

require("core-js/modules/web.timers");

require("core-js/modules/web.immediate");

require("core-js/modules/web.dom.iterable");

require("regenerator-runtime/runtime");

var Viewer = _interopRequireWildcard(require("../js/TopoViewer.js"));

var Painter = _interopRequireWildcard(require("../js/GridPainter.js"));

var tf = _interopRequireWildcard(require("../lib/tf.min.js"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

console.log(tf.getBackend()); // Error Message
// if (WEBGL.isWebGLAvailable() === false) {
//     document.body.appendChild(WEBGL.getWebGLErrorMessage());
// }
// Default Width/Height

window.terrawidth = 800; // TODO - Set to determine this on windowSize
// Global APp namespace

window.terraGrid = {}; // Test Images

window.terraGrid.currImageIndex = 0;
window.terraGrid.imageURLs = ['./test/img/1-outputs.png', './test/img/2-outputs.png', './test/img/3-outputs.png', './test/img/4-outputs.png', './test/img/5-outputs.png', './test/img/6-outputs.png'];
window.terraGrid.images = window.terraGrid.imageURLs.map(function (imageURL) {
  var image = document.createElement('img');
  image.src = imageURL;
  image.width = 256;
  image.height = 256;
  return image;
}); // MODEL SELECT BUTTONS

var modelNames = ['256_grid8_bin', '256_grid8_grad', '256_grid16_bin', '256_grid16_grad'];
window.modelButtons = []; // Loads the Model from this button

function loadModel(_x) {
  return _loadModel.apply(this, arguments);
} // Set this Button's Model to the current active Model


function _loadModel() {
  _loadModel = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(button) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            button.className = 'tab model downloading';
            _context.next = 3;
            return tf.loadLayersModel(button.modelPath).then(function (model) {
              button.model = model;
              button.isLoaded = true;
              button.className = 'tab model downloaded';
            }, function (error) {
              console.log('fuckThis: ' + error);
            });

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _loadModel.apply(this, arguments);
}

function setActiveModel(button) {
  // Set all Buttons to inactive except this button
  for (var i = 0; i < window.modelButtons.length; i++) {
    // Set Inactive
    if (window.modelButtons[i].className === 'tab model downloaded active') {
      window.modelButtons[i].className = 'tab model downloaded';
    }
  }

  button.className = 'tab model downloaded active';
  window.activeModel = button.model;
}

window.terraGrid.init = function () {
  // Set up Model Buttons
  for (var i = 0; i < modelNames.length; i++) {
    var modelPath = '../models/' + modelNames[i] + '_tfjs/model.json';
    var modelButton = document.getElementById(modelNames[i]); //Set up model Buttons

    window.modelButtons.push(modelButton);
    modelButton.isLoaded = false;
    modelButton.modelPath = modelPath;

    modelButton.onclick = function () {
      if (this.isLoaded) {
        // Load the Model
        setActiveModel(this);
      } else {
        loadModel(this);
      }
    };
  }

  var mainContainer = document.getElementById('mainContainer');
  var painterContainer = document.createElement('div');
  painterContainer.style.float = 'left';
  painterContainer.style.border = '2px solid #3e3e3e';
  var selectedImage = document.createElement('img');
  selectedImage.style.width = window.terrawidth + 'px';
  selectedImage.style.float = 'left'; // const imageSelectorContainer = document.createElement('div');
  // imageSelectorContainer.style.float = 'left';

  var canvasContainer = document.createElement('div');
  canvasContainer.style.float = 'left'; // Add to document

  mainContainer.appendChild(painterContainer);
  mainContainer.appendChild(selectedImage); // mainContainer.appendChild(imageSelectorContainer);

  mainContainer.appendChild(canvasContainer); // TOPO VIEWER
  // -----------------------------------------------------

  window.topoModel = new Viewer.TopoViewer({
    container: canvasContainer,
    backgroundColor: 0x1e1e1e,
    width: window.terrawidth,
    height: window.terrawidth,
    isBakedLighting: false,
    heightScale: 8
  });

  canvasContainer.onmouseenter = function () {
    // console.log('MOUSE ENTER');
    window.topoModel.isAnimating = true;
    window.topoModel.animate(); // console.log('ANNIMATION STARTED');
  };

  canvasContainer.onmouseout = function () {
    // console.log('MOUSE EXIT');
    window.topoModel.isAnimating = false;
    window.topoModel.stopAnimate();
  }; // GRID SELECTOR
  //----------------------------------------------------


  window.gridPainter = new Painter.GridPainter({
    container: painterContainer,
    width: window.terrawidth,
    height: window.terrawidth,
    divisions: 8,
    numColors: 4,
    colorLow: {
      r: 30,
      g: 30,
      b: 30
    },
    colorHigh: {
      r: 250,
      g: 250,
      b: 250
    },
    callbacks: {
      onclickCallback: function onclickCallback(gridPainter, event) {
        // TODO - This is where the TF update takes place
        window.topoModel.updateModel(gridPainter.getImageDataResample(256, 256));
      }
    }
  });
};
},{"core-js/modules/es6.array.copy-within":"node_modules/core-js/modules/es6.array.copy-within.js","core-js/modules/es6.array.fill":"node_modules/core-js/modules/es6.array.fill.js","core-js/modules/es6.array.find":"node_modules/core-js/modules/es6.array.find.js","core-js/modules/es6.array.find-index":"node_modules/core-js/modules/es6.array.find-index.js","core-js/modules/es6.array.from":"node_modules/core-js/modules/es6.array.from.js","core-js/modules/es7.array.includes":"node_modules/core-js/modules/es7.array.includes.js","core-js/modules/es6.array.iterator":"node_modules/core-js/modules/es6.array.iterator.js","core-js/modules/es6.array.of":"node_modules/core-js/modules/es6.array.of.js","core-js/modules/es6.array.sort":"node_modules/core-js/modules/es6.array.sort.js","core-js/modules/es6.array.species":"node_modules/core-js/modules/es6.array.species.js","core-js/modules/es6.date.to-json":"node_modules/core-js/modules/es6.date.to-json.js","core-js/modules/es6.date.to-primitive":"node_modules/core-js/modules/es6.date.to-primitive.js","core-js/modules/es6.function.has-instance":"node_modules/core-js/modules/es6.function.has-instance.js","core-js/modules/es6.function.name":"node_modules/core-js/modules/es6.function.name.js","core-js/modules/es6.map":"node_modules/core-js/modules/es6.map.js","core-js/modules/es6.math.acosh":"node_modules/core-js/modules/es6.math.acosh.js","core-js/modules/es6.math.asinh":"node_modules/core-js/modules/es6.math.asinh.js","core-js/modules/es6.math.atanh":"node_modules/core-js/modules/es6.math.atanh.js","core-js/modules/es6.math.cbrt":"node_modules/core-js/modules/es6.math.cbrt.js","core-js/modules/es6.math.clz32":"node_modules/core-js/modules/es6.math.clz32.js","core-js/modules/es6.math.cosh":"node_modules/core-js/modules/es6.math.cosh.js","core-js/modules/es6.math.expm1":"node_modules/core-js/modules/es6.math.expm1.js","core-js/modules/es6.math.fround":"node_modules/core-js/modules/es6.math.fround.js","core-js/modules/es6.math.hypot":"node_modules/core-js/modules/es6.math.hypot.js","core-js/modules/es6.math.imul":"node_modules/core-js/modules/es6.math.imul.js","core-js/modules/es6.math.log1p":"node_modules/core-js/modules/es6.math.log1p.js","core-js/modules/es6.math.log10":"node_modules/core-js/modules/es6.math.log10.js","core-js/modules/es6.math.log2":"node_modules/core-js/modules/es6.math.log2.js","core-js/modules/es6.math.sign":"node_modules/core-js/modules/es6.math.sign.js","core-js/modules/es6.math.sinh":"node_modules/core-js/modules/es6.math.sinh.js","core-js/modules/es6.math.tanh":"node_modules/core-js/modules/es6.math.tanh.js","core-js/modules/es6.math.trunc":"node_modules/core-js/modules/es6.math.trunc.js","core-js/modules/es6.number.constructor":"node_modules/core-js/modules/es6.number.constructor.js","core-js/modules/es6.number.epsilon":"node_modules/core-js/modules/es6.number.epsilon.js","core-js/modules/es6.number.is-finite":"node_modules/core-js/modules/es6.number.is-finite.js","core-js/modules/es6.number.is-integer":"node_modules/core-js/modules/es6.number.is-integer.js","core-js/modules/es6.number.is-nan":"node_modules/core-js/modules/es6.number.is-nan.js","core-js/modules/es6.number.is-safe-integer":"node_modules/core-js/modules/es6.number.is-safe-integer.js","core-js/modules/es6.number.max-safe-integer":"node_modules/core-js/modules/es6.number.max-safe-integer.js","core-js/modules/es6.number.min-safe-integer":"node_modules/core-js/modules/es6.number.min-safe-integer.js","core-js/modules/es6.number.parse-float":"node_modules/core-js/modules/es6.number.parse-float.js","core-js/modules/es6.number.parse-int":"node_modules/core-js/modules/es6.number.parse-int.js","core-js/modules/es6.object.assign":"node_modules/core-js/modules/es6.object.assign.js","core-js/modules/es7.object.define-getter":"node_modules/core-js/modules/es7.object.define-getter.js","core-js/modules/es7.object.define-setter":"node_modules/core-js/modules/es7.object.define-setter.js","core-js/modules/es7.object.entries":"node_modules/core-js/modules/es7.object.entries.js","core-js/modules/es6.object.freeze":"node_modules/core-js/modules/es6.object.freeze.js","core-js/modules/es6.object.get-own-property-descriptor":"node_modules/core-js/modules/es6.object.get-own-property-descriptor.js","core-js/modules/es7.object.get-own-property-descriptors":"node_modules/core-js/modules/es7.object.get-own-property-descriptors.js","core-js/modules/es6.object.get-own-property-names":"node_modules/core-js/modules/es6.object.get-own-property-names.js","core-js/modules/es6.object.get-prototype-of":"node_modules/core-js/modules/es6.object.get-prototype-of.js","core-js/modules/es7.object.lookup-getter":"node_modules/core-js/modules/es7.object.lookup-getter.js","core-js/modules/es7.object.lookup-setter":"node_modules/core-js/modules/es7.object.lookup-setter.js","core-js/modules/es6.object.prevent-extensions":"node_modules/core-js/modules/es6.object.prevent-extensions.js","core-js/modules/es6.object.is":"node_modules/core-js/modules/es6.object.is.js","core-js/modules/es6.object.is-frozen":"node_modules/core-js/modules/es6.object.is-frozen.js","core-js/modules/es6.object.is-sealed":"node_modules/core-js/modules/es6.object.is-sealed.js","core-js/modules/es6.object.is-extensible":"node_modules/core-js/modules/es6.object.is-extensible.js","core-js/modules/es6.object.keys":"node_modules/core-js/modules/es6.object.keys.js","core-js/modules/es6.object.seal":"node_modules/core-js/modules/es6.object.seal.js","core-js/modules/es6.object.set-prototype-of":"node_modules/core-js/modules/es6.object.set-prototype-of.js","core-js/modules/es7.object.values":"node_modules/core-js/modules/es7.object.values.js","core-js/modules/es6.promise":"node_modules/core-js/modules/es6.promise.js","core-js/modules/es7.promise.finally":"node_modules/core-js/modules/es7.promise.finally.js","core-js/modules/es6.reflect.apply":"node_modules/core-js/modules/es6.reflect.apply.js","core-js/modules/es6.reflect.construct":"node_modules/core-js/modules/es6.reflect.construct.js","core-js/modules/es6.reflect.define-property":"node_modules/core-js/modules/es6.reflect.define-property.js","core-js/modules/es6.reflect.delete-property":"node_modules/core-js/modules/es6.reflect.delete-property.js","core-js/modules/es6.reflect.get":"node_modules/core-js/modules/es6.reflect.get.js","core-js/modules/es6.reflect.get-own-property-descriptor":"node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js","core-js/modules/es6.reflect.get-prototype-of":"node_modules/core-js/modules/es6.reflect.get-prototype-of.js","core-js/modules/es6.reflect.has":"node_modules/core-js/modules/es6.reflect.has.js","core-js/modules/es6.reflect.is-extensible":"node_modules/core-js/modules/es6.reflect.is-extensible.js","core-js/modules/es6.reflect.own-keys":"node_modules/core-js/modules/es6.reflect.own-keys.js","core-js/modules/es6.reflect.prevent-extensions":"node_modules/core-js/modules/es6.reflect.prevent-extensions.js","core-js/modules/es6.reflect.set":"node_modules/core-js/modules/es6.reflect.set.js","core-js/modules/es6.reflect.set-prototype-of":"node_modules/core-js/modules/es6.reflect.set-prototype-of.js","core-js/modules/es6.regexp.constructor":"node_modules/core-js/modules/es6.regexp.constructor.js","core-js/modules/es6.regexp.flags":"node_modules/core-js/modules/es6.regexp.flags.js","core-js/modules/es6.regexp.match":"node_modules/core-js/modules/es6.regexp.match.js","core-js/modules/es6.regexp.replace":"node_modules/core-js/modules/es6.regexp.replace.js","core-js/modules/es6.regexp.split":"node_modules/core-js/modules/es6.regexp.split.js","core-js/modules/es6.regexp.search":"node_modules/core-js/modules/es6.regexp.search.js","core-js/modules/es6.regexp.to-string":"node_modules/core-js/modules/es6.regexp.to-string.js","core-js/modules/es6.set":"node_modules/core-js/modules/es6.set.js","core-js/modules/es6.symbol":"node_modules/core-js/modules/es6.symbol.js","core-js/modules/es7.symbol.async-iterator":"node_modules/core-js/modules/es7.symbol.async-iterator.js","core-js/modules/es6.string.anchor":"node_modules/core-js/modules/es6.string.anchor.js","core-js/modules/es6.string.big":"node_modules/core-js/modules/es6.string.big.js","core-js/modules/es6.string.blink":"node_modules/core-js/modules/es6.string.blink.js","core-js/modules/es6.string.bold":"node_modules/core-js/modules/es6.string.bold.js","core-js/modules/es6.string.code-point-at":"node_modules/core-js/modules/es6.string.code-point-at.js","core-js/modules/es6.string.ends-with":"node_modules/core-js/modules/es6.string.ends-with.js","core-js/modules/es6.string.fixed":"node_modules/core-js/modules/es6.string.fixed.js","core-js/modules/es6.string.fontcolor":"node_modules/core-js/modules/es6.string.fontcolor.js","core-js/modules/es6.string.fontsize":"node_modules/core-js/modules/es6.string.fontsize.js","core-js/modules/es6.string.from-code-point":"node_modules/core-js/modules/es6.string.from-code-point.js","core-js/modules/es6.string.includes":"node_modules/core-js/modules/es6.string.includes.js","core-js/modules/es6.string.italics":"node_modules/core-js/modules/es6.string.italics.js","core-js/modules/es6.string.iterator":"node_modules/core-js/modules/es6.string.iterator.js","core-js/modules/es6.string.link":"node_modules/core-js/modules/es6.string.link.js","core-js/modules/es7.string.pad-start":"node_modules/core-js/modules/es7.string.pad-start.js","core-js/modules/es7.string.pad-end":"node_modules/core-js/modules/es7.string.pad-end.js","core-js/modules/es6.string.raw":"node_modules/core-js/modules/es6.string.raw.js","core-js/modules/es6.string.repeat":"node_modules/core-js/modules/es6.string.repeat.js","core-js/modules/es6.string.small":"node_modules/core-js/modules/es6.string.small.js","core-js/modules/es6.string.starts-with":"node_modules/core-js/modules/es6.string.starts-with.js","core-js/modules/es6.string.strike":"node_modules/core-js/modules/es6.string.strike.js","core-js/modules/es6.string.sub":"node_modules/core-js/modules/es6.string.sub.js","core-js/modules/es6.string.sup":"node_modules/core-js/modules/es6.string.sup.js","core-js/modules/es6.typed.array-buffer":"node_modules/core-js/modules/es6.typed.array-buffer.js","core-js/modules/es6.typed.int8-array":"node_modules/core-js/modules/es6.typed.int8-array.js","core-js/modules/es6.typed.uint8-array":"node_modules/core-js/modules/es6.typed.uint8-array.js","core-js/modules/es6.typed.uint8-clamped-array":"node_modules/core-js/modules/es6.typed.uint8-clamped-array.js","core-js/modules/es6.typed.int16-array":"node_modules/core-js/modules/es6.typed.int16-array.js","core-js/modules/es6.typed.uint16-array":"node_modules/core-js/modules/es6.typed.uint16-array.js","core-js/modules/es6.typed.int32-array":"node_modules/core-js/modules/es6.typed.int32-array.js","core-js/modules/es6.typed.uint32-array":"node_modules/core-js/modules/es6.typed.uint32-array.js","core-js/modules/es6.typed.float32-array":"node_modules/core-js/modules/es6.typed.float32-array.js","core-js/modules/es6.typed.float64-array":"node_modules/core-js/modules/es6.typed.float64-array.js","core-js/modules/es6.weak-map":"node_modules/core-js/modules/es6.weak-map.js","core-js/modules/es6.weak-set":"node_modules/core-js/modules/es6.weak-set.js","core-js/modules/es7.array.flat-map":"node_modules/core-js/modules/es7.array.flat-map.js","core-js/modules/web.timers":"node_modules/core-js/modules/web.timers.js","core-js/modules/web.immediate":"node_modules/core-js/modules/web.immediate.js","core-js/modules/web.dom.iterable":"node_modules/core-js/modules/web.dom.iterable.js","regenerator-runtime/runtime":"node_modules/regenerator-runtime/runtime.js","../js/TopoViewer.js":"src/js/TopoViewer.js","../js/GridPainter.js":"src/js/GridPainter.js","../lib/tf.min.js":"src/lib/tf.min.js"}],"node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "56545" + '/');

  ws.onmessage = function (event) {
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      console.clear();
      data.assets.forEach(function (asset) {
        hmrApply(global.parcelRequire, asset);
      });
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          hmrAccept(global.parcelRequire, asset.id);
        }
      });
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] â¨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] ð¨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">ð¨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAccept(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAccept(bundle.parent, id);
  }

  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAccept(global.parcelRequire, id);
  });
}
},{}]},{},["node_modules/parcel-bundler/src/builtins/hmr-runtime.js","src/js/index.js"], null)
//# sourceMappingURL=/js.d818e0ef.map